
Chameleon-Mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005282  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00802000  00005282  00005336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a0b  00802092  00802092  000053c8  2**0
                  ALLOC
  3 .eeprom       00000013  00810000  00810000  000053c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000014d0  00000000  00000000  000053dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000070f  00000000  00000000  000068ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00006fbb  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000bf0  00000000  00000000  00006fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00019536  00000000  00000000  00007bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005a36  00000000  00000000  00021110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b5c9  00000000  00000000  00026b46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001ed0  00000000  00000000  00032110  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00007842  00000000  00000000  00033fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000d068  00000000  00000000  0003b822  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ae0  00000000  00000000  0004888a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c3       	rjmp	.+1702   	; 0x6a8 <__ctors_end>
       2:	00 00       	nop
       4:	6d c3       	rjmp	.+1754   	; 0x6e0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c3       	rjmp	.+1750   	; 0x6e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c3       	rjmp	.+1746   	; 0x6e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c3       	rjmp	.+1742   	; 0x6e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c3       	rjmp	.+1738   	; 0x6e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c3       	rjmp	.+1734   	; 0x6e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c3       	rjmp	.+1730   	; 0x6e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c3       	rjmp	.+1726   	; 0x6e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c3       	rjmp	.+1722   	; 0x6e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c3       	rjmp	.+1718   	; 0x6e0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c3       	rjmp	.+1714   	; 0x6e0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c3       	rjmp	.+1710   	; 0x6e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c3       	rjmp	.+1706   	; 0x6e0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c3       	rjmp	.+1702   	; 0x6e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c3       	rjmp	.+1698   	; 0x6e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c3       	rjmp	.+1694   	; 0x6e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c3       	rjmp	.+1690   	; 0x6e0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c3       	rjmp	.+1686   	; 0x6e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c3       	rjmp	.+1682   	; 0x6e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c3       	rjmp	.+1678   	; 0x6e0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c3       	rjmp	.+1674   	; 0x6e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__vector_22>
      5c:	41 c3       	rjmp	.+1666   	; 0x6e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c3       	rjmp	.+1662   	; 0x6e0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c3       	rjmp	.+1658   	; 0x6e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c3       	rjmp	.+1654   	; 0x6e0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c3       	rjmp	.+1650   	; 0x6e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c3       	rjmp	.+1646   	; 0x6e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c3       	rjmp	.+1642   	; 0x6e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c3       	rjmp	.+1638   	; 0x6e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c3       	rjmp	.+1634   	; 0x6e0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c3       	rjmp	.+1630   	; 0x6e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c3       	rjmp	.+1626   	; 0x6e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__vector_34>
      8c:	29 c3       	rjmp	.+1618   	; 0x6e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c3       	rjmp	.+1614   	; 0x6e0 <__bad_interrupt>
      92:	00 00       	nop
      94:	25 c3       	rjmp	.+1610   	; 0x6e0 <__bad_interrupt>
      96:	00 00       	nop
      98:	23 c3       	rjmp	.+1606   	; 0x6e0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	21 c3       	rjmp	.+1602   	; 0x6e0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1f c3       	rjmp	.+1598   	; 0x6e0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1d c3       	rjmp	.+1594   	; 0x6e0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1b c3       	rjmp	.+1590   	; 0x6e0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	19 c3       	rjmp	.+1586   	; 0x6e0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	17 c3       	rjmp	.+1582   	; 0x6e0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	15 c3       	rjmp	.+1578   	; 0x6e0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	13 c3       	rjmp	.+1574   	; 0x6e0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	11 c3       	rjmp	.+1570   	; 0x6e0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0f c3       	rjmp	.+1566   	; 0x6e0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0d c3       	rjmp	.+1562   	; 0x6e0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0b c3       	rjmp	.+1558   	; 0x6e0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	09 c3       	rjmp	.+1554   	; 0x6e0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	07 c3       	rjmp	.+1550   	; 0x6e0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	05 c3       	rjmp	.+1546   	; 0x6e0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	03 c3       	rjmp	.+1542   	; 0x6e0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	01 c3       	rjmp	.+1538   	; 0x6e0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ff c2       	rjmp	.+1534   	; 0x6e0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fd c2       	rjmp	.+1530   	; 0x6e0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fb c2       	rjmp	.+1526   	; 0x6e0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f9 c2       	rjmp	.+1522   	; 0x6e0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f7 c2       	rjmp	.+1518   	; 0x6e0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f5 c2       	rjmp	.+1514   	; 0x6e0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f3 c2       	rjmp	.+1510   	; 0x6e0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f1 c2       	rjmp	.+1506   	; 0x6e0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ef c2       	rjmp	.+1502   	; 0x6e0 <__bad_interrupt>
     102:	00 00       	nop
     104:	ed c2       	rjmp	.+1498   	; 0x6e0 <__bad_interrupt>
     106:	00 00       	nop
     108:	eb c2       	rjmp	.+1494   	; 0x6e0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e9 c2       	rjmp	.+1490   	; 0x6e0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e7 c2       	rjmp	.+1486   	; 0x6e0 <__bad_interrupt>
     112:	00 00       	nop
     114:	e5 c2       	rjmp	.+1482   	; 0x6e0 <__bad_interrupt>
     116:	00 00       	nop
     118:	e3 c2       	rjmp	.+1478   	; 0x6e0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e1 c2       	rjmp	.+1474   	; 0x6e0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	df c2       	rjmp	.+1470   	; 0x6e0 <__bad_interrupt>
     122:	00 00       	nop
     124:	dd c2       	rjmp	.+1466   	; 0x6e0 <__bad_interrupt>
     126:	00 00       	nop
     128:	db c2       	rjmp	.+1462   	; 0x6e0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d9 c2       	rjmp	.+1458   	; 0x6e0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d7 c2       	rjmp	.+1454   	; 0x6e0 <__bad_interrupt>
     132:	00 00       	nop
     134:	d5 c2       	rjmp	.+1450   	; 0x6e0 <__bad_interrupt>
     136:	00 00       	nop
     138:	d3 c2       	rjmp	.+1446   	; 0x6e0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d1 c2       	rjmp	.+1442   	; 0x6e0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	cf c2       	rjmp	.+1438   	; 0x6e0 <__bad_interrupt>
     142:	00 00       	nop
     144:	cd c2       	rjmp	.+1434   	; 0x6e0 <__bad_interrupt>
     146:	00 00       	nop
     148:	cb c2       	rjmp	.+1430   	; 0x6e0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__vector_83>
     150:	c7 c2       	rjmp	.+1422   	; 0x6e0 <__bad_interrupt>
     152:	00 00       	nop
     154:	c5 c2       	rjmp	.+1418   	; 0x6e0 <__bad_interrupt>
     156:	00 00       	nop
     158:	c3 c2       	rjmp	.+1414   	; 0x6e0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c1 c2       	rjmp	.+1410   	; 0x6e0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	bf c2       	rjmp	.+1406   	; 0x6e0 <__bad_interrupt>
     162:	00 00       	nop
     164:	bd c2       	rjmp	.+1402   	; 0x6e0 <__bad_interrupt>
     166:	00 00       	nop
     168:	bb c2       	rjmp	.+1398   	; 0x6e0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b9 c2       	rjmp	.+1394   	; 0x6e0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b7 c2       	rjmp	.+1390   	; 0x6e0 <__bad_interrupt>
     172:	00 00       	nop
     174:	b5 c2       	rjmp	.+1386   	; 0x6e0 <__bad_interrupt>
     176:	00 00       	nop
     178:	b3 c2       	rjmp	.+1382   	; 0x6e0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b1 c2       	rjmp	.+1378   	; 0x6e0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	af c2       	rjmp	.+1374   	; 0x6e0 <__bad_interrupt>
     182:	00 00       	nop
     184:	ad c2       	rjmp	.+1370   	; 0x6e0 <__bad_interrupt>
     186:	00 00       	nop
     188:	ab c2       	rjmp	.+1366   	; 0x6e0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a9 c2       	rjmp	.+1362   	; 0x6e0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a7 c2       	rjmp	.+1358   	; 0x6e0 <__bad_interrupt>
     192:	00 00       	nop
     194:	a5 c2       	rjmp	.+1354   	; 0x6e0 <__bad_interrupt>
     196:	00 00       	nop
     198:	a3 c2       	rjmp	.+1350   	; 0x6e0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a1 c2       	rjmp	.+1346   	; 0x6e0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9f c2       	rjmp	.+1342   	; 0x6e0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9d c2       	rjmp	.+1338   	; 0x6e0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9b c2       	rjmp	.+1334   	; 0x6e0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	99 c2       	rjmp	.+1330   	; 0x6e0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	97 c2       	rjmp	.+1326   	; 0x6e0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	95 c2       	rjmp	.+1322   	; 0x6e0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	93 c2       	rjmp	.+1318   	; 0x6e0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	91 c2       	rjmp	.+1314   	; 0x6e0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8f c2       	rjmp	.+1310   	; 0x6e0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8d c2       	rjmp	.+1306   	; 0x6e0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8b c2       	rjmp	.+1302   	; 0x6e0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	89 c2       	rjmp	.+1298   	; 0x6e0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	87 c2       	rjmp	.+1294   	; 0x6e0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	85 c2       	rjmp	.+1290   	; 0x6e0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	83 c2       	rjmp	.+1286   	; 0x6e0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	81 c2       	rjmp	.+1282   	; 0x6e0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7f c2       	rjmp	.+1278   	; 0x6e0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7d c2       	rjmp	.+1274   	; 0x6e0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7b c2       	rjmp	.+1270   	; 0x6e0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	79 c2       	rjmp	.+1266   	; 0x6e0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	77 c2       	rjmp	.+1262   	; 0x6e0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 e4 22 	jmp	0x45c8	; 0x45c8 <__vector_125>
     1f8:	73 c2       	rjmp	.+1254   	; 0x6e0 <__bad_interrupt>
     1fa:	00 00       	nop

000001fc <ProductString>:
     1fc:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     20c:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000021a <ManufacturerString>:
     21a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     22a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000234 <LanguageString>:
     234:	04 03 09 04                                         ....

00000238 <ConfigurationDescriptor>:
     238:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     248:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     258:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     268:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000276 <DeviceDescriptor>:
     276:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     286:	dc 01                                               ..

00000288 <ConfigurationTable>:
     288:	00 4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00     .NONE...........
     298:	00 64 04 65 04 66 04 67 04 68 04 69 04 6c 04 6d     .d.e.f.g.h.i.l.m
     2a8:	04 00 00 00 01 01 4d 46 5f 43 4c 41 53 53 49 43     ......MF_CLASSIC
     2b8:	5f 31 4b 00 00 00 15 14 4c 14 ca 14 e4 14 e8 14     _1K.....L.......
     2c8:	e9 14 66 19 6c 19 00 04 04 00 02 4d 46 5f 43 4c     ..f.l......MF_CL
     2d8:	41 53 53 49 43 5f 34 4b 00 00 00 15 14 4c 14 d7     ASSIC_4K.....L..
     2e8:	14 e4 14 e8 14 e9 14 66 19 6c 19 00 10 04 00        .......f.l.....

000002f7 <ButtonActionTable>:
     2f7:	4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00 00     NONE............
     307:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     317:	55 49 44 5f 52 41 4e 44 4f 4d 00 00 00 00 00 00     UID_RANDOM......
     327:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     337:	55 49 44 5f 4c 45 46 54 5f 49 4e 43 52 45 4d 45     UID_LEFT_INCREME
     347:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     357:	55 49 44 5f 52 49 47 48 54 5f 49 4e 43 52 45 4d     UID_RIGHT_INCREM
     367:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     377:	55 49 44 5f 4c 45 46 54 5f 44 45 43 52 45 4d 45     UID_LEFT_DECREME
     387:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     397:	55 49 44 5f 52 49 47 48 54 5f 44 45 43 52 45 4d     UID_RIGHT_DECREM
     3a7:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     3b7:	43 59 43 4c 45 5f 53 45 54 54 49 4e 47 53 00 00     CYCLE_SETTINGS..
     3c7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3d7:	53 54 4f 52 45 5f 4d 45 4d 00 00 00 00 00 00 00     STORE_MEM.......
     3e7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3f7:	52 45 43 41 4c 4c 5f 4d 45 4d 00 00 00 00 00 00     RECALL_MEM......
     407:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00000417 <__c.6293>:
     417:	43 68 61 6d 65 6c 65 6f 6e 2d 4d 69 6e 69 20 25     Chameleon-Mini %
     427:	53 20 75 73 69 6e 67 20 4c 55 46 41 20 25 53 20     S using LUFA %S 
     437:	63 6f 6d 70 69 6c 65 64 20 77 69 74 68 20 41 56     compiled with AV
     447:	52 2d 47 43 43 20 25 53 00                          R-GCC %S.

00000450 <__c.6295>:
     450:	31 34 30 35 31 31 00                                140511.

00000457 <__c.6297>:
     457:	31 33 30 39 30 31 00                                130901.

0000045e <__c.6299>:
     45e:	34 2e 37 2e 32 00                                   4.7.2.

00000464 <__c.6304>:
     464:	25 73 00                                            %s.

00000467 <__c.6322>:
     467:	52 41 4e 44 4f 4d 00                                RANDOM.

0000046e <__c.6349>:
     46e:	25 75 00                                            %u.

00000471 <__c.6354>:
     471:	25 75 00                                            %u.

00000474 <__c.6393>:
     474:	25 35 75 20 6d 56 00                                %5u mV.

0000047b <CommandTable>:
     47b:	56 45 52 53 49 4f 4e 00 00 00 00 00 00 00 00 00     VERSION.........
     48b:	00 00 00 00 fd 0c 43 4f 4e 46 49 47 00 00 00 00     ......CONFIG....
     49b:	00 00 00 00 00 00 3a 0d 31 0d 1b 0d 55 49 44 00     ......:.1...UID.
     4ab:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 67 0d     ..............g.
     4bb:	40 0d 52 45 41 44 4f 4e 4c 59 00 00 00 00 00 00     @.READONLY......
     4cb:	00 00 00 00 d2 0d c0 0d 55 50 4c 4f 41 44 00 00     ........UPLOAD..
     4db:	00 00 00 00 00 00 00 00 e6 0d 00 00 00 00 44 4f     ..............DO
     4eb:	57 4e 4c 4f 41 44 00 00 00 00 00 00 00 00 eb 0d     WNLOAD..........
     4fb:	00 00 00 00 52 45 53 45 54 00 00 00 00 00 00 00     ....RESET.......
     50b:	00 00 00 00 f0 0d 00 00 00 00 55 50 47 52 41 44     ..........UPGRAD
     51b:	45 00 00 00 00 00 00 00 00 00 fb 0d 00 00 00 00     E...............
     52b:	4d 45 4d 53 49 5a 45 00 00 00 00 00 00 00 00 00     MEMSIZE.........
     53b:	00 00 00 00 06 0e 55 49 44 53 49 5a 45 00 00 00     ......UIDSIZE...
     54b:	00 00 00 00 00 00 00 00 00 00 1e 0e 42 55 54 54     ............BUTT
     55b:	4f 4e 00 00 00 00 00 00 00 00 00 00 34 0e 3e 0e     ON..........4.>.
     56b:	39 0e 53 45 54 54 49 4e 47 00 00 00 00 00 00 00     9.SETTING.......
     57b:	00 00 00 00 4b 0e 46 0e 43 4c 45 41 52 00 00 00     ....K.F.CLEAR...
     58b:	00 00 00 00 00 00 00 00 53 0e 00 00 00 00 48 45     ........S.....HE
     59b:	4c 50 00 00 00 00 00 00 00 00 00 00 00 00 57 0e     LP............W.
     5ab:	00 00 00 00 52 53 53 49 00 00 00 00 00 00 00 00     ....RSSI........
     5bb:	00 00 00 00 00 00 00 00 a3 0e 00 00 00 00 00 00     ................
     5cb:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000005db <__c.6083>:
     5db:	0d 0a 00                                            ...

000005de <__c.6085>:
     5de:	0d 0a 00                                            ...

000005e1 <StatusTable>:
     5e1:	64 31 30 30 3a 4f 4b 00 00 00 00 00 00 00 00 00     d100:OK.........
     5f1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     601:	00 65 31 30 31 3a 4f 4b 20 57 49 54 48 20 54 45     .e101:OK WITH TE
     611:	58 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     XT..............
     621:	00 00 6e 31 31 30 3a 57 41 49 54 49 4e 47 20 46     ..n110:WAITING F
     631:	4f 52 20 58 4d 4f 44 45 4d 00 00 00 00 00 00 00     OR XMODEM.......
     641:	00 00 00 c8 32 30 30 3a 55 4e 4b 4e 4f 57 4e 20     ....200:UNKNOWN 
     651:	43 4f 4d 4d 41 4e 44 00 00 00 00 00 00 00 00 00     COMMAND.........
     661:	00 00 00 00 c9 32 30 31 3a 49 4e 56 41 4c 49 44     .....201:INVALID
     671:	20 43 4f 4d 4d 41 4e 44 20 55 53 41 47 45 00 00      COMMAND USAGE..
     681:	00 00 00 00 00 ca 32 30 32 3a 49 4e 56 41 4c 49     ......202:INVALI
     691:	44 20 50 41 52 41 4d 45 54 45 52 00 00 00 00 00     D PARAMETER.....
     6a1:	00 00 00 00 00 00 00                                .......

000006a8 <__ctors_end>:
     6a8:	11 24       	eor	r1, r1
     6aa:	1f be       	out	0x3f, r1	; 63
     6ac:	cf ef       	ldi	r28, 0xFF	; 255
     6ae:	df e2       	ldi	r29, 0x2F	; 47
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	cd bf       	out	0x3d, r28	; 61

000006b4 <__do_copy_data>:
     6b4:	10 e2       	ldi	r17, 0x20	; 32
     6b6:	a0 e0       	ldi	r26, 0x00	; 0
     6b8:	b0 e2       	ldi	r27, 0x20	; 32
     6ba:	e2 e8       	ldi	r30, 0x82	; 130
     6bc:	f2 e5       	ldi	r31, 0x52	; 82
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__do_copy_data+0x10>
     6c0:	05 90       	lpm	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	a2 39       	cpi	r26, 0x92	; 146
     6c6:	b1 07       	cpc	r27, r17
     6c8:	d9 f7       	brne	.-10     	; 0x6c0 <__do_copy_data+0xc>

000006ca <__do_clear_bss>:
     6ca:	2a e2       	ldi	r18, 0x2A	; 42
     6cc:	a2 e9       	ldi	r26, 0x92	; 146
     6ce:	b0 e2       	ldi	r27, 0x20	; 32
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <.do_clear_bss_start>

000006d2 <.do_clear_bss_loop>:
     6d2:	1d 92       	st	X+, r1

000006d4 <.do_clear_bss_start>:
     6d4:	ad 39       	cpi	r26, 0x9D	; 157
     6d6:	b2 07       	cpc	r27, r18
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <.do_clear_bss_loop>
     6da:	03 d0       	rcall	.+6      	; 0x6e2 <main>
     6dc:	0c 94 3f 29 	jmp	0x527e	; 0x527e <_exit>

000006e0 <__bad_interrupt>:
     6e0:	7c c0       	rjmp	.+248    	; 0x7da <__vector_default>

000006e2 <main>:

#include "Chameleon-Mini.h"

int main(void)
{
    SystemInit();
     6e2:	81 d0       	rcall	.+258    	; 0x7e6 <SystemInit>
    SettingsLoad();
     6e4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <SettingsLoad>

extern uint8_t LEDPulseMask;

static inline
void LEDInit(void) {
    LED_PORT.DIRSET = LED_MASK;
     6e8:	80 e3       	ldi	r24, 0x30	; 48
     6ea:	80 93 01 06 	sts	0x0601, r24
    LEDInit();
    MemoryInit();
     6ee:	d9 d2       	rcall	.+1458   	; 0xca2 <MemoryInit>
    ConfigurationInit();
     6f0:	10 d1       	rcall	.+544    	; 0x912 <ConfigurationInit>
    TerminalInit();
     6f2:	0e 94 87 0c 	call	0x190e	; 0x190e <TerminalInit>
    RandomInit();
     6f6:	83 d1       	rcall	.+774    	; 0x9fe <RandomInit>
    ButtonInit();
     6f8:	b1 d6       	rcall	.+3426   	; 0x145c <ButtonInit>
#define ANTENNA_LEVEL_DENOMINATOR (ANTENNA_LEVEL_SCALE)

static inline
void AntennaLevelInit(void)
{
	ADCA.CTRLA = ADC_ENABLE_bm;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 00 02 	sts	0x0200, r24
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc;
     700:	10 92 01 02 	sts	0x0201, r1
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc | ADC_BANDGAP_bm;
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	90 93 02 02 	sts	0x0202, r25
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	90 93 04 02 	sts	0x0204, r25
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     710:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;
     714:	88 e3       	ldi	r24, 0x38	; 56
     716:	80 93 21 02 	sts	0x0221, r24
    AntennaLevelInit();

    SystemInterruptInit();
     71a:	d0 d0       	rcall	.+416    	; 0x8bc <SystemInterruptInit>
}

INLINE bool SystemTick100ms(void)
{
    if (TCE0.INTFLAGS & TC0_OVFIF_bm) {
        TCE0.INTFLAGS = TC0_OVFIF_bm;
     71c:	c1 e0       	ldi	r28, 0x01	; 1

    while(1) {
        TerminalTask();
     71e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <TerminalTask>
INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
}

INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
     722:	e0 91 eb 24 	lds	r30, 0x24EB
     726:	f0 91 ec 24 	lds	r31, 0x24EC
     72a:	09 95       	icall
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
}

INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
     72c:	e0 91 f1 24 	lds	r30, 0x24F1
     730:	f0 91 f2 24 	lds	r31, 0x24F2
     734:	09 95       	icall
    return RTC.CNT;
}

INLINE bool SystemTick100ms(void)
{
    if (TCE0.INTFLAGS & TC0_OVFIF_bm) {
     736:	80 91 0c 0a 	lds	r24, 0x0A0C
     73a:	80 ff       	sbrs	r24, 0
     73c:	f0 cf       	rjmp	.-32     	; 0x71e <main+0x3c>
        TCE0.INTFLAGS = TC0_OVFIF_bm;
     73e:	c0 93 0c 0a 	sts	0x0A0C, r28
        CodecTask();
        ApplicationTask();

        if (SystemTick100ms()) {
            RandomTick();
     742:	70 d1       	rcall	.+736    	; 0xa24 <RandomTick>
            TerminalTick();
     744:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TerminalTick>
            ButtonTick();
     748:	90 d6       	rcall	.+3360   	; 0x146a <ButtonTick>
	LED_PORT.OUTSET = Mask;
}

static inline
void LEDTick(void) {
	LED_PORT.OUTCLR = LEDPulseMask;
     74a:	80 91 93 24 	lds	r24, 0x2493
     74e:	80 93 06 06 	sts	0x0606, r24
	LEDPulseMask = 0;
     752:	10 92 93 24 	sts	0x2493, r1
     756:	e3 cf       	rjmp	.-58     	; 0x71e <main+0x3c>

00000758 <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     758:	29 2f       	mov	r18, r25
     75a:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     75c:	22 30       	cpi	r18, 0x02	; 2
     75e:	31 05       	cpc	r19, r1
     760:	39 f1       	breq	.+78     	; 0x7b0 <CALLBACK_USB_GetDescriptor+0x58>
     762:	23 30       	cpi	r18, 0x03	; 3
     764:	31 05       	cpc	r19, r1
     766:	a9 f0       	breq	.+42     	; 0x792 <CALLBACK_USB_GetDescriptor+0x3a>
     768:	21 30       	cpi	r18, 0x01	; 1
     76a:	31 05       	cpc	r19, r1
     76c:	49 f0       	breq	.+18     	; 0x780 <CALLBACK_USB_GetDescriptor+0x28>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
     776:	fa 01       	movw	r30, r20
     778:	80 83       	st	Z, r24
     77a:	91 83       	std	Z+1, r25	; 0x01
    return Size;
}
     77c:	c9 01       	movw	r24, r18
     77e:	08 95       	ret

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     780:	22 e1       	ldi	r18, 0x12	; 18
     782:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     784:	86 e7       	ldi	r24, 0x76	; 118
     786:	92 e0       	ldi	r25, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     788:	fa 01       	movw	r30, r20
     78a:	80 83       	st	Z, r24
     78c:	91 83       	std	Z+1, r25	; 0x01
    return Size;
}
     78e:	c9 01       	movw	r24, r18
     790:	08 95       	ret
     792:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	91 05       	cpc	r25, r1
     798:	a1 f0       	breq	.+40     	; 0x7c2 <CALLBACK_USB_GetDescriptor+0x6a>
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	91 05       	cpc	r25, r1
     79e:	b9 f0       	breq	.+46     	; 0x7ce <CALLBACK_USB_GetDescriptor+0x76>
     7a0:	89 2b       	or	r24, r25
     7a2:	29 f7       	brne	.-54     	; 0x76e <CALLBACK_USB_GetDescriptor+0x16>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     7a4:	e4 e3       	ldi	r30, 0x34	; 52
     7a6:	f2 e0       	ldi	r31, 0x02	; 2
     7a8:	24 91       	lpm	r18, Z
     7aa:	30 e0       	ldi	r19, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
            {
                case 0x00:
                    Address = &LanguageString;
     7ac:	cf 01       	movw	r24, r30
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
     7ae:	e3 cf       	rjmp	.-58     	; 0x776 <CALLBACK_USB_GetDescriptor+0x1e>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     7b0:	2e e3       	ldi	r18, 0x3E	; 62
     7b2:	30 e0       	ldi	r19, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     7b4:	88 e3       	ldi	r24, 0x38	; 56
     7b6:	92 e0       	ldi	r25, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     7b8:	fa 01       	movw	r30, r20
     7ba:	80 83       	st	Z, r24
     7bc:	91 83       	std	Z+1, r25	; 0x01
    return Size;
}
     7be:	c9 01       	movw	r24, r18
     7c0:	08 95       	ret
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     7c2:	ea e1       	ldi	r30, 0x1A	; 26
     7c4:	f2 e0       	ldi	r31, 0x02	; 2
     7c6:	24 91       	lpm	r18, Z
     7c8:	30 e0       	ldi	r19, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
     7ca:	cf 01       	movw	r24, r30
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
     7cc:	d4 cf       	rjmp	.-88     	; 0x776 <CALLBACK_USB_GetDescriptor+0x1e>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     7ce:	ec ef       	ldi	r30, 0xFC	; 252
     7d0:	f1 e0       	ldi	r31, 0x01	; 1
     7d2:	24 91       	lpm	r18, Z
     7d4:	30 e0       	ldi	r19, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     7d6:	cf 01       	movw	r24, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     7d8:	ce cf       	rjmp	.-100    	; 0x776 <CALLBACK_USB_GetDescriptor+0x1e>

000007da <__vector_default>:

#include "System.h"
#include "LED.h"

ISR(BADISR_vect)
{
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	ff cf       	rjmp	.-2      	; 0x7e4 <__vector_default+0xa>

000007e6 <SystemInit>:
    while(1);
}

void SystemInit(void)
{
    if (RST.STATUS & RST_WDRF_bm) {
     7e6:	80 91 78 00 	lds	r24, 0x0078
     7ea:	83 ff       	sbrs	r24, 3
     7ec:	0a c0       	rjmp	.+20     	; 0x802 <SystemInit+0x1c>
        /* On Watchdog reset clear WDRF bit, disable watchdog
        * and jump into bootloader */
        RST.STATUS = RST_WDRF_bm;
     7ee:	88 e0       	ldi	r24, 0x08	; 8
     7f0:	80 93 78 00 	sts	0x0078, r24

        CCP = CCP_IOREG_gc;
     7f4:	88 ed       	ldi	r24, 0xD8	; 216
     7f6:	84 bf       	out	0x34, r24	; 52
        WDT.CTRL = WDT_CEN_bm;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 80 00 	sts	0x0080, r24

        asm volatile ("jmp %0"::"i" (BOOT_SECTION_START + 0x1FC));
     7fe:	fd 95 fe c0 	jmp	0x7f81fc	; 0x7f81fc <__data_load_end+0x7f2ee8>
    }

    /* 32MHz system clock using internal RC and 32K DFLL*/
    OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;
     802:	80 91 50 00 	lds	r24, 0x0050
     806:	86 60       	ori	r24, 0x06	; 6
     808:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm))
     80c:	80 91 51 00 	lds	r24, 0x0051
     810:	81 ff       	sbrs	r24, 1
     812:	fc cf       	rjmp	.-8      	; 0x80c <SystemInit+0x26>
        ;
    while(!(OSC.STATUS & OSC_RC32KRDY_bm))
     814:	80 91 51 00 	lds	r24, 0x0051
     818:	82 ff       	sbrs	r24, 2
     81a:	fc cf       	rjmp	.-8      	; 0x814 <SystemInit+0x2e>
        ;

    OSC.DFLLCTRL = OSC_RC32MCREF_RC32K_gc;
     81c:	10 92 56 00 	sts	0x0056, r1
    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	20 93 60 00 	sts	0x0060, r18

    CCP = CCP_IOREG_gc;
     826:	88 ed       	ldi	r24, 0xD8	; 216
     828:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     82a:	20 93 40 00 	sts	0x0040, r18

    /* Use TCE0 as system tick */
    TCE0.PER = F_CPU / 256 / SYSTEM_TICK_FREQ - 1;
     82e:	83 ed       	ldi	r24, 0xD3	; 211
     830:	90 e3       	ldi	r25, 0x30	; 48
     832:	80 93 26 0a 	sts	0x0A26, r24
     836:	90 93 27 0a 	sts	0x0A27, r25
    TCE0.CTRLA = TC_CLKSEL_DIV256_gc;
     83a:	86 e0       	ldi	r24, 0x06	; 6
     83c:	80 93 00 0a 	sts	0x0A00, r24

    /* Enable RTC with roughly 1kHz clock */
    CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm;
     840:	20 93 43 00 	sts	0x0043, r18
    RTC.CTRL = RTC_PRESCALER_DIV1_gc;
     844:	20 93 00 04 	sts	0x0400, r18

    /* Enable EEPROM data memory mapping */
    NVM.CTRLB |= NVM_EEMAPEN_bm;
     848:	80 91 cc 01 	lds	r24, 0x01CC
     84c:	88 60       	ori	r24, 0x08	; 8
     84e:	80 93 cc 01 	sts	0x01CC, r24
     852:	08 95       	ret

00000854 <SystemReset>:
}

void SystemReset(void)
{
    CCP = CCP_IOREG_gc;
     854:	88 ed       	ldi	r24, 0xD8	; 216
     856:	84 bf       	out	0x34, r24	; 52
    RST.CTRL = RST_SWRST_bm;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	e8 e7       	ldi	r30, 0x78	; 120
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	81 83       	std	Z+1, r24	; 0x01
     860:	08 95       	ret

00000862 <SystemEnterBootloader>:
}

void SystemEnterBootloader(void)
{
    /* Use Watchdog timer to reset into bootloader. */
    CCP = CCP_IOREG_gc;
     862:	88 ed       	ldi	r24, 0xD8	; 216
     864:	84 bf       	out	0x34, r24	; 52
    WDT.CTRL = WDT_PER_500CLK_gc | WDT_ENABLE_bm | WDT_CEN_bm;
     866:	8b e1       	ldi	r24, 0x1B	; 27
     868:	80 93 80 00 	sts	0x0080, r24
     86c:	08 95       	ret

0000086e <SystemStartUSBClock>:


void SystemStartUSBClock(void)
{
    /* 48MHz USB Clock using 12MHz XTAL */
    OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     86e:	8b ec       	ldi	r24, 0xCB	; 203
     870:	80 93 52 00 	sts	0x0052, r24
    OSC.CTRL |= OSC_XOSCEN_bm;
     874:	80 91 50 00 	lds	r24, 0x0050
     878:	88 60       	ori	r24, 0x08	; 8
     87a:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_XOSCRDY_bm))
     87e:	80 91 51 00 	lds	r24, 0x0051
     882:	83 ff       	sbrs	r24, 3
     884:	fc cf       	rjmp	.-8      	; 0x87e <SystemStartUSBClock+0x10>
        ;

    OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (4 << OSC_PLLFAC_gp);
     886:	84 ec       	ldi	r24, 0xC4	; 196
     888:	80 93 55 00 	sts	0x0055, r24

    OSC.CTRL |= OSC_PLLEN_bm;
     88c:	80 91 50 00 	lds	r24, 0x0050
     890:	80 61       	ori	r24, 0x10	; 16
     892:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_PLLRDY_bm))
     896:	80 91 51 00 	lds	r24, 0x0051
     89a:	84 ff       	sbrs	r24, 4
     89c:	fc cf       	rjmp	.-8      	; 0x896 <SystemStartUSBClock+0x28>
        ;
}
     89e:	08 95       	ret

000008a0 <SystemStopUSBClock>:

void SystemStopUSBClock(void)
{
    /* Disable USB Clock to minimize power consumption */
    CLK.USBCTRL &= ~CLK_USBSEN_bm;
     8a0:	e0 e4       	ldi	r30, 0x40	; 64
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	84 81       	ldd	r24, Z+4	; 0x04
     8a6:	8e 7f       	andi	r24, 0xFE	; 254
     8a8:	84 83       	std	Z+4, r24	; 0x04
    OSC.CTRL &= ~OSC_PLLEN_bm;
     8aa:	e0 e5       	ldi	r30, 0x50	; 80
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	8f 7e       	andi	r24, 0xEF	; 239
     8b2:	80 83       	st	Z, r24
    OSC.CTRL &= ~OSC_XOSCEN_bm;
     8b4:	80 81       	ld	r24, Z
     8b6:	87 7f       	andi	r24, 0xF7	; 247
     8b8:	80 83       	st	Z, r24
     8ba:	08 95       	ret

000008bc <SystemInterruptInit>:
}

void SystemInterruptInit(void)
{
    /* Enable all interrupt levels */
    PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     8bc:	87 e0       	ldi	r24, 0x07	; 7
     8be:	e0 ea       	ldi	r30, 0xA0	; 160
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	82 83       	std	Z+2, r24	; 0x02
    sei();
     8c4:	78 94       	sei
     8c6:	08 95       	ret

000008c8 <CodecInitDummy>:

/* Include all Codecs and Applications */
#include "Codec/Codec.h"
#include "Application/Application.h"

static void CodecInitDummy(void) { }
     8c8:	08 95       	ret

000008ca <CodecTaskDummy>:
static void CodecTaskDummy(void) { }
     8ca:	08 95       	ret

000008cc <ApplicationInitDummy>:
static void ApplicationInitDummy(void) {}
     8cc:	08 95       	ret

000008ce <ApplicationResetDummy>:
static void ApplicationResetDummy(void) {}
     8ce:	08 95       	ret

000008d0 <ApplicationTaskDummy>:
static void ApplicationTaskDummy(void) {}
     8d0:	08 95       	ret

000008d2 <ApplicationProcessDummy>:
static uint16_t ApplicationProcessDummy(uint8_t* ByteBuffer, uint16_t ByteCount) { return 0; }
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	08 95       	ret

000008d8 <ApplicationGetUidDummy>:
static void ApplicationGetUidDummy(ConfigurationUidType Uid) { }
     8d8:	08 95       	ret

000008da <ApplicationSetUidDummy>:
static void ApplicationSetUidDummy(ConfigurationUidType Uid) { }
     8da:	08 95       	ret

000008dc <ConfigurationSetById>:
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
}

void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;
     8dc:	e0 91 fe 24 	lds	r30, 0x24FE
     8e0:	f0 91 ff 24 	lds	r31, 0x24FF
     8e4:	81 83       	std	Z+1, r24	; 0x01

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
            &ConfigurationTable[Configuration], sizeof(ConfigurationType));
     8e6:	95 e2       	ldi	r25, 0x25	; 37
     8e8:	89 9f       	mul	r24, r25
     8ea:	b0 01       	movw	r22, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	68 57       	subi	r22, 0x78	; 120
     8f0:	7d 4f       	sbci	r23, 0xFD	; 253
void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
     8f2:	45 e2       	ldi	r20, 0x25	; 37
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	88 ed       	ldi	r24, 0xD8	; 216
     8f8:	94 e2       	ldi	r25, 0x24	; 36
     8fa:	0e 94 d6 25 	call	0x4bac	; 0x4bac <memcpy_P>
/* Applications */
#include "MifareClassic.h"

/* Function wrappers */
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
     8fe:	e0 91 ed 24 	lds	r30, 0x24ED
     902:	f0 91 ee 24 	lds	r31, 0x24EE
     906:	09 95       	icall
#define CODEC_CARRIER_FREQ          13560000

extern uint8_t CodecBuffer[CODEC_BUFFER_SIZE];

INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
     908:	e0 91 e9 24 	lds	r30, 0x24E9
     90c:	f0 91 ea 24 	lds	r31, 0x24EA
     910:	09 94       	ijmp

00000912 <ConfigurationInit>:

ConfigurationType ActiveConfiguration;

void ConfigurationInit(void)
{
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
     912:	e0 91 fe 24 	lds	r30, 0x24FE
     916:	f0 91 ff 24 	lds	r31, 0x24FF
     91a:	81 81       	ldd	r24, Z+1	; 0x01
     91c:	df cf       	rjmp	.-66     	; 0x8dc <ConfigurationSetById>

0000091e <ConfigurationSetByName>:
    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
{
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
     92a:	15 e2       	ldi	r17, 0x25	; 37

    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
     92c:	ac 01       	movw	r20, r24
     92e:	4f 5f       	subi	r20, 0xFF	; 255
     930:	5f 4f       	sbci	r21, 0xFF	; 255
     932:	02 2f       	mov	r16, r18
{
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
     934:	12 9f       	mul	r17, r18
     936:	f0 01       	movw	r30, r0
     938:	13 9f       	mul	r17, r19
     93a:	f0 0d       	add	r31, r0
     93c:	11 24       	eor	r1, r1
     93e:	e7 57       	subi	r30, 0x77	; 119
     940:	fd 4f       	sbci	r31, 0xFD	; 253
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);
     942:	64 91       	lpm	r22, Z

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     944:	61 11       	cpse	r22, r1
     946:	0f c0       	rjmp	.+30     	; 0x966 <ConfigurationSetByName+0x48>
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
        const char* pRequestedConfigName = ConfigurationName;
     948:	ec 01       	movw	r28, r24
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     94a:	68 81       	ld	r22, Y
     94c:	66 23       	and	r22, r22
     94e:	01 f1       	breq	.+64     	; 0x990 <ConfigurationSetByName+0x72>
     950:	2f 5f       	subi	r18, 0xFF	; 255
     952:	3f 4f       	sbci	r19, 0xFF	; 255
bool ConfigurationSetByName(const char* ConfigurationName)
{
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
     954:	23 30       	cpi	r18, 0x03	; 3
     956:	31 05       	cpc	r19, r1
     958:	61 f7       	brne	.-40     	; 0x932 <ConfigurationSetByName+0x14>
            ConfigurationSetById(i);
            return true;
        }
    }

    return false;
     95a:	80 e0       	ldi	r24, 0x00	; 0
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     966:	dc 01       	movw	r26, r24
     968:	7c 91       	ld	r23, X
     96a:	77 23       	and	r23, r23
     96c:	89 f3       	breq	.-30     	; 0x950 <ConfigurationSetByName+0x32>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     96e:	67 13       	cpse	r22, r23
     970:	ef cf       	rjmp	.-34     	; 0x950 <ConfigurationSetByName+0x32>

    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
     972:	da 01       	movw	r26, r20
     974:	05 c0       	rjmp	.+10     	; 0x980 <ConfigurationSetByName+0x62>
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     976:	7d 91       	ld	r23, X+
     978:	77 23       	and	r23, r23
     97a:	51 f3       	breq	.-44     	; 0x950 <ConfigurationSetByName+0x32>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     97c:	76 13       	cpse	r23, r22
     97e:	e8 cf       	rjmp	.-48     	; 0x950 <ConfigurationSetByName+0x32>
                StringMismatch = true;
                break;
            }

            /* Proceed to next character */
            pTableConfigName++;
     980:	31 96       	adiw	r30, 0x01	; 1
            pRequestedConfigName++;
     982:	ed 01       	movw	r28, r26

            c = pgm_read_byte(pTableConfigName);
     984:	64 91       	lpm	r22, Z
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     986:	61 11       	cpse	r22, r1
     988:	f6 cf       	rjmp	.-20     	; 0x976 <ConfigurationSetByName+0x58>
     98a:	68 81       	ld	r22, Y
     98c:	61 11       	cpse	r22, r1
     98e:	e0 cf       	rjmp	.-64     	; 0x950 <ConfigurationSetByName+0x32>
            c = pgm_read_byte(pTableConfigName);
        }

        if (!StringMismatch) {
            /* Configuration found */
            ConfigurationSetById(i);
     990:	80 2f       	mov	r24, r16
     992:	a4 df       	rcall	.-184    	; 0x8dc <ConfigurationSetById>
            return true;
     994:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return false;
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	08 95       	ret

000009a0 <ConfigurationGetList>:

void ConfigurationGetList(char* ConfigListOut, uint16_t ByteCount)
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
    uint8_t i;

    /* Account for '\0' */
    ByteCount--;
     9a6:	61 50       	subi	r22, 0x01	; 1
     9a8:	71 09       	sbc	r23, r1
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
     9ae:	35 e2       	ldi	r19, 0x25	; 37
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     9b0:	4c e2       	ldi	r20, 0x2C	; 44

    /* Account for '\0' */
    ByteCount--;

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
     9b2:	38 9f       	mul	r19, r24
     9b4:	f0 01       	movw	r30, r0
     9b6:	39 9f       	mul	r19, r25
     9b8:	f0 0d       	add	r31, r0
     9ba:	11 24       	eor	r1, r1
     9bc:	e7 57       	subi	r30, 0x77	; 119
     9be:	fd 4f       	sbci	r31, 0xFD	; 253
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     9c0:	24 91       	lpm	r18, Z
     9c2:	22 23       	and	r18, r18
     9c4:	81 f0       	breq	.+32     	; 0x9e6 <ConfigurationGetList+0x46>
     9c6:	61 31       	cpi	r22, 0x11	; 17
     9c8:	71 05       	cpc	r23, r1
     9ca:	68 f0       	brcs	.+26     	; 0x9e6 <ConfigurationGetList+0x46>
     9cc:	de 01       	movw	r26, r28
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <ConfigurationGetList+0x36>
     9d0:	60 31       	cpi	r22, 0x10	; 16
     9d2:	71 05       	cpc	r23, r1
     9d4:	41 f0       	breq	.+16     	; 0x9e6 <ConfigurationGetList+0x46>
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ConfigListOut++ = c;
     9d6:	2d 93       	st	X+, r18
     9d8:	ed 01       	movw	r28, r26
            ConfigName++;
     9da:	31 96       	adiw	r30, 0x01	; 1
            ByteCount--;
     9dc:	61 50       	subi	r22, 0x01	; 1
     9de:	71 09       	sbc	r23, r1

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     9e0:	24 91       	lpm	r18, Z
     9e2:	21 11       	cpse	r18, r1
     9e4:	f5 cf       	rjmp	.-22     	; 0x9d0 <ConfigurationGetList+0x30>
            *ConfigListOut++ = c;
            ConfigName++;
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	91 05       	cpc	r25, r1
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <ConfigurationGetList+0x54>
            *ConfigListOut++ = ',';
            ByteCount--;
        }
    }

    *ConfigListOut = '\0';
     9ec:	18 82       	st	Y, r1
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     9f4:	49 93       	st	Y+, r20
            ByteCount--;
     9f6:	61 50       	subi	r22, 0x01	; 1
     9f8:	71 09       	sbc	r23, r1
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	da cf       	rjmp	.-76     	; 0x9b2 <ConfigurationGetList+0x12>

000009fe <RandomInit>:
#include "Random.h"

#include <stdlib.h>

void RandomInit(void)
{
     9fe:	08 95       	ret

00000a00 <RandomGetByte>:

}

uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
     a00:	0c 94 c8 25 	jmp	0x4b90	; 0x4b90 <rand>
}
     a04:	08 95       	ret

00000a06 <RandomGetBuffer>:

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	16 2f       	mov	r17, r22
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     a0e:	66 23       	and	r22, r22
     a10:	29 f0       	breq	.+10     	; 0xa1c <RandomGetBuffer+0x16>
     a12:	ec 01       	movw	r28, r24
        *BufferPtr++ = RandomGetByte();
     a14:	f5 df       	rcall	.-22     	; 0xa00 <RandomGetByte>
     a16:	89 93       	st	Y+, r24
     a18:	11 50       	subi	r17, 0x01	; 1

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <RandomGetBuffer+0xe>
        *BufferPtr++ = RandomGetByte();
    }
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	08 95       	ret

00000a24 <RandomTick>:

void RandomTick(void)
{
    rand();
     a24:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <rand>
    rand();
     a28:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <rand>
    rand();
     a2c:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <rand>
    rand();
     a30:	0c 94 c8 25 	jmp	0x4b90	; 0x4b90 <rand>

00000a34 <BufferToHexString>:
 */

#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	dc 01       	movw	r26, r24
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;
     a3a:	61 50       	subi	r22, 0x01	; 1
     a3c:	71 09       	sbc	r23, r1

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a3e:	21 15       	cp	r18, r1
     a40:	31 05       	cpc	r19, r1
     a42:	99 f1       	breq	.+102    	; 0xaaa <BufferToHexString+0x76>
     a44:	62 30       	cpi	r22, 0x02	; 2
     a46:	71 05       	cpc	r23, r1
     a48:	80 f1       	brcs	.+96     	; 0xaaa <BufferToHexString+0x76>
     a4a:	fa 01       	movw	r30, r20
 * policies, either expressed or implied, of the ORIGINAL AUTHORS.
 */

#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
     a4c:	24 0f       	add	r18, r20
     a4e:	35 1f       	adc	r19, r21
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	31 09       	sbc	r19, r1
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	17 c0       	rjmp	.+46     	; 0xa88 <BufferToHexString+0x54>
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
        uint8_t Byte = *ByteBuffer;

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     a5a:	d0 5d       	subi	r29, 0xD0	; 208
     a5c:	dc 93       	st	X, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     a5e:	cf 70       	andi	r28, 0x0F	; 15
     a60:	8c 2f       	mov	r24, r28
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0a 97       	sbiw	r24, 0x0a	; 10
     a66:	fc f4       	brge	.+62     	; 0xaa6 <BufferToHexString+0x72>
     a68:	c0 5d       	subi	r28, 0xD0	; 208
     a6a:	11 96       	adiw	r26, 0x01	; 1
     a6c:	cc 93       	st	X, r28
     a6e:	11 97       	sbiw	r26, 0x01	; 1

        HexOut += 2;
     a70:	12 96       	adiw	r26, 0x02	; 2
        MaxChars -= 2;
     a72:	62 50       	subi	r22, 0x02	; 2
     a74:	71 09       	sbc	r23, r1
        CharCount += 2;
     a76:	4e 5f       	subi	r20, 0xFE	; 254
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a7a:	e2 17       	cp	r30, r18
     a7c:	f3 07       	cpc	r31, r19
     a7e:	b9 f0       	breq	.+46     	; 0xaae <BufferToHexString+0x7a>
     a80:	31 96       	adiw	r30, 0x01	; 1
     a82:	62 30       	cpi	r22, 0x02	; 2
     a84:	71 05       	cpc	r23, r1
     a86:	98 f0       	brcs	.+38     	; 0xaae <BufferToHexString+0x7a>
        uint8_t Byte = *ByteBuffer;
     a88:	c0 81       	ld	r28, Z

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     a8a:	dc 2f       	mov	r29, r28
     a8c:	d2 95       	swap	r29
     a8e:	df 70       	andi	r29, 0x0F	; 15
     a90:	8d 2f       	mov	r24, r29
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0a 97       	sbiw	r24, 0x0a	; 10
     a96:	0c f3       	brlt	.-62     	; 0xa5a <BufferToHexString+0x26>
     a98:	d9 5c       	subi	r29, 0xC9	; 201
     a9a:	dc 93       	st	X, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     a9c:	cf 70       	andi	r28, 0x0F	; 15
     a9e:	8c 2f       	mov	r24, r28
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0a 97       	sbiw	r24, 0x0a	; 10
     aa4:	0c f3       	brlt	.-62     	; 0xa68 <BufferToHexString+0x34>
     aa6:	c9 5c       	subi	r28, 0xC9	; 201
     aa8:	e0 cf       	rjmp	.-64     	; 0xa6a <BufferToHexString+0x36>
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
        CharCount += 2;
        ByteBuffer++;
        ByteCount -= 1;
    }

    *HexOut = '\0';
     aae:	1c 92       	st	X, r1

    return CharCount;
}
     ab0:	ca 01       	movw	r24, r20
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <HexStringToBuffer>:

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
     ab8:	fa 01       	movw	r30, r20
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     aba:	40 81       	ld	r20, Z
     abc:	44 23       	and	r20, r20
     abe:	f1 f1       	breq	.+124    	; 0xb3c <HexStringToBuffer+0x84>
     ac0:	51 81       	ldd	r21, Z+1	; 0x01
     ac2:	55 23       	and	r21, r21
     ac4:	d9 f1       	breq	.+118    	; 0xb3c <HexStringToBuffer+0x84>
     ac6:	61 15       	cp	r22, r1
     ac8:	71 05       	cpc	r23, r1
     aca:	c1 f1       	breq	.+112    	; 0xb3c <HexStringToBuffer+0x84>
     acc:	dc 01       	movw	r26, r24
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	13 c0       	rjmp	.+38     	; 0xafa <HexStringToBuffer+0x42>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     ad4:	42 95       	swap	r20
     ad6:	40 7f       	andi	r20, 0xF0	; 240
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     ad8:	51 34       	cpi	r21, 0x41	; 65
     ada:	28 f5       	brcc	.+74     	; 0xb26 <HexStringToBuffer+0x6e>
     adc:	58 2f       	mov	r21, r24
     ade:	45 2b       	or	r20, r21

            *ByteBuffer = Byte;
     ae0:	4d 93       	st	X+, r20

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     ae2:	2f 5f       	subi	r18, 0xFF	; 255
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
            HexIn += 2;
     ae6:	32 96       	adiw	r30, 0x02	; 2
uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     ae8:	40 81       	ld	r20, Z
     aea:	44 23       	and	r20, r20
     aec:	29 f1       	breq	.+74     	; 0xb38 <HexStringToBuffer+0x80>
     aee:	51 81       	ldd	r21, Z+1	; 0x01
     af0:	55 23       	and	r21, r21
     af2:	21 f1       	breq	.+72     	; 0xb3c <HexStringToBuffer+0x84>
     af4:	62 17       	cp	r22, r18
     af6:	73 07       	cpc	r23, r19
     af8:	f9 f0       	breq	.+62     	; 0xb38 <HexStringToBuffer+0x80>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
     afa:	84 2f       	mov	r24, r20
     afc:	80 53       	subi	r24, 0x30	; 48
     afe:	8a 30       	cpi	r24, 0x0A	; 10
     b00:	18 f0       	brcs	.+6      	; 0xb08 <HexStringToBuffer+0x50>
     b02:	81 51       	subi	r24, 0x11	; 17
     b04:	86 30       	cpi	r24, 0x06	; 6
     b06:	d0 f4       	brcc	.+52     	; 0xb3c <HexStringToBuffer+0x84>
     b08:	85 2f       	mov	r24, r21
     b0a:	80 53       	subi	r24, 0x30	; 48
     b0c:	8a 30       	cpi	r24, 0x0A	; 10
     b0e:	20 f0       	brcs	.+8      	; 0xb18 <HexStringToBuffer+0x60>
     b10:	95 2f       	mov	r25, r21
     b12:	91 54       	subi	r25, 0x41	; 65
     b14:	96 30       	cpi	r25, 0x06	; 6
     b16:	90 f4       	brcc	.+36     	; 0xb3c <HexStringToBuffer+0x84>
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     b18:	41 34       	cpi	r20, 0x41	; 65
     b1a:	e0 f2       	brcs	.-72     	; 0xad4 <HexStringToBuffer+0x1c>
     b1c:	42 95       	swap	r20
     b1e:	40 7f       	andi	r20, 0xF0	; 240
     b20:	40 57       	subi	r20, 0x70	; 112
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     b22:	51 34       	cpi	r21, 0x41	; 65
     b24:	d8 f2       	brcs	.-74     	; 0xadc <HexStringToBuffer+0x24>
     b26:	57 53       	subi	r21, 0x37	; 55
     b28:	45 2b       	or	r20, r21

            *ByteBuffer = Byte;
     b2a:	4d 93       	st	X+, r20

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	3f 4f       	sbci	r19, 0xFF	; 255
            HexIn += 2;
     b30:	32 96       	adiw	r30, 0x02	; 2
uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     b32:	40 81       	ld	r20, Z
     b34:	41 11       	cpse	r20, r1
     b36:	db cf       	rjmp	.-74     	; 0xaee <HexStringToBuffer+0x36>
        /* Odd number of characters */
        return 0;
    }

    return ByteCount;
}
     b38:	c9 01       	movw	r24, r18
     b3a:	08 95       	ret
        }
    }

    if ( (HexIn[0] != '\0') && (HexIn[1] == '\0') ) {
        /* Odd number of characters */
        return 0;
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
    }

    return ByteCount;
}
     b40:	c9 01       	movw	r24, r18
     b42:	08 95       	ret

00000b44 <MemoryReadBlock>:
	MemoryRecall();
}

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint8_t* SrcPtr = &Memory[Address];
     b44:	fb 01       	movw	r30, r22
     b46:	ee 56       	subi	r30, 0x6E	; 110
     b48:	ff 4d       	sbci	r31, 0xDF	; 223
	uint8_t* DstPtr = (uint8_t*) Buffer;

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	b4 e0       	ldi	r27, 0x04	; 4
     b4e:	a6 1b       	sub	r26, r22
     b50:	b7 0b       	sbc	r27, r23
     b52:	9a 01       	movw	r18, r20
     b54:	a4 17       	cp	r26, r20
     b56:	b5 07       	cpc	r27, r21
     b58:	08 f4       	brcc	.+2      	; 0xb5c <MemoryReadBlock+0x18>
     b5a:	9d 01       	movw	r18, r26

	while(ByteCount--) {
     b5c:	21 15       	cp	r18, r1
     b5e:	31 05       	cpc	r19, r1
     b60:	41 f0       	breq	.+16     	; 0xb72 <MemoryReadBlock+0x2e>
    
	/* Load permanent flash contents to memory at startup */
	MemoryRecall();
}

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
     b62:	2e 0f       	add	r18, r30
     b64:	3f 1f       	adc	r19, r31
{
	uint8_t* SrcPtr = &Memory[Address];
	uint8_t* DstPtr = (uint8_t*) Buffer;
     b66:	dc 01       	movw	r26, r24

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
		*DstPtr++ = *SrcPtr++;
     b68:	81 91       	ld	r24, Z+
     b6a:	8d 93       	st	X+, r24
	uint8_t* DstPtr = (uint8_t*) Buffer;

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
     b6c:	e2 17       	cp	r30, r18
     b6e:	f3 07       	cpc	r31, r19
     b70:	d9 f7       	brne	.-10     	; 0xb68 <MemoryReadBlock+0x24>
     b72:	08 95       	ret

00000b74 <MemoryWriteBlock>:
}

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint8_t* SrcPtr = (uint8_t*) Buffer;
	uint8_t* DstPtr = &Memory[Address];
     b74:	db 01       	movw	r26, r22
     b76:	ae 56       	subi	r26, 0x6E	; 110
     b78:	bf 4d       	sbci	r27, 0xDF	; 223

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);
     b7a:	e0 e0       	ldi	r30, 0x00	; 0
     b7c:	f4 e0       	ldi	r31, 0x04	; 4
     b7e:	e6 1b       	sub	r30, r22
     b80:	f7 0b       	sbc	r31, r23
     b82:	9a 01       	movw	r18, r20
     b84:	e4 17       	cp	r30, r20
     b86:	f5 07       	cpc	r31, r21
     b88:	08 f4       	brcc	.+2      	; 0xb8c <MemoryWriteBlock+0x18>
     b8a:	9f 01       	movw	r18, r30

	while(ByteCount--) {
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	49 f0       	breq	.+18     	; 0xba4 <MemoryWriteBlock+0x30>
     b92:	fc 01       	movw	r30, r24
	while(ByteCount--) {
		*DstPtr++ = *SrcPtr++;
	}
}

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
     b94:	c9 01       	movw	r24, r18
     b96:	8e 0f       	add	r24, r30
     b98:	9f 1f       	adc	r25, r31

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
		*DstPtr++ = *SrcPtr++;
     b9a:	21 91       	ld	r18, Z+
     b9c:	2d 93       	st	X+, r18
	uint8_t* DstPtr = &Memory[Address];

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
     b9e:	e8 17       	cp	r30, r24
     ba0:	f9 07       	cpc	r31, r25
     ba2:	d9 f7       	brne	.-10     	; 0xb9a <MemoryWriteBlock+0x26>
     ba4:	08 95       	ret

00000ba6 <MemoryClear>:
		*DstPtr++ = *SrcPtr++;
	}
}

void MemoryClear(void)
{
     ba6:	e2 e9       	ldi	r30, 0x92	; 146
     ba8:	f0 e2       	ldi	r31, 0x20	; 32
	for (uint16_t i=0; i<MEMORY_SIZE_PER_SETTING; i++) {
		Memory[i] = 0;
     baa:	11 92       	st	Z+, r1
	}
}

void MemoryClear(void)
{
	for (uint16_t i=0; i<MEMORY_SIZE_PER_SETTING; i++) {
     bac:	84 e2       	ldi	r24, 0x24	; 36
     bae:	e2 39       	cpi	r30, 0x92	; 146
     bb0:	f8 07       	cpc	r31, r24
     bb2:	d9 f7       	brne	.-10     	; 0xbaa <MemoryClear+0x4>
		Memory[i] = 0;
	}
}
     bb4:	08 95       	ret

00000bb6 <MemoryRecall>:

void MemoryRecall(void)
{
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
     bb6:	80 91 fd 24 	lds	r24, 0x24FD
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	4a e0       	ldi	r20, 0x0A	; 10
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	aa 1f       	adc	r26, r26
     bc8:	bb 1f       	adc	r27, r27
     bca:	4a 95       	dec	r20
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <MemoryRecall+0xc>

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     bce:	40 e1       	ldi	r20, 0x10	; 16

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     bd0:	57 ed       	ldi	r21, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     bd2:	30 e4       	ldi	r19, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     bd4:	40 93 66 06 	sts	0x0666, r20

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     bd8:	50 93 a0 09 	sts	0x09A0, r21

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     bdc:	20 91 a1 09 	lds	r18, 0x09A1
     be0:	26 ff       	sbrs	r18, 6
     be2:	fc cf       	rjmp	.-8      	; 0xbdc <MemoryRecall+0x26>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     be4:	30 93 a1 09 	sts	0x09A1, r19

	return MEMORY_FLASH_USART.DATA;
     be8:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     bec:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     bf0:	20 91 a1 09 	lds	r18, 0x09A1
     bf4:	26 ff       	sbrs	r18, 6
     bf6:	fc cf       	rjmp	.-8      	; 0xbf0 <MemoryRecall+0x3a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     bf8:	30 93 a1 09 	sts	0x09A1, r19

	return MEMORY_FLASH_USART.DATA;
     bfc:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     c00:	40 93 65 06 	sts	0x0665, r20
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashRead(void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     c04:	27 ff       	sbrs	r18, 7
     c06:	e6 cf       	rjmp	.-52     	; 0xbd4 <MemoryRecall+0x1e>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c08:	20 e1       	ldi	r18, 0x10	; 16
     c0a:	20 93 66 06 	sts	0x0666, r18

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c0e:	23 e0       	ldi	r18, 0x03	; 3
     c10:	20 93 a0 09 	sts	0x09A0, r18

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c14:	20 91 a1 09 	lds	r18, 0x09A1
     c18:	26 ff       	sbrs	r18, 6
     c1a:	fc cf       	rjmp	.-8      	; 0xc14 <MemoryRecall+0x5e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c1c:	20 e4       	ldi	r18, 0x40	; 64
     c1e:	20 93 a1 09 	sts	0x09A1, r18

	return MEMORY_FLASH_USART.DATA;
     c22:	20 91 a0 09 	lds	r18, 0x09A0
{
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
     c26:	ad 01       	movw	r20, r26
     c28:	66 27       	eor	r22, r22
     c2a:	77 27       	eor	r23, r23

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c2c:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c30:	20 91 a1 09 	lds	r18, 0x09A1
     c34:	26 ff       	sbrs	r18, 6
     c36:	fc cf       	rjmp	.-8      	; 0xc30 <MemoryRecall+0x7a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c38:	20 e4       	ldi	r18, 0x40	; 64
     c3a:	20 93 a1 09 	sts	0x09A1, r18

	return MEMORY_FLASH_USART.DATA;
     c3e:	20 91 a0 09 	lds	r18, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
     c42:	89 2f       	mov	r24, r25
     c44:	9a 2f       	mov	r25, r26
     c46:	ab 2f       	mov	r26, r27
     c48:	bb 27       	eor	r27, r27

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c4a:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c4e:	80 91 a1 09 	lds	r24, 0x09A1
     c52:	86 ff       	sbrs	r24, 6
     c54:	fc cf       	rjmp	.-8      	; 0xc4e <MemoryRecall+0x98>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     c5c:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c60:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c64:	80 91 a1 09 	lds	r24, 0x09A1
     c68:	86 ff       	sbrs	r24, 6
     c6a:	fc cf       	rjmp	.-8      	; 0xc64 <MemoryRecall+0xae>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c6c:	80 e4       	ldi	r24, 0x40	; 64
     c6e:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     c72:	80 91 a0 09 	lds	r24, 0x09A0
}

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;
     c76:	e2 e9       	ldi	r30, 0x92	; 146
     c78:	f0 e2       	ldi	r31, 0x20	; 32

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = 0;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c7a:	90 e4       	ldi	r25, 0x40	; 64
INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = 0;
     c7c:	10 92 a0 09 	sts	0x09A0, r1
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c80:	80 91 a1 09 	lds	r24, 0x09A1
     c84:	86 ff       	sbrs	r24, 6
     c86:	fc cf       	rjmp	.-8      	; 0xc80 <MemoryRecall+0xca>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c88:	90 93 a1 09 	sts	0x09A1, r25
		*ByteBuffer++ = MEMORY_FLASH_USART.DATA;
     c8c:	80 91 a0 09 	lds	r24, 0x09A0
     c90:	81 93       	st	Z+, r24

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     c92:	84 e2       	ldi	r24, 0x24	; 36
     c94:	e2 39       	cpi	r30, 0x92	; 146
     c96:	f8 07       	cpc	r31, r24
     c98:	89 f7       	brne	.-30     	; 0xc7c <MemoryRecall+0xc6>
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
	SPITransferByte( (Address >> 0) & 0xFF );
	SPIReadBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     c9a:	80 e1       	ldi	r24, 0x10	; 16
     c9c:	80 93 65 06 	sts	0x0665, r24
     ca0:	08 95       	ret

00000ca2 <MemoryInit>:
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

void MemoryInit(void)
{
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <MemoryInit+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <MemoryInit+0x8>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
	/* Configure MEMORY_FLASH_USART for SPI master mode 0 with maximum clock frequency */
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     cae:	80 e1       	ldi	r24, 0x10	; 16
     cb0:	80 93 65 06 	sts	0x0665, r24
	
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_SCK;
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	90 93 66 06 	sts	0x0666, r25
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_MOSI;
     cba:	98 e0       	ldi	r25, 0x08	; 8
     cbc:	90 93 65 06 	sts	0x0665, r25
	
	MEMORY_FLASH_PORT.DIRSET = MEMORY_FLASH_SCK | MEMORY_FLASH_MOSI | MEMORY_FLASH_CS;
     cc0:	9a e1       	ldi	r25, 0x1A	; 26
     cc2:	90 93 61 06 	sts	0x0661, r25

    MEMORY_FLASH_USART.BAUDCTRLA = 0;
     cc6:	10 92 a6 09 	sts	0x09A6, r1
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
     cca:	10 92 a7 09 	sts	0x09A7, r1
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc;
     cce:	90 ec       	ldi	r25, 0xC0	; 192
     cd0:	90 93 a5 09 	sts	0x09A5, r25
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     cd4:	98 e1       	ldi	r25, 0x18	; 24
     cd6:	90 93 a4 09 	sts	0x09A4, r25

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     cda:	80 93 66 06 	sts	0x0666, r24

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     cde:	87 ed       	ldi	r24, 0xD7	; 215
     ce0:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ce4:	80 91 a1 09 	lds	r24, 0x09A1
     ce8:	86 ff       	sbrs	r24, 6
     cea:	fc cf       	rjmp	.-8      	; 0xce4 <MemoryInit+0x42>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cec:	80 e4       	ldi	r24, 0x40	; 64
     cee:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     cf2:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     cf6:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cfa:	80 91 a1 09 	lds	r24, 0x09A1
     cfe:	86 ff       	sbrs	r24, 6
     d00:	fc cf       	rjmp	.-8      	; 0xcfa <MemoryInit+0x58>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d02:	80 e4       	ldi	r24, 0x40	; 64
     d04:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     d08:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     d0c:	90 e1       	ldi	r25, 0x10	; 16
     d0e:	90 93 65 06 	sts	0x0665, r25
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc;
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;


	if ( !(FlashReadStatusRegister() & FLASH_STATUS_REG_PAGESIZE_BIT) ) {
     d12:	80 fd       	sbrc	r24, 0
     d14:	3e c0       	rjmp	.+124    	; 0xd92 <MemoryInit+0xf0>
	return !(FlashReadStatusRegister() & FLASH_STATUS_REG_READY_BIT);
}

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};
     d16:	8d e3       	ldi	r24, 0x3D	; 61
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	8a e2       	ldi	r24, 0x2A	; 42
     d1c:	8a 83       	std	Y+2, r24	; 0x02
     d1e:	80 e8       	ldi	r24, 0x80	; 128
     d20:	8b 83       	std	Y+3, r24	; 0x03
     d22:	86 ea       	ldi	r24, 0xA6	; 166
     d24:	8c 83       	std	Y+4, r24	; 0x04

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     d26:	20 e1       	ldi	r18, 0x10	; 16

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d28:	37 ed       	ldi	r19, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d2a:	90 e4       	ldi	r25, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     d2c:	20 93 66 06 	sts	0x0666, r18

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d30:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d34:	80 91 a1 09 	lds	r24, 0x09A1
     d38:	86 ff       	sbrs	r24, 6
     d3a:	fc cf       	rjmp	.-8      	; 0xd34 <MemoryInit+0x92>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d3c:	90 93 a1 09 	sts	0x09A1, r25

	return MEMORY_FLASH_USART.DATA;
     d40:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d44:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d48:	80 91 a1 09 	lds	r24, 0x09A1
     d4c:	86 ff       	sbrs	r24, 6
     d4e:	fc cf       	rjmp	.-8      	; 0xd48 <MemoryInit+0xa6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d50:	90 93 a1 09 	sts	0x09A1, r25

	return MEMORY_FLASH_USART.DATA;
     d54:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     d58:	20 93 65 06 	sts	0x0665, r18

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};

	while(FlashIsBusy());
     d5c:	87 ff       	sbrs	r24, 7
     d5e:	e6 cf       	rjmp	.-52     	; 0xd2c <MemoryInit+0x8a>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     d60:	80 e1       	ldi	r24, 0x10	; 16
     d62:	80 93 66 06 	sts	0x0666, r24
	}
}

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;
     d66:	fe 01       	movw	r30, r28
     d68:	31 96       	adiw	r30, 0x01	; 1
     d6a:	ce 01       	movw	r24, r28
     d6c:	05 96       	adiw	r24, 0x05	; 5

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d6e:	30 e4       	ldi	r19, 0x40	; 64
INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     d70:	21 91       	ld	r18, Z+
     d72:	20 93 a0 09 	sts	0x09A0, r18
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d76:	20 91 a1 09 	lds	r18, 0x09A1
     d7a:	26 ff       	sbrs	r18, 6
     d7c:	fc cf       	rjmp	.-8      	; 0xd76 <MemoryInit+0xd4>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d7e:	30 93 a1 09 	sts	0x09A1, r19
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
     d82:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     d86:	e8 17       	cp	r30, r24
     d88:	f9 07       	cpc	r31, r25
     d8a:	91 f7       	brne	.-28     	; 0xd70 <MemoryInit+0xce>

	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPIWriteBlock(Sequence, sizeof(Sequence));
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     d8c:	80 e1       	ldi	r24, 0x10	; 16
     d8e:	80 93 65 06 	sts	0x0665, r24
		FlashConfigurePageSize();
	}
    
	/* Load permanent flash contents to memory at startup */
	MemoryRecall();
}
     d92:	24 96       	adiw	r28, 0x04	; 4
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
		/* Configure for 256 byte Dataflash if not already done. */
		FlashConfigurePageSize();
	}
    
	/* Load permanent flash contents to memory at startup */
	MemoryRecall();
     d9c:	0c cf       	rjmp	.-488    	; 0xbb6 <MemoryRecall>

00000d9e <MemoryStore>:
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}

void MemoryStore(void)
{
     d9e:	4f 92       	push	r4
     da0:	5f 92       	push	r5
     da2:	6f 92       	push	r6
     da4:	7f 92       	push	r7
     da6:	8f 92       	push	r8
     da8:	9f 92       	push	r9
     daa:	af 92       	push	r10
     dac:	bf 92       	push	r11
     dae:	cf 92       	push	r12
     db0:	df 92       	push	r13
     db2:	ef 92       	push	r14
     db4:	ff 92       	push	r15
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
     dbe:	80 91 fd 24 	lds	r24, 0x24FD
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 e0       	ldi	r26, 0x00	; 0
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	6a e0       	ldi	r22, 0x0A	; 10
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	aa 1f       	adc	r26, r26
     dd0:	bb 1f       	adc	r27, r27
     dd2:	6a 95       	dec	r22
     dd4:	d1 f7       	brne	.-12     	; 0xdca <MemoryStore+0x2c>
     dd6:	00 e0       	ldi	r16, 0x00	; 0
     dd8:	14 e0       	ldi	r17, 0x04	; 4
INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
     dda:	e1 2c       	mov	r14, r1
     ddc:	ff 24       	eor	r15, r15
     dde:	f3 94       	inc	r15

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     de0:	e0 e1       	ldi	r30, 0x10	; 16
     de2:	ce 2e       	mov	r12, r30

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     de4:	f7 ed       	ldi	r31, 0xD7	; 215
     de6:	bf 2e       	mov	r11, r31

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     de8:	c0 e4       	ldi	r28, 0x40	; 64
     dea:	dc 2e       	mov	r13, r28

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     dec:	d0 e1       	ldi	r29, 0x10	; 16
     dee:	ad 2e       	mov	r10, r29

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     df0:	27 ed       	ldi	r18, 0xD7	; 215
     df2:	92 2e       	mov	r9, r18
     df4:	33 e5       	ldi	r19, 0x53	; 83
     df6:	43 2e       	mov	r4, r19
     df8:	44 e8       	ldi	r20, 0x84	; 132
     dfa:	54 2e       	mov	r5, r20
     dfc:	53 e8       	ldi	r21, 0x83	; 131
     dfe:	65 2e       	mov	r6, r21
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
     e00:	49 2f       	mov	r20, r25
     e02:	5a 2f       	mov	r21, r26
     e04:	6b 2f       	mov	r22, r27
     e06:	77 27       	eor	r23, r23
     e08:	85 2e       	mov	r8, r21
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
     e0a:	38 2f       	mov	r19, r24
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
     e0c:	e7 01       	movw	r28, r14
     e0e:	c8 1b       	sub	r28, r24
     e10:	d1 09       	sbc	r29, r1
     e12:	0c 17       	cp	r16, r28
     e14:	1d 07       	cpc	r17, r29
     e16:	08 f4       	brcc	.+2      	; 0xe1a <MemoryStore+0x7c>
     e18:	e8 01       	movw	r28, r16

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e1a:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e1e:	90 92 a0 09 	sts	0x09A0, r9

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e22:	20 91 a1 09 	lds	r18, 0x09A1
     e26:	26 ff       	sbrs	r18, 6
     e28:	fc cf       	rjmp	.-8      	; 0xe22 <MemoryStore+0x84>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e2a:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     e2e:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e32:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e36:	20 91 a1 09 	lds	r18, 0x09A1
     e3a:	26 ff       	sbrs	r18, 6
     e3c:	fc cf       	rjmp	.-8      	; 0xe36 <MemoryStore+0x98>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e3e:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     e42:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     e46:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashMemoryToBuffer(uint16_t PageAddress)
{
	while(FlashIsBusy());
     e4a:	27 ff       	sbrs	r18, 7
     e4c:	e6 cf       	rjmp	.-52     	; 0xe1a <MemoryStore+0x7c>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e4e:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e52:	40 92 a0 09 	sts	0x09A0, r4

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e56:	20 91 a1 09 	lds	r18, 0x09A1
     e5a:	26 ff       	sbrs	r18, 6
     e5c:	fc cf       	rjmp	.-8      	; 0xe56 <MemoryStore+0xb8>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e5e:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     e62:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e66:	80 92 a0 09 	sts	0x09A0, r8

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e6a:	20 91 a1 09 	lds	r18, 0x09A1
     e6e:	26 ff       	sbrs	r18, 6
     e70:	fc cf       	rjmp	.-8      	; 0xe6a <MemoryStore+0xcc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e72:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     e76:	20 91 a0 09 	lds	r18, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
     e7a:	74 2e       	mov	r7, r20

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e7c:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e80:	20 91 a1 09 	lds	r18, 0x09A1
     e84:	26 ff       	sbrs	r18, 6
     e86:	fc cf       	rjmp	.-8      	; 0xe80 <MemoryStore+0xe2>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e88:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     e8c:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e90:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e94:	20 91 a1 09 	lds	r18, 0x09A1
     e98:	26 ff       	sbrs	r18, 6
     e9a:	fc cf       	rjmp	.-8      	; 0xe94 <MemoryStore+0xf6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e9c:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     ea0:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     ea4:	c0 92 65 06 	sts	0x0665, r12

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     ea8:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     eac:	b0 92 a0 09 	sts	0x09A0, r11

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     eb0:	20 91 a1 09 	lds	r18, 0x09A1
     eb4:	26 ff       	sbrs	r18, 6
     eb6:	fc cf       	rjmp	.-8      	; 0xeb0 <MemoryStore+0x112>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     eb8:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     ebc:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ec0:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ec4:	20 91 a1 09 	lds	r18, 0x09A1
     ec8:	26 ff       	sbrs	r18, 6
     eca:	fc cf       	rjmp	.-8      	; 0xec4 <MemoryStore+0x126>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ecc:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     ed0:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     ed4:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWriteBuffer(const void* Buffer, uint8_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     ed8:	27 ff       	sbrs	r18, 7
     eda:	e6 cf       	rjmp	.-52     	; 0xea8 <MemoryStore+0x10a>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     edc:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ee0:	50 92 a0 09 	sts	0x09A0, r5

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ee4:	20 91 a1 09 	lds	r18, 0x09A1
     ee8:	26 ff       	sbrs	r18, 6
     eea:	fc cf       	rjmp	.-8      	; 0xee4 <MemoryStore+0x146>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     eec:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     ef0:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ef4:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ef8:	20 91 a1 09 	lds	r18, 0x09A1
     efc:	26 ff       	sbrs	r18, 6
     efe:	fc cf       	rjmp	.-8      	; 0xef8 <MemoryStore+0x15a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f00:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f04:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f08:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f0c:	20 91 a1 09 	lds	r18, 0x09A1
     f10:	26 ff       	sbrs	r18, 6
     f12:	fc cf       	rjmp	.-8      	; 0xf0c <MemoryStore+0x16e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f14:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f18:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f1c:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f20:	20 91 a1 09 	lds	r18, 0x09A1
     f24:	26 ff       	sbrs	r18, 6
     f26:	fc cf       	rjmp	.-8      	; 0xf20 <MemoryStore+0x182>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f28:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f2c:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     f30:	20 97       	sbiw	r28, 0x00	; 0
     f32:	99 f0       	breq	.+38     	; 0xf5a <MemoryStore+0x1bc>
{
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}

void MemoryStore(void)
     f34:	9e 01       	movw	r18, r28
     f36:	2e 56       	subi	r18, 0x6E	; 110
     f38:	3f 4d       	sbci	r19, 0xDF	; 223
	}
}

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;
     f3a:	e2 e9       	ldi	r30, 0x92	; 146
     f3c:	f0 e2       	ldi	r31, 0x20	; 32

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     f3e:	41 91       	ld	r20, Z+
     f40:	40 93 a0 09 	sts	0x09A0, r20
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f44:	40 91 a1 09 	lds	r20, 0x09A1
     f48:	46 ff       	sbrs	r20, 6
     f4a:	fc cf       	rjmp	.-8      	; 0xf44 <MemoryStore+0x1a6>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f4c:	d0 92 a1 09 	sts	0x09A1, r13
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
     f50:	40 91 a0 09 	lds	r20, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     f54:	e2 17       	cp	r30, r18
     f56:	f3 07       	cpc	r31, r19
     f58:	91 f7       	brne	.-28     	; 0xf3e <MemoryStore+0x1a0>
	SPITransferByte(FLASH_CMD_BUF1_WRITE);
	SPITransferByte( 0 );
	SPITransferByte( 0 );
	SPITransferByte( Address );
	SPIWriteBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f5a:	c0 92 65 06 	sts	0x0665, r12

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f5e:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f62:	b0 92 a0 09 	sts	0x09A0, r11

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f66:	20 91 a1 09 	lds	r18, 0x09A1
     f6a:	26 ff       	sbrs	r18, 6
     f6c:	fc cf       	rjmp	.-8      	; 0xf66 <MemoryStore+0x1c8>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f6e:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f72:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f76:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f7a:	20 91 a1 09 	lds	r18, 0x09A1
     f7e:	26 ff       	sbrs	r18, 6
     f80:	fc cf       	rjmp	.-8      	; 0xf7a <MemoryStore+0x1dc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f82:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f86:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f8a:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashBufferToMemory(uint16_t PageAddress)
{
	while(FlashIsBusy());
     f8e:	27 ff       	sbrs	r18, 7
     f90:	e6 cf       	rjmp	.-52     	; 0xf5e <MemoryStore+0x1c0>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f92:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f96:	60 92 a0 09 	sts	0x09A0, r6

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f9a:	20 91 a1 09 	lds	r18, 0x09A1
     f9e:	26 ff       	sbrs	r18, 6
     fa0:	fc cf       	rjmp	.-8      	; 0xf9a <MemoryStore+0x1fc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fa2:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     fa6:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     faa:	80 92 a0 09 	sts	0x09A0, r8

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fae:	20 91 a1 09 	lds	r18, 0x09A1
     fb2:	26 ff       	sbrs	r18, 6
     fb4:	fc cf       	rjmp	.-8      	; 0xfae <MemoryStore+0x210>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fb6:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     fba:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     fbe:	70 92 a0 09 	sts	0x09A0, r7

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fc2:	20 91 a1 09 	lds	r18, 0x09A1
     fc6:	26 ff       	sbrs	r18, 6
     fc8:	fc cf       	rjmp	.-8      	; 0xfc2 <MemoryStore+0x224>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fca:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     fce:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     fd2:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fd6:	20 91 a1 09 	lds	r18, 0x09A1
     fda:	26 ff       	sbrs	r18, 6
     fdc:	fc cf       	rjmp	.-8      	; 0xfd6 <MemoryStore+0x238>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fde:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     fe2:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_BUF1_TO_MEM_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     fe6:	c0 92 65 06 	sts	0x0665, r12

		FlashMemoryToBuffer(PageAddress);
		FlashWriteBuffer(Buffer, ByteAddress, PageBytes);
		FlashBufferToMemory(PageAddress);

		ByteCount -= PageBytes;
     fea:	0c 1b       	sub	r16, r28
     fec:	1d 0b       	sbc	r17, r29
		Address += PageBytes;
     fee:	8c 0f       	add	r24, r28
     ff0:	9d 1f       	adc	r25, r29
     ff2:	a1 1d       	adc	r26, r1
     ff4:	b1 1d       	adc	r27, r1
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
     ff6:	01 15       	cp	r16, r1
     ff8:	11 05       	cpc	r17, r1
     ffa:	09 f0       	breq	.+2      	; 0xffe <MemoryStore+0x260>
     ffc:	01 cf       	rjmp	.-510    	; 0xe00 <MemoryStore+0x62>

void MemoryStore(void)
{
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	bf 90       	pop	r11
    1010:	af 90       	pop	r10
    1012:	9f 90       	pop	r9
    1014:	8f 90       	pop	r8
    1016:	7f 90       	pop	r7
    1018:	6f 90       	pop	r6
    101a:	5f 90       	pop	r5
    101c:	4f 90       	pop	r4
    101e:	08 95       	ret

00001020 <MemoryUploadBlock>:

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    1020:	2f 92       	push	r2
    1022:	3f 92       	push	r3
    1024:	4f 92       	push	r4
    1026:	5f 92       	push	r5
    1028:	6f 92       	push	r6
    102a:	7f 92       	push	r7
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	2e 97       	sbiw	r28, 0x0e	; 14
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	f9 01       	movw	r30, r18
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    1050:	41 15       	cp	r20, r1
    1052:	24 e0       	ldi	r18, 0x04	; 4
    1054:	52 07       	cpc	r21, r18
    1056:	61 05       	cpc	r22, r1
    1058:	71 05       	cpc	r23, r1
    105a:	08 f0       	brcs	.+2      	; 0x105e <MemoryUploadBlock+0x3e>
    105c:	a6 c1       	rjmp	.+844    	; 0x13aa <MemoryUploadBlock+0x38a>
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    105e:	00 91 fd 24 	lds	r16, 0x24FD
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	aa e0       	ldi	r26, 0x0A	; 10
    106a:	00 0f       	add	r16, r16
    106c:	11 1f       	adc	r17, r17
    106e:	22 1f       	adc	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	aa 95       	dec	r26
    1074:	d1 f7       	brne	.-12     	; 0x106a <MemoryUploadBlock+0x4a>
    1076:	04 0f       	add	r16, r20
    1078:	15 1f       	adc	r17, r21
    107a:	26 1f       	adc	r18, r22
    107c:	37 1f       	adc	r19, r23
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    107e:	c1 2c       	mov	r12, r1
    1080:	b4 e0       	ldi	r27, 0x04	; 4
    1082:	db 2e       	mov	r13, r27
    1084:	e1 2c       	mov	r14, r1
    1086:	f1 2c       	mov	r15, r1
    1088:	c4 1a       	sub	r12, r20
    108a:	d5 0a       	sbc	r13, r21
    108c:	e6 0a       	sbc	r14, r22
    108e:	f7 0a       	sbc	r15, r23
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    1090:	4f 01       	movw	r8, r30
    1092:	a1 2c       	mov	r10, r1
    1094:	b1 2c       	mov	r11, r1
    1096:	8d 82       	std	Y+5, r8	; 0x05
    1098:	9e 82       	std	Y+6, r9	; 0x06
    109a:	af 82       	std	Y+7, r10	; 0x07
    109c:	b8 86       	std	Y+8, r11	; 0x08
    109e:	c8 14       	cp	r12, r8
    10a0:	d9 04       	cpc	r13, r9
    10a2:	ea 04       	cpc	r14, r10
    10a4:	fb 04       	cpc	r15, r11
    10a6:	08 f4       	brcc	.+2      	; 0x10aa <MemoryUploadBlock+0x8a>
    10a8:	97 c1       	rjmp	.+814    	; 0x13d8 <MemoryUploadBlock+0x3b8>
    10aa:	ad 81       	ldd	r26, Y+5	; 0x05
    10ac:	be 81       	ldd	r27, Y+6	; 0x06
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
    10ae:	10 97       	sbiw	r26, 0x00	; 0
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <MemoryUploadBlock+0x94>
    10b2:	7b c1       	rjmp	.+758    	; 0x13aa <MemoryUploadBlock+0x38a>
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
    10b4:	e1 2c       	mov	r14, r1
    10b6:	ff 24       	eor	r15, r15
    10b8:	f3 94       	inc	r15

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    10ba:	e0 e1       	ldi	r30, 0x10	; 16
    10bc:	9e 2e       	mov	r9, r30

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    10be:	f7 ed       	ldi	r31, 0xD7	; 215
    10c0:	df 2e       	mov	r13, r31

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    10c2:	e0 e4       	ldi	r30, 0x40	; 64
    10c4:	ae 2e       	mov	r10, r30

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    10c6:	f0 e1       	ldi	r31, 0x10	; 16
    10c8:	cf 2e       	mov	r12, r31

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    10ca:	e7 ed       	ldi	r30, 0xD7	; 215
    10cc:	7e 2e       	mov	r7, r30
    10ce:	f3 e5       	ldi	r31, 0x53	; 83
    10d0:	6f 2e       	mov	r6, r31
    10d2:	e4 e8       	ldi	r30, 0x84	; 132
    10d4:	8e 2e       	mov	r8, r30
    10d6:	f3 e8       	ldi	r31, 0x83	; 131
    10d8:	bf 2e       	mov	r11, r31
    10da:	09 83       	std	Y+1, r16	; 0x01
    10dc:	1a 83       	std	Y+2, r17	; 0x02
    10de:	2b 83       	std	Y+3, r18	; 0x03
    10e0:	3c 83       	std	Y+4, r19	; 0x04
    10e2:	ad 87       	std	Y+13, r26	; 0x0d
    10e4:	be 87       	std	Y+14, r27	; 0x0e
    10e6:	49 87       	std	Y+9, r20	; 0x09
    10e8:	5a 87       	std	Y+10, r21	; 0x0a
    10ea:	6b 87       	std	Y+11, r22	; 0x0b
    10ec:	7c 87       	std	Y+12, r23	; 0x0c
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
    10ee:	49 81       	ldd	r20, Y+1	; 0x01
    10f0:	5a 81       	ldd	r21, Y+2	; 0x02
    10f2:	6b 81       	ldd	r22, Y+3	; 0x03
    10f4:	7c 81       	ldd	r23, Y+4	; 0x04
    10f6:	05 2f       	mov	r16, r21
    10f8:	16 2f       	mov	r17, r22
    10fa:	27 2f       	mov	r18, r23
    10fc:	33 27       	eor	r19, r19
    10fe:	41 2f       	mov	r20, r17
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
    1100:	e9 81       	ldd	r30, Y+1	; 0x01
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
    1102:	b7 01       	movw	r22, r14
    1104:	6e 1b       	sub	r22, r30
    1106:	71 09       	sbc	r23, r1
    1108:	ad 85       	ldd	r26, Y+13	; 0x0d
    110a:	be 85       	ldd	r27, Y+14	; 0x0e
    110c:	a6 17       	cp	r26, r22
    110e:	b7 07       	cpc	r27, r23
    1110:	08 f4       	brcc	.+2      	; 0x1114 <MemoryUploadBlock+0xf4>
    1112:	bd 01       	movw	r22, r26

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1114:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1118:	70 92 a0 09 	sts	0x09A0, r7

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    111c:	50 91 a1 09 	lds	r21, 0x09A1
    1120:	56 ff       	sbrs	r21, 6
    1122:	fc cf       	rjmp	.-8      	; 0x111c <MemoryUploadBlock+0xfc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1124:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    1128:	50 91 a0 09 	lds	r21, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    112c:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1130:	50 91 a1 09 	lds	r21, 0x09A1
    1134:	56 ff       	sbrs	r21, 6
    1136:	fc cf       	rjmp	.-8      	; 0x1130 <MemoryUploadBlock+0x110>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1138:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    113c:	50 91 a0 09 	lds	r21, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1140:	90 92 65 06 	sts	0x0665, r9
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashMemoryToBuffer(uint16_t PageAddress)
{
	while(FlashIsBusy());
    1144:	57 ff       	sbrs	r21, 7
    1146:	e6 cf       	rjmp	.-52     	; 0x1114 <MemoryUploadBlock+0xf4>
    1148:	ad 87       	std	Y+13, r26	; 0x0d
    114a:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    114c:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1150:	60 92 a0 09 	sts	0x09A0, r6
    1154:	ad 85       	ldd	r26, Y+13	; 0x0d
    1156:	be 85       	ldd	r27, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1158:	50 91 a1 09 	lds	r21, 0x09A1
    115c:	56 ff       	sbrs	r21, 6
    115e:	fc cf       	rjmp	.-8      	; 0x1158 <MemoryUploadBlock+0x138>
    1160:	ad 87       	std	Y+13, r26	; 0x0d
    1162:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1164:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    1168:	50 91 a0 09 	lds	r21, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    116c:	40 93 a0 09 	sts	0x09A0, r20
    1170:	ad 85       	ldd	r26, Y+13	; 0x0d
    1172:	be 85       	ldd	r27, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1174:	50 91 a1 09 	lds	r21, 0x09A1
    1178:	56 ff       	sbrs	r21, 6
    117a:	fc cf       	rjmp	.-8      	; 0x1174 <MemoryUploadBlock+0x154>
    117c:	ad 87       	std	Y+13, r26	; 0x0d
    117e:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1180:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    1184:	50 91 a0 09 	lds	r21, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
    1188:	50 2f       	mov	r21, r16

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    118a:	00 93 a0 09 	sts	0x09A0, r16
    118e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1190:	be 85       	ldd	r27, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1192:	20 91 a1 09 	lds	r18, 0x09A1
    1196:	26 ff       	sbrs	r18, 6
    1198:	fc cf       	rjmp	.-8      	; 0x1192 <MemoryUploadBlock+0x172>
    119a:	ad 87       	std	Y+13, r26	; 0x0d
    119c:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    119e:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    11a2:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11a6:	10 92 a0 09 	sts	0x09A0, r1
    11aa:	ad 85       	ldd	r26, Y+13	; 0x0d
    11ac:	be 85       	ldd	r27, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11ae:	20 91 a1 09 	lds	r18, 0x09A1
    11b2:	26 ff       	sbrs	r18, 6
    11b4:	fc cf       	rjmp	.-8      	; 0x11ae <MemoryUploadBlock+0x18e>
    11b6:	ad 87       	std	Y+13, r26	; 0x0d
    11b8:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11ba:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    11be:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    11c2:	90 92 65 06 	sts	0x0665, r9
    11c6:	ad 85       	ldd	r26, Y+13	; 0x0d
    11c8:	be 85       	ldd	r27, Y+14	; 0x0e

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    11ca:	90 92 66 06 	sts	0x0666, r9

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11ce:	d0 92 a0 09 	sts	0x09A0, r13

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11d2:	20 91 a1 09 	lds	r18, 0x09A1
    11d6:	26 ff       	sbrs	r18, 6
    11d8:	fc cf       	rjmp	.-8      	; 0x11d2 <MemoryUploadBlock+0x1b2>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11da:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    11de:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11e2:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11e6:	20 91 a1 09 	lds	r18, 0x09A1
    11ea:	26 ff       	sbrs	r18, 6
    11ec:	fc cf       	rjmp	.-8      	; 0x11e6 <MemoryUploadBlock+0x1c6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11ee:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    11f2:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    11f6:	90 92 65 06 	sts	0x0665, r9
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWriteBuffer(const void* Buffer, uint8_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
    11fa:	27 ff       	sbrs	r18, 7
    11fc:	e6 cf       	rjmp	.-52     	; 0x11ca <MemoryUploadBlock+0x1aa>
    11fe:	ad 87       	std	Y+13, r26	; 0x0d
    1200:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1202:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1206:	80 92 a0 09 	sts	0x09A0, r8
    120a:	ad 85       	ldd	r26, Y+13	; 0x0d
    120c:	be 85       	ldd	r27, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    120e:	20 91 a1 09 	lds	r18, 0x09A1
    1212:	26 ff       	sbrs	r18, 6
    1214:	fc cf       	rjmp	.-8      	; 0x120e <MemoryUploadBlock+0x1ee>
    1216:	ad 87       	std	Y+13, r26	; 0x0d
    1218:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    121a:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    121e:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1222:	10 92 a0 09 	sts	0x09A0, r1
    1226:	ad 85       	ldd	r26, Y+13	; 0x0d
    1228:	be 85       	ldd	r27, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    122a:	20 91 a1 09 	lds	r18, 0x09A1
    122e:	26 ff       	sbrs	r18, 6
    1230:	fc cf       	rjmp	.-8      	; 0x122a <MemoryUploadBlock+0x20a>
    1232:	ad 87       	std	Y+13, r26	; 0x0d
    1234:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1236:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    123a:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    123e:	10 92 a0 09 	sts	0x09A0, r1
    1242:	ad 85       	ldd	r26, Y+13	; 0x0d
    1244:	be 85       	ldd	r27, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1246:	20 91 a1 09 	lds	r18, 0x09A1
    124a:	26 ff       	sbrs	r18, 6
    124c:	fc cf       	rjmp	.-8      	; 0x1246 <MemoryUploadBlock+0x226>
    124e:	ad 87       	std	Y+13, r26	; 0x0d
    1250:	be 87       	std	Y+14, r27	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1252:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    1256:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    125a:	e0 93 a0 09 	sts	0x09A0, r30
    125e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1260:	fe 85       	ldd	r31, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1262:	20 91 a1 09 	lds	r18, 0x09A1
    1266:	26 ff       	sbrs	r18, 6
    1268:	fc cf       	rjmp	.-8      	; 0x1262 <MemoryUploadBlock+0x242>
    126a:	ed 87       	std	Y+13, r30	; 0x0d
    126c:	fe 87       	std	Y+14, r31	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    126e:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    1272:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    1276:	61 15       	cp	r22, r1
    1278:	71 05       	cpc	r23, r1
    127a:	b1 f0       	breq	.+44     	; 0x12a8 <MemoryUploadBlock+0x288>
{
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
    127c:	9c 01       	movw	r18, r24
    127e:	26 0f       	add	r18, r22
    1280:	37 1f       	adc	r19, r23
	}
}

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;
    1282:	fc 01       	movw	r30, r24
    1284:	0d 85       	ldd	r16, Y+13	; 0x0d
    1286:	1e 85       	ldd	r17, Y+14	; 0x0e

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
    1288:	a1 91       	ld	r26, Z+
    128a:	a0 93 a0 09 	sts	0x09A0, r26
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    128e:	a0 91 a1 09 	lds	r26, 0x09A1
    1292:	a6 ff       	sbrs	r26, 6
    1294:	fc cf       	rjmp	.-8      	; 0x128e <MemoryUploadBlock+0x26e>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1296:	a0 92 a1 09 	sts	0x09A1, r10
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
    129a:	a0 91 a0 09 	lds	r26, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    129e:	e2 17       	cp	r30, r18
    12a0:	f3 07       	cpc	r31, r19
    12a2:	91 f7       	brne	.-28     	; 0x1288 <MemoryUploadBlock+0x268>
    12a4:	0d 87       	std	Y+13, r16	; 0x0d
    12a6:	1e 87       	std	Y+14, r17	; 0x0e
	SPITransferByte(FLASH_CMD_BUF1_WRITE);
	SPITransferByte( 0 );
	SPITransferByte( 0 );
	SPITransferByte( Address );
	SPIWriteBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    12a8:	90 92 65 06 	sts	0x0665, r9
    12ac:	ed 85       	ldd	r30, Y+13	; 0x0d
    12ae:	fe 85       	ldd	r31, Y+14	; 0x0e

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    12b0:	90 92 66 06 	sts	0x0666, r9

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    12b4:	d0 92 a0 09 	sts	0x09A0, r13

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    12b8:	20 91 a1 09 	lds	r18, 0x09A1
    12bc:	26 ff       	sbrs	r18, 6
    12be:	fc cf       	rjmp	.-8      	; 0x12b8 <MemoryUploadBlock+0x298>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    12c0:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    12c4:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    12c8:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    12cc:	20 91 a1 09 	lds	r18, 0x09A1
    12d0:	26 ff       	sbrs	r18, 6
    12d2:	fc cf       	rjmp	.-8      	; 0x12cc <MemoryUploadBlock+0x2ac>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    12d4:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    12d8:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    12dc:	90 92 65 06 	sts	0x0665, r9
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashBufferToMemory(uint16_t PageAddress)
{
	while(FlashIsBusy());
    12e0:	27 ff       	sbrs	r18, 7
    12e2:	e6 cf       	rjmp	.-52     	; 0x12b0 <MemoryUploadBlock+0x290>
    12e4:	ed 87       	std	Y+13, r30	; 0x0d
    12e6:	fe 87       	std	Y+14, r31	; 0x0e

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    12e8:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    12ec:	b0 92 a0 09 	sts	0x09A0, r11
    12f0:	ed 85       	ldd	r30, Y+13	; 0x0d
    12f2:	fe 85       	ldd	r31, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    12f4:	20 91 a1 09 	lds	r18, 0x09A1
    12f8:	26 ff       	sbrs	r18, 6
    12fa:	fc cf       	rjmp	.-8      	; 0x12f4 <MemoryUploadBlock+0x2d4>
    12fc:	ed 87       	std	Y+13, r30	; 0x0d
    12fe:	fe 87       	std	Y+14, r31	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1300:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    1304:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1308:	40 93 a0 09 	sts	0x09A0, r20
    130c:	ed 85       	ldd	r30, Y+13	; 0x0d
    130e:	fe 85       	ldd	r31, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1310:	20 91 a1 09 	lds	r18, 0x09A1
    1314:	26 ff       	sbrs	r18, 6
    1316:	fc cf       	rjmp	.-8      	; 0x1310 <MemoryUploadBlock+0x2f0>
    1318:	ed 87       	std	Y+13, r30	; 0x0d
    131a:	fe 87       	std	Y+14, r31	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    131c:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    1320:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1324:	50 93 a0 09 	sts	0x09A0, r21
    1328:	4d 85       	ldd	r20, Y+13	; 0x0d
    132a:	5e 85       	ldd	r21, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    132c:	20 91 a1 09 	lds	r18, 0x09A1
    1330:	26 ff       	sbrs	r18, 6
    1332:	fc cf       	rjmp	.-8      	; 0x132c <MemoryUploadBlock+0x30c>
    1334:	4d 87       	std	Y+13, r20	; 0x0d
    1336:	5e 87       	std	Y+14, r21	; 0x0e

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1338:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    133c:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1340:	10 92 a0 09 	sts	0x09A0, r1
    1344:	4d 85       	ldd	r20, Y+13	; 0x0d
    1346:	5e 85       	ldd	r21, Y+14	; 0x0e

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1348:	20 91 a1 09 	lds	r18, 0x09A1
    134c:	26 ff       	sbrs	r18, 6
    134e:	fc cf       	rjmp	.-8      	; 0x1348 <MemoryUploadBlock+0x328>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1350:	a0 92 a1 09 	sts	0x09A1, r10

	return MEMORY_FLASH_USART.DATA;
    1354:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_BUF1_TO_MEM_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1358:	90 92 65 06 	sts	0x0665, r9

		FlashMemoryToBuffer(PageAddress);
		FlashWriteBuffer(Buffer, ByteAddress, PageBytes);
		FlashBufferToMemory(PageAddress);

		ByteCount -= PageBytes;
    135c:	46 1b       	sub	r20, r22
    135e:	57 0b       	sbc	r21, r23
    1360:	4d 87       	std	Y+13, r20	; 0x0d
    1362:	5e 87       	std	Y+14, r21	; 0x0e
		Address += PageBytes;
    1364:	29 81       	ldd	r18, Y+1	; 0x01
    1366:	3a 81       	ldd	r19, Y+2	; 0x02
    1368:	4b 81       	ldd	r20, Y+3	; 0x03
    136a:	5c 81       	ldd	r21, Y+4	; 0x04
    136c:	26 0f       	add	r18, r22
    136e:	37 1f       	adc	r19, r23
    1370:	41 1d       	adc	r20, r1
    1372:	51 1d       	adc	r21, r1
    1374:	29 83       	std	Y+1, r18	; 0x01
    1376:	3a 83       	std	Y+2, r19	; 0x02
    1378:	4b 83       	std	Y+3, r20	; 0x03
    137a:	5c 83       	std	Y+4, r21	; 0x04
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
    137c:	4d 85       	ldd	r20, Y+13	; 0x0d
    137e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1380:	45 2b       	or	r20, r21
    1382:	09 f0       	breq	.+2      	; 0x1386 <MemoryUploadBlock+0x366>
    1384:	b4 ce       	rjmp	.-664    	; 0x10ee <MemoryUploadBlock+0xce>
    1386:	49 85       	ldd	r20, Y+9	; 0x09
    1388:	5a 85       	ldd	r21, Y+10	; 0x0a
    138a:	6b 85       	ldd	r22, Y+11	; 0x0b
    138c:	7c 85       	ldd	r23, Y+12	; 0x0c

    	/* Store into flash */
    	FlashWrite(Buffer, FlashAddress, ByteCount);

		/* Store to local memory */
    	uint8_t* DstPtr = &Memory[BlockAddress];
    138e:	da 01       	movw	r26, r20
    1390:	ae 56       	subi	r26, 0x6E	; 110
    1392:	bf 4d       	sbci	r27, 0xDF	; 223
    1394:	9c 01       	movw	r18, r24
{
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	8a 0f       	add	r24, r26
    139c:	9b 1f       	adc	r25, r27
    139e:	f9 01       	movw	r30, r18
		/* Store to local memory */
    	uint8_t* DstPtr = &Memory[BlockAddress];
    	uint8_t* SrcPtr = (uint8_t*) Buffer;

    	while(ByteCount--) {
    		*DstPtr++ = *SrcPtr++;
    13a0:	21 91       	ld	r18, Z+
    13a2:	2d 93       	st	X+, r18

		/* Store to local memory */
    	uint8_t* DstPtr = &Memory[BlockAddress];
    	uint8_t* SrcPtr = (uint8_t*) Buffer;

    	while(ByteCount--) {
    13a4:	a8 17       	cp	r26, r24
    13a6:	b9 07       	cpc	r27, r25
    13a8:	d9 f7       	brne	.-10     	; 0x13a0 <MemoryUploadBlock+0x380>
    	}

		return true;
    }

}
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	2e 96       	adiw	r28, 0x0e	; 14
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	bf 90       	pop	r11
    13c4:	af 90       	pop	r10
    13c6:	9f 90       	pop	r9
    13c8:	8f 90       	pop	r8
    13ca:	7f 90       	pop	r7
    13cc:	6f 90       	pop	r6
    13ce:	5f 90       	pop	r5
    13d0:	4f 90       	pop	r4
    13d2:	3f 90       	pop	r3
    13d4:	2f 90       	pop	r2
    13d6:	08 95       	ret
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    13d8:	cd 82       	std	Y+5, r12	; 0x05
    13da:	de 82       	std	Y+6, r13	; 0x06
    13dc:	ef 82       	std	Y+7, r14	; 0x07
    13de:	f8 86       	std	Y+8, r15	; 0x08
    13e0:	64 ce       	rjmp	.-824    	; 0x10aa <MemoryUploadBlock+0x8a>

000013e2 <MemoryDownloadBlock>:
    }

}

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	69 01       	movw	r12, r18
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    13f0:	41 15       	cp	r20, r1
    13f2:	24 e0       	ldi	r18, 0x04	; 4
    13f4:	52 07       	cpc	r21, r18
    13f6:	61 05       	cpc	r22, r1
    13f8:	71 05       	cpc	r23, r1
    13fa:	40 f5       	brcc	.+80     	; 0x144c <MemoryDownloadBlock+0x6a>
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    13fc:	00 e0       	ldi	r16, 0x00	; 0
    13fe:	14 e0       	ldi	r17, 0x04	; 4
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	04 1b       	sub	r16, r20
    1406:	15 0b       	sbc	r17, r21
    1408:	26 0b       	sbc	r18, r22
    140a:	37 0b       	sbc	r19, r23
    	//uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    140c:	e1 2c       	mov	r14, r1
    140e:	f1 2c       	mov	r15, r1
    1410:	0c 15       	cp	r16, r12
    1412:	1d 05       	cpc	r17, r13
    1414:	2e 05       	cpc	r18, r14
    1416:	3f 05       	cpc	r19, r15
    1418:	b0 f0       	brcs	.+44     	; 0x1446 <MemoryDownloadBlock+0x64>

    	/* Output local memory contents */
    	uint8_t* DstPtr = (uint8_t*) Buffer;
    	uint8_t* SrcPtr = &Memory[BlockAddress];
    141a:	4e 56       	subi	r20, 0x6E	; 110
    141c:	5f 4d       	sbci	r21, 0xDF	; 223

    	while(ByteCount--) {
    141e:	c1 14       	cp	r12, r1
    1420:	d1 04       	cpc	r13, r1
    1422:	49 f0       	breq	.+18     	; 0x1436 <MemoryDownloadBlock+0x54>
    1424:	da 01       	movw	r26, r20
		return true;
    }

}

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
    1426:	c8 0e       	add	r12, r24
    1428:	d9 1e       	adc	r13, r25
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    	//uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);

    	/* Output local memory contents */
    	uint8_t* DstPtr = (uint8_t*) Buffer;
    142a:	fc 01       	movw	r30, r24
    	uint8_t* SrcPtr = &Memory[BlockAddress];

    	while(ByteCount--) {
    		*DstPtr++ = *SrcPtr++;
    142c:	8d 91       	ld	r24, X+
    142e:	81 93       	st	Z+, r24

    	/* Output local memory contents */
    	uint8_t* DstPtr = (uint8_t*) Buffer;
    	uint8_t* SrcPtr = &Memory[BlockAddress];

    	while(ByteCount--) {
    1430:	ec 15       	cp	r30, r12
    1432:	fd 05       	cpc	r31, r13
    1434:	d9 f7       	brne	.-10     	; 0x142c <MemoryDownloadBlock+0x4a>
    		*DstPtr++ = *SrcPtr++;
    	}

        return true;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    }
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	08 95       	ret
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    	//uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    1446:	68 01       	movw	r12, r16
    1448:	79 01       	movw	r14, r18
    144a:	e7 cf       	rjmp	.-50     	; 0x141a <MemoryDownloadBlock+0x38>

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    144c:	80 e0       	ldi	r24, 0x00	; 0
    		*DstPtr++ = *SrcPtr++;
    	}

        return true;
    }
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	08 95       	ret

0000145c <ButtonInit>:
    [BUTTON_ACTION_RECALL_MEM] = "RECALL_MEM",
};

void ButtonInit(void)
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
    145c:	e0 e0       	ldi	r30, 0x00	; 0
    145e:	f6 e0       	ldi	r31, 0x06	; 6
    1460:	80 e4       	ldi	r24, 0x40	; 64
    1462:	82 83       	std	Z+2, r24	; 0x02
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
    1464:	88 e1       	ldi	r24, 0x18	; 24
    1466:	86 8b       	std	Z+22, r24	; 0x16
    1468:	08 95       	ret

0000146a <ButtonTick>:
}

void ButtonTick(void)
{
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	a0 97       	sbiw	r28, 0x20	; 32
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	de bf       	out	0x3e, r29	; 62
    static uint8_t LastButtonState = 0;
    uint8_t ThisButtonState = ~BUTTON_PORT.IN;
    147e:	80 91 08 06 	lds	r24, 0x0608
    1482:	80 95       	com	r24
    uint8_t ThisButtonChange = ThisButtonState ^ LastButtonState;
    1484:	90 91 92 24 	lds	r25, 0x2492
    1488:	98 27       	eor	r25, r24
    uint8_t ThisButtonPress = ThisButtonChange & ThisButtonState;
    LastButtonState = ThisButtonState;
    148a:	80 93 92 24 	sts	0x2492, r24
void ButtonTick(void)
{
    static uint8_t LastButtonState = 0;
    uint8_t ThisButtonState = ~BUTTON_PORT.IN;
    uint8_t ThisButtonChange = ThisButtonState ^ LastButtonState;
    uint8_t ThisButtonPress = ThisButtonChange & ThisButtonState;
    148e:	80 74       	andi	r24, 0x40	; 64
    LastButtonState = ThisButtonState;

    if ( ThisButtonPress & BUTTON_MASK ) {
    1490:	89 23       	and	r24, r25
    1492:	d9 f0       	breq	.+54     	; 0x14ca <ButtonTick+0x60>
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;
    1494:	e0 91 fe 24 	lds	r30, 0x24FE
    1498:	f0 91 ff 24 	lds	r31, 0x24FF
    149c:	80 81       	ld	r24, Z

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	e9 f0       	breq	.+58     	; 0x14dc <ButtonTick+0x72>
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
                UidBuffer[i] = RandomGetByte();
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	a9 f1       	breq	.+106    	; 0x1510 <ButtonTick+0xa6>
                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	09 f4       	brne	.+2      	; 0x14ac <ButtonTick+0x42>
    14aa:	54 c0       	rjmp	.+168    	; 0x1554 <ButtonTick+0xea>
                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <ButtonTick+0x48>
    14b0:	77 c0       	rjmp	.+238    	; 0x15a0 <ButtonTick+0x136>
                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
    14b2:	85 30       	cpi	r24, 0x05	; 5
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <ButtonTick+0x4e>
    14b6:	96 c0       	rjmp	.+300    	; 0x15e4 <ButtonTick+0x17a>
                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
    14b8:	86 30       	cpi	r24, 0x06	; 6
    14ba:	09 f4       	brne	.+2      	; 0x14be <ButtonTick+0x54>
    14bc:	b5 c0       	rjmp	.+362    	; 0x1628 <ButtonTick+0x1be>
        	SettingsCycle();
        } else if (ButtonAction == BUTTON_ACTION_STORE_MEM) {
    14be:	87 30       	cpi	r24, 0x07	; 7
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <ButtonTick+0x5a>
    14c2:	6a c0       	rjmp	.+212    	; 0x1598 <ButtonTick+0x12e>
        	MemoryStore();
        } else if (ButtonAction == BUTTON_ACTION_RECALL_MEM) {
    14c4:	88 30       	cpi	r24, 0x08	; 8
    14c6:	09 f4       	brne	.+2      	; 0x14ca <ButtonTick+0x60>
    14c8:	69 c0       	rjmp	.+210    	; 0x159c <ButtonTick+0x132>
        	MemoryRecall();
        }
    }
}
    14ca:	a0 96       	adiw	r28, 0x20	; 32
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	08 95       	ret
    if ( ThisButtonPress & BUTTON_MASK ) {
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
    14dc:	80 91 fb 24 	lds	r24, 0x24FB
    14e0:	88 23       	and	r24, r24
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <ButtonTick+0x7c>
    14e4:	a3 c0       	rjmp	.+326    	; 0x162c <ButtonTick+0x1c2>
    14e6:	f1 2c       	mov	r15, r1
    14e8:	8e 01       	movw	r16, r28
    14ea:	0f 5f       	subi	r16, 0xFF	; 255
    14ec:	1f 4f       	sbci	r17, 0xFF	; 255
                UidBuffer[i] = RandomGetByte();
    14ee:	88 da       	rcall	.-2800   	; 0xa00 <RandomGetByte>
    14f0:	f8 01       	movw	r30, r16
    14f2:	ef 0d       	add	r30, r15
    14f4:	f1 1d       	adc	r31, r1
    14f6:	80 83       	st	Z, r24
    if ( ThisButtonPress & BUTTON_MASK ) {
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
    14f8:	f3 94       	inc	r15
    14fa:	80 91 fb 24 	lds	r24, 0x24FB
    14fe:	f8 16       	cp	r15, r24
    1500:	b0 f3       	brcs	.-20     	; 0x14ee <ButtonTick+0x84>
INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    1502:	e0 91 f7 24 	lds	r30, 0x24F7
    1506:	f0 91 f8 24 	lds	r31, 0x24F8
    150a:	c8 01       	movw	r24, r16
    150c:	09 95       	icall
    150e:	dd cf       	rjmp	.-70     	; 0x14ca <ButtonTick+0x60>
INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    1510:	e0 91 f5 24 	lds	r30, 0x24F5
    1514:	f0 91 f6 24 	lds	r31, 0x24F6
    1518:	8e 01       	movw	r16, r28
    151a:	0f 5f       	subi	r16, 0xFF	; 255
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	c8 01       	movw	r24, r16
    1520:	09 95       	icall
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    1522:	20 91 fb 24 	lds	r18, 0x24FB
    1526:	22 23       	and	r18, r18
    1528:	61 f3       	breq	.-40     	; 0x1502 <ButtonTick+0x98>
    152a:	f8 01       	movw	r30, r16
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
}

void ButtonTick(void)
    152c:	ce 01       	movw	r24, r28
    152e:	02 96       	adiw	r24, 0x02	; 2
    1530:	21 50       	subi	r18, 0x01	; 1
    1532:	82 0f       	add	r24, r18
    1534:	91 1d       	adc	r25, r1
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    1536:	21 e0       	ldi	r18, 0x01	; 1
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
                if (Carry) {
    1538:	22 23       	and	r18, r18
    153a:	39 f0       	breq	.+14     	; 0x154a <ButtonTick+0xe0>
                    if (UidBuffer[i] == 0xFF) {
    153c:	30 81       	ld	r19, Z
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	3f 3f       	cpi	r19, 0xFF	; 255
    1542:	09 f0       	breq	.+2      	; 0x1546 <ButtonTick+0xdc>
    1544:	20 e0       	ldi	r18, 0x00	; 0
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
    1546:	3f 5f       	subi	r19, 0xFF	; 255
    1548:	30 83       	st	Z, r19
    154a:	31 96       	adiw	r30, 0x01	; 1
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    154c:	e8 17       	cp	r30, r24
    154e:	f9 07       	cpc	r31, r25
    1550:	99 f7       	brne	.-26     	; 0x1538 <ButtonTick+0xce>
    1552:	d7 cf       	rjmp	.-82     	; 0x1502 <ButtonTick+0x98>
    1554:	e0 91 f5 24 	lds	r30, 0x24F5
    1558:	f0 91 f6 24 	lds	r31, 0x24F6
    155c:	8e 01       	movw	r16, r28
    155e:	0f 5f       	subi	r16, 0xFF	; 255
    1560:	1f 4f       	sbci	r17, 0xFF	; 255
    1562:	c8 01       	movw	r24, r16
    1564:	09 95       	icall

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;
    1566:	20 91 fb 24 	lds	r18, 0x24FB
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    156a:	31 e0       	ldi	r19, 0x01	; 1
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    156c:	21 50       	subi	r18, 0x01	; 1
    156e:	48 f2       	brcs	.-110    	; 0x1502 <ButtonTick+0x98>
                if (Carry) {
    1570:	33 23       	and	r19, r19
    1572:	e1 f3       	breq	.-8      	; 0x156c <ButtonTick+0x102>
                    if (UidBuffer[i] == 0xFF) {
    1574:	82 2f       	mov	r24, r18
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	f8 01       	movw	r30, r16
    157a:	e8 0f       	add	r30, r24
    157c:	f9 1f       	adc	r31, r25
    157e:	40 81       	ld	r20, Z
    1580:	31 e0       	ldi	r19, 0x01	; 1
    1582:	4f 3f       	cpi	r20, 0xFF	; 255
    1584:	09 f0       	breq	.+2      	; 0x1588 <ButtonTick+0x11e>
    1586:	30 e0       	ldi	r19, 0x00	; 0
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
    1588:	f8 01       	movw	r30, r16
    158a:	e8 0f       	add	r30, r24
    158c:	f9 1f       	adc	r31, r25
    158e:	4f 5f       	subi	r20, 0xFF	; 255
    1590:	40 83       	st	Z, r20
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    1592:	21 50       	subi	r18, 0x01	; 1
    1594:	68 f7       	brcc	.-38     	; 0x1570 <ButtonTick+0x106>
    1596:	b5 cf       	rjmp	.-150    	; 0x1502 <ButtonTick+0x98>

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
        	SettingsCycle();
        } else if (ButtonAction == BUTTON_ACTION_STORE_MEM) {
        	MemoryStore();
    1598:	02 dc       	rcall	.-2044   	; 0xd9e <MemoryStore>
    159a:	97 cf       	rjmp	.-210    	; 0x14ca <ButtonTick+0x60>
        } else if (ButtonAction == BUTTON_ACTION_RECALL_MEM) {
        	MemoryRecall();
    159c:	0c db       	rcall	.-2536   	; 0xbb6 <MemoryRecall>
    159e:	95 cf       	rjmp	.-214    	; 0x14ca <ButtonTick+0x60>
    15a0:	e0 91 f5 24 	lds	r30, 0x24F5
    15a4:	f0 91 f6 24 	lds	r31, 0x24F6
    15a8:	8e 01       	movw	r16, r28
    15aa:	0f 5f       	subi	r16, 0xFF	; 255
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	c8 01       	movw	r24, r16
    15b0:	09 95       	icall
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    15b2:	20 91 fb 24 	lds	r18, 0x24FB
    15b6:	22 23       	and	r18, r18
    15b8:	09 f4       	brne	.+2      	; 0x15bc <ButtonTick+0x152>
    15ba:	a3 cf       	rjmp	.-186    	; 0x1502 <ButtonTick+0x98>
    15bc:	f8 01       	movw	r30, r16
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
}

void ButtonTick(void)
    15be:	ce 01       	movw	r24, r28
    15c0:	02 96       	adiw	r24, 0x02	; 2
    15c2:	21 50       	subi	r18, 0x01	; 1
    15c4:	82 0f       	add	r24, r18
    15c6:	91 1d       	adc	r25, r1
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    15c8:	21 e0       	ldi	r18, 0x01	; 1
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
                if (Carry) {
    15ca:	22 23       	and	r18, r18
    15cc:	31 f0       	breq	.+12     	; 0x15da <ButtonTick+0x170>
                    if (UidBuffer[i] == 0x00) {
    15ce:	30 81       	ld	r19, Z
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	31 11       	cpse	r19, r1
    15d4:	20 e0       	ldi	r18, 0x00	; 0
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
    15d6:	31 50       	subi	r19, 0x01	; 1
    15d8:	30 83       	st	Z, r19
    15da:	31 96       	adiw	r30, 0x01	; 1
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    15dc:	e8 17       	cp	r30, r24
    15de:	f9 07       	cpc	r31, r25
    15e0:	a1 f7       	brne	.-24     	; 0x15ca <ButtonTick+0x160>
    15e2:	8f cf       	rjmp	.-226    	; 0x1502 <ButtonTick+0x98>
    15e4:	e0 91 f5 24 	lds	r30, 0x24F5
    15e8:	f0 91 f6 24 	lds	r31, 0x24F6
    15ec:	8e 01       	movw	r16, r28
    15ee:	0f 5f       	subi	r16, 0xFF	; 255
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	c8 01       	movw	r24, r16
    15f4:	09 95       	icall

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;
    15f6:	20 91 fb 24 	lds	r18, 0x24FB
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    15fa:	31 e0       	ldi	r19, 0x01	; 1
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    15fc:	21 50       	subi	r18, 0x01	; 1
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <ButtonTick+0x198>
    1600:	80 cf       	rjmp	.-256    	; 0x1502 <ButtonTick+0x98>
                if (Carry) {
    1602:	33 23       	and	r19, r19
    1604:	d9 f3       	breq	.-10     	; 0x15fc <ButtonTick+0x192>
                    if (UidBuffer[i] == 0x00) {
    1606:	82 2f       	mov	r24, r18
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	f8 01       	movw	r30, r16
    160c:	e8 0f       	add	r30, r24
    160e:	f9 1f       	adc	r31, r25
    1610:	40 81       	ld	r20, Z
    1612:	31 e0       	ldi	r19, 0x01	; 1
    1614:	41 11       	cpse	r20, r1
    1616:	30 e0       	ldi	r19, 0x00	; 0
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
    1618:	f8 01       	movw	r30, r16
    161a:	e8 0f       	add	r30, r24
    161c:	f9 1f       	adc	r31, r25
    161e:	41 50       	subi	r20, 0x01	; 1
    1620:	40 83       	st	Z, r20
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    1622:	21 50       	subi	r18, 0x01	; 1
    1624:	70 f7       	brcc	.-36     	; 0x1602 <ButtonTick+0x198>
    1626:	6d cf       	rjmp	.-294    	; 0x1502 <ButtonTick+0x98>
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
        	SettingsCycle();
    1628:	cc d0       	rcall	.+408    	; 0x17c2 <SettingsCycle>
    162a:	4f cf       	rjmp	.-354    	; 0x14ca <ButtonTick+0x60>
    162c:	8e 01       	movw	r16, r28
    162e:	0f 5f       	subi	r16, 0xFF	; 255
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
    1632:	67 cf       	rjmp	.-306    	; 0x1502 <ButtonTick+0x98>

00001634 <ButtonGetActionList>:
        }
    }
}

void ButtonGetActionList(char* ListOut, uint16_t BufferSize)
{
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	ec 01       	movw	r28, r24
    uint8_t i;

    /* Account for '\0' */
    BufferSize--;
    163a:	61 50       	subi	r22, 0x01	; 1
    163c:	71 09       	sbc	r23, r1
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    1642:	3c e2       	ldi	r19, 0x2C	; 44

    /* Account for '\0' */
    BufferSize--;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
    1644:	fc 01       	movw	r30, r24
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	e2 95       	swap	r30
    164c:	f2 95       	swap	r31
    164e:	f0 7f       	andi	r31, 0xF0	; 240
    1650:	fe 27       	eor	r31, r30
    1652:	e0 7f       	andi	r30, 0xF0	; 240
    1654:	fe 27       	eor	r31, r30
    1656:	e9 50       	subi	r30, 0x09	; 9
    1658:	fd 4f       	sbci	r31, 0xFD	; 253
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    165a:	24 91       	lpm	r18, Z
    165c:	22 23       	and	r18, r18
    165e:	81 f0       	breq	.+32     	; 0x1680 <ButtonGetActionList+0x4c>
    1660:	61 32       	cpi	r22, 0x21	; 33
    1662:	71 05       	cpc	r23, r1
    1664:	68 f0       	brcs	.+26     	; 0x1680 <ButtonGetActionList+0x4c>
    1666:	de 01       	movw	r26, r28
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <ButtonGetActionList+0x3c>
    166a:	60 32       	cpi	r22, 0x20	; 32
    166c:	71 05       	cpc	r23, r1
    166e:	41 f0       	breq	.+16     	; 0x1680 <ButtonGetActionList+0x4c>
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ListOut++ = c;
    1670:	2d 93       	st	X+, r18
    1672:	ed 01       	movw	r28, r26
            ActionName++;
    1674:	31 96       	adiw	r30, 0x01	; 1
            BufferSize--;
    1676:	61 50       	subi	r22, 0x01	; 1
    1678:	71 09       	sbc	r23, r1

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    167a:	24 91       	lpm	r18, Z
    167c:	21 11       	cpse	r18, r1
    167e:	f5 cf       	rjmp	.-22     	; 0x166a <ButtonGetActionList+0x36>
            *ListOut++ = c;
            ActionName++;
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
    1680:	88 30       	cpi	r24, 0x08	; 8
    1682:	91 05       	cpc	r25, r1
    1684:	21 f4       	brne	.+8      	; 0x168e <ButtonGetActionList+0x5a>
            *ListOut++ = ',';
            BufferSize--;
        }
    }

    *ListOut = '\0';
    1686:	18 82       	st	Y, r1
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    168e:	39 93       	st	Y+, r19
            BufferSize--;
    1690:	61 50       	subi	r22, 0x01	; 1
    1692:	71 09       	sbc	r23, r1
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	d6 cf       	rjmp	.-84     	; 0x1644 <ButtonGetActionList+0x10>

00001698 <ButtonSetActionById>:
}

void ButtonSetActionById(ButtonActionEnum Action)
{
#ifndef BUTTON_SETTING_GLOBAL
	GlobalSettings.ActiveSettingPtr->ButtonAction = Action;
    1698:	e0 91 fe 24 	lds	r30, 0x24FE
    169c:	f0 91 ff 24 	lds	r31, 0x24FF
    16a0:	80 83       	st	Z, r24
    16a2:	08 95       	ret

000016a4 <ButtonGetActionByName>:
	}
#endif
}

void ButtonGetActionByName(char* ActionOut, uint16_t BufferSize)
{
    16a4:	ab 01       	movw	r20, r22
    strncpy_P(ActionOut, ButtonActionTable[GlobalSettings.ActiveSettingPtr->ButtonAction], BufferSize);
    16a6:	e0 91 fe 24 	lds	r30, 0x24FE
    16aa:	f0 91 ff 24 	lds	r31, 0x24FF
    16ae:	60 81       	ld	r22, Z
    16b0:	20 e2       	ldi	r18, 0x20	; 32
    16b2:	62 9f       	mul	r22, r18
    16b4:	b0 01       	movw	r22, r0
    16b6:	11 24       	eor	r1, r1
    16b8:	69 50       	subi	r22, 0x09	; 9
    16ba:	7d 4f       	sbci	r23, 0xFD	; 253
    16bc:	0c 94 e8 25 	jmp	0x4bd0	; 0x4bd0 <strncpy_P>

000016c0 <ButtonSetActionByName>:
}

bool ButtonSetActionByName(const char* Action)
{
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	ec 01       	movw	r28, r24
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
    16c6:	67 ef       	ldi	r22, 0xF7	; 247
    16c8:	72 e0       	ldi	r23, 0x02	; 2
    16ca:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    16ce:	89 2b       	or	r24, r25
    16d0:	e1 f1       	breq	.+120    	; 0x174a <ButtonSetActionByName+0x8a>
    16d2:	67 e1       	ldi	r22, 0x17	; 23
    16d4:	73 e0       	ldi	r23, 0x03	; 3
    16d6:	ce 01       	movw	r24, r28
    16d8:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    16dc:	89 2b       	or	r24, r25
    16de:	d9 f1       	breq	.+118    	; 0x1756 <ButtonSetActionByName+0x96>
    16e0:	67 e3       	ldi	r22, 0x37	; 55
    16e2:	73 e0       	ldi	r23, 0x03	; 3
    16e4:	ce 01       	movw	r24, r28
    16e6:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    16ea:	89 2b       	or	r24, r25
    16ec:	b1 f1       	breq	.+108    	; 0x175a <ButtonSetActionByName+0x9a>
    16ee:	67 e5       	ldi	r22, 0x57	; 87
    16f0:	73 e0       	ldi	r23, 0x03	; 3
    16f2:	ce 01       	movw	r24, r28
    16f4:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    16f8:	89 2b       	or	r24, r25
    16fa:	89 f1       	breq	.+98     	; 0x175e <ButtonSetActionByName+0x9e>
    16fc:	67 e7       	ldi	r22, 0x77	; 119
    16fe:	73 e0       	ldi	r23, 0x03	; 3
    1700:	ce 01       	movw	r24, r28
    1702:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    1706:	89 2b       	or	r24, r25
    1708:	61 f1       	breq	.+88     	; 0x1762 <ButtonSetActionByName+0xa2>
    170a:	67 e9       	ldi	r22, 0x97	; 151
    170c:	73 e0       	ldi	r23, 0x03	; 3
    170e:	ce 01       	movw	r24, r28
    1710:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    1714:	89 2b       	or	r24, r25
    1716:	39 f1       	breq	.+78     	; 0x1766 <ButtonSetActionByName+0xa6>
    1718:	67 eb       	ldi	r22, 0xB7	; 183
    171a:	73 e0       	ldi	r23, 0x03	; 3
    171c:	ce 01       	movw	r24, r28
    171e:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    1722:	89 2b       	or	r24, r25
    1724:	11 f1       	breq	.+68     	; 0x176a <ButtonSetActionByName+0xaa>
    1726:	67 ed       	ldi	r22, 0xD7	; 215
    1728:	73 e0       	ldi	r23, 0x03	; 3
    172a:	ce 01       	movw	r24, r28
    172c:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    1730:	89 2b       	or	r24, r25
    1732:	e9 f0       	breq	.+58     	; 0x176e <ButtonSetActionByName+0xae>
    1734:	67 ef       	ldi	r22, 0xF7	; 247
    1736:	73 e0       	ldi	r23, 0x03	; 3
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    173e:	89 2b       	or	r24, r25
    1740:	c1 f0       	breq	.+48     	; 0x1772 <ButtonSetActionByName+0xb2>
            return true;
        }
    }

    /* Button action not found */
    return false;
    1742:	80 e0       	ldi	r24, 0x00	; 0
}
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

bool ButtonSetActionByName(const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    174a:	80 e0       	ldi	r24, 0x00	; 0
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
            ButtonSetActionById(i);
    174c:	a5 df       	rcall	.-182    	; 0x1698 <ButtonSetActionById>
            return true;
    174e:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    /* Button action not found */
    return false;
}
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

bool ButtonSetActionByName(const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	f9 cf       	rjmp	.-14     	; 0x174c <ButtonSetActionByName+0x8c>
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	f7 cf       	rjmp	.-18     	; 0x174c <ButtonSetActionByName+0x8c>
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	f5 cf       	rjmp	.-22     	; 0x174c <ButtonSetActionByName+0x8c>
    1762:	84 e0       	ldi	r24, 0x04	; 4
    1764:	f3 cf       	rjmp	.-26     	; 0x174c <ButtonSetActionByName+0x8c>
    1766:	85 e0       	ldi	r24, 0x05	; 5
    1768:	f1 cf       	rjmp	.-30     	; 0x174c <ButtonSetActionByName+0x8c>
    176a:	86 e0       	ldi	r24, 0x06	; 6
    176c:	ef cf       	rjmp	.-34     	; 0x174c <ButtonSetActionByName+0x8c>
    176e:	87 e0       	ldi	r24, 0x07	; 7
    1770:	ed cf       	rjmp	.-38     	; 0x174c <ButtonSetActionByName+0x8c>
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
    1772:	88 e0       	ldi	r24, 0x08	; 8
    1774:	eb cf       	rjmp	.-42     	; 0x174c <ButtonSetActionByName+0x8c>

00001776 <SettingsLoad>:
		.ButtonAction =	DEFAULT_BUTTON_ACTION,
	} }
};

void SettingsLoad(void) {
	eeprom_read_block(&GlobalSettings, &StoredSettings, sizeof(SettingsType));
    1776:	43 e1       	ldi	r20, 0x13	; 19
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	8d ef       	ldi	r24, 0xFD	; 253
    1780:	94 e2       	ldi	r25, 0x24	; 36
    1782:	0c 94 fa 27 	jmp	0x4ff4	; 0x4ff4 <__eerd_block_x32a4u>

00001786 <SettingsSave>:
}

void SettingsSave(void) {
#if ENABLE_EEPROM_SETTINGS
	eeprom_write_block(&GlobalSettings, &StoredSettings, sizeof(SettingsType));
    1786:	43 e1       	ldi	r20, 0x13	; 19
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	8d ef       	ldi	r24, 0xFD	; 253
    1790:	94 e2       	ldi	r25, 0x24	; 36
    1792:	0c 94 05 28 	jmp	0x500a	; 0x500a <__eewr_block_x32a4u>

00001796 <SettingsSetActiveById>:
			break;
		}
	}
}

void SettingsSetActiveById(uint8_t Setting) {
    1796:	cf 93       	push	r28
    1798:	c8 2f       	mov	r28, r24
	if (Setting < SETTINGS_COUNT) {
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	10 f0       	brcs	.+4      	; 0x17a2 <SettingsSetActiveById+0xc>
		ConfigurationInit();
		
		/* Recall new memory contents */
		MemoryRecall();
	}
}
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret
}

void SettingsSetActiveById(uint8_t Setting) {
	if (Setting < SETTINGS_COUNT) {
		/* Store current memory contents permanently */
		MemoryStore();
    17a2:	fd da       	rcall	.-2566   	; 0xd9e <MemoryStore>
		
		GlobalSettings.ActiveSetting = Setting;
    17a4:	c0 93 fd 24 	sts	0x24FD, r28
		GlobalSettings.ActiveSettingPtr =
				&GlobalSettings.Settings[GlobalSettings.ActiveSetting];
    17a8:	8c 2f       	mov	r24, r28
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	80 50       	subi	r24, 0x00	; 0
    17b2:	9b 4d       	sbci	r25, 0xDB	; 219
	if (Setting < SETTINGS_COUNT) {
		/* Store current memory contents permanently */
		MemoryStore();
		
		GlobalSettings.ActiveSetting = Setting;
		GlobalSettings.ActiveSettingPtr =
    17b4:	80 93 fe 24 	sts	0x24FE, r24
    17b8:	90 93 ff 24 	sts	0x24FF, r25
				&GlobalSettings.Settings[GlobalSettings.ActiveSetting];

		/* Settings have changed. Progress changes through system */
		ConfigurationInit();
    17bc:	aa d8       	rcall	.-3756   	; 0x912 <ConfigurationInit>
		
		/* Recall new memory contents */
		MemoryRecall();
	}
}
    17be:	cf 91       	pop	r28

		/* Settings have changed. Progress changes through system */
		ConfigurationInit();
		
		/* Recall new memory contents */
		MemoryRecall();
    17c0:	fa c9       	rjmp	.-3084   	; 0xbb6 <MemoryRecall>

000017c2 <SettingsCycle>:
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    17c2:	20 91 fd 24 	lds	r18, 0x24FD
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	27 70       	andi	r18, 0x07	; 7
    17ce:	33 27       	eor	r19, r19
    17d0:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    17d2:	f9 01       	movw	r30, r18
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	ef 5f       	subi	r30, 0xFF	; 255
    17da:	fa 4d       	sbci	r31, 0xDA	; 218
    17dc:	90 81       	ld	r25, Z
    17de:	91 11       	cpse	r25, r1
    17e0:	5c c0       	rjmp	.+184    	; 0x189a <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    17e2:	2f 5f       	subi	r18, 0xFF	; 255
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	27 70       	andi	r18, 0x07	; 7
    17e8:	33 27       	eor	r19, r19
    17ea:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    17ec:	f9 01       	movw	r30, r18
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	ef 5f       	subi	r30, 0xFF	; 255
    17f4:	fa 4d       	sbci	r31, 0xDA	; 218
    17f6:	90 81       	ld	r25, Z
    17f8:	91 11       	cpse	r25, r1
    17fa:	4f c0       	rjmp	.+158    	; 0x189a <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    17fc:	2f 5f       	subi	r18, 0xFF	; 255
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	27 70       	andi	r18, 0x07	; 7
    1802:	33 27       	eor	r19, r19
    1804:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1806:	f9 01       	movw	r30, r18
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	ef 5f       	subi	r30, 0xFF	; 255
    180e:	fa 4d       	sbci	r31, 0xDA	; 218
    1810:	90 81       	ld	r25, Z
    1812:	91 11       	cpse	r25, r1
    1814:	42 c0       	rjmp	.+132    	; 0x189a <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1816:	2f 5f       	subi	r18, 0xFF	; 255
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	27 70       	andi	r18, 0x07	; 7
    181c:	33 27       	eor	r19, r19
    181e:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1820:	f9 01       	movw	r30, r18
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	ef 5f       	subi	r30, 0xFF	; 255
    1828:	fa 4d       	sbci	r31, 0xDA	; 218
    182a:	90 81       	ld	r25, Z
    182c:	91 11       	cpse	r25, r1
    182e:	35 c0       	rjmp	.+106    	; 0x189a <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1830:	2f 5f       	subi	r18, 0xFF	; 255
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	27 70       	andi	r18, 0x07	; 7
    1836:	33 27       	eor	r19, r19
    1838:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    183a:	f9 01       	movw	r30, r18
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	ef 5f       	subi	r30, 0xFF	; 255
    1842:	fa 4d       	sbci	r31, 0xDA	; 218
    1844:	90 81       	ld	r25, Z
    1846:	91 11       	cpse	r25, r1
    1848:	28 c0       	rjmp	.+80     	; 0x189a <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    184a:	2f 5f       	subi	r18, 0xFF	; 255
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	27 70       	andi	r18, 0x07	; 7
    1850:	33 27       	eor	r19, r19
    1852:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1854:	f9 01       	movw	r30, r18
    1856:	ee 0f       	add	r30, r30
    1858:	ff 1f       	adc	r31, r31
    185a:	ef 5f       	subi	r30, 0xFF	; 255
    185c:	fa 4d       	sbci	r31, 0xDA	; 218
    185e:	90 81       	ld	r25, Z
    1860:	91 11       	cpse	r25, r1
    1862:	1b c0       	rjmp	.+54     	; 0x189a <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1864:	2f 5f       	subi	r18, 0xFF	; 255
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	27 70       	andi	r18, 0x07	; 7
    186a:	33 27       	eor	r19, r19
    186c:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    186e:	f9 01       	movw	r30, r18
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	ef 5f       	subi	r30, 0xFF	; 255
    1876:	fa 4d       	sbci	r31, 0xDA	; 218
    1878:	90 81       	ld	r25, Z
    187a:	91 11       	cpse	r25, r1
    187c:	0e c0       	rjmp	.+28     	; 0x189a <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    187e:	2f 5f       	subi	r18, 0xFF	; 255
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
    1882:	27 70       	andi	r18, 0x07	; 7
    1884:	33 27       	eor	r19, r19
    1886:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1888:	f9 01       	movw	r30, r18
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	ef 5f       	subi	r30, 0xFF	; 255
    1890:	fa 4d       	sbci	r31, 0xDA	; 218
    1892:	90 81       	ld	r25, Z
    1894:	91 11       	cpse	r25, r1
    1896:	01 c0       	rjmp	.+2      	; 0x189a <SettingsCycle+0xd8>
    1898:	08 95       	ret
			SettingsSetActiveById(Setting);
    189a:	7d cf       	rjmp	.-262    	; 0x1796 <SettingsSetActiveById>

0000189c <SettingsGetActiveById>:
	}
}

uint8_t SettingsGetActiveById(void) {
	return GlobalSettings.ActiveSetting;
}
    189c:	80 91 fd 24 	lds	r24, 0x24FD
    18a0:	08 95       	ret

000018a2 <SettingsGetActiveByName>:

void SettingsGetActiveByName(char* SettingOut, uint16_t BufferSize) {
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	ec 01       	movw	r28, r24
	SettingOut[0] = SettingsGetActiveById() + '0';
    18a8:	f9 df       	rcall	.-14     	; 0x189c <SettingsGetActiveById>
    18aa:	80 5d       	subi	r24, 0xD0	; 208
    18ac:	88 83       	st	Y, r24
	SettingOut[1] = '\0';
    18ae:	19 82       	std	Y+1, r1	; 0x01
}
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <SettingsSetActiveByName>:

bool SettingsSetActiveByName(const char* Setting) {
    18b6:	fc 01       	movw	r30, r24
	uint8_t SettingNr = Setting[0] - '0';
    18b8:	80 81       	ld	r24, Z

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	91 11       	cpse	r25, r1
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <SettingsSetActiveByName+0x10>
	SettingOut[0] = SettingsGetActiveById() + '0';
	SettingOut[1] = '\0';
}

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';
    18c0:	80 53       	subi	r24, 0x30	; 48

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	10 f0       	brcs	.+4      	; 0x18ca <SettingsSetActiveByName+0x14>
		SettingsSetActiveById(SettingNr);
		return true;
	} else {
		return false;
    18c6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    18c8:	08 95       	ret

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
		SettingsSetActiveById(SettingNr);
    18ca:	65 df       	rcall	.-310    	; 0x1796 <SettingsSetActiveById>
		return true;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	08 95       	ret

000018d0 <TerminalSendString>:
uint8_t TerminalBuffer[TERMINAL_BUFFER_SIZE];
TerminalStateEnum TerminalState = TERMINAL_UNINITIALIZED;
static uint8_t TerminalInitDelay = INIT_DELAY;

void TerminalSendString(const char* s) {
    CDC_Device_SendString(&TerminalHandle, s);
    18d0:	bc 01       	movw	r22, r24
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e2       	ldi	r25, 0x20	; 32
    18d6:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <CDC_Device_SendString>

000018da <TerminalSendStringP>:
}

void TerminalSendStringP(const char* s) {
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    char c;

    while( (c = pgm_read_byte(s++)) != '\0' ) {
    18de:	ec 01       	movw	r28, r24
    18e0:	21 96       	adiw	r28, 0x01	; 1
    18e2:	fc 01       	movw	r30, r24
    18e4:	64 91       	lpm	r22, Z
    18e6:	66 23       	and	r22, r22
    18e8:	49 f0       	breq	.+18     	; 0x18fc <TerminalSendStringP+0x22>
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e2       	ldi	r25, 0x20	; 32
    18ee:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
    18f2:	fe 01       	movw	r30, r28
    18f4:	21 96       	adiw	r28, 0x01	; 1
    18f6:	64 91       	lpm	r22, Z
    18f8:	61 11       	cpse	r22, r1
    18fa:	f7 cf       	rjmp	.-18     	; 0x18ea <TerminalSendStringP+0x10>
        TerminalSendChar(c);
    }
}
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <TerminalSendBlock>:
#endif



void TerminalSendBlock(void* Buffer, uint16_t ByteCount)
{
    1902:	ab 01       	movw	r20, r22
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
    1904:	bc 01       	movw	r22, r24
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e2       	ldi	r25, 0x20	; 32
    190a:	0c 94 9f 23 	jmp	0x473e	; 0x473e <CDC_Device_SendData>

0000190e <TerminalInit>:
    }
}

void TerminalInit(void)
{
    TERMINAL_VBUS_PORT.DIRCLR = TERMINAL_VBUS_MASK;
    190e:	80 e2       	ldi	r24, 0x20	; 32
    1910:	e0 e6       	ldi	r30, 0x60	; 96
    1912:	f6 e0       	ldi	r31, 0x06	; 6
    1914:	82 83       	std	Z+2, r24	; 0x02
    1916:	08 95       	ret

00001918 <TerminalTask>:
}

void TerminalTask(void)
{
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
	CDC_Device_USBTask(&TerminalHandle);
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e2       	ldi	r25, 0x20	; 32
    1920:	0e 94 48 24 	call	0x4890	; 0x4890 <CDC_Device_USBTask>
	USB_USBTask();
    1924:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <USB_USBTask>
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
}


static void ProcessByte(void) {
    int16_t Byte = CDC_Device_ReceiveByte(&TerminalHandle);
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e2       	ldi	r25, 0x20	; 32
    192c:	0e 94 63 24 	call	0x48c6	; 0x48c6 <CDC_Device_ReceiveByte>
    1930:	ec 01       	movw	r28, r24

    if (Byte >= 0) {
    1932:	97 fd       	sbrc	r25, 7
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <TerminalTask+0x30>
    LED_PORT.OUTTGL = Mask;
}

static inline
void LEDPulse(uint8_t Mask) {
	LEDPulseMask = Mask;
    1936:	80 e1       	ldi	r24, 0x10	; 16
    1938:	80 93 93 24 	sts	0x2493, r24
	LED_PORT.OUTSET = Mask;
    193c:	80 93 05 06 	sts	0x0605, r24
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
    1940:	8c 2f       	mov	r24, r28
    1942:	6a d2       	rcall	.+1236   	; 0x1e18 <XModemProcessByte>
    1944:	88 23       	and	r24, r24
    1946:	19 f0       	breq	.+6      	; 0x194e <TerminalTask+0x36>
{
	CDC_Device_USBTask(&TerminalHandle);
	USB_USBTask();

    ProcessByte();
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    194e:	8c 2f       	mov	r24, r28
{
	CDC_Device_USBTask(&TerminalHandle);
	USB_USBTask();

    ProcessByte();
}
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    1954:	d1 c3       	rjmp	.+1954   	; 0x20f8 <CommandLineProcessByte>

00001956 <TerminalTick>:
    }
}

static void SenseVBus(void)
{
    switch(TerminalState) {
    1956:	80 91 94 24 	lds	r24, 0x2494
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	09 f1       	breq	.+66     	; 0x19a0 <TerminalTick+0x4a>
    195e:	30 f0       	brcs	.+12     	; 0x196c <TerminalTick+0x16>
    1960:	82 30       	cpi	r24, 0x02	; 2
    1962:	69 f1       	breq	.+90     	; 0x19be <TerminalTick+0x68>
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	71 f0       	breq	.+28     	; 0x1984 <TerminalTick+0x2e>

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    1968:	99 d3       	rcall	.+1842   	; 0x209c <XModemTick>
    CommandLineTick();
    196a:	67 c5       	rjmp	.+2766   	; 0x243a <CommandLineTick>

static void SenseVBus(void)
{
    switch(TerminalState) {
    case TERMINAL_UNINITIALIZED:
    	if (TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK) {
    196c:	80 91 68 06 	lds	r24, 0x0668
    1970:	85 ff       	sbrs	r24, 5
    1972:	fa cf       	rjmp	.-12     	; 0x1968 <TerminalTick+0x12>
    		/* Not initialized and VBUS sense high */
    		TerminalInitDelay = INIT_DELAY;
    1974:	84 e1       	ldi	r24, 0x14	; 20
    1976:	80 93 1b 20 	sts	0x201B, r24
    		TerminalState = TERMINAL_INITIALIZING;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	80 93 94 24 	sts	0x2494, r24

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    1980:	8d d3       	rcall	.+1818   	; 0x209c <XModemTick>
    CommandLineTick();
    1982:	5b c5       	rjmp	.+2742   	; 0x243a <CommandLineTick>
    		TerminalState = TERMINAL_UNITIALIZING;
    	}
    	break;

    case TERMINAL_UNITIALIZING:
    	if (--TerminalInitDelay == 0) {
    1984:	80 91 1b 20 	lds	r24, 0x201B
    1988:	81 50       	subi	r24, 0x01	; 1
    198a:	80 93 1b 20 	sts	0x201B, r24
    198e:	81 11       	cpse	r24, r1
    1990:	eb cf       	rjmp	.-42     	; 0x1968 <TerminalTick+0x12>
        	USB_Disable();
    1992:	0e 94 73 22 	call	0x44e6	; 0x44e6 <USB_Disable>
        	SystemStopUSBClock();
    1996:	0e 94 50 04 	call	0x8a0	; 0x8a0 <SystemStopUSBClock>
        	TerminalState = TERMINAL_UNINITIALIZED;
    199a:	10 92 94 24 	sts	0x2494, r1
    199e:	e4 cf       	rjmp	.-56     	; 0x1968 <TerminalTick+0x12>
    		TerminalState = TERMINAL_INITIALIZING;
    	}
    break;

    case TERMINAL_INITIALIZING:
    	if (--TerminalInitDelay == 0) {
    19a0:	80 91 1b 20 	lds	r24, 0x201B
    19a4:	81 50       	subi	r24, 0x01	; 1
    19a6:	80 93 1b 20 	sts	0x201B, r24
    19aa:	81 11       	cpse	r24, r1
    19ac:	dd cf       	rjmp	.-70     	; 0x1968 <TerminalTick+0x12>
            SystemStartUSBClock();
    19ae:	0e 94 37 04 	call	0x86e	; 0x86e <SystemStartUSBClock>
            USB_Init();
    19b2:	0e 94 ae 22 	call	0x455c	; 0x455c <USB_Init>
            TerminalState = TERMINAL_INITIALIZED;
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	80 93 94 24 	sts	0x2494, r24
    19bc:	d5 cf       	rjmp	.-86     	; 0x1968 <TerminalTick+0x12>
    	}
    	break;

    case TERMINAL_INITIALIZED:
    	if (!(TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK)) {
    19be:	80 91 68 06 	lds	r24, 0x0668
    19c2:	85 fd       	sbrc	r24, 5
    19c4:	d1 cf       	rjmp	.-94     	; 0x1968 <TerminalTick+0x12>
    		/* Initialized and VBUS sense low */
    		TerminalInitDelay = INIT_DELAY;
    19c6:	84 e1       	ldi	r24, 0x14	; 20
    19c8:	80 93 1b 20 	sts	0x201B, r24
    		TerminalState = TERMINAL_UNITIALIZING;
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	80 93 94 24 	sts	0x2494, r24

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    19d2:	64 d3       	rcall	.+1736   	; 0x209c <XModemTick>
    CommandLineTick();
    19d4:	32 c5       	rjmp	.+2660   	; 0x243a <CommandLineTick>

000019d6 <EVENT_USB_Device_Connect>:
    LED_PORT.DIRSET = LED_MASK;
}

static inline
void LEDSetOn(uint8_t Mask) {
    LED_PORT.OUTSET = Mask;
    19d6:	80 e2       	ldi	r24, 0x20	; 32
    19d8:	e0 e0       	ldi	r30, 0x00	; 0
    19da:	f6 e0       	ldi	r31, 0x06	; 6
    19dc:	85 83       	std	Z+5, r24	; 0x05
    19de:	08 95       	ret

000019e0 <EVENT_USB_Device_Disconnect>:
}

static inline
void LEDSetOff(uint8_t Mask) {
    LED_PORT.OUTCLR = Mask;
    19e0:	80 e2       	ldi	r24, 0x20	; 32
    19e2:	e0 e0       	ldi	r30, 0x00	; 0
    19e4:	f6 e0       	ldi	r31, 0x06	; 6
    19e6:	86 83       	std	Z+6, r24	; 0x06
    19e8:	08 95       	ret

000019ea <EVENT_USB_Device_ConfigurationChanged>:


/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    CDC_Device_ConfigureEndpoints(&TerminalHandle);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e2       	ldi	r25, 0x20	; 32
    19ee:	0c 94 51 23 	jmp	0x46a2	; 0x46a2 <CDC_Device_ConfigureEndpoints>

000019f2 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    CDC_Device_ProcessControlRequest(&TerminalHandle);
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e2       	ldi	r25, 0x20	; 32
    19f6:	0c 94 c3 24 	jmp	0x4986	; 0x4986 <CDC_Device_ProcessControlRequest>

000019fa <CommandGetVersion>:

extern const PROGMEM CommandEntryType CommandTable[];

CommandStatusIdType CommandGetVersion(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR(
    19fa:	2e e5       	ldi	r18, 0x5E	; 94
    19fc:	34 e0       	ldi	r19, 0x04	; 4
    19fe:	3f 93       	push	r19
    1a00:	2f 93       	push	r18
    1a02:	27 e5       	ldi	r18, 0x57	; 87
    1a04:	34 e0       	ldi	r19, 0x04	; 4
    1a06:	3f 93       	push	r19
    1a08:	2f 93       	push	r18
    1a0a:	20 e5       	ldi	r18, 0x50	; 80
    1a0c:	34 e0       	ldi	r19, 0x04	; 4
    1a0e:	3f 93       	push	r19
    1a10:	2f 93       	push	r18
    1a12:	27 e1       	ldi	r18, 0x17	; 23
    1a14:	34 e0       	ldi	r19, 0x04	; 4
    1a16:	3f 93       	push	r19
    1a18:	2f 93       	push	r18
    1a1a:	21 e0       	ldi	r18, 0x01	; 1
    1a1c:	2f 93       	push	r18
    1a1e:	1f 92       	push	r1
    1a20:	9f 93       	push	r25
    1a22:	8f 93       	push	r24
    1a24:	0e 94 00 26 	call	0x4c00	; 0x4c00 <snprintf_P>
    "Chameleon-Mini %S using LUFA %S compiled with AVR-GCC %S"
    ), PSTR(CHAMELEON_MINI_VERSION_STRING), PSTR(LUFA_VERSION_STRING), PSTR(__VERSION__)
  );

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1a28:	8d b7       	in	r24, 0x3d	; 61
    1a2a:	9e b7       	in	r25, 0x3e	; 62
    1a2c:	0c 96       	adiw	r24, 0x0c	; 12
    1a2e:	8d bf       	out	0x3d, r24	; 61
    1a30:	9e bf       	out	0x3e, r25	; 62
}
    1a32:	85 e6       	ldi	r24, 0x65	; 101
    1a34:	08 95       	ret

00001a36 <CommandGetConfig>:

CommandStatusIdType CommandGetConfig(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    1a36:	29 ed       	ldi	r18, 0xD9	; 217
    1a38:	34 e2       	ldi	r19, 0x24	; 36
    1a3a:	3f 93       	push	r19
    1a3c:	2f 93       	push	r18
    1a3e:	24 e6       	ldi	r18, 0x64	; 100
    1a40:	34 e0       	ldi	r19, 0x04	; 4
    1a42:	3f 93       	push	r19
    1a44:	2f 93       	push	r18
    1a46:	21 e0       	ldi	r18, 0x01	; 1
    1a48:	2f 93       	push	r18
    1a4a:	1f 92       	push	r1
    1a4c:	9f 93       	push	r25
    1a4e:	8f 93       	push	r24
    1a50:	0e 94 00 26 	call	0x4c00	; 0x4c00 <snprintf_P>
    PSTR("%s"), ActiveConfiguration.ConfigurationName);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1a54:	8d b7       	in	r24, 0x3d	; 61
    1a56:	9e b7       	in	r25, 0x3e	; 62
    1a58:	08 96       	adiw	r24, 0x08	; 8
    1a5a:	8d bf       	out	0x3d, r24	; 61
    1a5c:	9e bf       	out	0x3e, r25	; 62

}
    1a5e:	85 e6       	ldi	r24, 0x65	; 101
    1a60:	08 95       	ret

00001a62 <CommandSetConfig>:

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
    1a62:	0e 94 8f 04 	call	0x91e	; 0x91e <ConfigurationSetByName>
    1a66:	81 11       	cpse	r24, r1
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <CommandSetConfig+0xc>
	    SettingsSave();
    return COMMAND_INFO_OK_ID;
  } else {
    return COMMAND_ERR_INVALID_PARAM_ID;
    1a6a:	8a ec       	ldi	r24, 0xCA	; 202
  }
}
    1a6c:	08 95       	ret
}

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
	    SettingsSave();
    1a6e:	8b de       	rcall	.-746    	; 0x1786 <SettingsSave>
    return COMMAND_INFO_OK_ID;
    1a70:	84 e6       	ldi	r24, 0x64	; 100
    1a72:	08 95       	ret

00001a74 <CommandExecConfig>:
  }
}

CommandStatusIdType CommandExecConfig(char* OutMessage)
{
  ConfigurationGetList(OutMessage, TERMINAL_BUFFER_SIZE);
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	71 e0       	ldi	r23, 0x01	; 1
    1a78:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <ConfigurationGetList>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1a7c:	85 e6       	ldi	r24, 0x65	; 101
    1a7e:	08 95       	ret

00001a80 <CommandGetUid>:

CommandStatusIdType CommandGetUid(char* OutParam)
{
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	a1 97       	sbiw	r28, 0x21	; 33
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    1a94:	20 91 fb 24 	lds	r18, 0x24FB
INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    1a98:	e0 91 f5 24 	lds	r30, 0x24F5
    1a9c:	f0 91 f6 24 	lds	r31, 0x24F6
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	29 a3       	std	Y+33, r18	; 0x21
    1aa6:	09 95       	icall

  ApplicationGetUid(UidBuffer);

  BufferToHexString(OutParam, TERMINAL_BUFFER_SIZE,
    1aa8:	29 a1       	ldd	r18, Y+33	; 0x21
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	ae 01       	movw	r20, r28
    1aae:	4f 5f       	subi	r20, 0xFF	; 255
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	71 e0       	ldi	r23, 0x01	; 1
    1ab6:	c8 01       	movw	r24, r16
    1ab8:	0e 94 1a 05 	call	0xa34	; 0xa34 <BufferToHexString>
    UidBuffer, UidSize);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1abc:	85 e6       	ldi	r24, 0x65	; 101
    1abe:	a1 96       	adiw	r28, 0x21	; 33
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret

00001ace <CommandSetUid>:

CommandStatusIdType CommandSetUid(const char* InParam)
{
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	a0 97       	sbiw	r28, 0x20	; 32
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    1aec:	c0 90 fb 24 	lds	r12, 0x24FB
    1af0:	d1 2c       	mov	r13, r1

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    1af2:	67 e6       	ldi	r22, 0x67	; 103
    1af4:	74 e0       	ldi	r23, 0x04	; 4
    1af6:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    1afa:	89 2b       	or	r24, r25
    1afc:	59 f5       	brne	.+86     	; 0x1b54 <CommandSetUid+0x86>
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    1afe:	c1 14       	cp	r12, r1
    1b00:	d1 04       	cpc	r13, r1
    1b02:	c1 f1       	breq	.+112    	; 0x1b74 <CommandSetUid+0xa6>
    1b04:	b1 2c       	mov	r11, r1
    1b06:	ee 24       	eor	r14, r14
    1b08:	e3 94       	inc	r14
    1b0a:	f1 2c       	mov	r15, r1
    1b0c:	ec 0e       	add	r14, r28
    1b0e:	fd 1e       	adc	r15, r29
    1b10:	00 e0       	ldi	r16, 0x00	; 0
    1b12:	10 e0       	ldi	r17, 0x00	; 0
      UidBuffer[i] = RandomGetByte();
    1b14:	0e 94 00 05 	call	0xa00	; 0xa00 <RandomGetByte>
    1b18:	f7 01       	movw	r30, r14
    1b1a:	e0 0f       	add	r30, r16
    1b1c:	f1 1f       	adc	r31, r17
    1b1e:	80 83       	st	Z, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    1b20:	b3 94       	inc	r11
    1b22:	0b 2d       	mov	r16, r11
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	0c 15       	cp	r16, r12
    1b28:	1d 05       	cpc	r17, r13
    1b2a:	a0 f3       	brcs	.-24     	; 0x1b14 <CommandSetUid+0x46>
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    1b2c:	e0 91 f7 24 	lds	r30, 0x24F7
    1b30:	f0 91 f8 24 	lds	r31, 0x24F8
    1b34:	c7 01       	movw	r24, r14
    1b36:	09 95       	icall
    }
  }

  ApplicationSetUid(UidBuffer);

  return COMMAND_INFO_OK_ID;
    1b38:	84 e6       	ldi	r24, 0x64	; 100
}
    1b3a:	a0 96       	adiw	r28, 0x20	; 32
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	ff 90       	pop	r15
    1b4a:	ef 90       	pop	r14
    1b4c:	df 90       	pop	r13
    1b4e:	cf 90       	pop	r12
    1b50:	bf 90       	pop	r11
    1b52:	08 95       	ret
    for (uint8_t i=0; i<UidSize; i++) {
      UidBuffer[i] = RandomGetByte();
    }
  } else {
    /* Convert to Bytes */
    if (HexStringToBuffer(UidBuffer, sizeof(UidBuffer), InParam) != UidSize) {
    1b54:	a8 01       	movw	r20, r16
    1b56:	60 e2       	ldi	r22, 0x20	; 32
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	ee 24       	eor	r14, r14
    1b5c:	e3 94       	inc	r14
    1b5e:	f1 2c       	mov	r15, r1
    1b60:	ec 0e       	add	r14, r28
    1b62:	fd 1e       	adc	r15, r29
    1b64:	c7 01       	movw	r24, r14
    1b66:	0e 94 5c 05 	call	0xab8	; 0xab8 <HexStringToBuffer>
    1b6a:	8c 15       	cp	r24, r12
    1b6c:	9d 05       	cpc	r25, r13
    1b6e:	f1 f2       	breq	.-68     	; 0x1b2c <CommandSetUid+0x5e>
      /* Malformed input. Abort */
      return COMMAND_ERR_INVALID_PARAM_ID;
    1b70:	8a ec       	ldi	r24, 0xCA	; 202
    1b72:	e3 cf       	rjmp	.-58     	; 0x1b3a <CommandSetUid+0x6c>
    1b74:	ee 24       	eor	r14, r14
    1b76:	e3 94       	inc	r14
    1b78:	f1 2c       	mov	r15, r1
    1b7a:	ec 0e       	add	r14, r28
    1b7c:	fd 1e       	adc	r15, r29
    1b7e:	d6 cf       	rjmp	.-84     	; 0x1b2c <CommandSetUid+0x5e>

00001b80 <CommandGetReadOnly>:
  return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    1b80:	20 91 fc 24 	lds	r18, 0x24FC
    1b84:	21 11       	cpse	r18, r1
    1b86:	07 c0       	rjmp	.+14     	; 0x1b96 <CommandGetReadOnly+0x16>
    OutParam[0] = COMMAND_CHAR_TRUE;
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
    1b88:	20 e3       	ldi	r18, 0x30	; 48
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	20 83       	st	Z, r18
  }

  OutParam[1] = '\0';
    1b8e:	fc 01       	movw	r30, r24
    1b90:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1b92:	85 e6       	ldi	r24, 0x65	; 101
    1b94:	08 95       	ret
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    OutParam[0] = COMMAND_CHAR_TRUE;
    1b96:	21 e3       	ldi	r18, 0x31	; 49
    1b98:	fc 01       	movw	r30, r24
    1b9a:	20 83       	st	Z, r18
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
  }

  OutParam[1] = '\0';
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1ba0:	85 e6       	ldi	r24, 0x65	; 101
    1ba2:	08 95       	ret

00001ba4 <CommandSetReadOnly>:

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	21 81       	ldd	r18, Z+1	; 0x01
    1ba8:	21 11       	cpse	r18, r1
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <CommandSetReadOnly+0x12>
    if (InParam[0] == COMMAND_CHAR_TRUE) {
    1bac:	80 81       	ld	r24, Z
    1bae:	81 33       	cpi	r24, 0x31	; 49
    1bb0:	41 f0       	breq	.+16     	; 0x1bc2 <CommandSetReadOnly+0x1e>
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
    1bb2:	80 33       	cpi	r24, 0x30	; 48
    1bb4:	11 f0       	breq	.+4      	; 0x1bba <CommandSetReadOnly+0x16>
      ActiveConfiguration.ReadOnly = false;
      return COMMAND_INFO_OK_ID;
    }
  }

  return COMMAND_ERR_INVALID_PARAM_ID;
    1bb6:	8a ec       	ldi	r24, 0xCA	; 202
}
    1bb8:	08 95       	ret
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
      ActiveConfiguration.ReadOnly = false;
    1bba:	10 92 fc 24 	sts	0x24FC, r1
      return COMMAND_INFO_OK_ID;
    1bbe:	84 e6       	ldi	r24, 0x64	; 100
    1bc0:	08 95       	ret

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 fc 24 	sts	0x24FC, r24
      return COMMAND_INFO_OK_ID;
    1bc8:	84 e6       	ldi	r24, 0x64	; 100
    1bca:	08 95       	ret

00001bcc <CommandExecUpload>:
  return COMMAND_ERR_INVALID_PARAM_ID;
}

CommandStatusIdType CommandExecUpload(char* OutMessage)
{
    XModemReceive(MemoryUploadBlock);
    1bcc:	80 e1       	ldi	r24, 0x10	; 16
    1bce:	98 e0       	ldi	r25, 0x08	; 8
    1bd0:	f8 d0       	rcall	.+496    	; 0x1dc2 <XModemReceive>
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    1bd2:	8e e6       	ldi	r24, 0x6E	; 110
    1bd4:	08 95       	ret

00001bd6 <CommandExecDownload>:

CommandStatusIdType CommandExecDownload(char* OutMessage)
{
    XModemSend(MemoryDownloadBlock);
    1bd6:	81 ef       	ldi	r24, 0xF1	; 241
    1bd8:	99 e0       	ldi	r25, 0x09	; 9
    1bda:	0b d1       	rcall	.+534    	; 0x1df2 <XModemSend>
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    1bdc:	8e e6       	ldi	r24, 0x6E	; 110
    1bde:	08 95       	ret

00001be0 <CommandExecReset>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    1be0:	e0 ec       	ldi	r30, 0xC0	; 192
    1be2:	f4 e0       	ldi	r31, 0x04	; 4
    1be4:	81 81       	ldd	r24, Z+1	; 0x01
    1be6:	8e 7f       	andi	r24, 0xFE	; 254
    1be8:	81 83       	std	Z+1, r24	; 0x01

CommandStatusIdType CommandExecReset(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    1bea:	0e 94 73 22 	call	0x44e6	; 0x44e6 <USB_Disable>

  SystemReset();
    1bee:	0e 94 2a 04 	call	0x854	; 0x854 <SystemReset>

  return COMMAND_INFO_OK_ID;
}
    1bf2:	84 e6       	ldi	r24, 0x64	; 100
    1bf4:	08 95       	ret

00001bf6 <CommandExecUpgrade>:
    1bf6:	e0 ec       	ldi	r30, 0xC0	; 192
    1bf8:	f4 e0       	ldi	r31, 0x04	; 4
    1bfa:	81 81       	ldd	r24, Z+1	; 0x01
    1bfc:	8e 7f       	andi	r24, 0xFE	; 254
    1bfe:	81 83       	std	Z+1, r24	; 0x01

#ifdef SUPPORT_FIRMWARE_UPGRADE
CommandStatusIdType CommandExecUpgrade(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    1c00:	0e 94 73 22 	call	0x44e6	; 0x44e6 <USB_Disable>

  SystemEnterBootloader();
    1c04:	0e 94 31 04 	call	0x862	; 0x862 <SystemEnterBootloader>

  return COMMAND_INFO_OK_ID;
}
    1c08:	84 e6       	ldi	r24, 0x64	; 100
    1c0a:	08 95       	ret

00001c0c <CommandGetMemSize>:
#endif

CommandStatusIdType CommandGetMemSize(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.MemorySize);
    1c0c:	e9 ef       	ldi	r30, 0xF9	; 249
    1c0e:	f4 e2       	ldi	r31, 0x24	; 36
    1c10:	21 81       	ldd	r18, Z+1	; 0x01
    1c12:	2f 93       	push	r18
    1c14:	20 81       	ld	r18, Z
    1c16:	2f 93       	push	r18
    1c18:	2e e6       	ldi	r18, 0x6E	; 110
    1c1a:	34 e0       	ldi	r19, 0x04	; 4
    1c1c:	3f 93       	push	r19
    1c1e:	2f 93       	push	r18
    1c20:	21 e0       	ldi	r18, 0x01	; 1
    1c22:	2f 93       	push	r18
    1c24:	1f 92       	push	r1
    1c26:	9f 93       	push	r25
    1c28:	8f 93       	push	r24
    1c2a:	0e 94 00 26 	call	0x4c00	; 0x4c00 <snprintf_P>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1c2e:	8d b7       	in	r24, 0x3d	; 61
    1c30:	9e b7       	in	r25, 0x3e	; 62
    1c32:	08 96       	adiw	r24, 0x08	; 8
    1c34:	8d bf       	out	0x3d, r24	; 61
    1c36:	9e bf       	out	0x3e, r25	; 62
}
    1c38:	85 e6       	ldi	r24, 0x65	; 101
    1c3a:	08 95       	ret

00001c3c <CommandGetUidSize>:

CommandStatusIdType CommandGetUidSize(char* OutParam)
{
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.UidSize);
    1c3c:	20 91 fb 24 	lds	r18, 0x24FB
    1c40:	1f 92       	push	r1
    1c42:	2f 93       	push	r18
    1c44:	21 e7       	ldi	r18, 0x71	; 113
    1c46:	34 e0       	ldi	r19, 0x04	; 4
    1c48:	3f 93       	push	r19
    1c4a:	2f 93       	push	r18
    1c4c:	21 e0       	ldi	r18, 0x01	; 1
    1c4e:	2f 93       	push	r18
    1c50:	1f 92       	push	r1
    1c52:	9f 93       	push	r25
    1c54:	8f 93       	push	r24
    1c56:	0e 94 00 26 	call	0x4c00	; 0x4c00 <snprintf_P>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
    1c5a:	8d b7       	in	r24, 0x3d	; 61
    1c5c:	9e b7       	in	r25, 0x3e	; 62
    1c5e:	08 96       	adiw	r24, 0x08	; 8
    1c60:	8d bf       	out	0x3d, r24	; 61
    1c62:	9e bf       	out	0x3e, r25	; 62
}
    1c64:	85 e6       	ldi	r24, 0x65	; 101
    1c66:	08 95       	ret

00001c68 <CommandExecButton>:

CommandStatusIdType CommandExecButton(char* OutMessage)
{
    ButtonGetActionList(OutMessage, TERMINAL_BUFFER_SIZE);
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
    1c6c:	e3 dc       	rcall	.-1594   	; 0x1634 <ButtonGetActionList>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1c6e:	85 e6       	ldi	r24, 0x65	; 101
    1c70:	08 95       	ret

00001c72 <CommandGetButton>:

CommandStatusIdType CommandGetButton(char* OutParam)
{
    ButtonGetActionByName(OutParam, TERMINAL_BUFFER_SIZE);
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	71 e0       	ldi	r23, 0x01	; 1
    1c76:	16 dd       	rcall	.-1492   	; 0x16a4 <ButtonGetActionByName>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1c78:	85 e6       	ldi	r24, 0x65	; 101
    1c7a:	08 95       	ret

00001c7c <CommandSetButton>:

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(InParam)) {
    1c7c:	21 dd       	rcall	.-1470   	; 0x16c0 <ButtonSetActionByName>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <CommandSetButton+0xa>
        SettingsSave();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    1c82:	8a ec       	ldi	r24, 0xCA	; 202
    }
}
    1c84:	08 95       	ret
}

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(InParam)) {
        SettingsSave();
    1c86:	7f dd       	rcall	.-1282   	; 0x1786 <SettingsSave>
        return COMMAND_INFO_OK_ID;
    1c88:	84 e6       	ldi	r24, 0x64	; 100
    1c8a:	08 95       	ret

00001c8c <CommandGetSetting>:
    }
}

CommandStatusIdType CommandGetSetting(char* OutParam)
{
	SettingsGetActiveByName(OutParam, TERMINAL_BUFFER_SIZE);
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	71 e0       	ldi	r23, 0x01	; 1
    1c90:	08 de       	rcall	.-1008   	; 0x18a2 <SettingsGetActiveByName>
	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1c92:	85 e6       	ldi	r24, 0x65	; 101
    1c94:	08 95       	ret

00001c96 <CommandSetSetting>:

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
    1c96:	0f de       	rcall	.-994    	; 0x18b6 <SettingsSetActiveByName>
    1c98:	81 11       	cpse	r24, r1
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <CommandSetSetting+0xa>
		SettingsSave();
		return COMMAND_INFO_OK_ID;
	} else {
		return COMMAND_ERR_INVALID_PARAM_ID;
    1c9c:	8a ec       	ldi	r24, 0xCA	; 202
	}
}
    1c9e:	08 95       	ret
}

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
		SettingsSave();
    1ca0:	72 dd       	rcall	.-1308   	; 0x1786 <SettingsSave>
		return COMMAND_INFO_OK_ID;
    1ca2:	84 e6       	ldi	r24, 0x64	; 100
    1ca4:	08 95       	ret

00001ca6 <CommandExecClear>:
	}
}

CommandStatusIdType CommandExecClear(char* OutParam)
{
	MemoryClear();
    1ca6:	0e 94 d3 05 	call	0xba6	; 0xba6 <MemoryClear>
	return COMMAND_INFO_OK_ID;
}
    1caa:	84 e6       	ldi	r24, 0x64	; 100
    1cac:	08 95       	ret

00001cae <CommandExecHelp>:

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	7c 01       	movw	r14, r24
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */
    1cc2:	cf ef       	ldi	r28, 0xFF	; 255
    1cc4:	d0 e0       	ldi	r29, 0x00	; 0
	return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    1cc6:	3b e7       	ldi	r19, 0x7B	; 123
    1cc8:	c3 2e       	mov	r12, r19
    1cca:	34 e0       	ldi	r19, 0x04	; 4
    1ccc:	d3 2e       	mov	r13, r19
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    1cce:	4c e2       	ldi	r20, 0x2C	; 44
    1cd0:	b4 2e       	mov	r11, r20
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    1cd2:	86 01       	movw	r16, r12
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	80 e9       	ldi	r24, 0x90	; 144
    1cd8:	90 e2       	ldi	r25, 0x20	; 32
    1cda:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    1cde:	89 2b       	or	r24, r25
    1ce0:	21 f1       	breq	.+72     	; 0x1d2a <CommandExecHelp+0x7c>
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    1ce2:	f6 01       	movw	r30, r12
    1ce4:	84 91       	lpm	r24, Z
    1ce6:	88 23       	and	r24, r24
    1ce8:	89 f0       	breq	.+34     	; 0x1d0c <CommandExecHelp+0x5e>
    1cea:	c1 32       	cpi	r28, 0x21	; 33
    1cec:	d1 05       	cpc	r29, r1
    1cee:	70 f0       	brcs	.+28     	; 0x1d0c <CommandExecHelp+0x5e>
    1cf0:	d7 01       	movw	r26, r14
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <CommandExecHelp+0x4c>
    1cf4:	c0 32       	cpi	r28, 0x20	; 32
    1cf6:	d1 05       	cpc	r29, r1
    1cf8:	49 f0       	breq	.+18     	; 0x1d0c <CommandExecHelp+0x5e>
            *OutMessage++ = c;
    1cfa:	8d 93       	st	X+, r24
    1cfc:	7d 01       	movw	r14, r26
            CommandName++;
    1cfe:	0f 5f       	subi	r16, 0xFF	; 255
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
            ByteCount--;
    1d02:	21 97       	sbiw	r28, 0x01	; 1

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    1d04:	f8 01       	movw	r30, r16
    1d06:	84 91       	lpm	r24, Z
    1d08:	81 11       	cpse	r24, r1
    1d0a:	f4 cf       	rjmp	.-24     	; 0x1cf4 <CommandExecHelp+0x46>
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    1d0c:	f7 01       	movw	r30, r14
    1d0e:	b1 92       	st	Z+, r11
    1d10:	7f 01       	movw	r14, r30
        ByteCount--;
    1d12:	21 97       	sbiw	r28, 0x01	; 1

        EntryPtr++;
    1d14:	f6 e1       	ldi	r31, 0x16	; 22
    1d16:	cf 0e       	add	r12, r31
    1d18:	d1 1c       	adc	r13, r1
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    1d1a:	86 01       	movw	r16, r12
    1d1c:	b6 01       	movw	r22, r12
    1d1e:	80 e9       	ldi	r24, 0x90	; 144
    1d20:	90 e2       	ldi	r25, 0x20	; 32
    1d22:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    1d26:	89 2b       	or	r24, r25
    1d28:	e1 f6       	brne	.-72     	; 0x1ce2 <CommandExecHelp+0x34>
        ByteCount--;

        EntryPtr++;
    }

    *--OutMessage = '\0';
    1d2a:	f7 01       	movw	r30, r14
    1d2c:	31 97       	sbiw	r30, 0x01	; 1
    1d2e:	10 82       	st	Z, r1

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1d30:	85 e6       	ldi	r24, 0x65	; 101
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	df 90       	pop	r13
    1d40:	cf 90       	pop	r12
    1d42:	bf 90       	pop	r11
    1d44:	08 95       	ret

00001d46 <CommandGetRssi>:

CommandStatusIdType CommandGetRssi(char* OutParam)
{
    1d46:	fc 01       	movw	r30, r24
}

static inline
uint16_t AntennaLevelGet(void)
{
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
    1d48:	20 91 20 02 	lds	r18, 0x0220
    1d4c:	20 68       	ori	r18, 0x80	; 128
    1d4e:	20 93 20 02 	sts	0x0220, r18
	while( !(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm) );
    1d52:	20 91 23 02 	lds	r18, 0x0223
    1d56:	20 ff       	sbrs	r18, 0
    1d58:	fc cf       	rjmp	.-8      	; 0x1d52 <CommandGetRssi+0xc>

	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	80 93 23 02 	sts	0x0223, r24

	int16_t Result = ADCA.CH0RES - ANTENNA_LEVEL_OFFSET;
    1d60:	a0 91 10 02 	lds	r26, 0x0210
    1d64:	b0 91 11 02 	lds	r27, 0x0211
	if (Result < 0) Result = 0;

	return (uint16_t) (((uint32_t) Result * ANTENNA_LEVEL_NUMERATOR) / ANTENNA_LEVEL_DENOMINATOR);
    1d68:	ae 5b       	subi	r26, 0xBE	; 190
    1d6a:	b1 09       	sbc	r27, r1
    1d6c:	b7 fd       	sbrc	r27, 7
    1d6e:	1c c0       	rjmp	.+56     	; 0x1da8 <CommandGetRssi+0x62>
    1d70:	29 e6       	ldi	r18, 0x69	; 105
    1d72:	37 e5       	ldi	r19, 0x57	; 87
    1d74:	4b e0       	ldi	r20, 0x0B	; 11
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <__mulshisi3>
    1d7c:	aa 27       	eor	r26, r26
    1d7e:	bb 27       	eor	r27, r27
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    1d80:	9f 93       	push	r25
    1d82:	8f 93       	push	r24
    1d84:	24 e7       	ldi	r18, 0x74	; 116
    1d86:	34 e0       	ldi	r19, 0x04	; 4
    1d88:	3f 93       	push	r19
    1d8a:	2f 93       	push	r18
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	8f 93       	push	r24
    1d90:	1f 92       	push	r1
    1d92:	ff 93       	push	r31
    1d94:	ef 93       	push	r30
    1d96:	0e 94 00 26 	call	0x4c00	; 0x4c00 <snprintf_P>
        PSTR("%5u mV"), AntennaLevelGet());


    return COMMAND_INFO_OK_WITH_TEXT_ID;
    1d9a:	8d b7       	in	r24, 0x3d	; 61
    1d9c:	9e b7       	in	r25, 0x3e	; 62
    1d9e:	08 96       	adiw	r24, 0x08	; 8
    1da0:	8d bf       	out	0x3d, r24	; 61
    1da2:	9e bf       	out	0x3e, r25	; 62
}
    1da4:	85 e6       	ldi	r24, 0x65	; 101
    1da6:	08 95       	ret
    1da8:	a0 e0       	ldi	r26, 0x00	; 0
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e1 cf       	rjmp	.-62     	; 0x1d70 <CommandGetRssi+0x2a>

00001dae <CalcChecksum.constprop.0>:
static uint32_t BlockAddress;

static XModemCallbackType CallbackFunc;

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t* DataPtr = (uint8_t*) Buffer;
    1db0:	e0 e1       	ldi	r30, 0x10	; 16
    1db2:	f5 e2       	ldi	r31, 0x25	; 37

    while(ByteCount--) {
        Checksum += *DataPtr++;
    1db4:	91 91       	ld	r25, Z+
    1db6:	89 0f       	add	r24, r25

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    1db8:	95 e2       	ldi	r25, 0x25	; 37
    1dba:	e0 39       	cpi	r30, 0x90	; 144
    1dbc:	f9 07       	cpc	r31, r25
    1dbe:	d1 f7       	brne	.-12     	; 0x1db4 <CalcChecksum.constprop.0+0x6>
        Checksum += *DataPtr++;
    }

    return Checksum;
}
    1dc0:	08 95       	ret

00001dc2 <XModemReceive>:

void XModemReceive(XModemCallbackType TheCallbackFunc)
{
    State = STATE_RECEIVE_INIT;
    1dc2:	21 e0       	ldi	r18, 0x01	; 1
    1dc4:	20 93 95 24 	sts	0x2495, r18
    CurrentFrameNumber = FIRST_FRAME_NUMBER;
    1dc8:	20 93 96 24 	sts	0x2496, r18
    RetryCount = RECV_INIT_COUNT;
    1dcc:	24 e1       	ldi	r18, 0x14	; 20
    1dce:	20 93 97 24 	sts	0x2497, r18
    RetryTimeout = RECV_INIT_TIMEOUT;
    1dd2:	25 e0       	ldi	r18, 0x05	; 5
    1dd4:	20 93 98 24 	sts	0x2498, r18
    BlockAddress = 0;
    1dd8:	10 92 99 24 	sts	0x2499, r1
    1ddc:	10 92 9a 24 	sts	0x249A, r1
    1de0:	10 92 9b 24 	sts	0x249B, r1
    1de4:	10 92 9c 24 	sts	0x249C, r1

    CallbackFunc = TheCallbackFunc;
    1de8:	80 93 9d 24 	sts	0x249D, r24
    1dec:	90 93 9e 24 	sts	0x249E, r25
    1df0:	08 95       	ret

00001df2 <XModemSend>:
}

void XModemSend(XModemCallbackType TheCallbackFunc)
{
    State = STATE_SEND_INIT;
    1df2:	27 e0       	ldi	r18, 0x07	; 7
    1df4:	20 93 95 24 	sts	0x2495, r18
    RetryTimeout = SEND_INIT_TIMEOUT;
    1df8:	24 e6       	ldi	r18, 0x64	; 100
    1dfa:	20 93 98 24 	sts	0x2498, r18
    BlockAddress = 0;
    1dfe:	10 92 99 24 	sts	0x2499, r1
    1e02:	10 92 9a 24 	sts	0x249A, r1
    1e06:	10 92 9b 24 	sts	0x249B, r1
    1e0a:	10 92 9c 24 	sts	0x249C, r1

    CallbackFunc = TheCallbackFunc;
    1e0e:	80 93 9d 24 	sts	0x249D, r24
    1e12:	90 93 9e 24 	sts	0x249E, r25
    1e16:	08 95       	ret

00001e18 <XModemProcessByte>:
}

bool XModemProcessByte(uint8_t Byte)
{
    1e18:	cf 93       	push	r28
    1e1a:	c8 2f       	mov	r28, r24
    switch(State) {
    1e1c:	90 91 95 24 	lds	r25, 0x2495
    1e20:	95 30       	cpi	r25, 0x05	; 5
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <XModemProcessByte+0xe>
    1e24:	7f c0       	rjmp	.+254    	; 0x1f24 <XModemProcessByte+0x10c>
    1e26:	e0 f0       	brcs	.+56     	; 0x1e60 <XModemProcessByte+0x48>
    1e28:	97 30       	cpi	r25, 0x07	; 7
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <XModemProcessByte+0x16>
    1e2c:	4a c0       	rjmp	.+148    	; 0x1ec2 <XModemProcessByte+0xaa>
    1e2e:	60 f5       	brcc	.+88     	; 0x1e88 <XModemProcessByte+0x70>
        }

        break;

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
    1e30:	20 91 a2 24 	lds	r18, 0x24A2
    1e34:	80 91 96 24 	lds	r24, 0x2496
    1e38:	28 17       	cp	r18, r24
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <XModemProcessByte+0x26>
    1e3c:	df c0       	rjmp	.+446    	; 0x1ffc <XModemProcessByte+0x1e4>
            } else {
                /* Data seems to be damaged */
                TerminalSendByte(BYTE_NAK);
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	28 17       	cp	r18, r24
    1e46:	39 07       	cpc	r19, r25
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <XModemProcessByte+0x34>
    1e4a:	07 c1       	rjmp	.+526    	; 0x205a <XModemProcessByte+0x242>
INLINE void TerminalSendByte(uint8_t Byte) { CDC_Device_SendByte(&TerminalHandle, Byte); }
    1e4c:	68 e1       	ldi	r22, 0x18	; 24
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e2       	ldi	r25, 0x20	; 32
    1e52:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
        } else {
            /* This frame is completely out of order. Just cancel */
            TerminalSendByte(BYTE_CAN);
            State = STATE_OFF;
    1e56:	10 92 95 24 	sts	0x2495, r1
    default:
        return false;
        break;
    }

    return true;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
}
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    1e60:	93 30       	cpi	r25, 0x03	; 3
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <XModemProcessByte+0x4e>
    1e64:	57 c0       	rjmp	.+174    	; 0x1f14 <XModemProcessByte+0xfc>
    1e66:	b8 f0       	brcs	.+46     	; 0x1e96 <XModemProcessByte+0x7e>
        ReceivedFrameNumber = Byte;
        State = STATE_RECEIVE_FRAMENUM2;
        break;

    case STATE_RECEIVE_FRAMENUM2:
        if (Byte == (255 - ReceivedFrameNumber)) {
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	40 91 a2 24 	lds	r20, 0x24A2
    1e6e:	2f ef       	ldi	r18, 0xFF	; 255
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	24 1b       	sub	r18, r20
    1e74:	31 09       	sbc	r19, r1
    1e76:	82 17       	cp	r24, r18
    1e78:	93 07       	cpc	r25, r19
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <XModemProcessByte+0x66>
    1e7c:	6a c0       	rjmp	.+212    	; 0x1f52 <XModemProcessByte+0x13a>
            /* frame-number check passed. */
            State = STATE_RECEIVE_DATA;
    1e7e:	85 e0       	ldi	r24, 0x05	; 5
    1e80:	80 93 95 24 	sts	0x2495, r24
    default:
        return false;
        break;
    }

    return true;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	ea cf       	rjmp	.-44     	; 0x1e5c <XModemProcessByte+0x44>
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    1e88:	98 30       	cpi	r25, 0x08	; 8
    1e8a:	f1 f0       	breq	.+60     	; 0x1ec8 <XModemProcessByte+0xb0>
    1e8c:	99 30       	cpi	r25, 0x09	; 9
    1e8e:	a1 f0       	breq	.+40     	; 0x1eb8 <XModemProcessByte+0xa0>
        /* Receive Ack */
        State = STATE_OFF;
        break;

    default:
        return false;
    1e90:	80 e0       	ldi	r24, 0x00	; 0
        break;
    }

    return true;
}
    1e92:	cf 91       	pop	r28
    1e94:	08 95       	ret
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    1e96:	91 30       	cpi	r25, 0x01	; 1
    1e98:	d8 f3       	brcs	.-10     	; 0x1e90 <XModemProcessByte+0x78>
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <XModemProcessByte+0x88>
    1e9e:	df c0       	rjmp	.+446    	; 0x205e <XModemProcessByte+0x246>
            /* Next frame incoming */
            BufferIdx = 0;
            Checksum = CHECKSUM_INIT_VALUE;
            State = STATE_RECEIVE_FRAMENUM1;
        } else if (Byte == BYTE_EOT) {
    1ea0:	84 30       	cpi	r24, 0x04	; 4
    1ea2:	29 f0       	breq	.+10     	; 0x1eae <XModemProcessByte+0x96>
            /* Transmission finished */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_CAN) {
    1ea4:	88 31       	cpi	r24, 0x18	; 24
    1ea6:	41 f0       	breq	.+16     	; 0x1eb8 <XModemProcessByte+0xa0>
    default:
        return false;
        break;
    }

    return true;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
}
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret
    1eae:	66 e0       	ldi	r22, 0x06	; 6
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e2       	ldi	r25, 0x20	; 32
    1eb4:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>

    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
    1eb8:	10 92 95 24 	sts	0x2495, r1
    default:
        return false;
        break;
    }

    return true;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
}
    1ebe:	cf 91       	pop	r28
    1ec0:	08 95       	ret

        break;

    case STATE_SEND_INIT:
        /* Start sending on NAK */
        if (Byte == BYTE_NAK) {
    1ec2:	85 31       	cpi	r24, 0x15	; 21
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <XModemProcessByte+0xb0>
    1ec6:	50 c0       	rjmp	.+160    	; 0x1f68 <XModemProcessByte+0x150>
        }

        /* Fallthrough */

    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
    1ec8:	c8 31       	cpi	r28, 0x18	; 24
    1eca:	89 f3       	breq	.-30     	; 0x1eae <XModemProcessByte+0x96>
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
    1ecc:	c6 30       	cpi	r28, 0x06	; 6
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <XModemProcessByte+0xba>
    1ed0:	e1 c0       	rjmp	.+450    	; 0x2094 <XModemProcessByte+0x27c>
                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
            }
        } else if (Byte == BYTE_NAK){
    1ed2:	c5 31       	cpi	r28, 0x15	; 21
    1ed4:	49 f7       	brne	.-46     	; 0x1ea8 <XModemProcessByte+0x90>
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e2       	ldi	r25, 0x20	; 32
    1edc:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
    1ee0:	60 91 96 24 	lds	r22, 0x2496
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e2       	ldi	r25, 0x20	; 32
    1ee8:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
            /* Resend frame */
            TerminalSendByte(BYTE_SOH);
            TerminalSendByte(CurrentFrameNumber);
            TerminalSendByte(255 - CurrentFrameNumber);
    1eec:	60 91 96 24 	lds	r22, 0x2496
    1ef0:	60 95       	com	r22
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e2       	ldi	r25, 0x20	; 32
    1ef6:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
            TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    1efa:	60 e8       	ldi	r22, 0x80	; 128
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	80 e1       	ldi	r24, 0x10	; 16
    1f00:	95 e2       	ldi	r25, 0x25	; 37
    1f02:	ff dc       	rcall	.-1538   	; 0x1902 <TerminalSendBlock>
            TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));
    1f04:	54 df       	rcall	.-344    	; 0x1dae <CalcChecksum.constprop.0>
    1f06:	68 2f       	mov	r22, r24
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e2       	ldi	r25, 0x20	; 32
    1f0c:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
    default:
        return false;
        break;
    }

    return true;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	a4 cf       	rjmp	.-184    	; 0x1e5c <XModemProcessByte+0x44>

        break;

    case STATE_RECEIVE_FRAMENUM1:
        /* Store frame number */
        ReceivedFrameNumber = Byte;
    1f14:	80 93 a2 24 	sts	0x24A2, r24
        State = STATE_RECEIVE_FRAMENUM2;
    1f18:	84 e0       	ldi	r24, 0x04	; 4
    1f1a:	80 93 95 24 	sts	0x2495, r24
    default:
        return false;
        break;
    }

    return true;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
}
    1f20:	cf 91       	pop	r28
    1f22:	08 95       	ret

        break;

    case STATE_RECEIVE_DATA:
        /* Process byte and update checksum */
        TerminalBuffer[BufferIdx++] = Byte;
    1f24:	20 91 9f 24 	lds	r18, 0x249F
    1f28:	30 91 a0 24 	lds	r19, 0x24A0
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	e0 5f       	subi	r30, 0xF0	; 240
    1f30:	fa 4d       	sbci	r31, 0xDA	; 218
    1f32:	80 83       	st	Z, r24
    1f34:	c9 01       	movw	r24, r18
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	80 93 9f 24 	sts	0x249F, r24
    1f3c:	90 93 a0 24 	sts	0x24A0, r25

        if (BufferIdx == XMODEM_BLOCK_SIZE) {
    1f40:	80 38       	cpi	r24, 0x80	; 128
    1f42:	91 05       	cpc	r25, r1
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <XModemProcessByte+0x130>
    1f46:	b0 cf       	rjmp	.-160    	; 0x1ea8 <XModemProcessByte+0x90>
            /* Block full */
            State = STATE_RECEIVE_PROCESS;
    1f48:	86 e0       	ldi	r24, 0x06	; 6
    1f4a:	80 93 95 24 	sts	0x2495, r24
    default:
        return false;
        break;
    }

    return true;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	85 cf       	rjmp	.-246    	; 0x1e5c <XModemProcessByte+0x44>
    1f52:	65 e1       	ldi	r22, 0x15	; 21
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e2       	ldi	r25, 0x20	; 32
    1f58:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
            /* This is a retransmission */
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	80 93 95 24 	sts	0x2495, r24
    default:
        return false;
        break;
    }

    return true;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
}
    1f64:	cf 91       	pop	r28
    1f66:	08 95       	ret

        break;

    case STATE_SEND_INIT:
        /* Start sending on NAK */
        if (Byte == BYTE_NAK) {
    1f68:	81 e0       	ldi	r24, 0x01	; 1
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
            /* Acknowledge. Proceed to next frame, get data and calc checksum */
            CurrentFrameNumber++;
    1f6a:	80 93 96 24 	sts	0x2496, r24

            if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    1f6e:	40 91 99 24 	lds	r20, 0x2499
    1f72:	50 91 9a 24 	lds	r21, 0x249A
    1f76:	60 91 9b 24 	lds	r22, 0x249B
    1f7a:	70 91 9c 24 	lds	r23, 0x249C
    1f7e:	e0 91 9d 24 	lds	r30, 0x249D
    1f82:	f0 91 9e 24 	lds	r31, 0x249E
    1f86:	20 e8       	ldi	r18, 0x80	; 128
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	80 e1       	ldi	r24, 0x10	; 16
    1f8c:	95 e2       	ldi	r25, 0x25	; 37
    1f8e:	09 95       	icall
    1f90:	88 23       	and	r24, r24
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <XModemProcessByte+0x17e>
    1f94:	6f c0       	rjmp	.+222    	; 0x2074 <XModemProcessByte+0x25c>
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e2       	ldi	r25, 0x20	; 32
    1f9c:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
    1fa0:	60 91 96 24 	lds	r22, 0x2496
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e2       	ldi	r25, 0x20	; 32
    1fa8:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
                TerminalSendByte(BYTE_SOH);
                TerminalSendByte(CurrentFrameNumber);
                TerminalSendByte(255 - CurrentFrameNumber);
    1fac:	60 91 96 24 	lds	r22, 0x2496
    1fb0:	60 95       	com	r22
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e2       	ldi	r25, 0x20	; 32
    1fb6:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
                TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    1fba:	60 e8       	ldi	r22, 0x80	; 128
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	80 e1       	ldi	r24, 0x10	; 16
    1fc0:	95 e2       	ldi	r25, 0x25	; 37
    1fc2:	9f dc       	rcall	.-1730   	; 0x1902 <TerminalSendBlock>
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));
    1fc4:	f4 de       	rcall	.-536    	; 0x1dae <CalcChecksum.constprop.0>
    1fc6:	68 2f       	mov	r22, r24
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e2       	ldi	r25, 0x20	; 32
    1fcc:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>

                BlockAddress += XMODEM_BLOCK_SIZE;
    1fd0:	80 91 99 24 	lds	r24, 0x2499
    1fd4:	90 91 9a 24 	lds	r25, 0x249A
    1fd8:	a0 91 9b 24 	lds	r26, 0x249B
    1fdc:	b0 91 9c 24 	lds	r27, 0x249C
    1fe0:	80 58       	subi	r24, 0x80	; 128
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	af 4f       	sbci	r26, 0xFF	; 255
    1fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe8:	80 93 99 24 	sts	0x2499, r24
    1fec:	90 93 9a 24 	sts	0x249A, r25
    1ff0:	a0 93 9b 24 	sts	0x249B, r26
    1ff4:	b0 93 9c 24 	sts	0x249C, r27
    default:
        return false;
        break;
    }

    return true;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	57 cf       	rjmp	.-338    	; 0x1eaa <XModemProcessByte+0x92>

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
            /* This is the expected frame. Calculate and verify checksum */

            if (CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE) == Byte) {
    1ffc:	d8 de       	rcall	.-592    	; 0x1dae <CalcChecksum.constprop.0>
    1ffe:	8c 13       	cpse	r24, r28
    2000:	a8 cf       	rjmp	.-176    	; 0x1f52 <XModemProcessByte+0x13a>
                /* Checksum is valid. Pass received data to callback function */
                if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    2002:	40 91 99 24 	lds	r20, 0x2499
    2006:	50 91 9a 24 	lds	r21, 0x249A
    200a:	60 91 9b 24 	lds	r22, 0x249B
    200e:	70 91 9c 24 	lds	r23, 0x249C
    2012:	e0 91 9d 24 	lds	r30, 0x249D
    2016:	f0 91 9e 24 	lds	r31, 0x249E
    201a:	20 e8       	ldi	r18, 0x80	; 128
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	80 e1       	ldi	r24, 0x10	; 16
    2020:	95 e2       	ldi	r25, 0x25	; 37
    2022:	09 95       	icall
    2024:	88 23       	and	r24, r24
    2026:	81 f1       	breq	.+96     	; 0x2088 <XModemProcessByte+0x270>
                    /* Proceed to next frame and send ACK */
                    CurrentFrameNumber++;
    2028:	80 91 96 24 	lds	r24, 0x2496
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	80 93 96 24 	sts	0x2496, r24
                    BlockAddress += XMODEM_BLOCK_SIZE;
    2032:	80 91 99 24 	lds	r24, 0x2499
    2036:	90 91 9a 24 	lds	r25, 0x249A
    203a:	a0 91 9b 24 	lds	r26, 0x249B
    203e:	b0 91 9c 24 	lds	r27, 0x249C
    2042:	80 58       	subi	r24, 0x80	; 128
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	af 4f       	sbci	r26, 0xFF	; 255
    2048:	bf 4f       	sbci	r27, 0xFF	; 255
    204a:	80 93 99 24 	sts	0x2499, r24
    204e:	90 93 9a 24 	sts	0x249A, r25
    2052:	a0 93 9b 24 	sts	0x249B, r26
    2056:	b0 93 9c 24 	sts	0x249C, r27
    205a:	66 e0       	ldi	r22, 0x06	; 6
    205c:	7b cf       	rjmp	.-266    	; 0x1f54 <XModemProcessByte+0x13c>
    switch(State) {
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
            /* Next frame incoming */
            BufferIdx = 0;
    205e:	10 92 9f 24 	sts	0x249F, r1
    2062:	10 92 a0 24 	sts	0x24A0, r1
            Checksum = CHECKSUM_INIT_VALUE;
    2066:	10 92 a1 24 	sts	0x24A1, r1
            State = STATE_RECEIVE_FRAMENUM1;
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	80 93 95 24 	sts	0x2495, r24
    default:
        return false;
        break;
    }

    return true;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	f4 ce       	rjmp	.-536    	; 0x1e5c <XModemProcessByte+0x44>
    2074:	64 e0       	ldi	r22, 0x04	; 4
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e2       	ldi	r25, 0x20	; 32
    207a:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));

                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
    207e:	89 e0       	ldi	r24, 0x09	; 9
    2080:	80 93 95 24 	sts	0x2495, r24
    default:
        return false;
        break;
    }

    return true;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	ea ce       	rjmp	.-556    	; 0x1e5c <XModemProcessByte+0x44>
    2088:	68 e1       	ldi	r22, 0x18	; 24
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e2       	ldi	r25, 0x20	; 32
    208e:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
    2092:	dc ce       	rjmp	.-584    	; 0x1e4c <XModemProcessByte+0x34>
    2094:	80 91 96 24 	lds	r24, 0x2496
    2098:	8f 5f       	subi	r24, 0xFF	; 255
    209a:	67 cf       	rjmp	.-306    	; 0x1f6a <XModemProcessByte+0x152>

0000209c <XModemTick>:
}

void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    209c:	80 91 95 24 	lds	r24, 0x2495
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	71 f0       	breq	.+28     	; 0x20c0 <XModemTick+0x24>
    20a4:	87 30       	cpi	r24, 0x07	; 7
    20a6:	09 f0       	breq	.+2      	; 0x20aa <XModemTick+0xe>
    20a8:	08 95       	ret
            RetryTimeout = RECV_INIT_TIMEOUT;
        }
        break;

    case STATE_SEND_INIT:
        if (RetryTimeout-- == 0) {
    20aa:	80 91 98 24 	lds	r24, 0x2498
    20ae:	98 2f       	mov	r25, r24
    20b0:	91 50       	subi	r25, 0x01	; 1
    20b2:	90 93 98 24 	sts	0x2498, r25
    20b6:	81 11       	cpse	r24, r1
    20b8:	f7 cf       	rjmp	.-18     	; 0x20a8 <XModemTick+0xc>
            /* Abort */
            State = STATE_OFF;
    20ba:	10 92 95 24 	sts	0x2495, r1
    20be:	08 95       	ret
void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    case STATE_RECEIVE_INIT:
        if (RetryTimeout-- == 0) {
    20c0:	80 91 98 24 	lds	r24, 0x2498
    20c4:	98 2f       	mov	r25, r24
    20c6:	91 50       	subi	r25, 0x01	; 1
    20c8:	90 93 98 24 	sts	0x2498, r25
    20cc:	81 11       	cpse	r24, r1
    20ce:	ec cf       	rjmp	.-40     	; 0x20a8 <XModemTick+0xc>
            if (RetryCount-- > 0) {
    20d0:	80 91 97 24 	lds	r24, 0x2497
    20d4:	98 2f       	mov	r25, r24
    20d6:	91 50       	subi	r25, 0x01	; 1
    20d8:	90 93 97 24 	sts	0x2497, r25
    20dc:	81 11       	cpse	r24, r1
    20de:	06 c0       	rjmp	.+12     	; 0x20ec <XModemTick+0x50>
                /* Put out communication request */
                TerminalSendChar(BYTE_NAK);
            } else {
                /* Just shut off after some time. */
                State = STATE_OFF;
    20e0:	10 92 95 24 	sts	0x2495, r1
            }

            RetryTimeout = RECV_INIT_TIMEOUT;
    20e4:	85 e0       	ldi	r24, 0x05	; 5
    20e6:	80 93 98 24 	sts	0x2498, r24
    20ea:	08 95       	ret
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    20ec:	65 e1       	ldi	r22, 0x15	; 21
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e2       	ldi	r25, 0x20	; 32
    20f2:	0e 94 c9 23 	call	0x4792	; 0x4792 <CDC_Device_SendByte>
    20f6:	f6 cf       	rjmp	.-20     	; 0x20e4 <XModemTick+0x48>

000020f8 <CommandLineProcessByte>:
void CommandLineInit(void)
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
  if (IS_CHARACTER(Byte)){
    20fe:	98 2f       	mov	r25, r24
    2100:	91 54       	subi	r25, 0x41	; 65
    2102:	9a 31       	cpi	r25, 0x1A	; 26
    2104:	20 f0       	brcs	.+8      	; 0x210e <CommandLineProcessByte+0x16>
    2106:	90 52       	subi	r25, 0x20	; 32
    2108:	9a 31       	cpi	r25, 0x1A	; 26
    210a:	b8 f4       	brcc	.+46     	; 0x213a <CommandLineProcessByte+0x42>
    /* Store uppercase character */
    if (IS_LOWERCASE(Byte)) {
      Byte = TO_UPPERCASE(Byte);
    210c:	80 52       	subi	r24, 0x20	; 32
    }

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
    210e:	20 91 a3 24 	lds	r18, 0x24A3
    2112:	30 91 a4 24 	lds	r19, 0x24A4
    2116:	2f 3f       	cpi	r18, 0xFF	; 255
    2118:	31 05       	cpc	r19, r1
    211a:	50 f4       	brcc	.+20     	; 0x2130 <CommandLineProcessByte+0x38>
      TerminalBuffer[BufferIdx++] = Byte;
    211c:	f9 01       	movw	r30, r18
    211e:	e0 5f       	subi	r30, 0xF0	; 240
    2120:	fa 4d       	sbci	r31, 0xDA	; 218
    2122:	80 83       	st	Z, r24
    2124:	2f 5f       	subi	r18, 0xFF	; 255
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	20 93 a3 24 	sts	0x24A3, r18
    212c:	30 93 a4 24 	sts	0x24A4, r19
  } else {
    /* Ignore other chars */
  }

  return true;
}
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	08 95       	ret
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
  if (IS_CHARACTER(Byte)){
    213a:	9f 5c       	subi	r25, 0xCF	; 207
    213c:	9a 30       	cpi	r25, 0x0A	; 10
    213e:	38 f3       	brcs	.-50     	; 0x210e <CommandLineProcessByte+0x16>
    2140:	8f 35       	cpi	r24, 0x5F	; 95
    2142:	29 f3       	breq	.-54     	; 0x210e <CommandLineProcessByte+0x16>
    2144:	8f 33       	cpi	r24, 0x3F	; 63
    2146:	19 f3       	breq	.-58     	; 0x210e <CommandLineProcessByte+0x16>
    2148:	8d 33       	cpi	r24, 0x3D	; 61
    214a:	09 f3       	breq	.-62     	; 0x210e <CommandLineProcessByte+0x16>

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    214c:	8d 30       	cpi	r24, 0x0D	; 13
    214e:	a9 f0       	breq	.+42     	; 0x217a <CommandLineProcessByte+0x82>
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    2150:	88 30       	cpi	r24, 0x08	; 8
    2152:	39 f0       	breq	.+14     	; 0x2162 <CommandLineProcessByte+0x6a>
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
      BufferIdx--;
    }
  } else if (Byte == 0x1B){
    2154:	8b 31       	cpi	r24, 0x1B	; 27
    2156:	61 f7       	brne	.-40     	; 0x2130 <CommandLineProcessByte+0x38>
    /* Drop buffer on escape */
    BufferIdx = 0;
    2158:	10 92 a3 24 	sts	0x24A3, r1
    215c:	10 92 a4 24 	sts	0x24A4, r1
    2160:	e7 cf       	rjmp	.-50     	; 0x2130 <CommandLineProcessByte+0x38>
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
    2162:	80 91 a3 24 	lds	r24, 0x24A3
    2166:	90 91 a4 24 	lds	r25, 0x24A4
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	09 f3       	breq	.-62     	; 0x2130 <CommandLineProcessByte+0x38>
      BufferIdx--;
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	80 93 a3 24 	sts	0x24A3, r24
    2174:	90 93 a4 24 	sts	0x24A4, r25
    2178:	db cf       	rjmp	.-74     	; 0x2130 <CommandLineProcessByte+0x38>
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    217a:	e0 91 a3 24 	lds	r30, 0x24A3
    217e:	f0 91 a4 24 	lds	r31, 0x24A4
    2182:	e0 5f       	subi	r30, 0xF0	; 240
    2184:	fa 4d       	sbci	r31, 0xDA	; 218
    2186:	10 82       	st	Z, r1
    BufferIdx = 0;
    2188:	10 92 a3 24 	sts	0x24A3, r1
    218c:	10 92 a4 24 	sts	0x24A4, r1
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Do some sanity check first */
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    2190:	80 91 10 25 	lds	r24, 0x2510
    2194:	88 23       	and	r24, r24
    2196:	09 f4       	brne	.+2      	; 0x219a <CommandLineProcessByte+0xa2>
    2198:	a2 c0       	rjmp	.+324    	; 0x22de <CommandLineProcessByte+0x1e6>
    219a:	8f 33       	cpi	r24, 0x3F	; 63
    219c:	09 f4       	brne	.+2      	; 0x21a0 <CommandLineProcessByte+0xa8>
    219e:	9f c0       	rjmp	.+318    	; 0x22de <CommandLineProcessByte+0x1e6>
    21a0:	8d 33       	cpi	r24, 0x3D	; 61
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <CommandLineProcessByte+0xae>
    21a4:	9c c0       	rjmp	.+312    	; 0x22de <CommandLineProcessByte+0x1e6>
    21a6:	e1 e1       	ldi	r30, 0x11	; 17
    21a8:	f5 e2       	ldi	r31, 0x25	; 37
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <CommandLineProcessByte+0xbc>
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    21ac:	1f 33       	cpi	r17, 0x3F	; 63
    21ae:	31 f0       	breq	.+12     	; 0x21bc <CommandLineProcessByte+0xc4>
    21b0:	1d 33       	cpi	r17, 0x3D	; 61
    21b2:	21 f0       	breq	.+8      	; 0x21bc <CommandLineProcessByte+0xc4>
      pCommandDelimiter++;
    21b4:	ef 01       	movw	r28, r30
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    21b6:	11 91       	ld	r17, Z+
    21b8:	11 11       	cpse	r17, r1
    21ba:	f8 cf       	rjmp	.-16     	; 0x21ac <CommandLineProcessByte+0xb4>
      pCommandDelimiter++;

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';
    21bc:	18 82       	st	Y, r1

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    21be:	6b e7       	ldi	r22, 0x7B	; 123
    21c0:	74 e0       	ldi	r23, 0x04	; 4
    21c2:	80 e1       	ldi	r24, 0x10	; 16
    21c4:	95 e2       	ldi	r25, 0x25	; 37
    21c6:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    21ca:	89 2b       	or	r24, r25
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <CommandLineProcessByte+0xd8>
    21ce:	32 c1       	rjmp	.+612    	; 0x2434 <CommandLineProcessByte+0x33c>
    21d0:	61 e9       	ldi	r22, 0x91	; 145
    21d2:	74 e0       	ldi	r23, 0x04	; 4
    21d4:	80 e1       	ldi	r24, 0x10	; 16
    21d6:	95 e2       	ldi	r25, 0x25	; 37
    21d8:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    21dc:	89 2b       	or	r24, r25
    21de:	09 f4       	brne	.+2      	; 0x21e2 <CommandLineProcessByte+0xea>
    21e0:	26 c1       	rjmp	.+588    	; 0x242e <CommandLineProcessByte+0x336>
    21e2:	67 ea       	ldi	r22, 0xA7	; 167
    21e4:	74 e0       	ldi	r23, 0x04	; 4
    21e6:	80 e1       	ldi	r24, 0x10	; 16
    21e8:	95 e2       	ldi	r25, 0x25	; 37
    21ea:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    21ee:	89 2b       	or	r24, r25
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <CommandLineProcessByte+0xfc>
    21f2:	1a c1       	rjmp	.+564    	; 0x2428 <CommandLineProcessByte+0x330>
    21f4:	6d eb       	ldi	r22, 0xBD	; 189
    21f6:	74 e0       	ldi	r23, 0x04	; 4
    21f8:	80 e1       	ldi	r24, 0x10	; 16
    21fa:	95 e2       	ldi	r25, 0x25	; 37
    21fc:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    2200:	89 2b       	or	r24, r25
    2202:	09 f4       	brne	.+2      	; 0x2206 <CommandLineProcessByte+0x10e>
    2204:	0e c1       	rjmp	.+540    	; 0x2422 <CommandLineProcessByte+0x32a>
    2206:	63 ed       	ldi	r22, 0xD3	; 211
    2208:	74 e0       	ldi	r23, 0x04	; 4
    220a:	80 e1       	ldi	r24, 0x10	; 16
    220c:	95 e2       	ldi	r25, 0x25	; 37
    220e:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    2212:	89 2b       	or	r24, r25
    2214:	09 f4       	brne	.+2      	; 0x2218 <CommandLineProcessByte+0x120>
    2216:	02 c1       	rjmp	.+516    	; 0x241c <CommandLineProcessByte+0x324>
    2218:	69 ee       	ldi	r22, 0xE9	; 233
    221a:	74 e0       	ldi	r23, 0x04	; 4
    221c:	80 e1       	ldi	r24, 0x10	; 16
    221e:	95 e2       	ldi	r25, 0x25	; 37
    2220:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    2224:	89 2b       	or	r24, r25
    2226:	09 f4       	brne	.+2      	; 0x222a <CommandLineProcessByte+0x132>
    2228:	f6 c0       	rjmp	.+492    	; 0x2416 <CommandLineProcessByte+0x31e>
    222a:	6f ef       	ldi	r22, 0xFF	; 255
    222c:	74 e0       	ldi	r23, 0x04	; 4
    222e:	80 e1       	ldi	r24, 0x10	; 16
    2230:	95 e2       	ldi	r25, 0x25	; 37
    2232:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    2236:	89 2b       	or	r24, r25
    2238:	09 f4       	brne	.+2      	; 0x223c <CommandLineProcessByte+0x144>
    223a:	ea c0       	rjmp	.+468    	; 0x2410 <CommandLineProcessByte+0x318>
    223c:	65 e1       	ldi	r22, 0x15	; 21
    223e:	75 e0       	ldi	r23, 0x05	; 5
    2240:	80 e1       	ldi	r24, 0x10	; 16
    2242:	95 e2       	ldi	r25, 0x25	; 37
    2244:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    2248:	89 2b       	or	r24, r25
    224a:	09 f4       	brne	.+2      	; 0x224e <CommandLineProcessByte+0x156>
    224c:	de c0       	rjmp	.+444    	; 0x240a <CommandLineProcessByte+0x312>
    224e:	6b e2       	ldi	r22, 0x2B	; 43
    2250:	75 e0       	ldi	r23, 0x05	; 5
    2252:	80 e1       	ldi	r24, 0x10	; 16
    2254:	95 e2       	ldi	r25, 0x25	; 37
    2256:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    225a:	89 2b       	or	r24, r25
    225c:	09 f4       	brne	.+2      	; 0x2260 <CommandLineProcessByte+0x168>
    225e:	d2 c0       	rjmp	.+420    	; 0x2404 <CommandLineProcessByte+0x30c>
    2260:	61 e4       	ldi	r22, 0x41	; 65
    2262:	75 e0       	ldi	r23, 0x05	; 5
    2264:	80 e1       	ldi	r24, 0x10	; 16
    2266:	95 e2       	ldi	r25, 0x25	; 37
    2268:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    226c:	89 2b       	or	r24, r25
    226e:	09 f4       	brne	.+2      	; 0x2272 <CommandLineProcessByte+0x17a>
    2270:	c6 c0       	rjmp	.+396    	; 0x23fe <CommandLineProcessByte+0x306>
    2272:	67 e5       	ldi	r22, 0x57	; 87
    2274:	75 e0       	ldi	r23, 0x05	; 5
    2276:	80 e1       	ldi	r24, 0x10	; 16
    2278:	95 e2       	ldi	r25, 0x25	; 37
    227a:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    227e:	89 2b       	or	r24, r25
    2280:	09 f4       	brne	.+2      	; 0x2284 <CommandLineProcessByte+0x18c>
    2282:	ba c0       	rjmp	.+372    	; 0x23f8 <CommandLineProcessByte+0x300>
    2284:	6d e6       	ldi	r22, 0x6D	; 109
    2286:	75 e0       	ldi	r23, 0x05	; 5
    2288:	80 e1       	ldi	r24, 0x10	; 16
    228a:	95 e2       	ldi	r25, 0x25	; 37
    228c:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    2290:	89 2b       	or	r24, r25
    2292:	09 f4       	brne	.+2      	; 0x2296 <CommandLineProcessByte+0x19e>
    2294:	ae c0       	rjmp	.+348    	; 0x23f2 <CommandLineProcessByte+0x2fa>
    2296:	63 e8       	ldi	r22, 0x83	; 131
    2298:	75 e0       	ldi	r23, 0x05	; 5
    229a:	80 e1       	ldi	r24, 0x10	; 16
    229c:	95 e2       	ldi	r25, 0x25	; 37
    229e:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    22a2:	89 2b       	or	r24, r25
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <CommandLineProcessByte+0x1b0>
    22a6:	a2 c0       	rjmp	.+324    	; 0x23ec <CommandLineProcessByte+0x2f4>
    22a8:	69 e9       	ldi	r22, 0x99	; 153
    22aa:	75 e0       	ldi	r23, 0x05	; 5
    22ac:	80 e1       	ldi	r24, 0x10	; 16
    22ae:	95 e2       	ldi	r25, 0x25	; 37
    22b0:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    22b4:	89 2b       	or	r24, r25
    22b6:	09 f4       	brne	.+2      	; 0x22ba <CommandLineProcessByte+0x1c2>
    22b8:	96 c0       	rjmp	.+300    	; 0x23e6 <CommandLineProcessByte+0x2ee>
    22ba:	6f ea       	ldi	r22, 0xAF	; 175
    22bc:	75 e0       	ldi	r23, 0x05	; 5
    22be:	80 e1       	ldi	r24, 0x10	; 16
    22c0:	95 e2       	ldi	r25, 0x25	; 37
    22c2:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    22c6:	89 2b       	or	r24, r25
    22c8:	09 f4       	brne	.+2      	; 0x22cc <CommandLineProcessByte+0x1d4>
    22ca:	8a c0       	rjmp	.+276    	; 0x23e0 <CommandLineProcessByte+0x2e8>
    22cc:	65 ec       	ldi	r22, 0xC5	; 197
    22ce:	75 e0       	ldi	r23, 0x05	; 5
    22d0:	80 e1       	ldi	r24, 0x10	; 16
    22d2:	95 e2       	ldi	r25, 0x25	; 37
    22d4:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <strcmp_P>
    22d8:	89 2b       	or	r24, r25
    22da:	09 f4       	brne	.+2      	; 0x22de <CommandLineProcessByte+0x1e6>
    22dc:	52 c0       	rjmp	.+164    	; 0x2382 <CommandLineProcessByte+0x28a>

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
    22de:	88 ec       	ldi	r24, 0xC8	; 200
}

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
    22e0:	c0 e0       	ldi	r28, 0x00	; 0
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    22e2:	e1 ee       	ldi	r30, 0xE1	; 225
    22e4:	f5 e0       	ldi	r31, 0x05	; 5
    22e6:	e4 91       	lpm	r30, Z
    22e8:	8e 17       	cp	r24, r30
    22ea:	09 f4       	brne	.+2      	; 0x22ee <CommandLineProcessByte+0x1f6>
    22ec:	30 c0       	rjmp	.+96     	; 0x234e <CommandLineProcessByte+0x256>
    22ee:	e2 e0       	ldi	r30, 0x02	; 2
    22f0:	f6 e0       	ldi	r31, 0x06	; 6
    22f2:	e4 91       	lpm	r30, Z
    22f4:	8e 17       	cp	r24, r30
    22f6:	09 f4       	brne	.+2      	; 0x22fa <CommandLineProcessByte+0x202>
    22f8:	41 c0       	rjmp	.+130    	; 0x237c <CommandLineProcessByte+0x284>
    22fa:	e3 e2       	ldi	r30, 0x23	; 35
    22fc:	f6 e0       	ldi	r31, 0x06	; 6
    22fe:	e4 91       	lpm	r30, Z
    2300:	8e 17       	cp	r24, r30
    2302:	09 f4       	brne	.+2      	; 0x2306 <CommandLineProcessByte+0x20e>
    2304:	38 c0       	rjmp	.+112    	; 0x2376 <CommandLineProcessByte+0x27e>
    2306:	e4 e4       	ldi	r30, 0x44	; 68
    2308:	f6 e0       	ldi	r31, 0x06	; 6
    230a:	e4 91       	lpm	r30, Z
    230c:	8e 17       	cp	r24, r30
    230e:	81 f1       	breq	.+96     	; 0x2370 <CommandLineProcessByte+0x278>
    2310:	e5 e6       	ldi	r30, 0x65	; 101
    2312:	f6 e0       	ldi	r31, 0x06	; 6
    2314:	e4 91       	lpm	r30, Z
    2316:	8e 17       	cp	r24, r30
    2318:	41 f1       	breq	.+80     	; 0x236a <CommandLineProcessByte+0x272>
    231a:	e6 e8       	ldi	r30, 0x86	; 134
    231c:	f6 e0       	ldi	r31, 0x06	; 6
    231e:	e4 91       	lpm	r30, Z
    2320:	8e 17       	cp	r24, r30
    2322:	01 f1       	breq	.+64     	; 0x2364 <CommandLineProcessByte+0x26c>
            return StatusTable[i].Message;
    }

    return (void*) 0;
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }

  /* Send command status message */
  TerminalSendStringP(GetStatusMessageP(StatusId));
    2328:	d8 da       	rcall	.-2640   	; 0x18da <TerminalSendStringP>
  TerminalSendStringP(PSTR(STATUS_MESSAGE_TRAILER));
    232a:	8b ed       	ldi	r24, 0xDB	; 219
    232c:	95 e0       	ldi	r25, 0x05	; 5
    232e:	d5 da       	rcall	.-2646   	; 0x18da <TerminalSendStringP>

  if (CommandFound && (pTerminalBuffer[0] != '\0') ) {
    2330:	cc 23       	and	r28, r28
    2332:	09 f4       	brne	.+2      	; 0x2336 <CommandLineProcessByte+0x23e>
    2334:	fd ce       	rjmp	.-518    	; 0x2130 <CommandLineProcessByte+0x38>
    2336:	80 91 10 25 	lds	r24, 0x2510
    233a:	88 23       	and	r24, r24
    233c:	09 f4       	brne	.+2      	; 0x2340 <CommandLineProcessByte+0x248>
    233e:	f8 ce       	rjmp	.-528    	; 0x2130 <CommandLineProcessByte+0x38>
    /* Send optional answer */
    TerminalSendString(pTerminalBuffer);
    2340:	80 e1       	ldi	r24, 0x10	; 16
    2342:	95 e2       	ldi	r25, 0x25	; 37
    2344:	c5 da       	rcall	.-2678   	; 0x18d0 <TerminalSendString>
    TerminalSendStringP(PSTR(OPTIONAL_ANSWER_TRAILER));
    2346:	8e ed       	ldi	r24, 0xDE	; 222
    2348:	95 e0       	ldi	r25, 0x05	; 5
    234a:	c7 da       	rcall	.-2674   	; 0x18da <TerminalSendStringP>
    234c:	f1 ce       	rjmp	.-542    	; 0x2130 <CommandLineProcessByte+0x38>
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
            return StatusTable[i].Message;
    2352:	41 e2       	ldi	r20, 0x21	; 33
    2354:	42 9f       	mul	r20, r18
    2356:	c0 01       	movw	r24, r0
    2358:	43 9f       	mul	r20, r19
    235a:	90 0d       	add	r25, r0
    235c:	11 24       	eor	r1, r1
    235e:	8e 51       	subi	r24, 0x1E	; 30
    2360:	9a 4f       	sbci	r25, 0xFA	; 250
    2362:	e2 cf       	rjmp	.-60     	; 0x2328 <CommandLineProcessByte+0x230>
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    2364:	25 e0       	ldi	r18, 0x05	; 5
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	f4 cf       	rjmp	.-24     	; 0x2352 <CommandLineProcessByte+0x25a>
    236a:	24 e0       	ldi	r18, 0x04	; 4
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	f1 cf       	rjmp	.-30     	; 0x2352 <CommandLineProcessByte+0x25a>
    2370:	23 e0       	ldi	r18, 0x03	; 3
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	ee cf       	rjmp	.-36     	; 0x2352 <CommandLineProcessByte+0x25a>
    2376:	22 e0       	ldi	r18, 0x02	; 2
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	eb cf       	rjmp	.-42     	; 0x2352 <CommandLineProcessByte+0x25a>
    237c:	21 e0       	ldi	r18, 0x01	; 1
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	e8 cf       	rjmp	.-48     	; 0x2352 <CommandLineProcessByte+0x25a>
    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    2382:	2f e0       	ldi	r18, 0x0F	; 15
    2384:	30 e0       	ldi	r19, 0x00	; 0
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
    2386:	10 92 10 25 	sts	0x2510, r1
        CommandFound = true;

        StatusId = CallCommandFunc(&CommandTable[i], CommandDelimiter, pParam);
    238a:	46 e1       	ldi	r20, 0x16	; 22
    238c:	42 9f       	mul	r20, r18
    238e:	c0 01       	movw	r24, r0
    2390:	43 9f       	mul	r20, r19
    2392:	90 0d       	add	r25, r0
    2394:	11 24       	eor	r1, r1
    2396:	85 58       	subi	r24, 0x85	; 133
    2398:	9b 4f       	sbci	r25, 0xFB	; 251
static CommandStatusIdType CallCommandFunc(
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    239a:	1f 33       	cpi	r17, 0x3F	; 63
    239c:	f9 f0       	breq	.+62     	; 0x23dc <CommandLineProcessByte+0x2e4>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    239e:	1d 33       	cpi	r17, 0x3D	; 61
    23a0:	89 f0       	breq	.+34     	; 0x23c4 <CommandLineProcessByte+0x2cc>
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    23a2:	11 23       	and	r17, r17
    23a4:	19 f0       	breq	.+6      	; 0x23ac <CommandLineProcessByte+0x2b4>
  } else {
    /* This should not happen (TM) */
  }

  /* This delimiter has not been registered with this command */
  return COMMAND_ERR_INVALID_USAGE_ID;
    23a6:	89 ec       	ldi	r24, 0xC9	; 201
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    23a8:	c1 e0       	ldi	r28, 0x01	; 1
    23aa:	9b cf       	rjmp	.-202    	; 0x22e2 <CommandLineProcessByte+0x1ea>
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    CommandExecFuncType ExecFunc = pgm_read_ptr(&CommandEntry->ExecFunc);
    23ac:	40 96       	adiw	r24, 0x10	; 16
    23ae:	fc 01       	movw	r30, r24
    23b0:	85 91       	lpm	r24, Z+
    23b2:	94 91       	lpm	r25, Z
    23b4:	fc 01       	movw	r30, r24
    if (ExecFunc != NO_FUNCTION) {
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	b1 f3       	breq	.-20     	; 0x23a6 <CommandLineProcessByte+0x2ae>
      return ExecFunc(pTerminalBuffer);
    23ba:	80 e1       	ldi	r24, 0x10	; 16
    23bc:	95 e2       	ldi	r25, 0x25	; 37
    23be:	09 95       	icall
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    23c0:	c1 e0       	ldi	r28, 0x01	; 1
    23c2:	8f cf       	rjmp	.-226    	; 0x22e2 <CommandLineProcessByte+0x1ea>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    23c4:	42 96       	adiw	r24, 0x12	; 18
    23c6:	fc 01       	movw	r30, r24
    23c8:	85 91       	lpm	r24, Z+
    23ca:	94 91       	lpm	r25, Z
    23cc:	fc 01       	movw	r30, r24
    if (SetFunc != NO_FUNCTION) {
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	51 f3       	breq	.-44     	; 0x23a6 <CommandLineProcessByte+0x2ae>
      return SetFunc(pParam);
    23d2:	ce 01       	movw	r24, r28
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	09 95       	icall
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    23d8:	c1 e0       	ldi	r28, 0x01	; 1
    23da:	83 cf       	rjmp	.-250    	; 0x22e2 <CommandLineProcessByte+0x1ea>
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    23dc:	44 96       	adiw	r24, 0x14	; 20
    23de:	e7 cf       	rjmp	.-50     	; 0x23ae <CommandLineProcessByte+0x2b6>
    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    23e0:	2e e0       	ldi	r18, 0x0E	; 14
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	d0 cf       	rjmp	.-96     	; 0x2386 <CommandLineProcessByte+0x28e>
    23e6:	2d e0       	ldi	r18, 0x0D	; 13
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	cd cf       	rjmp	.-102    	; 0x2386 <CommandLineProcessByte+0x28e>
    23ec:	2c e0       	ldi	r18, 0x0C	; 12
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	ca cf       	rjmp	.-108    	; 0x2386 <CommandLineProcessByte+0x28e>
    23f2:	2b e0       	ldi	r18, 0x0B	; 11
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	c7 cf       	rjmp	.-114    	; 0x2386 <CommandLineProcessByte+0x28e>
    23f8:	2a e0       	ldi	r18, 0x0A	; 10
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	c4 cf       	rjmp	.-120    	; 0x2386 <CommandLineProcessByte+0x28e>
    23fe:	29 e0       	ldi	r18, 0x09	; 9
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	c1 cf       	rjmp	.-126    	; 0x2386 <CommandLineProcessByte+0x28e>
    2404:	28 e0       	ldi	r18, 0x08	; 8
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	be cf       	rjmp	.-132    	; 0x2386 <CommandLineProcessByte+0x28e>
    240a:	27 e0       	ldi	r18, 0x07	; 7
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	bb cf       	rjmp	.-138    	; 0x2386 <CommandLineProcessByte+0x28e>
    2410:	26 e0       	ldi	r18, 0x06	; 6
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	b8 cf       	rjmp	.-144    	; 0x2386 <CommandLineProcessByte+0x28e>
    2416:	25 e0       	ldi	r18, 0x05	; 5
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	b5 cf       	rjmp	.-150    	; 0x2386 <CommandLineProcessByte+0x28e>
    241c:	24 e0       	ldi	r18, 0x04	; 4
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	b2 cf       	rjmp	.-156    	; 0x2386 <CommandLineProcessByte+0x28e>
    2422:	23 e0       	ldi	r18, 0x03	; 3
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	af cf       	rjmp	.-162    	; 0x2386 <CommandLineProcessByte+0x28e>
    2428:	22 e0       	ldi	r18, 0x02	; 2
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	ac cf       	rjmp	.-168    	; 0x2386 <CommandLineProcessByte+0x28e>
    242e:	21 e0       	ldi	r18, 0x01	; 1
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	a9 cf       	rjmp	.-174    	; 0x2386 <CommandLineProcessByte+0x28e>
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	a6 cf       	rjmp	.-180    	; 0x2386 <CommandLineProcessByte+0x28e>

0000243a <CommandLineTick>:

  return true;
}

void CommandLineTick(void)
{
    243a:	08 95       	ret

0000243c <StartDemod>:
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    243c:	a0 e2       	ldi	r26, 0x20	; 32
    243e:	b6 e0       	ldi	r27, 0x06	; 6
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	11 96       	adiw	r26, 0x01	; 1
    2444:	8c 93       	st	X, r24
    2446:	11 97       	sbiw	r26, 0x01	; 1

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    2448:	15 96       	adiw	r26, 0x05	; 5
    244a:	8c 93       	st	X, r24
    244c:	15 97       	sbiw	r26, 0x05	; 5
static void StartDemod(void) {
    /* Activate Power for demodulator */
    CodecSetDemodPower(true);

    /* Configure sampling-timer free running and sync to first modulation-pause. */
    CODEC_TIMER_SAMPLING.CNT = 0;
    244e:	e0 e4       	ldi	r30, 0x40	; 64
    2450:	f8 e0       	ldi	r31, 0x08	; 8
    2452:	10 a2       	std	Z+32, r1	; 0x20
    2454:	11 a2       	std	Z+33, r1	; 0x21
    CODEC_TIMER_SAMPLING.PER = SAMPLE_RATE_SYSTEM_CYCLES - 1;
    2456:	8d e2       	ldi	r24, 0x2D	; 45
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	86 a3       	std	Z+38, r24	; 0x26
    245c:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_TIMER_SAMPLING.CCA = 0xFFFF; /* CCA Interrupt is not active! */
    245e:	8f ef       	ldi	r24, 0xFF	; 255
    2460:	9f ef       	ldi	r25, 0xFF	; 255
    2462:	80 a7       	std	Z+40, r24	; 0x28
    2464:	91 a7       	std	Z+41, r25	; 0x29
    CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_DIV1_gc;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	80 83       	st	Z, r24
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    246a:	98 e8       	ldi	r25, 0x88	; 136
    246c:	93 83       	std	Z+3, r25	; 0x03
    CODEC_TIMER_SAMPLING.INTCTRLB = TC_CCAINTLVL_HI_gc;
    246e:	93 e0       	ldi	r25, 0x03	; 3
    2470:	97 83       	std	Z+7, r25	; 0x07

    /* Start looking out for modulation pause via interrupt. */
    CODEC_DEMOD_IN_PORT.INT0MASK = CODEC_DEMOD_IN_MASK0;
    2472:	1a 96       	adiw	r26, 0x0a	; 10
    2474:	8c 93       	st	X, r24
    2476:	08 95       	ret

00002478 <__vector_34>:
}

ISR(CODEC_DEMOD_IN_INT0_VECT) {
    2478:	1f 92       	push	r1
    247a:	0f 92       	push	r0
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	0f 92       	push	r0
    2480:	11 24       	eor	r1, r1
    2482:	8f 93       	push	r24
    2484:	9f 93       	push	r25
    2486:	ef 93       	push	r30
    2488:	ff 93       	push	r31
    /* This is the first edge of the first modulation-pause after StartDemod.
     * Now we have time to prepare our timers and variables to start
     * demodulating beginning from one bit-width after this edge. */
    CodecBufferPtr = CodecBuffer;
    248a:	80 e1       	ldi	r24, 0x10	; 16
    248c:	96 e2       	ldi	r25, 0x26	; 38
    248e:	80 93 b1 24 	sts	0x24B1, r24
    2492:	90 93 b2 24 	sts	0x24B2, r25
    ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    2496:	80 e9       	ldi	r24, 0x90	; 144
    2498:	96 e2       	ldi	r25, 0x26	; 38
    249a:	80 93 b3 24 	sts	0x24B3, r24
    249e:	90 93 b4 24 	sts	0x24B4, r25
    DataRegister = 0;
    24a2:	10 92 aa 24 	sts	0x24AA, r1
    SampleRegister = 0;
    24a6:	10 92 a9 24 	sts	0x24A9, r1
    SamplePosition = 0;
    24aa:	10 92 a5 24 	sts	0x24A5, r1
    BitCount = 0;
    24ae:	10 92 ad 24 	sts	0x24AD, r1
    24b2:	10 92 ae 24 	sts	0x24AE, r1
    IsParityBit = false;
    24b6:	10 92 a8 24 	sts	0x24A8, r1
     * XYZBUF mechanism of the xmega to automatically double the sampling rate on the
     * next overflow. For this we have to temporarily deactivate the automatical alignment
     * in order to catch next overflow event for updating the BUF registers.
     * We want to sample the demodulated data stream in the first quarter of the half-bit
     * where the pulsed miller encoded is located. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_OFF_gc;
    24ba:	e0 e4       	ldi	r30, 0x40	; 64
    24bc:	f8 e0       	ldi	r31, 0x08	; 8
    24be:	13 82       	std	Z+3, r1	; 0x03
    CODEC_TIMER_SAMPLING.PERBUF = SAMPLE_RATE_SYSTEM_CYCLES/2 - 1; /* Half bit width */
    24c0:	86 e9       	ldi	r24, 0x96	; 150
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	86 ab       	std	Z+54, r24	; 0x36
    24c6:	97 ab       	std	Z+55, r25	; 0x37
    CODEC_TIMER_SAMPLING.CCABUF = SAMPLE_RATE_SYSTEM_CYCLES/8 - 10 - 1; /* Compensate for DIGFILT and ISR prolog */
    24c8:	8a e1       	ldi	r24, 0x1A	; 26
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	80 af       	std	Z+56, r24	; 0x38
    24ce:	91 af       	std	Z+57, r25	; 0x39
    /* Setup Frame Delay Timer and wire to EVSYS. Frame delay time is
     * measured from last change in RF field, therefore we use
     * the event channel 1 (end of modulation pause) as the restart event.
     * The preliminary frame delay time chosen here is irrelevant, because
     * the correct FDT gets set automatically after demodulation. */
    CODEC_TIMER_LOADMOD.CNT = 0;
    24d0:	e0 e4       	ldi	r30, 0x40	; 64
    24d2:	f9 e0       	ldi	r31, 0x09	; 9
    24d4:	10 a2       	std	Z+32, r1	; 0x20
    24d6:	11 a2       	std	Z+33, r1	; 0x21
    CODEC_TIMER_LOADMOD.PER = 0xFFFF;
    24d8:	8f ef       	ldi	r24, 0xFF	; 255
    24da:	9f ef       	ldi	r25, 0xFF	; 255
    24dc:	86 a3       	std	Z+38, r24	; 0x26
    24de:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH1_gc;
    24e0:	89 e8       	ldi	r24, 0x89	; 137
    24e2:	83 83       	std	Z+3, r24	; 0x03
    CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_EVCH6_gc;
    24e4:	8e e0       	ldi	r24, 0x0E	; 14
    24e6:	80 83       	st	Z, r24

    /* Disable this interrupt */
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    24e8:	e0 e2       	ldi	r30, 0x20	; 32
    24ea:	f6 e0       	ldi	r31, 0x06	; 6
    24ec:	12 86       	std	Z+10, r1	; 0x0a
}
    24ee:	ff 91       	pop	r31
    24f0:	ef 91       	pop	r30
    24f2:	9f 91       	pop	r25
    24f4:	8f 91       	pop	r24
    24f6:	0f 90       	pop	r0
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	0f 90       	pop	r0
    24fc:	1f 90       	pop	r1
    24fe:	18 95       	reti

00002500 <__vector_22>:

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    2500:	1f 92       	push	r1
    2502:	0f 92       	push	r0
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	0f 92       	push	r0
    2508:	11 24       	eor	r1, r1
    250a:	2f 93       	push	r18
    250c:	8f 93       	push	r24
    250e:	9f 93       	push	r25
    2510:	ef 93       	push	r30
    2512:	ff 93       	push	r31
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    2514:	90 91 28 06 	lds	r25, 0x0628
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    2518:	80 91 a9 24 	lds	r24, 0x24A9
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
}

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    251c:	95 70       	andi	r25, 0x05	; 5
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    251e:	21 e0       	ldi	r18, 0x01	; 1
    2520:	09 f0       	breq	.+2      	; 0x2524 <__vector_22+0x24>
    2522:	20 e0       	ldi	r18, 0x00	; 0
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    2524:	88 0f       	add	r24, r24
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    2526:	82 2b       	or	r24, r18
    SampleRegister = NewSampleRegister;
    2528:	80 93 a9 24 	sts	0x24A9, r24

    if (SamplePosition) {
    252c:	90 91 a5 24 	lds	r25, 0x24A5
    2530:	99 23       	and	r25, r25
    2532:	a1 f1       	breq	.+104    	; 0x259c <__vector_22+0x9c>
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
    2534:	98 2f       	mov	r25, r24
    2536:	97 70       	andi	r25, 0x07	; 7
    2538:	97 30       	cpi	r25, 0x07	; 7
    253a:	09 f4       	brne	.+2      	; 0x253e <__vector_22+0x3e>
    253c:	42 c0       	rjmp	.+132    	; 0x25c2 <__vector_22+0xc2>

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
        } else {
            /* Otherwise, we check the two sample bits from the bit before. */
            uint8_t BitSample = NewSampleRegister & 0xC;
    253e:	98 2f       	mov	r25, r24
    2540:	9c 70       	andi	r25, 0x0C	; 12
            uint8_t Bit = 0;

            if (BitSample != (0x0 << 2)) {
    2542:	61 f1       	breq	.+88     	; 0x259c <__vector_22+0x9c>
                /* We have a valid bit. decode and process it. */
                if (BitSample & (0x1 << 2)) {
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	82 fd       	sbrc	r24, 2
    2548:	6b c0       	rjmp	.+214    	; 0x2620 <__vector_22+0x120>
                } else {
                    /* 10 sequence -> This is a one bit */
                    Bit = 1;
                }

                LastBit = Bit;
    254a:	90 93 a7 24 	sts	0x24A7, r25

                if (!IsParityBit) {
    254e:	80 91 a8 24 	lds	r24, 0x24A8
    2552:	81 11       	cpse	r24, r1
    2554:	6d c0       	rjmp	.+218    	; 0x2630 <__vector_22+0x130>
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
    2556:	80 91 aa 24 	lds	r24, 0x24AA
    255a:	86 95       	lsr	r24
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    255c:	99 23       	and	r25, r25
    255e:	09 f4       	brne	.+2      	; 0x2562 <__vector_22+0x62>
    2560:	71 c0       	rjmp	.+226    	; 0x2644 <__vector_22+0x144>
    2562:	20 e8       	ldi	r18, 0x80	; 128
    2564:	28 2b       	or	r18, r24
                    DataRegister = NewDataRegister;
    2566:	20 93 aa 24 	sts	0x24AA, r18

                    /* Update bitcount */
                    uint16_t NewBitCount = ++BitCount;
    256a:	80 91 ad 24 	lds	r24, 0x24AD
    256e:	90 91 ae 24 	lds	r25, 0x24AE
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	80 93 ad 24 	sts	0x24AD, r24
    2578:	90 93 ae 24 	sts	0x24AE, r25
                    if ((NewBitCount & 0x07) == 0) {
    257c:	87 70       	andi	r24, 0x07	; 7
    257e:	99 27       	eor	r25, r25
    2580:	89 2b       	or	r24, r25
    2582:	61 f4       	brne	.+24     	; 0x259c <__vector_22+0x9c>
                        /* We have reached a byte boundary! Store the data register. */
                        /* TODO: Prevent buffer overflow */
                        *CodecBufferPtr++ = NewDataRegister;
    2584:	e0 91 b1 24 	lds	r30, 0x24B1
    2588:	f0 91 b2 24 	lds	r31, 0x24B2
    258c:	21 93       	st	Z+, r18
    258e:	e0 93 b1 24 	sts	0x24B1, r30
    2592:	f0 93 b2 24 	sts	0x24B2, r31

                        /* Store bit for determining FDT at EOC and enable parity
                         * handling on next bit. */
                        IsParityBit = true;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	80 93 a8 24 	sts	0x24A8, r24
        }
    } else {
        /* On odd sample position just sample. */
    }

    SamplePosition = !SamplePosition;
    259c:	80 91 a5 24 	lds	r24, 0x24A5
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	89 27       	eor	r24, r25
    25a4:	80 93 a5 24 	sts	0x24A5, r24

    /* Make sure the sampling timer gets automatically aligned to the
     * modulation pauses by using the RESTART event.
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    25a8:	88 e8       	ldi	r24, 0x88	; 136
    25aa:	80 93 43 08 	sts	0x0843, r24
}
    25ae:	ff 91       	pop	r31
    25b0:	ef 91       	pop	r30
    25b2:	9f 91       	pop	r25
    25b4:	8f 91       	pop	r24
    25b6:	2f 91       	pop	r18
    25b8:	0f 90       	pop	r0
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	0f 90       	pop	r0
    25be:	1f 90       	pop	r1
    25c0:	18 95       	reti

    if (SamplePosition) {
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
            /* No carrier modulation for 3 sample points. EOC! */
            CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_OFF_gc;
    25c2:	10 92 40 08 	sts	0x0840, r1
            CODEC_TIMER_SAMPLING.INTFLAGS = TC0_CCAIF_bm;
    25c6:	80 e1       	ldi	r24, 0x10	; 16
    25c8:	80 93 4c 08 	sts	0x084C, r24

            /* By this time, the FDT timer is aligned to the last modulation
             * edge of the reader. So we disable the auto-synchronization and
             * let it count the frame delay time in the background, and generate
             * an interrupt once it has reached the FDT. */
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;
    25cc:	10 92 43 09 	sts	0x0943, r1

            if (LastBit) {
    25d0:	80 91 a7 24 	lds	r24, 0x24A7
    25d4:	88 23       	and	r24, r24
    25d6:	79 f1       	breq	.+94     	; 0x2636 <__vector_22+0x136>
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
    25d8:	8c eb       	ldi	r24, 0xBC	; 188
    25da:	94 e0       	ldi	r25, 0x04	; 4
    25dc:	80 93 66 09 	sts	0x0966, r24
    25e0:	90 93 67 09 	sts	0x0967, r25
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
            }

            LoadModState = LOADMOD_FDT;
    25e4:	10 92 a6 24 	sts	0x24A6, r1

            CODEC_TIMER_LOADMOD.INTFLAGS = TC1_OVFIF_bm;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 4c 09 	sts	0x094C, r24
            CODEC_TIMER_LOADMOD.INTCTRLA = TC_OVFINTLVL_HI_gc;
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	80 93 46 09 	sts	0x0946, r24

            /* Determine if we did not receive a multiple of 8 bits.
             * If this is the case, right-align the remaining data and
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
    25f4:	80 91 ad 24 	lds	r24, 0x24AD
    25f8:	90 91 ae 24 	lds	r25, 0x24AE
    25fc:	87 70       	andi	r24, 0x07	; 7
            if (RemainingBits != 0) {
    25fe:	61 f0       	breq	.+24     	; 0x2618 <__vector_22+0x118>
                uint8_t NewDataRegister = DataRegister;
    2600:	90 91 aa 24 	lds	r25, 0x24AA

                while (RemainingBits++ < 8) {
    2604:	8f 5f       	subi	r24, 0xFF	; 255
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2606:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    2608:	8f 5f       	subi	r24, 0xFF	; 255
    260a:	89 30       	cpi	r24, 0x09	; 9
    260c:	e1 f7       	brne	.-8      	; 0x2606 <__vector_22+0x106>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
                }

                /* TODO: Prevent buffer overflow */
                *CodecBufferPtr = NewDataRegister;
    260e:	e0 91 b1 24 	lds	r30, 0x24B1
    2612:	f0 91 b2 24 	lds	r31, 0x24B2
    2616:	90 83       	st	Z, r25
            }

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	80 93 af 24 	sts	0x24AF, r24
    261e:	be cf       	rjmp	.-132    	; 0x259c <__vector_22+0x9c>
            uint8_t BitSample = NewSampleRegister & 0xC;
            uint8_t Bit = 0;

            if (BitSample != (0x0 << 2)) {
                /* We have a valid bit. decode and process it. */
                if (BitSample & (0x1 << 2)) {
    2620:	90 e0       	ldi	r25, 0x00	; 0
                } else {
                    /* 10 sequence -> This is a one bit */
                    Bit = 1;
                }

                LastBit = Bit;
    2622:	90 93 a7 24 	sts	0x24A7, r25

                if (!IsParityBit) {
    2626:	80 91 a8 24 	lds	r24, 0x24A8
    262a:	88 23       	and	r24, r24
    262c:	09 f4       	brne	.+2      	; 0x2630 <__vector_22+0x130>
    262e:	93 cf       	rjmp	.-218    	; 0x2556 <__vector_22+0x56>

                } else {
                    /* This is a parity bit. Store it */
                    /* TODO: Store parity and prevent overflow */
                    //*ParityBufferPtr++ = Bit;
                    IsParityBit = false;
    2630:	10 92 a8 24 	sts	0x24A8, r1
    2634:	b3 cf       	rjmp	.-154    	; 0x259c <__vector_22+0x9c>
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;

            if (LastBit) {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
    2636:	8c e7       	ldi	r24, 0x7C	; 124
    2638:	94 e0       	ldi	r25, 0x04	; 4
    263a:	80 93 66 09 	sts	0x0966, r24
    263e:	90 93 67 09 	sts	0x0967, r25
    2642:	d0 cf       	rjmp	.-96     	; 0x25e4 <__vector_22+0xe4>

                if (!IsParityBit) {
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	8e cf       	rjmp	.-228    	; 0x2564 <__vector_22+0x64>

00002648 <__vector_83>:
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
}

ISR(CODEC_TIMER_OVF_VECT) {
    2648:	1f 92       	push	r1
    264a:	0f 92       	push	r0
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	0f 92       	push	r0
    2650:	11 24       	eor	r1, r1
    2652:	2f 93       	push	r18
    2654:	3f 93       	push	r19
    2656:	8f 93       	push	r24
    2658:	9f 93       	push	r25
    265a:	ef 93       	push	r30
    265c:	ff 93       	push	r31
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    265e:	80 91 a6 24 	lds	r24, 0x24A6
    2662:	85 30       	cpi	r24, 0x05	; 5
    2664:	09 f4       	brne	.+2      	; 0x2668 <__vector_83+0x20>
    2666:	4d c0       	rjmp	.+154    	; 0x2702 <__vector_83+0xba>
    2668:	a8 f0       	brcs	.+42     	; 0x2694 <__vector_83+0x4c>
    266a:	88 30       	cpi	r24, 0x08	; 8
    266c:	09 f4       	brne	.+2      	; 0x2670 <__vector_83+0x28>
    266e:	7c c0       	rjmp	.+248    	; 0x2768 <__vector_83+0x120>
    2670:	20 f5       	brcc	.+72     	; 0x26ba <__vector_83+0x72>
    2672:	86 30       	cpi	r24, 0x06	; 6
    2674:	09 f4       	brne	.+2      	; 0x2678 <__vector_83+0x30>
    2676:	b8 c0       	rjmp	.+368    	; 0x27e8 <__vector_83+0x1a0>
    2678:	87 30       	cpi	r24, 0x07	; 7
    267a:	09 f4       	brne	.+2      	; 0x267e <__vector_83+0x36>
    267c:	8a c0       	rjmp	.+276    	; 0x2792 <__vector_83+0x14a>
        break;

    default:
        break;
    }
}
    267e:	ff 91       	pop	r31
    2680:	ef 91       	pop	r30
    2682:	9f 91       	pop	r25
    2684:	8f 91       	pop	r24
    2686:	3f 91       	pop	r19
    2688:	2f 91       	pop	r18
    268a:	0f 90       	pop	r0
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	0f 90       	pop	r0
    2690:	1f 90       	pop	r1
    2692:	18 95       	reti
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	71 f1       	breq	.+92     	; 0x26f4 <__vector_83+0xac>
    2698:	f8 f0       	brcs	.+62     	; 0x26d8 <__vector_83+0x90>
    269a:	83 30       	cpi	r24, 0x03	; 3
    269c:	09 f4       	brne	.+2      	; 0x26a0 <__vector_83+0x58>
    269e:	56 c0       	rjmp	.+172    	; 0x274c <__vector_83+0x104>
    26a0:	84 30       	cpi	r24, 0x04	; 4
    26a2:	69 f7       	brne	.-38     	; 0x267e <__vector_83+0x36>
        /* Fetch first byte */
        DataRegister = *CodecBufferPtr;
        break;

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
    26a4:	80 91 aa 24 	lds	r24, 0x24AA
    26a8:	80 fd       	sbrc	r24, 0
    26aa:	b7 c0       	rjmp	.+366    	; 0x281a <__vector_83+0x1d2>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    26ac:	80 e4       	ldi	r24, 0x40	; 64
    26ae:	80 93 46 06 	sts	0x0646, r24
        }

        LoadModState = LOADMOD_DATA1;
    26b2:	85 e0       	ldi	r24, 0x05	; 5
    26b4:	80 93 a6 24 	sts	0x24A6, r24
        break;
    26b8:	e2 cf       	rjmp	.-60     	; 0x267e <__vector_83+0x36>
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    26ba:	89 30       	cpi	r24, 0x09	; 9
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <__vector_83+0x78>
    26be:	5b c0       	rjmp	.+182    	; 0x2776 <__vector_83+0x12e>
    26c0:	8a 30       	cpi	r24, 0x0A	; 10
    26c2:	e9 f6       	brne	.-70     	; 0x267e <__vector_83+0x36>

    case LOADMOD_FINISHED:
        /* We have written all of our bits. Deactivate the loadmod
         * timer. Also disable the bit-rate interrupt again. And
         * stop the subcarrier divider. */
        CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    26c4:	10 92 40 09 	sts	0x0940, r1
        CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    26c8:	10 92 46 09 	sts	0x0946, r1
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_OFF_gc;
    26cc:	10 92 00 08 	sts	0x0800, r1

        /* Signal application that we have finished loadmod */
        Flags.LoadmodFinished = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	80 93 b0 24 	sts	0x24B0, r24
        break;
    26d6:	d3 cf       	rjmp	.-90     	; 0x267e <__vector_83+0x36>
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    26d8:	88 23       	and	r24, r24
    26da:	09 f4       	brne	.+2      	; 0x26de <__vector_83+0x96>
    26dc:	53 c0       	rjmp	.+166    	; 0x2784 <__vector_83+0x13c>
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	71 f6       	brne	.-100    	; 0x267e <__vector_83+0x36>
        break;

    case LOADMOD_START:
        /* Application produced data. With this interrupt we are aligned to the bit-grid.
         * Start subcarrier generation and align to bitrate. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_RATE_CYCLES / 2 - 1;
    26e2:	8f e3       	ldi	r24, 0x3F	; 63
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	80 93 66 09 	sts	0x0966, r24
    26ea:	90 93 67 09 	sts	0x0967, r25
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_EVCH6_gc;
    26ee:	8e e0       	ldi	r24, 0x0E	; 14
    26f0:	80 93 00 08 	sts	0x0800, r24

        /* Fallthrough to first bit */

    case LOADMOD_START_BIT0:
    	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    26f4:	80 e4       	ldi	r24, 0x40	; 64
    26f6:	80 93 45 06 	sts	0x0645, r24
        LoadModState = LOADMOD_START_BIT1;
    26fa:	83 e0       	ldi	r24, 0x03	; 3
    26fc:	80 93 a6 24 	sts	0x24A6, r24
        break;
    2700:	be cf       	rjmp	.-132    	; 0x267e <__vector_83+0x36>

        LoadModState = LOADMOD_DATA1;
        break;

    case LOADMOD_DATA1:
        Temp8 = DataRegister;
    2702:	80 91 aa 24 	lds	r24, 0x24AA

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2706:	90 e4       	ldi	r25, 0x40	; 64
        break;

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
    2708:	80 fd       	sbrc	r24, 0
    270a:	84 c0       	rjmp	.+264    	; 0x2814 <__vector_83+0x1cc>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    270c:	90 93 45 06 	sts	0x0645, r25
        }

        DataRegister = Temp8 >> 1;
    2710:	86 95       	lsr	r24
    2712:	80 93 aa 24 	sts	0x24AA, r24

        Temp16 = BitSent;
    2716:	80 91 ab 24 	lds	r24, 0x24AB
    271a:	90 91 ac 24 	lds	r25, 0x24AC
        BitSent = ++Temp16;
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	80 93 ab 24 	sts	0x24AB, r24
    2724:	90 93 ac 24 	sts	0x24AC, r25

        if ((Temp16 & 0x07) == 0) {
    2728:	9c 01       	movw	r18, r24
    272a:	27 70       	andi	r18, 0x07	; 7
    272c:	33 27       	eor	r19, r19
    272e:	23 2b       	or	r18, r19
    2730:	09 f4       	brne	.+2      	; 0x2734 <__vector_83+0xec>
    2732:	77 c0       	rjmp	.+238    	; 0x2822 <__vector_83+0x1da>
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
            break;
        }

        if (Temp16 == BitCount) {
    2734:	20 91 ad 24 	lds	r18, 0x24AD
    2738:	30 91 ae 24 	lds	r19, 0x24AE
    273c:	82 17       	cp	r24, r18
    273e:	93 07       	cpc	r25, r19
    2740:	09 f0       	breq	.+2      	; 0x2744 <__vector_83+0xfc>
    2742:	4e c0       	rjmp	.+156    	; 0x27e0 <__vector_83+0x198>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        }

        if (BitSent == BitCount) {
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
    2744:	88 e0       	ldi	r24, 0x08	; 8
    2746:	80 93 a6 24 	sts	0x24A6, r24
    274a:	99 cf       	rjmp	.-206    	; 0x267e <__vector_83+0x36>
    	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        LoadModState = LOADMOD_START_BIT1;
        break;

    case LOADMOD_START_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    274c:	80 e4       	ldi	r24, 0x40	; 64
    274e:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_DATA0;
    2752:	84 e0       	ldi	r24, 0x04	; 4
    2754:	80 93 a6 24 	sts	0x24A6, r24

        /* Fetch first byte */
        DataRegister = *CodecBufferPtr;
    2758:	e0 91 b1 24 	lds	r30, 0x24B1
    275c:	f0 91 b2 24 	lds	r31, 0x24B2
    2760:	80 81       	ld	r24, Z
    2762:	80 93 aa 24 	sts	0x24AA, r24
        break;
    2766:	8b cf       	rjmp	.-234    	; 0x267e <__vector_83+0x36>
        }

        break;

    case LOADMOD_STOP_BIT0:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2768:	80 e4       	ldi	r24, 0x40	; 64
    276a:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_STOP_BIT1;
    276e:	89 e0       	ldi	r24, 0x09	; 9
    2770:	80 93 a6 24 	sts	0x24A6, r24
        break;
    2774:	84 cf       	rjmp	.-248    	; 0x267e <__vector_83+0x36>

    case LOADMOD_STOP_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2776:	80 e4       	ldi	r24, 0x40	; 64
    2778:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_FINISHED;
    277c:	8a e0       	ldi	r24, 0x0A	; 10
    277e:	80 93 a6 24 	sts	0x24A6, r24
        break;
    2782:	7d cf       	rjmp	.-262    	; 0x267e <__vector_83+0x36>
    uint16_t Temp16;

    switch (LoadModState) {
    case LOADMOD_FDT:
        /* No data has been produced, but FDT has ended. Switch over to bit-grid aligning. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_GRID_CYCLES - 1;
    2784:	8f e7       	ldi	r24, 0x7F	; 127
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	80 93 66 09 	sts	0x0966, r24
    278c:	90 93 67 09 	sts	0x0967, r25
        break;
    2790:	76 cf       	rjmp	.-276    	; 0x267e <__vector_83+0x36>

        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
    2792:	e0 91 b3 24 	lds	r30, 0x24B3
    2796:	f0 91 b4 24 	lds	r31, 0x24B4
    279a:	80 81       	ld	r24, Z
    279c:	81 11       	cpse	r24, r1
    279e:	36 c0       	rjmp	.+108    	; 0x280c <__vector_83+0x1c4>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    27a0:	80 e4       	ldi	r24, 0x40	; 64
    27a2:	80 93 45 06 	sts	0x0645, r24
        }

        if (BitSent == BitCount) {
    27a6:	20 91 ab 24 	lds	r18, 0x24AB
    27aa:	30 91 ac 24 	lds	r19, 0x24AC
    27ae:	80 91 ad 24 	lds	r24, 0x24AD
    27b2:	90 91 ae 24 	lds	r25, 0x24AE
    27b6:	28 17       	cp	r18, r24
    27b8:	39 07       	cpc	r19, r25
    27ba:	21 f2       	breq	.-120    	; 0x2744 <__vector_83+0xfc>
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
        } else {
            /* Fetch next data and continue sending bits. */
            ParityBufferPtr++;
    27bc:	31 96       	adiw	r30, 0x01	; 1
    27be:	e0 93 b3 24 	sts	0x24B3, r30
    27c2:	f0 93 b4 24 	sts	0x24B4, r31
            DataRegister = *++CodecBufferPtr;
    27c6:	e0 91 b1 24 	lds	r30, 0x24B1
    27ca:	f0 91 b2 24 	lds	r31, 0x24B2
    27ce:	cf 01       	movw	r24, r30
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	80 93 b1 24 	sts	0x24B1, r24
    27d6:	90 93 b2 24 	sts	0x24B2, r25
    27da:	81 81       	ldd	r24, Z+1	; 0x01
    27dc:	80 93 aa 24 	sts	0x24AA, r24
            LoadModState = LOADMOD_DATA0;
    27e0:	84 e0       	ldi	r24, 0x04	; 4
    27e2:	80 93 a6 24 	sts	0x24A6, r24
    27e6:	4b cf       	rjmp	.-362    	; 0x267e <__vector_83+0x36>
        LoadModState = LOADMOD_DATA0;

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
    27e8:	e0 91 b3 24 	lds	r30, 0x24B3
    27ec:	f0 91 b4 24 	lds	r31, 0x24B4
    27f0:	80 81       	ld	r24, Z
    27f2:	81 11       	cpse	r24, r1
    27f4:	07 c0       	rjmp	.+14     	; 0x2804 <__vector_83+0x1bc>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    27f6:	80 e4       	ldi	r24, 0x40	; 64
    27f8:	80 93 46 06 	sts	0x0646, r24
        }

        LoadModState = LOADMOD_PARITY1;
    27fc:	87 e0       	ldi	r24, 0x07	; 7
    27fe:	80 93 a6 24 	sts	0x24A6, r24
        break;
    2802:	3d cf       	rjmp	.-390    	; 0x267e <__vector_83+0x36>

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2804:	80 e4       	ldi	r24, 0x40	; 64
    2806:	80 93 45 06 	sts	0x0645, r24
    280a:	f8 cf       	rjmp	.-16     	; 0x27fc <__vector_83+0x1b4>
        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    280c:	80 e4       	ldi	r24, 0x40	; 64
    280e:	80 93 46 06 	sts	0x0646, r24
    2812:	c9 cf       	rjmp	.-110    	; 0x27a6 <__vector_83+0x15e>

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2814:	90 93 46 06 	sts	0x0646, r25
    2818:	7b cf       	rjmp	.-266    	; 0x2710 <__vector_83+0xc8>
        DataRegister = *CodecBufferPtr;
        break;

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    281a:	80 e4       	ldi	r24, 0x40	; 64
    281c:	80 93 45 06 	sts	0x0645, r24
    2820:	48 cf       	rjmp	.-368    	; 0x26b2 <__vector_83+0x6a>
        Temp16 = BitSent;
        BitSent = ++Temp16;

        if ((Temp16 & 0x07) == 0) {
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
    2822:	86 e0       	ldi	r24, 0x06	; 6
    2824:	80 93 a6 24 	sts	0x24A6, r24
            break;
    2828:	2a cf       	rjmp	.-428    	; 0x267e <__vector_83+0x36>

0000282a <ISO14443ACodecInit>:
    default:
        break;
    }
}

void ISO14443ACodecInit(void) {
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
static volatile LoadModStateType LoadModState;
static volatile bool SamplePosition;

static void Initialize(void) {
    /* Configure CARRIER input pin and route it to EVSYS */
    CODEC_CARRIER_IN_PORT.DIRCLR = CODEC_CARRIER_IN_MASK;
    282e:	e0 e4       	ldi	r30, 0x40	; 64
    2830:	f6 e0       	ldi	r31, 0x06	; 6
    2832:	84 e0       	ldi	r24, 0x04	; 4
    2834:	82 83       	std	Z+2, r24	; 0x02
    CODEC_CARRIER_IN_PORT.CODEC_CARRIER_IN_PINCTRL = PORT_ISC_BOTHEDGES_gc;
    2836:	12 8a       	std	Z+18, r1	; 0x12
    EVSYS.CH6MUX = CODEC_CARRIER_IN_EVMUX;
    2838:	c0 e8       	ldi	r28, 0x80	; 128
    283a:	d1 e0       	ldi	r29, 0x01	; 1
    283c:	82 e6       	ldi	r24, 0x62	; 98
    283e:	8e 83       	std	Y+6, r24	; 0x06

    /* Configure two DEMOD pins for input.
     * Configure event channel 0 for rising edge (begin of modulation pause)
     * Configure event channel 1 for falling edge (end of modulation pause) */
    CODEC_DEMOD_IN_PORT.DIRCLR = CODEC_DEMOD_IN_MASK;
    2840:	a0 e2       	ldi	r26, 0x20	; 32
    2842:	b6 e0       	ldi	r27, 0x06	; 6
    2844:	85 e0       	ldi	r24, 0x05	; 5
    2846:	12 96       	adiw	r26, 0x02	; 2
    2848:	8c 93       	st	X, r24
    284a:	12 97       	sbiw	r26, 0x02	; 2
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL0 = PORT_ISC_RISING_gc;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	50 96       	adiw	r26, 0x10	; 16
    2850:	8c 93       	st	X, r24
    2852:	50 97       	sbiw	r26, 0x10	; 16
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL1 = PORT_ISC_FALLING_gc;
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	52 96       	adiw	r26, 0x12	; 18
    2858:	8c 93       	st	X, r24
    285a:	52 97       	sbiw	r26, 0x12	; 18
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    285c:	1a 96       	adiw	r26, 0x0a	; 10
    285e:	1c 92       	st	X, r1
    2860:	1a 97       	sbiw	r26, 0x0a	; 10
    CODEC_DEMOD_IN_PORT.INTCTRL = PORT_INT0LVL_HI_gc;
    2862:	83 e0       	ldi	r24, 0x03	; 3
    2864:	19 96       	adiw	r26, 0x09	; 9
    2866:	8c 93       	st	X, r24
    EVSYS.CH0MUX = CODEC_DEMOD_IN_EVMUX0;
    2868:	98 e5       	ldi	r25, 0x58	; 88
    286a:	98 83       	st	Y, r25
    EVSYS.CH1MUX = CODEC_DEMOD_IN_EVMUX1;
    286c:	9a e5       	ldi	r25, 0x5A	; 90
    286e:	99 83       	std	Y+1, r25	; 0x01

    /* Configure LOADMOD and SUBCARRIER output pins.
     * Disable PSK modulation by setting pin to low. */
    CODEC_LOADMOD_PORT.DIRSET = CODEC_LOADMOD_MASK;
    2870:	90 e4       	ldi	r25, 0x40	; 64
    2872:	91 83       	std	Z+1, r25	; 0x01
    CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2874:	96 83       	std	Z+6, r25	; 0x06
    CODEC_SUBCARRIER_PORT.DIRSET = CODEC_SUBCARRIER_MASK;
    2876:	81 83       	std	Z+1, r24	; 0x01
    CODEC_SUBCARRIER_PORT.OUTCLR = CODEC_SUBCARRIER_MASK;
    2878:	86 83       	std	Z+6, r24	; 0x06

    /* Configure subcarrier generation with 50% DC output using OOK */
    CODEC_SUBCARRIER_TIMER.PER = ISO14443A_SUBCARRIER_DIVIDER - 1;
    287a:	e0 e0       	ldi	r30, 0x00	; 0
    287c:	f8 e0       	ldi	r31, 0x08	; 8
    287e:	8f e0       	ldi	r24, 0x0F	; 15
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	86 a3       	std	Z+38, r24	; 0x26
    2884:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_SUBCARRIER_TIMER.CODEC_SUBCARRIER_CC_OOK = ISO14443A_SUBCARRIER_DIVIDER/2;
    2886:	88 e0       	ldi	r24, 0x08	; 8
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	82 a7       	std	Z+42, r24	; 0x2a
    288c:	93 a7       	std	Z+43, r25	; 0x2b
    CODEC_SUBCARRIER_TIMER.CTRLB = CODEC_SUBCARRIER_CCEN_OOK | TC_WGMODE_SINGLESLOPE_gc;
    288e:	83 e2       	ldi	r24, 0x23	; 35
    2890:	81 83       	std	Z+1, r24	; 0x01
void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
}
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28

void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
    2896:	d2 cd       	rjmp	.-1116   	; 0x243c <StartDemod>

00002898 <ISO14443ACodecTask>:
}

void ISO14443ACodecTask(void) {
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    if (Flags.DemodFinished) {
    289c:	80 91 af 24 	lds	r24, 0x24AF
    28a0:	88 23       	and	r24, r24
    28a2:	c1 f0       	breq	.+48     	; 0x28d4 <ISO14443ACodecTask+0x3c>
        Flags.DemodFinished = 0;
    28a4:	10 92 af 24 	sts	0x24AF, r1
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    28a8:	82 e0       	ldi	r24, 0x02	; 2
    28aa:	80 93 21 06 	sts	0x0621, r24

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    } else {
        CODEC_DEMOD_POWER_PORT.OUTCLR = CODEC_DEMOD_POWER_MASK;
    28ae:	80 93 26 06 	sts	0x0626, r24
        /* Reception finished. Process the received bytes */
        CodecSetDemodPower(false);

        uint16_t DemodBitCount = BitCount;
    28b2:	60 91 ad 24 	lds	r22, 0x24AD
    28b6:	70 91 ae 24 	lds	r23, 0x24AE
        uint16_t AnswerBitCount = ISO14443A_APP_NO_RESPONSE;

        if (DemodBitCount > 0) {
    28ba:	61 15       	cp	r22, r1
    28bc:	71 05       	cpc	r23, r1
    28be:	89 f4       	brne	.+34     	; 0x28e2 <ISO14443ACodecTask+0x4a>
INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
}

INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
    28c0:	e0 91 ef 24 	lds	r30, 0x24EF
    28c4:	f0 91 f0 24 	lds	r31, 0x24F0
    28c8:	09 95       	icall
            CodecBufferPtr = CodecBuffer;
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
            LoadModState = LOADMOD_START;
        } else {
            /* No data to be processed. Disable loadmodding and start listening again */
            CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    28ca:	10 92 40 09 	sts	0x0940, r1
            CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    28ce:	10 92 46 09 	sts	0x0946, r1

            StartDemod();
    28d2:	b4 dd       	rcall	.-1176   	; 0x243c <StartDemod>
        }
    }

    if (Flags.LoadmodFinished) {
    28d4:	80 91 b0 24 	lds	r24, 0x24B0
    28d8:	81 11       	cpse	r24, r1
    28da:	2a c0       	rjmp	.+84     	; 0x2930 <ISO14443ACodecTask+0x98>
        Flags.LoadmodFinished = 0;
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    }
}
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	08 95       	ret
INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
}

INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
    28e2:	e0 91 f3 24 	lds	r30, 0x24F3
    28e6:	f0 91 f4 24 	lds	r31, 0x24F4
    28ea:	80 e1       	ldi	r24, 0x10	; 16
    28ec:	96 e2       	ldi	r25, 0x26	; 38
    28ee:	09 95       	icall

        if (DemodBitCount > 0) {
            /* Call application if we received data */
            AnswerBitCount = ApplicationProcess(CodecBuffer, DemodBitCount);

            if (AnswerBitCount & ISO14443A_APP_CUSTOM_PARITY) {
    28f0:	94 ff       	sbrs	r25, 4
    28f2:	23 c0       	rjmp	.+70     	; 0x293a <ISO14443ACodecTask+0xa2>
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
    28f4:	9f 7e       	andi	r25, 0xEF	; 239
            }
        } else {
            ApplicationReset();
        }

        if (AnswerBitCount != ISO14443A_APP_NO_RESPONSE) {
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	41 f3       	breq	.-48     	; 0x28ca <ISO14443ACodecTask+0x32>
            BitCount = AnswerBitCount;
    28fa:	80 93 ad 24 	sts	0x24AD, r24
    28fe:	90 93 ae 24 	sts	0x24AE, r25
            BitSent = 0;
    2902:	10 92 ab 24 	sts	0x24AB, r1
    2906:	10 92 ac 24 	sts	0x24AC, r1
            CodecBufferPtr = CodecBuffer;
    290a:	80 e1       	ldi	r24, 0x10	; 16
    290c:	96 e2       	ldi	r25, 0x26	; 38
    290e:	80 93 b1 24 	sts	0x24B1, r24
    2912:	90 93 b2 24 	sts	0x24B2, r25
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    2916:	80 e9       	ldi	r24, 0x90	; 144
    2918:	96 e2       	ldi	r25, 0x26	; 38
    291a:	80 93 b3 24 	sts	0x24B3, r24
    291e:	90 93 b4 24 	sts	0x24B4, r25
            LoadModState = LOADMOD_START;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	80 93 a6 24 	sts	0x24A6, r24

            StartDemod();
        }
    }

    if (Flags.LoadmodFinished) {
    2928:	80 91 b0 24 	lds	r24, 0x24B0
    292c:	88 23       	and	r24, r24
    292e:	b1 f2       	breq	.-84     	; 0x28dc <ISO14443ACodecTask+0x44>
        Flags.LoadmodFinished = 0;
    2930:	10 92 b0 24 	sts	0x24B0, r1
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    }
}
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28

    if (Flags.LoadmodFinished) {
        Flags.LoadmodFinished = 0;
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    2938:	81 cd       	rjmp	.-1278   	; 0x243c <StartDemod>
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    293a:	ac 01       	movw	r20, r24
    293c:	56 95       	lsr	r21
    293e:	47 95       	ror	r20
    2940:	56 95       	lsr	r21
    2942:	47 95       	ror	r20
    2944:	56 95       	lsr	r21
    2946:	47 95       	ror	r20
    2948:	41 15       	cp	r20, r1
    294a:	51 05       	cpc	r21, r1
    294c:	a1 f2       	breq	.-88     	; 0x28f6 <ISO14443ACodecTask+0x5e>
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
                            ODD_PARITY(CodecBuffer[i]);
    2954:	f9 01       	movw	r30, r18
    2956:	e0 5f       	subi	r30, 0xF0	; 240
    2958:	f9 4d       	sbci	r31, 0xD9	; 217
    295a:	20 81       	ld	r18, Z
    295c:	02 2e       	mov	r0, r18
    295e:	22 95       	swap	r18
    2960:	20 25       	eor	r18, r0
    2962:	02 2e       	mov	r0, r18
    2964:	26 95       	lsr	r18
    2966:	26 95       	lsr	r18
    2968:	20 25       	eor	r18, r0
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
    296a:	e0 58       	subi	r30, 0x80	; 128
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
                            ODD_PARITY(CodecBuffer[i]);
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	2f 5f       	subi	r18, 0xFF	; 255
    2972:	3f 4f       	sbci	r19, 0xFF	; 255
    2974:	21 fb       	bst	r18, 1
    2976:	77 27       	eor	r23, r23
    2978:	70 f9       	bld	r23, 0
    297a:	c7 2f       	mov	r28, r23
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	d2 2f       	mov	r29, r18
    2980:	71 e0       	ldi	r23, 0x01	; 1
    2982:	c7 27       	eor	r28, r23
    2984:	c0 83       	st	Z, r28
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    2986:	6f 5f       	subi	r22, 0xFF	; 255
    2988:	26 2f       	mov	r18, r22
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	24 17       	cp	r18, r20
    298e:	35 07       	cpc	r19, r21
    2990:	08 f3       	brcs	.-62     	; 0x2954 <ISO14443ACodecTask+0xbc>
    2992:	b1 cf       	rjmp	.-158    	; 0x28f6 <ISO14443ACodecTask+0x5e>

00002994 <MifareClassicAppInit1K>:
    Block[11] = Block[3];
}

void MifareClassicAppInit1K(void)
{
    State = STATE_IDLE;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	80 93 b5 24 	sts	0x24B5, r24
    CardATQAValue = MFCLASSIC_1K_ATQA_VALUE;
    299a:	84 e0       	ldi	r24, 0x04	; 4
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	80 93 b6 24 	sts	0x24B6, r24
    29a2:	90 93 b7 24 	sts	0x24B7, r25
    CardSAKValue = MFCLASSIC_1K_SAK_CL1_VALUE;
    29a6:	88 e0       	ldi	r24, 0x08	; 8
    29a8:	80 93 b8 24 	sts	0x24B8, r24
    29ac:	08 95       	ret

000029ae <MifareClassicAppInit4K>:
}

void MifareClassicAppInit4K(void)
{
    State = STATE_IDLE;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	80 93 b5 24 	sts	0x24B5, r24
    CardATQAValue = MFCLASSIC_4K_ATQA_VALUE;
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	80 93 b6 24 	sts	0x24B6, r24
    29bc:	90 93 b7 24 	sts	0x24B7, r25
    CardSAKValue = MFCLASSIC_4K_SAK_CL1_VALUE;
    29c0:	88 e1       	ldi	r24, 0x18	; 24
    29c2:	80 93 b8 24 	sts	0x24B8, r24
    29c6:	08 95       	ret

000029c8 <MifareClassicAppReset>:
}

void MifareClassicAppReset(void)
{
    State = STATE_IDLE;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	80 93 b5 24 	sts	0x24B5, r24
    29ce:	08 95       	ret

000029d0 <MifareClassicAppTask>:
}

void MifareClassicAppTask(void)
{
    29d0:	08 95       	ret

000029d2 <MifareClassicAppProcess>:

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    29d2:	6f 92       	push	r6
    29d4:	7f 92       	push	r7
    29d6:	8f 92       	push	r8
    29d8:	9f 92       	push	r9
    29da:	af 92       	push	r10
    29dc:	bf 92       	push	r11
    29de:	cf 92       	push	r12
    29e0:	df 92       	push	r13
    29e2:	ef 92       	push	r14
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	2e 97       	sbiw	r28, 0x0e	; 14
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	8c 01       	movw	r16, r24
    switch(State) {
    29fa:	80 91 b5 24 	lds	r24, 0x24B5
    29fe:	84 30       	cpi	r24, 0x04	; 4
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <MifareClassicAppProcess+0x32>
    2a02:	f4 c0       	rjmp	.+488    	; 0x2bec <MifareClassicAppProcess+0x21a>
    2a04:	08 f4       	brcc	.+2      	; 0x2a08 <MifareClassicAppProcess+0x36>
    2a06:	3b c0       	rjmp	.+118    	; 0x2a7e <MifareClassicAppProcess+0xac>
    2a08:	86 30       	cpi	r24, 0x06	; 6
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <MifareClassicAppProcess+0x3c>
    2a0c:	bd c0       	rjmp	.+378    	; 0x2b88 <MifareClassicAppProcess+0x1b6>
    2a0e:	08 f0       	brcs	.+2      	; 0x2a12 <MifareClassicAppProcess+0x40>
    2a10:	60 c0       	rjmp	.+192    	; 0x2ad2 <MifareClassicAppProcess+0x100>

    case STATE_AUTHED_IDLE:
        /* In this state, all communication is encrypted. Thus we first have to encrypt
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();
    2a12:	f8 01       	movw	r30, r16
    2a14:	d0 80       	ld	r13, Z
    2a16:	31 d7       	rcall	.+3682   	; 0x387a <Crypto1Byte>
    2a18:	8d 25       	eor	r24, r13
    2a1a:	d8 01       	movw	r26, r16
    2a1c:	8c 93       	st	X, r24
    2a1e:	11 96       	adiw	r26, 0x01	; 1
    2a20:	dc 90       	ld	r13, X
    2a22:	2b d7       	rcall	.+3670   	; 0x387a <Crypto1Byte>
    2a24:	8d 25       	eor	r24, r13
    2a26:	f8 01       	movw	r30, r16
    2a28:	81 83       	std	Z+1, r24	; 0x01
    2a2a:	d2 80       	ldd	r13, Z+2	; 0x02
    2a2c:	26 d7       	rcall	.+3660   	; 0x387a <Crypto1Byte>
    2a2e:	8d 25       	eor	r24, r13
    2a30:	d8 01       	movw	r26, r16
    2a32:	12 96       	adiw	r26, 0x02	; 2
    2a34:	8c 93       	st	X, r24
    2a36:	12 97       	sbiw	r26, 0x02	; 2
    2a38:	13 96       	adiw	r26, 0x03	; 3
    2a3a:	dc 90       	ld	r13, X
    2a3c:	1e d7       	rcall	.+3644   	; 0x387a <Crypto1Byte>
    2a3e:	8d 25       	eor	r24, r13
    2a40:	f8 01       	movw	r30, r16
    2a42:	83 83       	std	Z+3, r24	; 0x03

        if (Buffer[0] == CMD_READ) {
    2a44:	80 81       	ld	r24, Z
    2a46:	80 33       	cpi	r24, 0x30	; 48
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <MifareClassicAppProcess+0x7a>
    2a4a:	ac c2       	rjmp	.+1368   	; 0x2fa4 <MifareClassicAppProcess+0x5d2>
                        * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
    2a4c:	80 3a       	cpi	r24, 0xA0	; 160
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <MifareClassicAppProcess+0x80>
    2a50:	1f c3       	rjmp	.+1598   	; 0x3090 <__stack+0x91>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
    2a52:	80 3c       	cpi	r24, 0xC0	; 192
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <MifareClassicAppProcess+0x86>
    2a56:	3a c3       	rjmp	.+1652   	; 0x30cc <__stack+0xcd>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
    2a58:	81 3c       	cpi	r24, 0xC1	; 193
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <MifareClassicAppProcess+0x8c>
    2a5c:	da c3       	rjmp	.+1972   	; 0x3212 <__stack+0x213>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
    2a5e:	82 3c       	cpi	r24, 0xC2	; 194
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <MifareClassicAppProcess+0x92>
    2a62:	e7 c3       	rjmp	.+1998   	; 0x3232 <__stack+0x233>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
    2a64:	80 3b       	cpi	r24, 0xB0	; 176
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <MifareClassicAppProcess+0x98>
    2a68:	f1 c3       	rjmp	.+2018   	; 0x324c <__stack+0x24d>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
    2a6a:	80 56       	subi	r24, 0x60	; 96
    2a6c:	82 30       	cpi	r24, 0x02	; 2
    2a6e:	08 f4       	brcc	.+2      	; 0x2a72 <MifareClassicAppProcess+0xa0>
    2a70:	94 c1       	rjmp	.+808    	; 0x2d9a <MifareClassicAppProcess+0x3c8>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 93 b5 24 	sts	0x24B5, r24
        /* Unknown state? Should never happen. */
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
        }

        break;
    2a7c:	63 c0       	rjmp	.+198    	; 0x2b44 <MifareClassicAppProcess+0x172>

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <MifareClassicAppProcess+0xb2>
    2a82:	a0 c0       	rjmp	.+320    	; 0x2bc4 <MifareClassicAppProcess+0x1f2>
    2a84:	08 f4       	brcc	.+2      	; 0x2a88 <MifareClassicAppProcess+0xb6>
    2a86:	71 c0       	rjmp	.+226    	; 0x2b6a <MifareClassicAppProcess+0x198>
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    2a88:	f8 01       	movw	r30, r16
    2a8a:	80 81       	ld	r24, Z
    2a8c:	86 32       	cpi	r24, 0x26	; 38
    2a8e:	09 f4       	brne	.+2      	; 0x2a92 <MifareClassicAppProcess+0xc0>
    2a90:	6f c1       	rjmp	.+734    	; 0x2d70 <MifareClassicAppProcess+0x39e>
    2a92:	82 35       	cpi	r24, 0x52	; 82
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <MifareClassicAppProcess+0xc6>
    2a96:	6c c1       	rjmp	.+728    	; 0x2d70 <MifareClassicAppProcess+0x39e>

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, MFCLASSIC_1K_ATQA_VALUE)) {
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
    2a98:	80 35       	cpi	r24, 0x50	; 80
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <MifareClassicAppProcess+0xcc>
    2a9c:	74 c1       	rjmp	.+744    	; 0x2d86 <MifareClassicAppProcess+0x3b4>
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	90 56       	subi	r25, 0x60	; 96
    2aa2:	92 30       	cpi	r25, 0x02	; 2
    2aa4:	08 f4       	brcc	.+2      	; 0x2aa8 <MifareClassicAppProcess+0xd6>
    2aa6:	e6 c1       	rjmp	.+972    	; 0x2e74 <MifareClassicAppProcess+0x4a2>
                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (  (Buffer[0] == CMD_READ) || (Buffer[0] == CMD_WRITE) || (Buffer[0] == CMD_DECREMENT)
    2aa8:	80 33       	cpi	r24, 0x30	; 48
    2aaa:	51 f0       	breq	.+20     	; 0x2ac0 <MifareClassicAppProcess+0xee>
    2aac:	80 3a       	cpi	r24, 0xA0	; 160
    2aae:	41 f0       	breq	.+16     	; 0x2ac0 <MifareClassicAppProcess+0xee>
    2ab0:	80 3c       	cpi	r24, 0xC0	; 192
    2ab2:	31 f0       	breq	.+12     	; 0x2ac0 <MifareClassicAppProcess+0xee>
                  || (Buffer[0] == CMD_INCREMENT) || (Buffer[0] == CMD_RESTORE) || (Buffer[0] == CMD_TRANSFER) ) {
    2ab4:	81 3c       	cpi	r24, 0xC1	; 193
    2ab6:	21 f0       	breq	.+8      	; 0x2ac0 <MifareClassicAppProcess+0xee>
    2ab8:	82 3c       	cpi	r24, 0xC2	; 194
    2aba:	11 f0       	breq	.+4      	; 0x2ac0 <MifareClassicAppProcess+0xee>
    2abc:	80 3b       	cpi	r24, 0xB0	; 176
    2abe:	c9 f6       	brne	.-78     	; 0x2a72 <MifareClassicAppProcess+0xa0>
            State = STATE_IDLE;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	80 93 b5 24 	sts	0x24B5, r24
            Buffer[0] = NAK_NOT_AUTHED;
    2ac6:	84 e0       	ldi	r24, 0x04	; 4
    2ac8:	f8 01       	movw	r30, r16
    2aca:	80 83       	st	Z, r24
            return ACK_NAK_FRAME_SIZE;
    2acc:	24 e0       	ldi	r18, 0x04	; 4
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	39 c0       	rjmp	.+114    	; 0x2b44 <MifareClassicAppProcess+0x172>

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    2ad2:	8a 30       	cpi	r24, 0x0A	; 10
    2ad4:	08 f0       	brcs	.+2      	; 0x2ad8 <MifareClassicAppProcess+0x106>
    2ad6:	55 c0       	rjmp	.+170    	; 0x2b82 <MifareClassicAppProcess+0x1b0>
         * decrypt the data and check CRC. Read data from the requested block
         * address into the global block buffer and check for integrity. Then
         * add or subtract according to issued command if necessary and store
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    2ad8:	d8 01       	movw	r26, r16
    2ada:	fc 90       	ld	r15, X
    2adc:	ce d6       	rcall	.+3484   	; 0x387a <Crypto1Byte>
    2ade:	8f 25       	eor	r24, r15
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	80 83       	st	Z, r24
    2ae4:	f1 80       	ldd	r15, Z+1	; 0x01
    2ae6:	c9 d6       	rcall	.+3474   	; 0x387a <Crypto1Byte>
    2ae8:	8f 25       	eor	r24, r15
    2aea:	d8 01       	movw	r26, r16
    2aec:	11 96       	adiw	r26, 0x01	; 1
    2aee:	8c 93       	st	X, r24
    2af0:	11 97       	sbiw	r26, 0x01	; 1
    2af2:	12 96       	adiw	r26, 0x02	; 2
    2af4:	fc 90       	ld	r15, X
    2af6:	c1 d6       	rcall	.+3458   	; 0x387a <Crypto1Byte>
    2af8:	8f 25       	eor	r24, r15
    2afa:	f8 01       	movw	r30, r16
    2afc:	82 83       	std	Z+2, r24	; 0x02
    2afe:	f3 80       	ldd	r15, Z+3	; 0x03
    2b00:	bc d6       	rcall	.+3448   	; 0x387a <Crypto1Byte>
    2b02:	8f 25       	eor	r24, r15
    2b04:	d8 01       	movw	r26, r16
    2b06:	13 96       	adiw	r26, 0x03	; 3
    2b08:	8c 93       	st	X, r24
    2b0a:	13 97       	sbiw	r26, 0x03	; 3
    2b0c:	14 96       	adiw	r26, 0x04	; 4
    2b0e:	fc 90       	ld	r15, X
    2b10:	b4 d6       	rcall	.+3432   	; 0x387a <Crypto1Byte>
    2b12:	8f 25       	eor	r24, r15
    2b14:	f8 01       	movw	r30, r16
    2b16:	84 83       	std	Z+4, r24	; 0x04
    2b18:	f5 80       	ldd	r15, Z+5	; 0x05
    2b1a:	af d6       	rcall	.+3422   	; 0x387a <Crypto1Byte>
    2b1c:	8f 25       	eor	r24, r15
    2b1e:	d8 01       	movw	r26, r16
    2b20:	15 96       	adiw	r26, 0x05	; 5
    2b22:	8c 93       	st	X, r24

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
    2b24:	64 e0       	ldi	r22, 0x04	; 4
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	c8 01       	movw	r24, r16
    2b2a:	25 d4       	rcall	.+2122   	; 0x3376 <ISO14443ACheckCRCA>
    2b2c:	81 11       	cpse	r24, r1
    2b2e:	0c c2       	rjmp	.+1048   	; 0x2f48 <MifareClassicAppProcess+0x576>
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
            }
        } else {
            /* CRC Error. */
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2b30:	e5 d6       	rcall	.+3530   	; 0x38fc <Crypto1Nibble>
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	98 27       	eor	r25, r24
    2b36:	f8 01       	movw	r30, r16
    2b38:	90 83       	st	Z, r25
        }

        State = STATE_AUTHED_IDLE;
    2b3a:	85 e0       	ldi	r24, 0x05	; 5
    2b3c:	80 93 b5 24 	sts	0x24B5, r24
        return ACK_NAK_FRAME_SIZE;
    2b40:	24 e0       	ldi	r18, 0x04	; 4
    2b42:	30 e0       	ldi	r19, 0x00	; 0
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
}
    2b44:	c9 01       	movw	r24, r18
    2b46:	2e 96       	adiw	r28, 0x0e	; 14
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	cf 90       	pop	r12
    2b5c:	bf 90       	pop	r11
    2b5e:	af 90       	pop	r10
    2b60:	9f 90       	pop	r9
    2b62:	8f 90       	pop	r8
    2b64:	7f 90       	pop	r7
    2b66:	6f 90       	pop	r6
    2b68:	08 95       	ret
uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    case STATE_IDLE:
    case STATE_HALT:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    2b6a:	20 91 b6 24 	lds	r18, 0x24B6
    2b6e:	90 91 b7 24 	lds	r25, 0x24B7
    2b72:	d8 01       	movw	r26, r16
    2b74:	8c 91       	ld	r24, X
    2b76:	86 32       	cpi	r24, 0x26	; 38
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <MifareClassicAppProcess+0x1aa>
    2b7a:	f1 c0       	rjmp	.+482    	; 0x2d5e <MifareClassicAppProcess+0x38c>
    2b7c:	82 35       	cpi	r24, 0x52	; 82
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <MifareClassicAppProcess+0x1b0>
    2b80:	ee c0       	rjmp	.+476    	; 0x2d5e <MifareClassicAppProcess+0x38c>

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
            return true;
        } else {
            /* We have not been selected. Don't send anything. */
            *BitCount = 0;
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	de cf       	rjmp	.-68     	; 0x2b44 <MifareClassicAppProcess+0x172>
    2b88:	78 01       	movw	r14, r16

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    2b8a:	52 e1       	ldi	r21, 0x12	; 18
    2b8c:	d5 2e       	mov	r13, r21
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    2b8e:	d7 01       	movw	r26, r14
    2b90:	cc 90       	ld	r12, X
    2b92:	73 d6       	rcall	.+3302   	; 0x387a <Crypto1Byte>
    2b94:	8c 25       	eor	r24, r12
    2b96:	f7 01       	movw	r30, r14
    2b98:	81 93       	st	Z+, r24
    2b9a:	7f 01       	movw	r14, r30
    2b9c:	da 94       	dec	r13
         * sending the data to be written. Decrypt the data first and
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
    2b9e:	b9 f7       	brne	.-18     	; 0x2b8e <MifareClassicAppProcess+0x1bc>
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
    2ba0:	60 e1       	ldi	r22, 0x10	; 16
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	c8 01       	movw	r24, r16
    2ba6:	e7 d3       	rcall	.+1998   	; 0x3376 <ISO14443ACheckCRCA>
    2ba8:	88 23       	and	r24, r24
    2baa:	09 f4       	brne	.+2      	; 0x2bae <MifareClassicAppProcess+0x1dc>
    2bac:	c1 cf       	rjmp	.-126    	; 0x2b30 <MifareClassicAppProcess+0x15e>
            if (!ActiveConfiguration.ReadOnly) {
    2bae:	80 91 fc 24 	lds	r24, 0x24FC
    2bb2:	88 23       	and	r24, r24
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <MifareClassicAppProcess+0x1e6>
    2bb6:	e2 c1       	rjmp	.+964    	; 0x2f7c <MifareClassicAppProcess+0x5aa>
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
            } else {
                /* Silently ignore in ReadOnly mode */
            }

            Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2bb8:	a1 d6       	rcall	.+3394   	; 0x38fc <Crypto1Nibble>
    2bba:	9a e0       	ldi	r25, 0x0A	; 10
    2bbc:	98 27       	eor	r25, r24
    2bbe:	d8 01       	movw	r26, r16
    2bc0:	9c 93       	st	X, r25
    2bc2:	bb cf       	rjmp	.-138    	; 0x2b3a <MifareClassicAppProcess+0x168>
            return BitCount;
        }
        break;

    case STATE_READY:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    2bc4:	20 91 b6 24 	lds	r18, 0x24B6
    2bc8:	90 91 b7 24 	lds	r25, 0x24B7
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    2bcc:	d8 01       	movw	r26, r16
    2bce:	8c 91       	ld	r24, X
    2bd0:	86 32       	cpi	r24, 0x26	; 38
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <MifareClassicAppProcess+0x204>
    2bd4:	c4 c0       	rjmp	.+392    	; 0x2d5e <MifareClassicAppProcess+0x38c>
    2bd6:	82 35       	cpi	r24, 0x52	; 82
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <MifareClassicAppProcess+0x20a>
    2bda:	c1 c0       	rjmp	.+386    	; 0x2d5e <MifareClassicAppProcess+0x38c>
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
    2bdc:	83 39       	cpi	r24, 0x93	; 147
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <MifareClassicAppProcess+0x210>
    2be0:	20 c2       	rjmp	.+1088   	; 0x3022 <__stack+0x23>
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
    2be2:	10 92 b5 24 	sts	0x24B5, r1
                    return ISO14443A_APP_NO_RESPONSE;
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	ac cf       	rjmp	.-168    	; 0x2b44 <MifareClassicAppProcess+0x172>

    case STATE_AUTHING:
        /* Reader delivers an encrypted nonce. We use it
        * to setup the crypto1 LFSR in nonlinear feedback mode.
        * Furthermore it delivers an encrypted answer. Decrypt and check it */
        Crypto1Auth(&Buffer[0]);
    2bec:	c8 01       	movw	r24, r16
    2bee:	1c d6       	rcall	.+3128   	; 0x3828 <Crypto1Auth>

        for (uint8_t i=0; i<4; i++)
            Buffer[i+4] ^= Crypto1Byte();
    2bf0:	d8 01       	movw	r26, r16
    2bf2:	14 96       	adiw	r26, 0x04	; 4
    2bf4:	fc 90       	ld	r15, X
    2bf6:	41 d6       	rcall	.+3202   	; 0x387a <Crypto1Byte>
    2bf8:	8f 25       	eor	r24, r15
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	84 83       	std	Z+4, r24	; 0x04
    2bfe:	f5 80       	ldd	r15, Z+5	; 0x05
    2c00:	3c d6       	rcall	.+3192   	; 0x387a <Crypto1Byte>
    2c02:	8f 25       	eor	r24, r15
    2c04:	d8 01       	movw	r26, r16
    2c06:	15 96       	adiw	r26, 0x05	; 5
    2c08:	8c 93       	st	X, r24
    2c0a:	15 97       	sbiw	r26, 0x05	; 5
    2c0c:	16 96       	adiw	r26, 0x06	; 6
    2c0e:	fc 90       	ld	r15, X
    2c10:	34 d6       	rcall	.+3176   	; 0x387a <Crypto1Byte>
    2c12:	8f 25       	eor	r24, r15
    2c14:	f8 01       	movw	r30, r16
    2c16:	86 83       	std	Z+6, r24	; 0x06
    2c18:	f7 80       	ldd	r15, Z+7	; 0x07
    2c1a:	2f d6       	rcall	.+3166   	; 0x387a <Crypto1Byte>
    2c1c:	8f 25       	eor	r24, r15
    2c1e:	d8 01       	movw	r26, r16
    2c20:	17 96       	adiw	r26, 0x07	; 7
    2c22:	8c 93       	st	X, r24
    2c24:	17 97       	sbiw	r26, 0x07	; 7

        if ((Buffer[4] == ReaderResponse[0]) &&
    2c26:	14 96       	adiw	r26, 0x04	; 4
    2c28:	2c 91       	ld	r18, X
    2c2a:	14 97       	sbiw	r26, 0x04	; 4
    2c2c:	90 91 b9 24 	lds	r25, 0x24B9
    2c30:	29 13       	cpse	r18, r25
    2c32:	1f cf       	rjmp	.-450    	; 0x2a72 <MifareClassicAppProcess+0xa0>
    2c34:	15 96       	adiw	r26, 0x05	; 5
    2c36:	2c 91       	ld	r18, X
    2c38:	15 97       	sbiw	r26, 0x05	; 5
    2c3a:	90 91 ba 24 	lds	r25, 0x24BA
    2c3e:	29 13       	cpse	r18, r25
    2c40:	18 cf       	rjmp	.-464    	; 0x2a72 <MifareClassicAppProcess+0xa0>
            (Buffer[5] == ReaderResponse[1]) &&
    2c42:	16 96       	adiw	r26, 0x06	; 6
    2c44:	2c 91       	ld	r18, X
    2c46:	90 91 bb 24 	lds	r25, 0x24BB
    2c4a:	29 13       	cpse	r18, r25
    2c4c:	12 cf       	rjmp	.-476    	; 0x2a72 <MifareClassicAppProcess+0xa0>
            (Buffer[6] == ReaderResponse[2]) &&
    2c4e:	90 91 bc 24 	lds	r25, 0x24BC
    2c52:	89 13       	cpse	r24, r25
    2c54:	0e cf       	rjmp	.-484    	; 0x2a72 <MifareClassicAppProcess+0xa0>
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2c56:	f0 90 bd 24 	lds	r15, 0x24BD
    2c5a:	0f d6       	rcall	.+3102   	; 0x387a <Crypto1Byte>
    2c5c:	8f 25       	eor	r24, r15
    2c5e:	f8 01       	movw	r30, r16
    2c60:	80 83       	st	Z, r24
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2c62:	f0 90 bd 24 	lds	r15, 0x24BD
    2c66:	0f 2c       	mov	r0, r15
    2c68:	f2 94       	swap	r15
    2c6a:	f0 24       	eor	r15, r0
    2c6c:	0f 2c       	mov	r0, r15
    2c6e:	f6 94       	lsr	r15
    2c70:	f6 94       	lsr	r15
    2c72:	f0 24       	eor	r15, r0
    2c74:	05 d4       	rcall	.+2058   	; 0x3480 <Crypto1FilterOutput>
    2c76:	f8 01       	movw	r30, r16
    2c78:	e0 58       	subi	r30, 0x80	; 128
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	2f 2d       	mov	r18, r15
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	2f 5f       	subi	r18, 0xFF	; 255
    2c82:	3f 4f       	sbci	r19, 0xFF	; 255
    2c84:	21 fb       	bst	r18, 1
    2c86:	88 24       	eor	r8, r8
    2c88:	80 f8       	bld	r8, 0
    2c8a:	91 2c       	mov	r9, r1
    2c8c:	31 e0       	ldi	r19, 0x01	; 1
    2c8e:	83 26       	eor	r8, r19
    2c90:	88 25       	eor	r24, r8
    2c92:	80 83       	st	Z, r24
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2c94:	f0 90 be 24 	lds	r15, 0x24BE
    2c98:	f0 d5       	rcall	.+3040   	; 0x387a <Crypto1Byte>
    2c9a:	8f 25       	eor	r24, r15
    2c9c:	d8 01       	movw	r26, r16
    2c9e:	11 96       	adiw	r26, 0x01	; 1
    2ca0:	8c 93       	st	X, r24
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2ca2:	f0 90 be 24 	lds	r15, 0x24BE
    2ca6:	0f 2c       	mov	r0, r15
    2ca8:	f2 94       	swap	r15
    2caa:	f0 24       	eor	r15, r0
    2cac:	0f 2c       	mov	r0, r15
    2cae:	f6 94       	lsr	r15
    2cb0:	f6 94       	lsr	r15
    2cb2:	f0 24       	eor	r15, r0
    2cb4:	e5 d3       	rcall	.+1994   	; 0x3480 <Crypto1FilterOutput>
    2cb6:	f8 01       	movw	r30, r16
    2cb8:	ef 57       	subi	r30, 0x7F	; 127
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	2f 2d       	mov	r18, r15
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	2f 5f       	subi	r18, 0xFF	; 255
    2cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc4:	21 fb       	bst	r18, 1
    2cc6:	aa 24       	eor	r10, r10
    2cc8:	a0 f8       	bld	r10, 0
    2cca:	b1 2c       	mov	r11, r1
    2ccc:	b1 e0       	ldi	r27, 0x01	; 1
    2cce:	ab 26       	eor	r10, r27
    2cd0:	8a 25       	eor	r24, r10
    2cd2:	80 83       	st	Z, r24
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2cd4:	f0 90 bf 24 	lds	r15, 0x24BF
    2cd8:	d0 d5       	rcall	.+2976   	; 0x387a <Crypto1Byte>
    2cda:	8f 25       	eor	r24, r15
    2cdc:	f8 01       	movw	r30, r16
    2cde:	82 83       	std	Z+2, r24	; 0x02
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2ce0:	f0 90 bf 24 	lds	r15, 0x24BF
    2ce4:	0f 2c       	mov	r0, r15
    2ce6:	f2 94       	swap	r15
    2ce8:	f0 24       	eor	r15, r0
    2cea:	0f 2c       	mov	r0, r15
    2cec:	f6 94       	lsr	r15
    2cee:	f6 94       	lsr	r15
    2cf0:	f0 24       	eor	r15, r0
    2cf2:	c6 d3       	rcall	.+1932   	; 0x3480 <Crypto1FilterOutput>
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	ee 57       	subi	r30, 0x7E	; 126
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	2f 2d       	mov	r18, r15
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	2f 5f       	subi	r18, 0xFF	; 255
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	21 fb       	bst	r18, 1
    2d04:	cc 24       	eor	r12, r12
    2d06:	c0 f8       	bld	r12, 0
    2d08:	d1 2c       	mov	r13, r1
    2d0a:	31 e0       	ldi	r19, 0x01	; 1
    2d0c:	c3 26       	eor	r12, r19
    2d0e:	8c 25       	eor	r24, r12
    2d10:	80 83       	st	Z, r24
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2d12:	f0 90 c0 24 	lds	r15, 0x24C0
    2d16:	b1 d5       	rcall	.+2914   	; 0x387a <Crypto1Byte>
    2d18:	8f 25       	eor	r24, r15
    2d1a:	d8 01       	movw	r26, r16
    2d1c:	13 96       	adiw	r26, 0x03	; 3
    2d1e:	8c 93       	st	X, r24
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2d20:	f0 90 c0 24 	lds	r15, 0x24C0
    2d24:	0f 2c       	mov	r0, r15
    2d26:	f2 94       	swap	r15
    2d28:	f0 24       	eor	r15, r0
    2d2a:	0f 2c       	mov	r0, r15
    2d2c:	f6 94       	lsr	r15
    2d2e:	f6 94       	lsr	r15
    2d30:	f0 24       	eor	r15, r0
    2d32:	a6 d3       	rcall	.+1868   	; 0x3480 <Crypto1FilterOutput>
    2d34:	f8 01       	movw	r30, r16
    2d36:	ed 57       	subi	r30, 0x7D	; 125
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	2f 2d       	mov	r18, r15
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	2f 5f       	subi	r18, 0xFF	; 255
    2d40:	3f 4f       	sbci	r19, 0xFF	; 255
    2d42:	21 fb       	bst	r18, 1
    2d44:	66 24       	eor	r6, r6
    2d46:	60 f8       	bld	r6, 0
    2d48:	71 2c       	mov	r7, r1
    2d4a:	b1 e0       	ldi	r27, 0x01	; 1
    2d4c:	6b 26       	eor	r6, r27
    2d4e:	86 25       	eor	r24, r6
    2d50:	80 83       	st	Z, r24
            }

            State = STATE_AUTHED_IDLE;
    2d52:	85 e0       	ldi	r24, 0x05	; 5
    2d54:	80 93 b5 24 	sts	0x24B5, r24

            return (CMD_AUTH_BA_FRAME_SIZE * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
    2d58:	20 e2       	ldi	r18, 0x20	; 32
    2d5a:	30 e1       	ldi	r19, 0x10	; 16
    2d5c:	f3 ce       	rjmp	.-538    	; 0x2b44 <MifareClassicAppProcess+0x172>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    2d5e:	f8 01       	movw	r30, r16
    2d60:	20 83       	st	Z, r18
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    2d62:	91 83       	std	Z+1, r25	; 0x01
        }
        break;

    case STATE_READY:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
            State = STATE_READY;
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	80 93 b5 24 	sts	0x24B5, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    2d6a:	20 e1       	ldi	r18, 0x10	; 16
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
            return BitCount;
    2d6e:	ea ce       	rjmp	.-556    	; 0x2b44 <MifareClassicAppProcess+0x172>
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    2d70:	84 e0       	ldi	r24, 0x04	; 4
    2d72:	d8 01       	movw	r26, r16
    2d74:	8c 93       	st	X, r24
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    2d76:	11 96       	adiw	r26, 0x01	; 1
    2d78:	1c 92       	st	X, r1
        }
        break;

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, MFCLASSIC_1K_ATQA_VALUE)) {
            State = STATE_READY;
    2d7a:	82 e0       	ldi	r24, 0x02	; 2
    2d7c:	80 93 b5 24 	sts	0x24B5, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    2d80:	20 e1       	ldi	r18, 0x10	; 16
    2d82:	30 e0       	ldi	r19, 0x00	; 0
            return BitCount;
    2d84:	df ce       	rjmp	.-578    	; 0x2b44 <MifareClassicAppProcess+0x172>
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
    2d86:	f8 01       	movw	r30, r16
    2d88:	81 81       	ldd	r24, Z+1	; 0x01
    2d8a:	88 23       	and	r24, r24
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <MifareClassicAppProcess+0x3be>
    2d8e:	7c c2       	rjmp	.+1272   	; 0x3288 <__stack+0x289>
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
                    return ACK_NAK_FRAME_SIZE;
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
    2d90:	f8 01       	movw	r30, r16
    2d92:	10 82       	st	Z, r1
                return ACK_NAK_FRAME_SIZE;
    2d94:	24 e0       	ldi	r18, 0x04	; 4
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	d5 ce       	rjmp	.-598    	; 0x2b44 <MifareClassicAppProcess+0x172>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    2d9a:	62 e0       	ldi	r22, 0x02	; 2
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	c8 01       	movw	r24, r16
    2da0:	ea d2       	rcall	.+1492   	; 0x3376 <ISO14443ACheckCRCA>
    2da2:	88 23       	and	r24, r24
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <MifareClassicAppProcess+0x3d6>
    2da6:	f6 c0       	rjmp	.+492    	; 0x2f94 <MifareClassicAppProcess+0x5c2>
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    2da8:	f8 01       	movw	r30, r16
    2daa:	81 81       	ldd	r24, Z+1	; 0x01
    2dac:	8c 73       	andi	r24, 0x3C	; 60
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    2dae:	90 81       	ld	r25, Z
    2db0:	90 36       	cpi	r25, 0x60	; 96
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <MifareClassicAppProcess+0x3e4>
    2db4:	85 c2       	rjmp	.+1290   	; 0x32c0 <__stack+0x2c1>
    2db6:	6a e3       	ldi	r22, 0x3A	; 58
    2db8:	70 e0       	ldi	r23, 0x00	; 0
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    2dba:	7b 01       	movw	r14, r22
    2dbc:	f0 e1       	ldi	r31, 0x10	; 16
    2dbe:	8f 9f       	mul	r24, r31
    2dc0:	e0 0c       	add	r14, r0
    2dc2:	f1 1c       	adc	r15, r1
    2dc4:	11 24       	eor	r1, r1
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    2dc6:	64 e0       	ldi	r22, 0x04	; 4
    2dc8:	ce 01       	movw	r24, r28
    2dca:	07 96       	adiw	r24, 0x07	; 7
    2dcc:	0e 94 03 05 	call	0xa06	; 0xa06 <RandomGetBuffer>
                MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2dd0:	44 e0       	ldi	r20, 0x04	; 4
    2dd2:	50 e0       	ldi	r21, 0x00	; 0
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	ce 01       	movw	r24, r28
    2dda:	0b 96       	adiw	r24, 0x0b	; 11
    2ddc:	0e 94 a2 05 	call	0xb44	; 0xb44 <MemoryReadBlock>
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    2de0:	46 e0       	ldi	r20, 0x06	; 6
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	b7 01       	movw	r22, r14
    2de6:	ce 01       	movw	r24, r28
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	0e 94 a2 05 	call	0xb44	; 0xb44 <MemoryReadBlock>

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];
    2dee:	8f 81       	ldd	r24, Y+7	; 0x07
    2df0:	80 93 b9 24 	sts	0x24B9, r24
    2df4:	88 85       	ldd	r24, Y+8	; 0x08
    2df6:	80 93 ba 24 	sts	0x24BA, r24
    2dfa:	89 85       	ldd	r24, Y+9	; 0x09
    2dfc:	80 93 bb 24 	sts	0x24BB, r24
    2e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e02:	80 93 bc 24 	sts	0x24BC, r24

                Crypto1PRNG(ReaderResponse, 64);
    2e06:	60 e4       	ldi	r22, 0x40	; 64
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	89 eb       	ldi	r24, 0xB9	; 185
    2e0c:	94 e2       	ldi	r25, 0x24	; 36
    2e0e:	9a d5       	rcall	.+2868   	; 0x3944 <Crypto1PRNG>

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];
    2e10:	80 91 b9 24 	lds	r24, 0x24B9
    2e14:	80 93 bd 24 	sts	0x24BD, r24
    2e18:	80 91 ba 24 	lds	r24, 0x24BA
    2e1c:	80 93 be 24 	sts	0x24BE, r24
    2e20:	80 91 bb 24 	lds	r24, 0x24BB
    2e24:	80 93 bf 24 	sts	0x24BF, r24
    2e28:	80 91 bc 24 	lds	r24, 0x24BC
    2e2c:	80 93 c0 24 	sts	0x24C0, r24

                Crypto1PRNG(CardResponse, 32);
    2e30:	60 e2       	ldi	r22, 0x20	; 32
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	8d eb       	ldi	r24, 0xBD	; 189
    2e36:	94 e2       	ldi	r25, 0x24	; 36
    2e38:	85 d5       	rcall	.+2826   	; 0x3944 <Crypto1PRNG>

                /* Setup crypto1 cipher. */
                Crypto1Setup(Key, Uid, CardNonce);
    2e3a:	ae 01       	movw	r20, r28
    2e3c:	49 5f       	subi	r20, 0xF9	; 249
    2e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e40:	be 01       	movw	r22, r28
    2e42:	65 5f       	subi	r22, 0xF5	; 245
    2e44:	7f 4f       	sbci	r23, 0xFF	; 255
    2e46:	ce 01       	movw	r24, r28
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	4e d3       	rcall	.+1692   	; 0x34e8 <Crypto1Setup>

                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];
    2e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e4e:	d8 01       	movw	r26, r16
    2e50:	8c 93       	st	X, r24
    2e52:	88 85       	ldd	r24, Y+8	; 0x08
    2e54:	11 96       	adiw	r26, 0x01	; 1
    2e56:	8c 93       	st	X, r24
    2e58:	11 97       	sbiw	r26, 0x01	; 1
    2e5a:	89 85       	ldd	r24, Y+9	; 0x09
    2e5c:	12 96       	adiw	r26, 0x02	; 2
    2e5e:	8c 93       	st	X, r24
    2e60:	12 97       	sbiw	r26, 0x02	; 2
    2e62:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e64:	13 96       	adiw	r26, 0x03	; 3
    2e66:	8c 93       	st	X, r24

                /* Respond with the encrypted random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    2e68:	84 e0       	ldi	r24, 0x04	; 4
    2e6a:	80 93 b5 24 	sts	0x24B5, r24

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    2e6e:	20 e2       	ldi	r18, 0x20	; 32
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	68 ce       	rjmp	.-816    	; 0x2b44 <MifareClassicAppProcess+0x172>
            } else {
                Buffer[0] = NAK_INVALID_ARG;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    2e74:	62 e0       	ldi	r22, 0x02	; 2
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	c8 01       	movw	r24, r16
    2e7a:	7d d2       	rcall	.+1274   	; 0x3376 <ISO14443ACheckCRCA>
    2e7c:	88 23       	and	r24, r24
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <MifareClassicAppProcess+0x4b0>
    2e80:	09 c2       	rjmp	.+1042   	; 0x3294 <__stack+0x295>
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    2e82:	d8 01       	movw	r26, r16
    2e84:	11 96       	adiw	r26, 0x01	; 1
    2e86:	2c 91       	ld	r18, X
    2e88:	11 97       	sbiw	r26, 0x01	; 1
    2e8a:	2c 73       	andi	r18, 0x3C	; 60
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    2e8c:	8c 91       	ld	r24, X
    2e8e:	80 36       	cpi	r24, 0x60	; 96
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <MifareClassicAppProcess+0x4c2>
    2e92:	19 c2       	rjmp	.+1074   	; 0x32c6 <__stack+0x2c7>
    2e94:	8a e3       	ldi	r24, 0x3A	; 58
    2e96:	90 e0       	ldi	r25, 0x00	; 0
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    2e98:	7c 01       	movw	r14, r24
    2e9a:	b0 e1       	ldi	r27, 0x10	; 16
    2e9c:	2b 9f       	mul	r18, r27
    2e9e:	e0 0c       	add	r14, r0
    2ea0:	f1 1c       	adc	r15, r1
    2ea2:	11 24       	eor	r1, r1
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    2ea4:	64 e0       	ldi	r22, 0x04	; 4
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	07 96       	adiw	r24, 0x07	; 7
    2eaa:	0e 94 03 05 	call	0xa06	; 0xa06 <RandomGetBuffer>
                MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2eae:	44 e0       	ldi	r20, 0x04	; 4
    2eb0:	50 e0       	ldi	r21, 0x00	; 0
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	70 e0       	ldi	r23, 0x00	; 0
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	0b 96       	adiw	r24, 0x0b	; 11
    2eba:	0e 94 a2 05 	call	0xb44	; 0xb44 <MemoryReadBlock>
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    2ebe:	46 e0       	ldi	r20, 0x06	; 6
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	b7 01       	movw	r22, r14
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	0e 94 a2 05 	call	0xb44	; 0xb44 <MemoryReadBlock>

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];
    2ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ece:	80 93 b9 24 	sts	0x24B9, r24
    2ed2:	88 85       	ldd	r24, Y+8	; 0x08
    2ed4:	80 93 ba 24 	sts	0x24BA, r24
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	80 93 bb 24 	sts	0x24BB, r24
    2ede:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ee0:	80 93 bc 24 	sts	0x24BC, r24

                Crypto1PRNG(ReaderResponse, 64);
    2ee4:	60 e4       	ldi	r22, 0x40	; 64
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	89 eb       	ldi	r24, 0xB9	; 185
    2eea:	94 e2       	ldi	r25, 0x24	; 36
    2eec:	2b d5       	rcall	.+2646   	; 0x3944 <Crypto1PRNG>

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];
    2eee:	80 91 b9 24 	lds	r24, 0x24B9
    2ef2:	80 93 bd 24 	sts	0x24BD, r24
    2ef6:	80 91 ba 24 	lds	r24, 0x24BA
    2efa:	80 93 be 24 	sts	0x24BE, r24
    2efe:	80 91 bb 24 	lds	r24, 0x24BB
    2f02:	80 93 bf 24 	sts	0x24BF, r24
    2f06:	80 91 bc 24 	lds	r24, 0x24BC
    2f0a:	80 93 c0 24 	sts	0x24C0, r24

                Crypto1PRNG(CardResponse, 32);
    2f0e:	60 e2       	ldi	r22, 0x20	; 32
    2f10:	70 e0       	ldi	r23, 0x00	; 0
    2f12:	8d eb       	ldi	r24, 0xBD	; 189
    2f14:	94 e2       	ldi	r25, 0x24	; 36
    2f16:	16 d5       	rcall	.+2604   	; 0x3944 <Crypto1PRNG>

                /* Respond with the random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    2f18:	84 e0       	ldi	r24, 0x04	; 4
    2f1a:	80 93 b5 24 	sts	0x24B5, r24

                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];
    2f1e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f20:	f8 01       	movw	r30, r16
    2f22:	80 83       	st	Z, r24
    2f24:	88 85       	ldd	r24, Y+8	; 0x08
    2f26:	81 83       	std	Z+1, r24	; 0x01
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	82 83       	std	Z+2, r24	; 0x02
    2f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f2e:	83 83       	std	Z+3, r24	; 0x03

                /* Setup crypto1 cipher. Discard in-place encrypted CardNonce. */
                Crypto1Setup(Key, Uid, CardNonce);
    2f30:	ae 01       	movw	r20, r28
    2f32:	49 5f       	subi	r20, 0xF9	; 249
    2f34:	5f 4f       	sbci	r21, 0xFF	; 255
    2f36:	be 01       	movw	r22, r28
    2f38:	65 5f       	subi	r22, 0xF5	; 245
    2f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	d3 d2       	rcall	.+1446   	; 0x34e8 <Crypto1Setup>

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    2f42:	20 e2       	ldi	r18, 0x20	; 32
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	fe cd       	rjmp	.-1028   	; 0x2b44 <MifareClassicAppProcess+0x172>
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
            MemoryReadBlock(BlockBuffer, (uint16_t) CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2f48:	60 91 c1 24 	lds	r22, 0x24C1
    2f4c:	b0 e1       	ldi	r27, 0x10	; 16
    2f4e:	6b 9f       	mul	r22, r27
    2f50:	b0 01       	movw	r22, r0
    2f52:	11 24       	eor	r1, r1
    2f54:	40 e1       	ldi	r20, 0x10	; 16
    2f56:	50 e0       	ldi	r21, 0x00	; 0
    2f58:	82 ec       	ldi	r24, 0xC2	; 194
    2f5a:	94 e2       	ldi	r25, 0x24	; 36
    2f5c:	0e 94 a2 05 	call	0xb44	; 0xb44 <MemoryReadBlock>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    2f60:	20 91 c2 24 	lds	r18, 0x24C2
    2f64:	80 91 c6 24 	lds	r24, 0x24C6
    2f68:	80 95       	com	r24
    2f6a:	28 17       	cp	r18, r24
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <MifareClassicAppProcess+0x59e>
    2f6e:	c4 c0       	rjmp	.+392    	; 0x30f8 <__stack+0xf9>
                State = STATE_AUTHED_IDLE;
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
            } else {
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
    2f70:	c5 d4       	rcall	.+2442   	; 0x38fc <Crypto1Nibble>
    2f72:	96 e0       	ldi	r25, 0x06	; 6
    2f74:	98 27       	eor	r25, r24
    2f76:	d8 01       	movw	r26, r16
    2f78:	9c 93       	st	X, r25
    2f7a:	df cd       	rjmp	.-1090   	; 0x2b3a <MifareClassicAppProcess+0x168>
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
            if (!ActiveConfiguration.ReadOnly) {
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2f7c:	60 91 c1 24 	lds	r22, 0x24C1
    2f80:	f0 e1       	ldi	r31, 0x10	; 16
    2f82:	6f 9f       	mul	r22, r31
    2f84:	b0 01       	movw	r22, r0
    2f86:	11 24       	eor	r1, r1
    2f88:	40 e1       	ldi	r20, 0x10	; 16
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	c8 01       	movw	r24, r16
    2f8e:	0e 94 ba 05 	call	0xb74	; 0xb74 <MemoryWriteBlock>
    2f92:	12 ce       	rjmp	.-988    	; 0x2bb8 <MifareClassicAppProcess+0x1e6>
                * form the reader in the next frame. */
                State = STATE_AUTHING;

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2f94:	b3 d4       	rcall	.+2406   	; 0x38fc <Crypto1Nibble>
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	98 27       	eor	r25, r24
    2f9a:	f8 01       	movw	r30, r16
    2f9c:	90 83       	st	Z, r25
                return ACK_NAK_FRAME_SIZE;
    2f9e:	24 e0       	ldi	r18, 0x04	; 4
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	d0 cd       	rjmp	.-1120   	; 0x2b44 <MifareClassicAppProcess+0x172>
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
    2fa4:	62 e0       	ldi	r22, 0x02	; 2
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	c8 01       	movw	r24, r16
    2faa:	e5 d1       	rcall	.+970    	; 0x3376 <ISO14443ACheckCRCA>
    2fac:	88 23       	and	r24, r24
    2fae:	91 f3       	breq	.-28     	; 0x2f94 <MifareClassicAppProcess+0x5c2>
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2fb0:	d8 01       	movw	r26, r16
    2fb2:	11 96       	adiw	r26, 0x01	; 1
    2fb4:	6c 91       	ld	r22, X
    2fb6:	b0 e1       	ldi	r27, 0x10	; 16
    2fb8:	6b 9f       	mul	r22, r27
    2fba:	b0 01       	movw	r22, r0
    2fbc:	11 24       	eor	r1, r1
    2fbe:	40 e1       	ldi	r20, 0x10	; 16
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	c8 01       	movw	r24, r16
    2fc4:	0e 94 a2 05 	call	0xb44	; 0xb44 <MemoryReadBlock>
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);
    2fc8:	60 e1       	ldi	r22, 0x10	; 16
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	c8 01       	movw	r24, r16
    2fce:	a4 d1       	rcall	.+840    	; 0x3318 <ISO14443AAppendCRCA>
void MifareClassicAppTask(void)
{

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
    2fd0:	68 01       	movw	r12, r16
    2fd2:	e0 e8       	ldi	r30, 0x80	; 128
    2fd4:	ce 0e       	add	r12, r30
    2fd6:	d1 1c       	adc	r13, r1
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
    2fd8:	a1 2c       	mov	r10, r1
                    uint8_t Plain = Buffer[i];
    2fda:	d8 01       	movw	r26, r16
    2fdc:	bc 90       	ld	r11, X
                    Buffer[i] = Plain ^ Crypto1Byte();
    2fde:	4d d4       	rcall	.+2202   	; 0x387a <Crypto1Byte>
    2fe0:	8b 25       	eor	r24, r11
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	81 93       	st	Z+, r24
    2fe6:	8f 01       	movw	r16, r30
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
    2fe8:	0b 2c       	mov	r0, r11
    2fea:	b2 94       	swap	r11
    2fec:	b0 24       	eor	r11, r0
    2fee:	0b 2c       	mov	r0, r11
    2ff0:	b6 94       	lsr	r11
    2ff2:	b6 94       	lsr	r11
    2ff4:	b0 24       	eor	r11, r0
    2ff6:	44 d2       	rcall	.+1160   	; 0x3480 <Crypto1FilterOutput>
    2ff8:	2b 2d       	mov	r18, r11
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	2f 5f       	subi	r18, 0xFF	; 255
    2ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    3000:	21 fb       	bst	r18, 1
    3002:	ee 24       	eor	r14, r14
    3004:	e0 f8       	bld	r14, 0
    3006:	f1 2c       	mov	r15, r1
    3008:	f1 e0       	ldi	r31, 0x01	; 1
    300a:	ef 26       	eor	r14, r31
    300c:	8e 25       	eor	r24, r14
    300e:	d6 01       	movw	r26, r12
    3010:	8d 93       	st	X+, r24
    3012:	6d 01       	movw	r12, r26
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
    3014:	a3 94       	inc	r10
    3016:	b2 e1       	ldi	r27, 0x12	; 18
    3018:	ab 12       	cpse	r10, r27
    301a:	df cf       	rjmp	.-66     	; 0x2fda <MifareClassicAppProcess+0x608>
                    uint8_t Plain = Buffer[i];
                    Buffer[i] = Plain ^ Crypto1Byte();
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
                }

                return ( (CMD_READ_RESPONSE_FRAME_SIZE + ISO14443A_CRCA_SIZE )
    301c:	20 e9       	ldi	r18, 0x90	; 144
    301e:	30 e1       	ldi	r19, 0x10	; 16
    3020:	91 cd       	rjmp	.-1246   	; 0x2b44 <MifareClassicAppProcess+0x172>
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
            /* Load UID CL1 and perform anticollision */
            uint8_t UidCL1[4];
            MemoryReadBlock(UidCL1, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    3022:	44 e0       	ldi	r20, 0x04	; 4
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	ce 01       	movw	r24, r28
    302c:	01 96       	adiw	r24, 0x01	; 1
    302e:	0e 94 a2 05 	call	0xb44	; 0xb44 <MemoryReadBlock>

            if (ISO14443ASelect(Buffer, &BitCount, UidCL1, CardSAKValue)) {
    3032:	90 91 b8 24 	lds	r25, 0x24B8
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    3036:	d8 01       	movw	r26, r16
    3038:	11 96       	adiw	r26, 0x01	; 1
    303a:	8c 91       	ld	r24, X
    303c:	80 32       	cpi	r24, 0x20	; 32
    303e:	09 f4       	brne	.+2      	; 0x3042 <__stack+0x43>
    3040:	2f c1       	rjmp	.+606    	; 0x32a0 <__stack+0x2a1>
    3042:	80 37       	cpi	r24, 0x70	; 112
    3044:	09 f0       	breq	.+2      	; 0x3048 <__stack+0x49>
    3046:	9d cd       	rjmp	.-1222   	; 0x2b82 <MifareClassicAppProcess+0x1b0>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    3048:	d8 01       	movw	r26, r16
    304a:	12 96       	adiw	r26, 0x02	; 2
    304c:	2c 91       	ld	r18, X
    304e:	12 97       	sbiw	r26, 0x02	; 2
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	28 13       	cpse	r18, r24
    3054:	96 cd       	rjmp	.-1236   	; 0x2b82 <MifareClassicAppProcess+0x1b0>
    3056:	13 96       	adiw	r26, 0x03	; 3
    3058:	2c 91       	ld	r18, X
    305a:	13 97       	sbiw	r26, 0x03	; 3
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	28 13       	cpse	r18, r24
    3060:	90 cd       	rjmp	.-1248   	; 0x2b82 <MifareClassicAppProcess+0x1b0>
                (DataPtr[3] == UidCL[1]) &&
    3062:	14 96       	adiw	r26, 0x04	; 4
    3064:	2c 91       	ld	r18, X
    3066:	14 97       	sbiw	r26, 0x04	; 4
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	28 13       	cpse	r18, r24
    306c:	8a cd       	rjmp	.-1260   	; 0x2b82 <MifareClassicAppProcess+0x1b0>
                (DataPtr[4] == UidCL[2]) &&
    306e:	15 96       	adiw	r26, 0x05	; 5
    3070:	2c 91       	ld	r18, X
    3072:	15 97       	sbiw	r26, 0x05	; 5
    3074:	8c 81       	ldd	r24, Y+4	; 0x04
    3076:	28 13       	cpse	r18, r24
    3078:	84 cd       	rjmp	.-1272   	; 0x2b82 <MifareClassicAppProcess+0x1b0>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    307a:	9c 93       	st	X, r25
            ISO14443AAppendCRCA(Buffer, 1);
    307c:	61 e0       	ldi	r22, 0x01	; 1
    307e:	70 e0       	ldi	r23, 0x00	; 0
    3080:	c8 01       	movw	r24, r16
    3082:	4a d1       	rcall	.+660    	; 0x3318 <ISO14443AAppendCRCA>
                State = STATE_ACTIVE;
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	80 93 b5 24 	sts	0x24B5, r24

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
    308a:	28 e1       	ldi	r18, 0x18	; 24
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	5a cd       	rjmp	.-1356   	; 0x2b44 <MifareClassicAppProcess+0x172>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
    3090:	62 e0       	ldi	r22, 0x02	; 2
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	c8 01       	movw	r24, r16
    3096:	6f d1       	rcall	.+734    	; 0x3376 <ISO14443ACheckCRCA>
    3098:	88 23       	and	r24, r24
    309a:	81 f0       	breq	.+32     	; 0x30bc <__stack+0xbd>
                /* Write command. Store the address and prepare for the upcoming data.
                * Respond with ACK. */
                CurrentAddress = Buffer[1];
    309c:	d8 01       	movw	r26, r16
    309e:	11 96       	adiw	r26, 0x01	; 1
    30a0:	8c 91       	ld	r24, X
    30a2:	80 93 c1 24 	sts	0x24C1, r24
                State = STATE_WRITE;
    30a6:	86 e0       	ldi	r24, 0x06	; 6
    30a8:	80 93 b5 24 	sts	0x24B5, r24
                    MemoryWriteBlock(BlockBuffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK );
                } else {
                    /* In read only mode, silently ignore the write */
                }

                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    30ac:	27 d4       	rcall	.+2126   	; 0x38fc <Crypto1Nibble>
    30ae:	9a e0       	ldi	r25, 0x0A	; 10
    30b0:	98 27       	eor	r25, r24
    30b2:	f8 01       	movw	r30, r16
    30b4:	90 83       	st	Z, r25
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
    30b6:	24 e0       	ldi	r18, 0x04	; 4
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	44 cd       	rjmp	.-1400   	; 0x2b44 <MifareClassicAppProcess+0x172>
                    /* In read only mode, silently ignore the write */
                }

                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    30bc:	1f d4       	rcall	.+2110   	; 0x38fc <Crypto1Nibble>
    30be:	91 e0       	ldi	r25, 0x01	; 1
    30c0:	98 27       	eor	r25, r24
    30c2:	d8 01       	movw	r26, r16
    30c4:	9c 93       	st	X, r25
            }

            return ACK_NAK_FRAME_SIZE;
    30c6:	24 e0       	ldi	r18, 0x04	; 4
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	3c cd       	rjmp	.-1416   	; 0x2b44 <MifareClassicAppProcess+0x172>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    30cc:	62 e0       	ldi	r22, 0x02	; 2
    30ce:	70 e0       	ldi	r23, 0x00	; 0
    30d0:	c8 01       	movw	r24, r16
    30d2:	51 d1       	rcall	.+674    	; 0x3376 <ISO14443ACheckCRCA>
    30d4:	88 23       	and	r24, r24
    30d6:	09 f4       	brne	.+2      	; 0x30da <__stack+0xdb>
    30d8:	5d cf       	rjmp	.-326    	; 0x2f94 <MifareClassicAppProcess+0x5c2>
                CurrentAddress = Buffer[1];
    30da:	f8 01       	movw	r30, r16
    30dc:	81 81       	ldd	r24, Z+1	; 0x01
    30de:	80 93 c1 24 	sts	0x24C1, r24
                State = STATE_DECREMENT;
    30e2:	88 e0       	ldi	r24, 0x08	; 8
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
                CurrentAddress = Buffer[1];
                State = STATE_RESTORE;
    30e4:	80 93 b5 24 	sts	0x24B5, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    30e8:	09 d4       	rcall	.+2066   	; 0x38fc <Crypto1Nibble>
    30ea:	9a e0       	ldi	r25, 0x0A	; 10
    30ec:	98 27       	eor	r25, r24
    30ee:	d8 01       	movw	r26, r16
    30f0:	9c 93       	st	X, r25
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
    30f2:	24 e0       	ldi	r18, 0x04	; 4
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	26 cd       	rjmp	.-1460   	; 0x2b44 <MifareClassicAppProcess+0x172>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    30f8:	80 91 ca 24 	lds	r24, 0x24CA
    30fc:	28 13       	cpse	r18, r24
    30fe:	38 cf       	rjmp	.-400    	; 0x2f70 <MifareClassicAppProcess+0x59e>
         && (Block[1] == (uint8_t) ~Block[5]) && (Block[1] == Block[9])
    3100:	e0 91 c3 24 	lds	r30, 0x24C3
    3104:	80 91 c7 24 	lds	r24, 0x24C7
    3108:	80 95       	com	r24
    310a:	e8 13       	cpse	r30, r24
    310c:	31 cf       	rjmp	.-414    	; 0x2f70 <MifareClassicAppProcess+0x59e>
    310e:	80 91 cb 24 	lds	r24, 0x24CB
    3112:	e8 13       	cpse	r30, r24
    3114:	2d cf       	rjmp	.-422    	; 0x2f70 <MifareClassicAppProcess+0x59e>
         && (Block[2] == (uint8_t) ~Block[6]) && (Block[2] == Block[10])
    3116:	80 91 c4 24 	lds	r24, 0x24C4
    311a:	90 91 c8 24 	lds	r25, 0x24C8
    311e:	90 95       	com	r25
    3120:	89 13       	cpse	r24, r25
    3122:	26 cf       	rjmp	.-436    	; 0x2f70 <MifareClassicAppProcess+0x59e>
    3124:	90 91 cc 24 	lds	r25, 0x24CC
    3128:	89 13       	cpse	r24, r25
    312a:	22 cf       	rjmp	.-444    	; 0x2f70 <MifareClassicAppProcess+0x59e>
         && (Block[3] == (uint8_t) ~Block[7]) && (Block[3] == Block[11])
    312c:	30 91 c5 24 	lds	r19, 0x24C5
    3130:	90 91 c9 24 	lds	r25, 0x24C9
    3134:	90 95       	com	r25
    3136:	39 13       	cpse	r19, r25
    3138:	1b cf       	rjmp	.-458    	; 0x2f70 <MifareClassicAppProcess+0x59e>
    313a:	90 91 cd 24 	lds	r25, 0x24CD
    313e:	39 13       	cpse	r19, r25
    3140:	17 cf       	rjmp	.-466    	; 0x2f70 <MifareClassicAppProcess+0x59e>
         && (Block[12] == (uint8_t) ~Block[13])
    3142:	40 91 ce 24 	lds	r20, 0x24CE
    3146:	90 91 cf 24 	lds	r25, 0x24CF
    314a:	90 95       	com	r25
    314c:	49 13       	cpse	r20, r25
    314e:	10 cf       	rjmp	.-480    	; 0x2f70 <MifareClassicAppProcess+0x59e>
         && (Block[12] == Block[14])
    3150:	90 91 d0 24 	lds	r25, 0x24D0
    3154:	49 13       	cpse	r20, r25
    3156:	0c cf       	rjmp	.-488    	; 0x2f70 <MifareClassicAppProcess+0x59e>
         && (Block[14] == (uint8_t) ~Block[15])) {
    3158:	90 91 d1 24 	lds	r25, 0x24D1
    315c:	90 95       	com	r25
    315e:	49 13       	cpse	r20, r25
    3160:	07 cf       	rjmp	.-498    	; 0x2f70 <MifareClassicAppProcess+0x59e>
}

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    3162:	d8 01       	movw	r26, r16
    3164:	9c 91       	ld	r25, X
    *Value |= ((uint32_t) Block[1] << 8);
    3166:	11 96       	adiw	r26, 0x01	; 1
    3168:	fc 91       	ld	r31, X
    316a:	11 97       	sbiw	r26, 0x01	; 1
    *Value |= ((uint32_t) Block[2] << 16);
    316c:	12 96       	adiw	r26, 0x02	; 2
    316e:	4c 91       	ld	r20, X
    3170:	12 97       	sbiw	r26, 0x02	; 2
    3172:	50 e0       	ldi	r21, 0x00	; 0
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	ba 01       	movw	r22, r20
    317a:	55 27       	eor	r21, r21
    317c:	44 27       	eor	r20, r20

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    317e:	5f 2b       	or	r21, r31
    *Value |= ((uint32_t) Block[2] << 16);
    3180:	49 2b       	or	r20, r25
    *Value |= ((uint32_t) Block[3] << 24);
    3182:	13 96       	adiw	r26, 0x03	; 3
    3184:	9c 91       	ld	r25, X
    3186:	79 2b       	or	r23, r25
INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    *Value |= ((uint32_t) Block[2] << 16);
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 e0       	ldi	r26, 0x00	; 0
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	dc 01       	movw	r26, r24
    3190:	99 27       	eor	r25, r25
    3192:	88 27       	eor	r24, r24

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    3194:	9e 2b       	or	r25, r30
    *Value |= ((uint32_t) Block[2] << 16);
    3196:	82 2b       	or	r24, r18
    *Value |= ((uint32_t) Block[3] << 24);
    3198:	b3 2b       	or	r27, r19
                uint32_t BlockValue;

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
    319a:	20 91 b5 24 	lds	r18, 0x24B5
    319e:	28 30       	cpi	r18, 0x08	; 8
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <__stack+0x1a5>
    31a2:	6d c0       	rjmp	.+218    	; 0x327e <__stack+0x27f>
                    BlockValue -= ParamValue;
                } else if (State == STATE_INCREMENT) {
    31a4:	27 30       	cpi	r18, 0x07	; 7
    31a6:	21 f4       	brne	.+8      	; 0x31b0 <__stack+0x1b1>
                    BlockValue += ParamValue;
    31a8:	84 0f       	add	r24, r20
    31aa:	95 1f       	adc	r25, r21
    31ac:	a6 1f       	adc	r26, r22
    31ae:	b7 1f       	adc	r27, r23
    *Value |= ((uint32_t) Block[3] << 24);
}

INLINE void ValueToBlock(uint8_t* Block, uint32_t Value)
{
    Block[0] = (uint8_t) (Value >> 0);
    31b0:	80 93 c2 24 	sts	0x24C2, r24
    Block[1] = (uint8_t) (Value >> 8);
    31b4:	c9 2e       	mov	r12, r25
    31b6:	da 2e       	mov	r13, r26
    31b8:	eb 2e       	mov	r14, r27
    31ba:	ff 24       	eor	r15, r15
    31bc:	c0 92 c3 24 	sts	0x24C3, r12
    Block[2] = (uint8_t) (Value >> 16);
    31c0:	8d 01       	movw	r16, r26
    31c2:	22 27       	eor	r18, r18
    31c4:	33 27       	eor	r19, r19
    31c6:	00 93 c4 24 	sts	0x24C4, r16
    Block[3] = (uint8_t) (Value >> 24);
    31ca:	4b 2f       	mov	r20, r27
    31cc:	55 27       	eor	r21, r21
    31ce:	66 27       	eor	r22, r22
    31d0:	77 27       	eor	r23, r23
    31d2:	40 93 c5 24 	sts	0x24C5, r20
    Block[4] = ~Block[0];
    31d6:	e8 2f       	mov	r30, r24
    31d8:	e0 95       	com	r30
    31da:	e0 93 c6 24 	sts	0x24C6, r30
    Block[5] = ~Block[1];
    31de:	ec 2d       	mov	r30, r12
    31e0:	e0 95       	com	r30
    31e2:	e0 93 c7 24 	sts	0x24C7, r30
    Block[6] = ~Block[2];
    31e6:	e0 2f       	mov	r30, r16
    31e8:	e0 95       	com	r30
    31ea:	e0 93 c8 24 	sts	0x24C8, r30
    Block[7] = ~Block[3];
    31ee:	e4 2f       	mov	r30, r20
    31f0:	e0 95       	com	r30
    31f2:	e0 93 c9 24 	sts	0x24C9, r30
    Block[8] = Block[0];
    31f6:	80 93 ca 24 	sts	0x24CA, r24
    Block[9] = Block[1];
    31fa:	c0 92 cb 24 	sts	0x24CB, r12
    Block[10] = Block[2];
    31fe:	00 93 cc 24 	sts	0x24CC, r16
    Block[11] = Block[3];
    3202:	40 93 cd 24 	sts	0x24CD, r20
                    /* Do nothing */
                }

                ValueToBlock(BlockBuffer, BlockValue);

                State = STATE_AUTHED_IDLE;
    3206:	85 e0       	ldi	r24, 0x05	; 5
    3208:	80 93 b5 24 	sts	0x24B5, r24
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	99 cc       	rjmp	.-1742   	; 0x2b44 <MifareClassicAppProcess+0x172>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    3212:	62 e0       	ldi	r22, 0x02	; 2
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	c8 01       	movw	r24, r16
    3218:	ae d0       	rcall	.+348    	; 0x3376 <ISO14443ACheckCRCA>
    321a:	88 23       	and	r24, r24
    321c:	09 f4       	brne	.+2      	; 0x3220 <__stack+0x221>
    321e:	4e cf       	rjmp	.-356    	; 0x30bc <__stack+0xbd>
                CurrentAddress = Buffer[1];
    3220:	d8 01       	movw	r26, r16
    3222:	11 96       	adiw	r26, 0x01	; 1
    3224:	8c 91       	ld	r24, X
    3226:	80 93 c1 24 	sts	0x24C1, r24
                State = STATE_INCREMENT;
    322a:	87 e0       	ldi	r24, 0x07	; 7
    322c:	80 93 b5 24 	sts	0x24B5, r24
    3230:	3d cf       	rjmp	.-390    	; 0x30ac <__stack+0xad>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    3232:	62 e0       	ldi	r22, 0x02	; 2
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	c8 01       	movw	r24, r16
    3238:	9e d0       	rcall	.+316    	; 0x3376 <ISO14443ACheckCRCA>
    323a:	88 23       	and	r24, r24
    323c:	09 f4       	brne	.+2      	; 0x3240 <__stack+0x241>
    323e:	aa ce       	rjmp	.-684    	; 0x2f94 <MifareClassicAppProcess+0x5c2>
                CurrentAddress = Buffer[1];
    3240:	f8 01       	movw	r30, r16
    3242:	81 81       	ldd	r24, Z+1	; 0x01
    3244:	80 93 c1 24 	sts	0x24C1, r24
                State = STATE_RESTORE;
    3248:	89 e0       	ldi	r24, 0x09	; 9
    324a:	4c cf       	rjmp	.-360    	; 0x30e4 <__stack+0xe5>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
            /* Write back the global block buffer to the desired block address */
            if (ISO14443ACheckCRCA(Buffer, CMD_TRANSFER_FRAME_SIZE)) {
    324c:	62 e0       	ldi	r22, 0x02	; 2
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	c8 01       	movw	r24, r16
    3252:	91 d0       	rcall	.+290    	; 0x3376 <ISO14443ACheckCRCA>
    3254:	88 23       	and	r24, r24
    3256:	09 f4       	brne	.+2      	; 0x325a <__stack+0x25b>
    3258:	31 cf       	rjmp	.-414    	; 0x30bc <__stack+0xbd>
                if (!ActiveConfiguration.ReadOnly) {
    325a:	80 91 fc 24 	lds	r24, 0x24FC
    325e:	81 11       	cpse	r24, r1
    3260:	25 cf       	rjmp	.-438    	; 0x30ac <__stack+0xad>
                    MemoryWriteBlock(BlockBuffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK );
    3262:	d8 01       	movw	r26, r16
    3264:	11 96       	adiw	r26, 0x01	; 1
    3266:	6c 91       	ld	r22, X
    3268:	b0 e1       	ldi	r27, 0x10	; 16
    326a:	6b 9f       	mul	r22, r27
    326c:	b0 01       	movw	r22, r0
    326e:	11 24       	eor	r1, r1
    3270:	40 e1       	ldi	r20, 0x10	; 16
    3272:	50 e0       	ldi	r21, 0x00	; 0
    3274:	82 ec       	ldi	r24, 0xC2	; 194
    3276:	94 e2       	ldi	r25, 0x24	; 36
    3278:	0e 94 ba 05 	call	0xb74	; 0xb74 <MemoryWriteBlock>
    327c:	17 cf       	rjmp	.-466    	; 0x30ac <__stack+0xad>

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
                    BlockValue -= ParamValue;
    327e:	84 1b       	sub	r24, r20
    3280:	95 0b       	sbc	r25, r21
    3282:	a6 0b       	sbc	r26, r22
    3284:	b7 0b       	sbc	r27, r23
    3286:	94 cf       	rjmp	.-216    	; 0x31b0 <__stack+0x1b1>
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
    3288:	62 e0       	ldi	r22, 0x02	; 2
    328a:	70 e0       	ldi	r23, 0x00	; 0
    328c:	c8 01       	movw	r24, r16
    328e:	73 d0       	rcall	.+230    	; 0x3376 <ISO14443ACheckCRCA>
    3290:	81 11       	cpse	r24, r1
    3292:	a7 cc       	rjmp	.-1714   	; 0x2be2 <MifareClassicAppProcess+0x210>
                /* Setup crypto1 cipher. Discard in-place encrypted CardNonce. */
                Crypto1Setup(Key, Uid, CardNonce);

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	d8 01       	movw	r26, r16
    3298:	8c 93       	st	X, r24
                return ACK_NAK_FRAME_SIZE;
    329a:	24 e0       	ldi	r18, 0x04	; 4
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	52 cc       	rjmp	.-1884   	; 0x2b44 <MifareClassicAppProcess+0x172>

    switch (NVB) {
    case ISO14443A_NVB_AC_START:
        /* Start of anticollision procedure.
        * Send whole UID CLn + BCC */
        DataPtr[0] = UidCL[0];
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	f8 01       	movw	r30, r16
    32a4:	80 83       	st	Z, r24
        DataPtr[1] = UidCL[1];
    32a6:	3a 81       	ldd	r19, Y+2	; 0x02
    32a8:	31 83       	std	Z+1, r19	; 0x01
        DataPtr[2] = UidCL[2];
    32aa:	2b 81       	ldd	r18, Y+3	; 0x03
    32ac:	22 83       	std	Z+2, r18	; 0x02
        DataPtr[3] = UidCL[3];
    32ae:	9c 81       	ldd	r25, Y+4	; 0x04
    32b0:	93 83       	std	Z+3, r25	; 0x03
        DataPtr[4] = ISO14443A_CALC_BCC(DataPtr);
    32b2:	83 27       	eor	r24, r19
    32b4:	82 27       	eor	r24, r18
    32b6:	89 27       	eor	r24, r25
    32b8:	84 83       	std	Z+4, r24	; 0x04

        *BitCount = ISO14443A_CL_FRAME_SIZE;
    32ba:	28 e2       	ldi	r18, 0x28	; 40
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	42 cc       	rjmp	.-1916   	; 0x2b44 <MifareClassicAppProcess+0x172>
            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    32c0:	60 e3       	ldi	r22, 0x30	; 48
    32c2:	70 e0       	ldi	r23, 0x00	; 0
    32c4:	7a cd       	rjmp	.-1292   	; 0x2dba <MifareClassicAppProcess+0x3e8>
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    32c6:	80 e3       	ldi	r24, 0x30	; 48
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	e6 cd       	rjmp	.-1076   	; 0x2e98 <MifareClassicAppProcess+0x4c6>

000032cc <MifareClassicGetUid>:
    return ISO14443A_APP_NO_RESPONSE;
}

void MifareClassicGetUid(ConfigurationUidType Uid)
{
    MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    32cc:	44 e0       	ldi	r20, 0x04	; 4
    32ce:	50 e0       	ldi	r21, 0x00	; 0
    32d0:	60 e0       	ldi	r22, 0x00	; 0
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <MemoryReadBlock>

000032d8 <MifareClassicSetUid>:
}

void MifareClassicSetUid(ConfigurationUidType Uid)
{
    32d8:	cf 93       	push	r28
    32da:	df 93       	push	r29
    32dc:	1f 92       	push	r1
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    uint8_t BCC =  Uid[0] ^ Uid[1] ^ Uid[2] ^ Uid[3];
    32e2:	fc 01       	movw	r30, r24
    32e4:	21 81       	ldd	r18, Z+1	; 0x01
    32e6:	30 81       	ld	r19, Z
    32e8:	23 27       	eor	r18, r19
    32ea:	32 81       	ldd	r19, Z+2	; 0x02
    32ec:	23 27       	eor	r18, r19
    32ee:	33 81       	ldd	r19, Z+3	; 0x03
    32f0:	23 27       	eor	r18, r19
    32f2:	29 83       	std	Y+1, r18	; 0x01

    MemoryWriteBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    32f4:	44 e0       	ldi	r20, 0x04	; 4
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	60 e0       	ldi	r22, 0x00	; 0
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	0e 94 ba 05 	call	0xb74	; 0xb74 <MemoryWriteBlock>
    MemoryWriteBlock(&BCC, MEM_UID_BCC1_ADDRESS, ISO14443A_CL_BCC_SIZE);
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	64 e0       	ldi	r22, 0x04	; 4
    3306:	70 e0       	ldi	r23, 0x00	; 0
    3308:	ce 01       	movw	r24, r28
    330a:	01 96       	adiw	r24, 0x01	; 1
    330c:	0e 94 ba 05 	call	0xb74	; 0xb74 <MemoryWriteBlock>
}
    3310:	0f 90       	pop	r0
    3312:	df 91       	pop	r29
    3314:	cf 91       	pop	r28
    3316:	08 95       	ret

00003318 <ISO14443AAppendCRCA>:

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    3318:	61 15       	cp	r22, r1
    331a:	71 05       	cpc	r23, r1
    331c:	41 f1       	breq	.+80     	; 0x336e <ISO14443AAppendCRCA+0x56>
 * policies, either expressed or implied, of the ORIGINAL AUTHORS.
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    331e:	68 0f       	add	r22, r24
    3320:	79 1f       	adc	r23, r25
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    3322:	fc 01       	movw	r30, r24
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    3324:	23 e6       	ldi	r18, 0x63	; 99
    3326:	33 e6       	ldi	r19, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    3328:	41 91       	ld	r20, Z+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    332a:	42 27       	eor	r20, r18
        Byte ^= Byte << 4;
    332c:	50 e1       	ldi	r21, 0x10	; 16
    332e:	45 9f       	mul	r20, r21
    3330:	c0 01       	movw	r24, r0
    3332:	11 24       	eor	r1, r1
    3334:	a4 2f       	mov	r26, r20
    3336:	a8 27       	eor	r26, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    3338:	8a 2f       	mov	r24, r26
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	58 2f       	mov	r21, r24
    333e:	44 27       	eor	r20, r20
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    334c:	48 27       	eor	r20, r24
    334e:	59 27       	eor	r21, r25
    3350:	23 2f       	mov	r18, r19
    3352:	33 27       	eor	r19, r19
    3354:	24 27       	eor	r18, r20
    3356:	35 27       	eor	r19, r21
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    3358:	a2 95       	swap	r26
    335a:	af 70       	andi	r26, 0x0F	; 15
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    335c:	2a 27       	eor	r18, r26

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    335e:	e6 17       	cp	r30, r22
    3360:	f7 07       	cpc	r31, r23
    3362:	11 f7       	brne	.-60     	; 0x3328 <ISO14443AAppendCRCA+0x10>
    3364:	92 2f       	mov	r25, r18
    3366:	83 2f       	mov	r24, r19

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    3368:	90 83       	st	Z, r25
    *DataPtr = (Checksum >> 8) & 0x00FF;
    336a:	81 83       	std	Z+1, r24	; 0x01
    336c:	08 95       	ret

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    336e:	fc 01       	movw	r30, r24

    while(ByteCount--) {
    3370:	83 e6       	ldi	r24, 0x63	; 99
    3372:	93 e6       	ldi	r25, 0x63	; 99
    3374:	f9 cf       	rjmp	.-14     	; 0x3368 <ISO14443AAppendCRCA+0x50>

00003376 <ISO14443ACheckCRCA>:
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    3376:	61 15       	cp	r22, r1
    3378:	71 05       	cpc	r23, r1
    337a:	b1 f1       	breq	.+108    	; 0x33e8 <ISO14443ACheckCRCA+0x72>

    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
    337c:	68 0f       	add	r22, r24
    337e:	79 1f       	adc	r23, r25
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    3380:	fc 01       	movw	r30, r24
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    3382:	23 e6       	ldi	r18, 0x63	; 99
    3384:	33 e6       	ldi	r19, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    3386:	41 91       	ld	r20, Z+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    3388:	42 27       	eor	r20, r18
        Byte ^= Byte << 4;
    338a:	50 e1       	ldi	r21, 0x10	; 16
    338c:	45 9f       	mul	r20, r21
    338e:	c0 01       	movw	r24, r0
    3390:	11 24       	eor	r1, r1
    3392:	a4 2f       	mov	r26, r20
    3394:	a8 27       	eor	r26, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    3396:	8a 2f       	mov	r24, r26
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	58 2f       	mov	r21, r24
    339c:	44 27       	eor	r20, r20
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    33aa:	48 27       	eor	r20, r24
    33ac:	59 27       	eor	r21, r25
    33ae:	23 2f       	mov	r18, r19
    33b0:	33 27       	eor	r19, r19
    33b2:	24 27       	eor	r18, r20
    33b4:	35 27       	eor	r19, r21
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    33b6:	a2 95       	swap	r26
    33b8:	af 70       	andi	r26, 0x0F	; 15
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    33ba:	2a 27       	eor	r18, r26
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    33bc:	e6 17       	cp	r30, r22
    33be:	f7 07       	cpc	r31, r23
    33c0:	11 f7       	brne	.-60     	; 0x3386 <ISO14443ACheckCRCA+0x10>
    33c2:	a9 01       	movw	r20, r18
    33c4:	55 27       	eor	r21, r21

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    33c6:	80 81       	ld	r24, Z
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	84 17       	cp	r24, r20
    33cc:	95 07       	cpc	r25, r21
    33ce:	11 f0       	breq	.+4      	; 0x33d4 <ISO14443ACheckCRCA+0x5e>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
}
    33d2:	08 95       	ret

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    33d4:	41 81       	ldd	r20, Z+1	; 0x01
    33d6:	50 e0       	ldi	r21, 0x00	; 0
    33d8:	23 2f       	mov	r18, r19
    33da:	33 27       	eor	r19, r19
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	42 17       	cp	r20, r18
    33e0:	53 07       	cpc	r21, r19
    33e2:	b9 f3       	breq	.-18     	; 0x33d2 <ISO14443ACheckCRCA+0x5c>
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	f5 cf       	rjmp	.-22     	; 0x33d2 <ISO14443ACheckCRCA+0x5c>
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    33e8:	fc 01       	movw	r30, r24

    while(ByteCount--) {
    33ea:	43 e6       	ldi	r20, 0x63	; 99
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    33ee:	23 e6       	ldi	r18, 0x63	; 99
    33f0:	33 e6       	ldi	r19, 0x63	; 99
    33f2:	e9 cf       	rjmp	.-46     	; 0x33c6 <ISO14443ACheckCRCA+0x50>

000033f4 <Crypto1LFSR>:
/* Split Crypto1 state into even and odd bits to speed up the output filter network */
static uint8_t StateEven[LFSR_SIZE/2] = {0};
static uint8_t StateOdd[LFSR_SIZE/2] = {0};

/* Proceed LFSR by one clock cycle */
static void Crypto1LFSR(uint8_t In) {
    33f4:	cf 93       	push	r28
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    33f6:	b0 91 d5 24 	lds	r27, 0x24D5
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    33fa:	c0 91 d6 24 	lds	r28, 0x24D6
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    33fe:	40 91 d7 24 	lds	r20, 0x24D7

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    3402:	a0 91 d2 24 	lds	r26, 0x24D2
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    3406:	f0 91 d3 24 	lds	r31, 0x24D3
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    340a:	e0 91 d4 24 	lds	r30, 0x24D4
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    340e:	9c 2f       	mov	r25, r28
    3410:	90 71       	andi	r25, 0x10	; 16
static void Crypto1LFSR(uint8_t In) {
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    3412:	2b 2f       	mov	r18, r27
    3414:	21 7e       	andi	r18, 0xE1	; 225
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    3416:	92 27       	eor	r25, r18
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    3418:	24 2f       	mov	r18, r20
    341a:	20 72       	andi	r18, 0x20	; 32
    341c:	92 27       	eor	r25, r18

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    341e:	2a 2f       	mov	r18, r26
    3420:	24 79       	andi	r18, 0x94	; 148
    3422:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    3424:	2f 2f       	mov	r18, r31
    3426:	23 77       	andi	r18, 0x73	; 115
    3428:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    342a:	2e 2f       	mov	r18, r30
    342c:	2a 73       	andi	r18, 0x3A	; 58
    342e:	92 27       	eor	r25, r18

    Feedback ^= Feedback >> 4;
    3430:	39 2f       	mov	r19, r25
    3432:	32 95       	swap	r19
    3434:	3f 70       	andi	r19, 0x0F	; 15
    3436:	39 27       	eor	r19, r25
    Feedback ^= Feedback >> 2;
    3438:	23 2f       	mov	r18, r19
    343a:	26 95       	lsr	r18
    343c:	26 95       	lsr	r18
    343e:	23 27       	eor	r18, r19
    Feedback ^= Feedback >> 1;
    3440:	92 2f       	mov	r25, r18
    3442:	96 95       	lsr	r25
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    Temp |= ((uint32_t) StateEven[2] << 16);
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	60 e0       	ldi	r22, 0x00	; 0
    3448:	70 e0       	ldi	r23, 0x00	; 0
    344a:	ba 01       	movw	r22, r20
    344c:	55 27       	eor	r21, r21
    344e:	44 27       	eor	r20, r20
    * - the new even state becomes the old odd state
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    3450:	5c 2b       	or	r21, r28
    Temp |= ((uint32_t) StateEven[2] << 16);
    3452:	4b 2b       	or	r20, r27

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;
    3454:	76 95       	lsr	r23
    3456:	67 95       	ror	r22
    3458:	57 95       	ror	r21
    345a:	47 95       	ror	r20
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);

    Feedback ^= Feedback >> 4;
    Feedback ^= Feedback >> 2;
    Feedback ^= Feedback >> 1;
    345c:	92 27       	eor	r25, r18

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;

    /* Calculate MSBit of even state as input bit to LFSR */
    if ( (Feedback & 0x01) ^ In ) {
    345e:	91 70       	andi	r25, 0x01	; 1
    3460:	98 13       	cpse	r25, r24
        Temp |= (uint32_t) 1 << (8 * LFSR_SIZE/2 - 1);
    3462:	60 68       	ori	r22, 0x80	; 128
    }

    /* Convert even state back into byte array and swap odd/even state
    * as explained above. */
    StateEven[0] = StateOdd[0];
    3464:	a0 93 d5 24 	sts	0x24D5, r26
    StateEven[1] = StateOdd[1];
    3468:	f0 93 d6 24 	sts	0x24D6, r31
    StateEven[2] = StateOdd[2];
    346c:	e0 93 d7 24 	sts	0x24D7, r30

    StateOdd[0] = (uint8_t) (Temp >> 0);
    3470:	40 93 d2 24 	sts	0x24D2, r20
    StateOdd[1] = (uint8_t) (Temp >> 8);
    3474:	50 93 d3 24 	sts	0x24D3, r21
    StateOdd[2] = (uint8_t) (Temp >> 16);
    3478:	60 93 d4 24 	sts	0x24D4, r22
}
    347c:	cf 91       	pop	r28
    347e:	08 95       	ret

00003480 <Crypto1FilterOutput>:

uint8_t Crypto1FilterOutput(void) {
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    3484:	c0 91 d3 24 	lds	r28, 0x24D3
    Sum |= TableAB[2][(StateOdd[1] >> 4) & 0x0F];
    Sum |= TableAB[3][(StateOdd[2] >> 0) & 0x0F];
    3488:	90 91 d4 24 	lds	r25, 0x24D4
    348c:	a9 2f       	mov	r26, r25
    348e:	af 70       	andi	r26, 0x0F	; 15
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	a0 5e       	subi	r26, 0xE0	; 224
    3494:	bf 4d       	sbci	r27, 0xDF	; 223
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    3496:	ec 2f       	mov	r30, r28
    3498:	ef 70       	andi	r30, 0x0F	; 15
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	e0 5e       	subi	r30, 0xE0	; 224
    349e:	ff 4d       	sbci	r31, 0xDF	; 223
    34a0:	d0 96       	adiw	r26, 0x30	; 48
    34a2:	8c 91       	ld	r24, X
    34a4:	20 89       	ldd	r18, Z+16	; 0x10
    34a6:	82 2b       	or	r24, r18
    * can simply be ORed together to produce the resulting
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    34a8:	e0 91 d2 24 	lds	r30, 0x24D2
    34ac:	e2 95       	swap	r30
    34ae:	ef 70       	andi	r30, 0x0F	; 15
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	e0 5e       	subi	r30, 0xE0	; 224
    34b4:	ff 4d       	sbci	r31, 0xDF	; 223
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    Sum |= TableAB[2][(StateOdd[1] >> 4) & 0x0F];
    34b6:	20 81       	ld	r18, Z
    34b8:	82 2b       	or	r24, r18
    34ba:	c2 95       	swap	r28
    34bc:	cf 70       	andi	r28, 0x0F	; 15
    34be:	d0 e0       	ldi	r29, 0x00	; 0
    34c0:	c0 5e       	subi	r28, 0xE0	; 224
    34c2:	df 4d       	sbci	r29, 0xDF	; 223
    Sum |= TableAB[3][(StateOdd[2] >> 0) & 0x0F];
    34c4:	28 a1       	ldd	r18, Y+32	; 0x20
    34c6:	82 2b       	or	r24, r18
    Sum |= TableAB[4][(StateOdd[2] >> 4) & 0x0F];
    34c8:	92 95       	swap	r25
    34ca:	9f 70       	andi	r25, 0x0F	; 15
    34cc:	a9 2f       	mov	r26, r25
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	a0 5a       	subi	r26, 0xA0	; 160
    34d2:	bf 4d       	sbci	r27, 0xDF	; 223
    34d4:	9c 91       	ld	r25, X
    34d6:	89 2b       	or	r24, r25

    return TableC[Sum];
    34d8:	e8 2f       	mov	r30, r24
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	e0 59       	subi	r30, 0x90	; 144
    34de:	ff 4d       	sbci	r31, 0xDF	; 223
}
    34e0:	80 81       	ld	r24, Z
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	08 95       	ret

000034e8 <Crypto1Setup>:

void Crypto1Setup(uint8_t Key[6], uint8_t Uid[4], uint8_t CardNonce[4])
{
    34e8:	cf 92       	push	r12
    34ea:	df 92       	push	r13
    34ec:	ef 92       	push	r14
    34ee:	ff 92       	push	r15
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    34f8:	fc 01       	movw	r30, r24
    34fa:	db 01       	movw	r26, r22
    34fc:	ea 01       	movw	r28, r20
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	20 81       	ld	r18, Z
    3504:	82 2b       	or	r24, r18
    3506:	80 fd       	sbrc	r24, 0
    3508:	8d c1       	rjmp	.+794    	; 0x3824 <Crypto1Setup+0x33c>
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	81 fd       	sbrc	r24, 1
    350e:	88 c1       	rjmp	.+784    	; 0x3820 <Crypto1Setup+0x338>
    3510:	20 e0       	ldi	r18, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    3512:	96 95       	lsr	r25
    3514:	87 95       	ror	r24
    3516:	96 95       	lsr	r25
    3518:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    351a:	43 2f       	mov	r20, r19
    351c:	40 68       	ori	r20, 0x80	; 128
    351e:	80 fd       	sbrc	r24, 0
    3520:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3522:	42 2f       	mov	r20, r18
    3524:	40 68       	ori	r20, 0x80	; 128
    3526:	81 fd       	sbrc	r24, 1
    3528:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    352a:	96 95       	lsr	r25
    352c:	87 95       	ror	r24
    352e:	96 95       	lsr	r25
    3530:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3532:	36 95       	lsr	r19
            OddByte >>= 1;
    3534:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3536:	43 2f       	mov	r20, r19
    3538:	40 68       	ori	r20, 0x80	; 128
    353a:	80 fd       	sbrc	r24, 0
    353c:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    353e:	42 2f       	mov	r20, r18
    3540:	40 68       	ori	r20, 0x80	; 128
    3542:	81 fd       	sbrc	r24, 1
    3544:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3546:	96 95       	lsr	r25
    3548:	87 95       	ror	r24
    354a:	96 95       	lsr	r25
    354c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    354e:	36 95       	lsr	r19
            OddByte >>= 1;
    3550:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3552:	43 2f       	mov	r20, r19
    3554:	40 68       	ori	r20, 0x80	; 128
    3556:	80 fd       	sbrc	r24, 0
    3558:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    355a:	42 2f       	mov	r20, r18
    355c:	40 68       	ori	r20, 0x80	; 128
    355e:	81 fd       	sbrc	r24, 1
    3560:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3562:	96 95       	lsr	r25
    3564:	87 95       	ror	r24
    3566:	96 95       	lsr	r25
    3568:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    356a:	36 95       	lsr	r19
            OddByte >>= 1;
    356c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    356e:	43 2f       	mov	r20, r19
    3570:	40 68       	ori	r20, 0x80	; 128
    3572:	80 fd       	sbrc	r24, 0
    3574:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3576:	42 2f       	mov	r20, r18
    3578:	40 68       	ori	r20, 0x80	; 128
    357a:	81 fd       	sbrc	r24, 1
    357c:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    357e:	96 95       	lsr	r25
    3580:	87 95       	ror	r24
    3582:	96 95       	lsr	r25
    3584:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3586:	36 95       	lsr	r19
            OddByte >>= 1;
    3588:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    358a:	43 2f       	mov	r20, r19
    358c:	40 68       	ori	r20, 0x80	; 128
    358e:	80 fd       	sbrc	r24, 0
    3590:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3592:	42 2f       	mov	r20, r18
    3594:	40 68       	ori	r20, 0x80	; 128
    3596:	81 fd       	sbrc	r24, 1
    3598:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    359a:	96 95       	lsr	r25
    359c:	87 95       	ror	r24
    359e:	96 95       	lsr	r25
    35a0:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    35a2:	36 95       	lsr	r19
            OddByte >>= 1;
    35a4:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    35a6:	43 2f       	mov	r20, r19
    35a8:	40 68       	ori	r20, 0x80	; 128
    35aa:	80 fd       	sbrc	r24, 0
    35ac:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    35ae:	42 2f       	mov	r20, r18
    35b0:	40 68       	ori	r20, 0x80	; 128
    35b2:	81 fd       	sbrc	r24, 1
    35b4:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    35b6:	96 95       	lsr	r25
    35b8:	87 95       	ror	r24
    35ba:	96 95       	lsr	r25
    35bc:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    35be:	36 95       	lsr	r19
            OddByte >>= 1;
    35c0:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    35c2:	53 2f       	mov	r21, r19
    35c4:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    35c6:	42 2f       	mov	r20, r18
    35c8:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    35ca:	80 fd       	sbrc	r24, 0
    35cc:	35 2f       	mov	r19, r21
    35ce:	30 93 d5 24 	sts	0x24D5, r19
        StateOdd[i] = OddByte;
    35d2:	81 fd       	sbrc	r24, 1
    35d4:	24 2f       	mov	r18, r20
    35d6:	20 93 d2 24 	sts	0x24D2, r18
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	22 81       	ldd	r18, Z+2	; 0x02
    35e0:	82 2b       	or	r24, r18
    35e2:	80 fd       	sbrc	r24, 0
    35e4:	1b c1       	rjmp	.+566    	; 0x381c <Crypto1Setup+0x334>
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	81 fd       	sbrc	r24, 1
    35ea:	16 c1       	rjmp	.+556    	; 0x3818 <Crypto1Setup+0x330>
    35ec:	20 e0       	ldi	r18, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    35ee:	96 95       	lsr	r25
    35f0:	87 95       	ror	r24
    35f2:	96 95       	lsr	r25
    35f4:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    35f6:	43 2f       	mov	r20, r19
    35f8:	40 68       	ori	r20, 0x80	; 128
    35fa:	80 fd       	sbrc	r24, 0
    35fc:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    35fe:	42 2f       	mov	r20, r18
    3600:	40 68       	ori	r20, 0x80	; 128
    3602:	81 fd       	sbrc	r24, 1
    3604:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3606:	96 95       	lsr	r25
    3608:	87 95       	ror	r24
    360a:	96 95       	lsr	r25
    360c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    360e:	36 95       	lsr	r19
            OddByte >>= 1;
    3610:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3612:	43 2f       	mov	r20, r19
    3614:	40 68       	ori	r20, 0x80	; 128
    3616:	80 fd       	sbrc	r24, 0
    3618:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    361a:	42 2f       	mov	r20, r18
    361c:	40 68       	ori	r20, 0x80	; 128
    361e:	81 fd       	sbrc	r24, 1
    3620:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3622:	96 95       	lsr	r25
    3624:	87 95       	ror	r24
    3626:	96 95       	lsr	r25
    3628:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    362a:	36 95       	lsr	r19
            OddByte >>= 1;
    362c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    362e:	43 2f       	mov	r20, r19
    3630:	40 68       	ori	r20, 0x80	; 128
    3632:	80 fd       	sbrc	r24, 0
    3634:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3636:	42 2f       	mov	r20, r18
    3638:	40 68       	ori	r20, 0x80	; 128
    363a:	81 fd       	sbrc	r24, 1
    363c:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    363e:	96 95       	lsr	r25
    3640:	87 95       	ror	r24
    3642:	96 95       	lsr	r25
    3644:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3646:	36 95       	lsr	r19
            OddByte >>= 1;
    3648:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    364a:	43 2f       	mov	r20, r19
    364c:	40 68       	ori	r20, 0x80	; 128
    364e:	80 fd       	sbrc	r24, 0
    3650:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3652:	42 2f       	mov	r20, r18
    3654:	40 68       	ori	r20, 0x80	; 128
    3656:	81 fd       	sbrc	r24, 1
    3658:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    365a:	96 95       	lsr	r25
    365c:	87 95       	ror	r24
    365e:	96 95       	lsr	r25
    3660:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3662:	36 95       	lsr	r19
            OddByte >>= 1;
    3664:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3666:	43 2f       	mov	r20, r19
    3668:	40 68       	ori	r20, 0x80	; 128
    366a:	80 fd       	sbrc	r24, 0
    366c:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    366e:	42 2f       	mov	r20, r18
    3670:	40 68       	ori	r20, 0x80	; 128
    3672:	81 fd       	sbrc	r24, 1
    3674:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3676:	96 95       	lsr	r25
    3678:	87 95       	ror	r24
    367a:	96 95       	lsr	r25
    367c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    367e:	36 95       	lsr	r19
            OddByte >>= 1;
    3680:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3682:	43 2f       	mov	r20, r19
    3684:	40 68       	ori	r20, 0x80	; 128
    3686:	80 fd       	sbrc	r24, 0
    3688:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    368a:	42 2f       	mov	r20, r18
    368c:	40 68       	ori	r20, 0x80	; 128
    368e:	81 fd       	sbrc	r24, 1
    3690:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3692:	96 95       	lsr	r25
    3694:	87 95       	ror	r24
    3696:	96 95       	lsr	r25
    3698:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    369a:	36 95       	lsr	r19
            OddByte >>= 1;
    369c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    369e:	53 2f       	mov	r21, r19
    36a0:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    36a2:	42 2f       	mov	r20, r18
    36a4:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    36a6:	80 fd       	sbrc	r24, 0
    36a8:	35 2f       	mov	r19, r21
    36aa:	30 93 d6 24 	sts	0x24D6, r19
        StateOdd[i] = OddByte;
    36ae:	81 fd       	sbrc	r24, 1
    36b0:	24 2f       	mov	r18, r20
    36b2:	20 93 d3 24 	sts	0x24D3, r18
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    36b6:	95 81       	ldd	r25, Z+5	; 0x05
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	24 81       	ldd	r18, Z+4	; 0x04
    36bc:	82 2b       	or	r24, r18
    36be:	80 fd       	sbrc	r24, 0
    36c0:	a9 c0       	rjmp	.+338    	; 0x3814 <Crypto1Setup+0x32c>
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	81 fd       	sbrc	r24, 1
    36c6:	a4 c0       	rjmp	.+328    	; 0x3810 <Crypto1Setup+0x328>
    36c8:	20 e0       	ldi	r18, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    36ca:	96 95       	lsr	r25
    36cc:	87 95       	ror	r24
    36ce:	96 95       	lsr	r25
    36d0:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    36d2:	43 2f       	mov	r20, r19
    36d4:	40 68       	ori	r20, 0x80	; 128
    36d6:	80 fd       	sbrc	r24, 0
    36d8:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    36da:	42 2f       	mov	r20, r18
    36dc:	40 68       	ori	r20, 0x80	; 128
    36de:	81 fd       	sbrc	r24, 1
    36e0:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    36e2:	96 95       	lsr	r25
    36e4:	87 95       	ror	r24
    36e6:	96 95       	lsr	r25
    36e8:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    36ea:	36 95       	lsr	r19
            OddByte >>= 1;
    36ec:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    36ee:	43 2f       	mov	r20, r19
    36f0:	40 68       	ori	r20, 0x80	; 128
    36f2:	80 fd       	sbrc	r24, 0
    36f4:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    36f6:	42 2f       	mov	r20, r18
    36f8:	40 68       	ori	r20, 0x80	; 128
    36fa:	81 fd       	sbrc	r24, 1
    36fc:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    36fe:	96 95       	lsr	r25
    3700:	87 95       	ror	r24
    3702:	96 95       	lsr	r25
    3704:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3706:	36 95       	lsr	r19
            OddByte >>= 1;
    3708:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    370a:	43 2f       	mov	r20, r19
    370c:	40 68       	ori	r20, 0x80	; 128
    370e:	80 fd       	sbrc	r24, 0
    3710:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3712:	42 2f       	mov	r20, r18
    3714:	40 68       	ori	r20, 0x80	; 128
    3716:	81 fd       	sbrc	r24, 1
    3718:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    371a:	96 95       	lsr	r25
    371c:	87 95       	ror	r24
    371e:	96 95       	lsr	r25
    3720:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3722:	36 95       	lsr	r19
            OddByte >>= 1;
    3724:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3726:	43 2f       	mov	r20, r19
    3728:	40 68       	ori	r20, 0x80	; 128
    372a:	80 fd       	sbrc	r24, 0
    372c:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    372e:	42 2f       	mov	r20, r18
    3730:	40 68       	ori	r20, 0x80	; 128
    3732:	81 fd       	sbrc	r24, 1
    3734:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3736:	96 95       	lsr	r25
    3738:	87 95       	ror	r24
    373a:	96 95       	lsr	r25
    373c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    373e:	36 95       	lsr	r19
            OddByte >>= 1;
    3740:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3742:	43 2f       	mov	r20, r19
    3744:	40 68       	ori	r20, 0x80	; 128
    3746:	80 fd       	sbrc	r24, 0
    3748:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    374a:	42 2f       	mov	r20, r18
    374c:	40 68       	ori	r20, 0x80	; 128
    374e:	81 fd       	sbrc	r24, 1
    3750:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3752:	96 95       	lsr	r25
    3754:	87 95       	ror	r24
    3756:	96 95       	lsr	r25
    3758:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    375a:	36 95       	lsr	r19
            OddByte >>= 1;
    375c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    375e:	43 2f       	mov	r20, r19
    3760:	40 68       	ori	r20, 0x80	; 128
    3762:	80 fd       	sbrc	r24, 0
    3764:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3766:	42 2f       	mov	r20, r18
    3768:	40 68       	ori	r20, 0x80	; 128
    376a:	81 fd       	sbrc	r24, 1
    376c:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    376e:	96 95       	lsr	r25
    3770:	87 95       	ror	r24
    3772:	96 95       	lsr	r25
    3774:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3776:	36 95       	lsr	r19
            OddByte >>= 1;
    3778:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    377a:	53 2f       	mov	r21, r19
    377c:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    377e:	42 2f       	mov	r20, r18
    3780:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    3782:	80 fd       	sbrc	r24, 0
    3784:	35 2f       	mov	r19, r21
    3786:	30 93 d7 24 	sts	0x24D7, r19
        StateOdd[i] = OddByte;
    378a:	81 fd       	sbrc	r24, 1
    378c:	24 2f       	mov	r18, r20
    378e:	20 93 d4 24 	sts	0x24D4, r18
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	11 96       	adiw	r26, 0x01	; 1
    3796:	9c 91       	ld	r25, X
    3798:	11 97       	sbiw	r26, 0x01	; 1
    379a:	89 27       	eor	r24, r25
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    379c:	ca 80       	ldd	r12, Y+2	; 0x02
    379e:	12 96       	adiw	r26, 0x02	; 2
    37a0:	9c 91       	ld	r25, X
    37a2:	12 97       	sbiw	r26, 0x02	; 2
    37a4:	c9 26       	eor	r12, r25
    37a6:	d1 2c       	mov	r13, r1
    37a8:	e1 2c       	mov	r14, r1
    37aa:	f1 2c       	mov	r15, r1
    37ac:	76 01       	movw	r14, r12
    37ae:	dd 24       	eor	r13, r13
    37b0:	cc 24       	eor	r12, r12
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    37b2:	d8 2a       	or	r13, r24

    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    37b4:	88 81       	ld	r24, Y
    37b6:	9c 91       	ld	r25, X
    37b8:	89 27       	eor	r24, r25
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    37ba:	c8 2a       	or	r12, r24
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;
    37bc:	8b 81       	ldd	r24, Y+3	; 0x03
    37be:	13 96       	adiw	r26, 0x03	; 3
    37c0:	9c 91       	ld	r25, X
    37c2:	89 27       	eor	r24, r25
    37c4:	f8 2a       	or	r15, r24
    37c6:	10 e2       	ldi	r17, 0x20	; 32

    for (i=0; i<32; i++) {
        uint8_t Out = Crypto1FilterOutput();
    37c8:	5b de       	rcall	.-842    	; 0x3480 <Crypto1FilterOutput>
    37ca:	08 2f       	mov	r16, r24

        Crypto1LFSR(Temp & 0x01);
    37cc:	8c 2d       	mov	r24, r12
    37ce:	81 70       	andi	r24, 0x01	; 1
    37d0:	11 de       	rcall	.-990    	; 0x33f4 <Crypto1LFSR>
        Temp >>= 1;
    37d2:	f6 94       	lsr	r15
    37d4:	e7 94       	ror	r14
    37d6:	d7 94       	ror	r13
    37d8:	c7 94       	ror	r12

        /* Store the keystream for later use */
        if (Out) {
    37da:	00 23       	and	r16, r16
    37dc:	11 f0       	breq	.+4      	; 0x37e2 <Crypto1Setup+0x2fa>
            Temp |= (uint32_t) 1 << 31;
    37de:	68 94       	set
    37e0:	f7 f8       	bld	r15, 7
    37e2:	11 50       	subi	r17, 0x01	; 1
    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;

    for (i=0; i<32; i++) {
    37e4:	89 f7       	brne	.-30     	; 0x37c8 <Crypto1Setup+0x2e0>
    }

    /* Crypto1 state register is now set up to be used for authentication.
    * In case of nested authentication, we need to use the produced keystream
    * to encrypt the CardNonce. For this case we do the encryption in-place. */
    CardNonce[0] ^= (uint8_t) (Temp >> 0);
    37e6:	88 81       	ld	r24, Y
    37e8:	8c 25       	eor	r24, r12
    37ea:	88 83       	st	Y, r24
    CardNonce[1] ^= (uint8_t) (Temp >> 8);
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	8d 25       	eor	r24, r13
    37f0:	89 83       	std	Y+1, r24	; 0x01
    CardNonce[2] ^= (uint8_t) (Temp >> 16);
    37f2:	8a 81       	ldd	r24, Y+2	; 0x02
    37f4:	8e 25       	eor	r24, r14
    37f6:	8a 83       	std	Y+2, r24	; 0x02
    CardNonce[3] ^= (uint8_t) (Temp >> 24);
    37f8:	8b 81       	ldd	r24, Y+3	; 0x03
    37fa:	8f 25       	eor	r24, r15
    37fc:	8b 83       	std	Y+3, r24	; 0x03
}
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	ff 90       	pop	r15
    3808:	ef 90       	pop	r14
    380a:	df 90       	pop	r13
    380c:	cf 90       	pop	r12
    380e:	08 95       	ret
    3810:	20 e4       	ldi	r18, 0x40	; 64
    3812:	5b cf       	rjmp	.-330    	; 0x36ca <Crypto1Setup+0x1e2>
    3814:	30 e4       	ldi	r19, 0x40	; 64
    3816:	56 cf       	rjmp	.-340    	; 0x36c4 <Crypto1Setup+0x1dc>
    3818:	20 e4       	ldi	r18, 0x40	; 64
    381a:	e9 ce       	rjmp	.-558    	; 0x35ee <Crypto1Setup+0x106>
    381c:	30 e4       	ldi	r19, 0x40	; 64
    381e:	e4 ce       	rjmp	.-568    	; 0x35e8 <Crypto1Setup+0x100>
    3820:	20 e4       	ldi	r18, 0x40	; 64
    3822:	77 ce       	rjmp	.-786    	; 0x3512 <Crypto1Setup+0x2a>
    3824:	30 e4       	ldi	r19, 0x40	; 64
    3826:	72 ce       	rjmp	.-796    	; 0x350c <Crypto1Setup+0x24>

00003828 <Crypto1Auth>:

void Crypto1Auth(uint8_t EncryptedReaderNonce[4])
{
    3828:	cf 92       	push	r12
    382a:	df 92       	push	r13
    382c:	ef 92       	push	r14
    382e:	ff 92       	push	r15
    3830:	cf 93       	push	r28
    3832:	fc 01       	movw	r30, r24
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    3834:	81 81       	ldd	r24, Z+1	; 0x01
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    3836:	c2 80       	ldd	r12, Z+2	; 0x02
    3838:	d1 2c       	mov	r13, r1
    383a:	e1 2c       	mov	r14, r1
    383c:	f1 2c       	mov	r15, r1
    383e:	76 01       	movw	r14, r12
    3840:	dd 24       	eor	r13, r13
    3842:	cc 24       	eor	r12, r12
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    3844:	d8 2a       	or	r13, r24
{
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    3846:	80 81       	ld	r24, Z
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    3848:	c8 2a       	or	r12, r24
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;
    384a:	83 81       	ldd	r24, Z+3	; 0x03
    384c:	f8 2a       	or	r15, r24
    384e:	c0 e2       	ldi	r28, 0x20	; 32
    uint8_t i;

    for (i=0; i<32; i++) {
        /* Decrypt one output bit of the given encrypted nonce using the
        * filter output as keystream. */
        uint8_t Out = Crypto1FilterOutput();
    3850:	17 de       	rcall	.-978    	; 0x3480 <Crypto1FilterOutput>
        uint8_t Bit = Out ^ (Temp & 0x01);
    3852:	b7 01       	movw	r22, r14
    3854:	a6 01       	movw	r20, r12
    3856:	41 70       	andi	r20, 0x01	; 1
    3858:	55 27       	eor	r21, r21
    385a:	66 27       	eor	r22, r22
    385c:	77 27       	eor	r23, r23

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
    385e:	84 27       	eor	r24, r20
    3860:	c9 dd       	rcall	.-1134   	; 0x33f4 <Crypto1LFSR>
        Temp >>= 1;
    3862:	f6 94       	lsr	r15
    3864:	e7 94       	ror	r14
    3866:	d7 94       	ror	r13
    3868:	c7 94       	ror	r12
    386a:	c1 50       	subi	r28, 0x01	; 1
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;

    uint8_t i;

    for (i=0; i<32; i++) {
    386c:	89 f7       	brne	.-30     	; 0x3850 <Crypto1Auth+0x28>

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
        Temp >>= 1;
    }
}
    386e:	cf 91       	pop	r28
    3870:	ff 90       	pop	r15
    3872:	ef 90       	pop	r14
    3874:	df 90       	pop	r13
    3876:	cf 90       	pop	r12
    3878:	08 95       	ret

0000387a <Crypto1Byte>:

uint8_t Crypto1Byte(void)
{
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    387e:	00 de       	rcall	.-1024   	; 0x3480 <Crypto1FilterOutput>
    3880:	c8 2f       	mov	r28, r24
        Crypto1LFSR(0);
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	b7 dd       	rcall	.-1170   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;

        if (Out) {
    3886:	cc 23       	and	r28, r28
    3888:	09 f4       	brne	.+2      	; 0x388c <Crypto1Byte+0x12>
    388a:	36 c0       	rjmp	.+108    	; 0x38f8 <Crypto1Byte+0x7e>
            KeyStream |= (1<<7);
    388c:	c0 e8       	ldi	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    388e:	f8 dd       	rcall	.-1040   	; 0x3480 <Crypto1FilterOutput>
    3890:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	af dd       	rcall	.-1186   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    3896:	c6 95       	lsr	r28

        if (Out) {
    3898:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    389a:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    389c:	f1 dd       	rcall	.-1054   	; 0x3480 <Crypto1FilterOutput>
    389e:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	a8 dd       	rcall	.-1200   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    38a4:	c6 95       	lsr	r28

        if (Out) {
    38a6:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    38a8:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38aa:	ea dd       	rcall	.-1068   	; 0x3480 <Crypto1FilterOutput>
    38ac:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	a1 dd       	rcall	.-1214   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    38b2:	c6 95       	lsr	r28

        if (Out) {
    38b4:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    38b6:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38b8:	e3 dd       	rcall	.-1082   	; 0x3480 <Crypto1FilterOutput>
    38ba:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	9a dd       	rcall	.-1228   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    38c0:	c6 95       	lsr	r28

        if (Out) {
    38c2:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    38c4:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38c6:	dc dd       	rcall	.-1096   	; 0x3480 <Crypto1FilterOutput>
    38c8:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	93 dd       	rcall	.-1242   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    38ce:	c6 95       	lsr	r28

        if (Out) {
    38d0:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    38d2:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38d4:	d5 dd       	rcall	.-1110   	; 0x3480 <Crypto1FilterOutput>
    38d6:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	8c dd       	rcall	.-1256   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    38dc:	c6 95       	lsr	r28

        if (Out) {
    38de:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    38e0:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38e2:	ce dd       	rcall	.-1124   	; 0x3480 <Crypto1FilterOutput>
    38e4:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	85 dd       	rcall	.-1270   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    38ea:	8c 2f       	mov	r24, r28
    38ec:	86 95       	lsr	r24

        if (Out) {
    38ee:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    38f0:	80 68       	ori	r24, 0x80	; 128
        }
    }

    return KeyStream;
}
    38f2:	df 91       	pop	r29
    38f4:	cf 91       	pop	r28
    38f6:	08 95       	ret
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
        Crypto1LFSR(0);

        /* Store keystream bit */
        KeyStream >>= 1;
    38f8:	c0 e0       	ldi	r28, 0x00	; 0
    38fa:	c9 cf       	rjmp	.-110    	; 0x388e <Crypto1Byte+0x14>

000038fc <Crypto1Nibble>:

    return KeyStream;
}

uint8_t Crypto1Nibble(void)
{
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    3900:	bf dd       	rcall	.-1154   	; 0x3480 <Crypto1FilterOutput>
    3902:	c8 2f       	mov	r28, r24
        Crypto1LFSR(0);
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	76 dd       	rcall	.-1300   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;

        if (Out) {
    3908:	cc 23       	and	r28, r28
    390a:	d1 f0       	breq	.+52     	; 0x3940 <Crypto1Nibble+0x44>
            KeyStream |= (1<<3);
    390c:	c8 e0       	ldi	r28, 0x08	; 8
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    390e:	b8 dd       	rcall	.-1168   	; 0x3480 <Crypto1FilterOutput>
    3910:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	6f dd       	rcall	.-1314   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    3916:	c6 95       	lsr	r28

        if (Out) {
    3918:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<3);
    391a:	c8 60       	ori	r28, 0x08	; 8
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    391c:	b1 dd       	rcall	.-1182   	; 0x3480 <Crypto1FilterOutput>
    391e:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	68 dd       	rcall	.-1328   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    3924:	c6 95       	lsr	r28

        if (Out) {
    3926:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<3);
    3928:	c8 60       	ori	r28, 0x08	; 8
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    392a:	aa dd       	rcall	.-1196   	; 0x3480 <Crypto1FilterOutput>
    392c:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	61 dd       	rcall	.-1342   	; 0x33f4 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    3932:	8c 2f       	mov	r24, r28
    3934:	86 95       	lsr	r24

        if (Out) {
    3936:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<3);
    3938:	88 60       	ori	r24, 0x08	; 8
        }
    }

    return KeyStream;
}
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	08 95       	ret
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
        Crypto1LFSR(0);

        /* Store keystream bit */
        KeyStream >>= 1;
    3940:	c0 e0       	ldi	r28, 0x00	; 0
    3942:	e5 cf       	rjmp	.-54     	; 0x390e <Crypto1Nibble+0x12>

00003944 <Crypto1PRNG>:

    return KeyStream;
}

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    3944:	6f 92       	push	r6
    3946:	7f 92       	push	r7
    3948:	8f 92       	push	r8
    394a:	9f 92       	push	r9
    394c:	af 92       	push	r10
    394e:	bf 92       	push	r11
    3950:	cf 92       	push	r12
    3952:	df 92       	push	r13
    3954:	ef 92       	push	r14
    3956:	ff 92       	push	r15
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	3c 01       	movw	r6, r24
    while(ClockCount--) {
    3962:	cb 01       	movw	r24, r22
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	67 2b       	or	r22, r23
    3968:	c9 f1       	breq	.+114    	; 0x39dc <Crypto1PRNG+0x98>
    396a:	f3 01       	movw	r30, r6
    396c:	a2 81       	ldd	r26, Z+2	; 0x02
    396e:	c0 81       	ld	r28, Z
    3970:	b1 81       	ldd	r27, Z+1	; 0x01
    3972:	d3 81       	ldd	r29, Z+3	; 0x03
        * XOR all tapped bits to a single feedback bit. */
        uint8_t Feedback = 0;

        Feedback ^= State[0] & (uint8_t) (PRNG_MASK >> 0);
        Feedback ^= State[1] & (uint8_t) (PRNG_MASK >> 8);
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
    3974:	2a 2f       	mov	r18, r26
    3976:	2d 72       	andi	r18, 0x2D	; 45
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
    3978:	32 2f       	mov	r19, r18
    397a:	32 95       	swap	r19
    397c:	3f 70       	andi	r19, 0x0F	; 15
    397e:	32 27       	eor	r19, r18
        Feedback ^= Feedback >> 2;
    3980:	23 2f       	mov	r18, r19
    3982:	26 95       	lsr	r18
    3984:	26 95       	lsr	r18
    3986:	23 27       	eor	r18, r19
        Feedback ^= Feedback >> 1;
    3988:	32 2f       	mov	r19, r18
    398a:	36 95       	lsr	r19
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
        Temp |= (uint32_t) State[2] << 16;
        Temp |= (uint32_t) State[3] << 24;
    398c:	4d 2f       	mov	r20, r29
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	60 e0       	ldi	r22, 0x00	; 0
    3992:	70 e0       	ldi	r23, 0x00	; 0
    3994:	74 2f       	mov	r23, r20
    3996:	66 27       	eor	r22, r22
    3998:	55 27       	eor	r21, r21
    399a:	44 27       	eor	r20, r20

        /* For ease of processing convert the state into a 32 bit integer first */
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
    399c:	5b 2b       	or	r21, r27
        Temp |= (uint32_t) State[2] << 16;
    399e:	4c 2b       	or	r20, r28
        Temp |= (uint32_t) State[3] << 24;
    39a0:	6a 2b       	or	r22, r26

        /* Cycle LFSR and feed back. */
        Temp >>= 1;
    39a2:	76 95       	lsr	r23
    39a4:	67 95       	ror	r22
    39a6:	57 95       	ror	r21
    39a8:	47 95       	ror	r20
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
        Feedback ^= Feedback >> 2;
        Feedback ^= Feedback >> 1;
    39aa:	32 27       	eor	r19, r18
        Temp |= (uint32_t) State[3] << 24;

        /* Cycle LFSR and feed back. */
        Temp >>= 1;

        if (Feedback & 0x01) {
    39ac:	30 fd       	sbrc	r19, 0
            Temp |= (uint32_t) 1 << (8 * PRNG_SIZE - 1);
    39ae:	70 68       	ori	r23, 0x80	; 128
        }

        /* Store back state */
        State[0] = (uint8_t) (Temp >> 0);
    39b0:	c4 2f       	mov	r28, r20
        State[1] = (uint8_t) (Temp >> 8);
    39b2:	85 2e       	mov	r8, r21
    39b4:	96 2e       	mov	r9, r22
    39b6:	a7 2e       	mov	r10, r23
    39b8:	bb 24       	eor	r11, r11
    39ba:	b8 2d       	mov	r27, r8
        State[2] = (uint8_t) (Temp >> 16);
    39bc:	6b 01       	movw	r12, r22
    39be:	ee 24       	eor	r14, r14
    39c0:	ff 24       	eor	r15, r15
    39c2:	ac 2d       	mov	r26, r12
        State[3] = (uint8_t) (Temp >> 24);
    39c4:	07 2f       	mov	r16, r23
    39c6:	11 27       	eor	r17, r17
    39c8:	22 27       	eor	r18, r18
    39ca:	33 27       	eor	r19, r19
    39cc:	d0 2f       	mov	r29, r16
    return KeyStream;
}

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    while(ClockCount--) {
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	88 f6       	brcc	.-94     	; 0x3974 <Crypto1PRNG+0x30>
    39d2:	f3 01       	movw	r30, r6
    39d4:	40 83       	st	Z, r20
    39d6:	81 82       	std	Z+1, r8	; 0x01
    39d8:	c2 82       	std	Z+2, r12	; 0x02
    39da:	03 83       	std	Z+3, r16	; 0x03
        State[2] = (uint8_t) (Temp >> 16);
        State[3] = (uint8_t) (Temp >> 24);
    }


}
    39dc:	df 91       	pop	r29
    39de:	cf 91       	pop	r28
    39e0:	1f 91       	pop	r17
    39e2:	0f 91       	pop	r16
    39e4:	ff 90       	pop	r15
    39e6:	ef 90       	pop	r14
    39e8:	df 90       	pop	r13
    39ea:	cf 90       	pop	r12
    39ec:	bf 90       	pop	r11
    39ee:	af 90       	pop	r10
    39f0:	9f 90       	pop	r9
    39f2:	8f 90       	pop	r8
    39f4:	7f 90       	pop	r7
    39f6:	6f 90       	pop	r6
    39f8:	08 95       	ret

000039fa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    39fa:	0f 93       	push	r16
    39fc:	1f 93       	push	r17
    39fe:	cf 93       	push	r28
    3a00:	df 93       	push	r29
    3a02:	cd b7       	in	r28, 0x3d	; 61
    3a04:	de b7       	in	r29, 0x3e	; 62
    3a06:	ec 97       	sbiw	r28, 0x3c	; 60
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	de bf       	out	0x3e, r29	; 62
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3a0c:	2b d3       	rcall	.+1622   	; 0x4064 <Endpoint_Read_8>
    3a0e:	80 93 15 27 	sts	0x2715, r24
    3a12:	28 d3       	rcall	.+1616   	; 0x4064 <Endpoint_Read_8>
    3a14:	80 93 16 27 	sts	0x2716, r24
    3a18:	25 d3       	rcall	.+1610   	; 0x4064 <Endpoint_Read_8>
    3a1a:	80 93 17 27 	sts	0x2717, r24
    3a1e:	22 d3       	rcall	.+1604   	; 0x4064 <Endpoint_Read_8>
    3a20:	80 93 18 27 	sts	0x2718, r24
    3a24:	1f d3       	rcall	.+1598   	; 0x4064 <Endpoint_Read_8>
    3a26:	80 93 19 27 	sts	0x2719, r24
    3a2a:	1c d3       	rcall	.+1592   	; 0x4064 <Endpoint_Read_8>
    3a2c:	80 93 1a 27 	sts	0x271A, r24
    3a30:	19 d3       	rcall	.+1586   	; 0x4064 <Endpoint_Read_8>
    3a32:	80 93 1b 27 	sts	0x271B, r24
    3a36:	16 d3       	rcall	.+1580   	; 0x4064 <Endpoint_Read_8>
    3a38:	80 93 1c 27 	sts	0x271C, r24
	#endif

	EVENT_USB_Device_ControlRequest();
    3a3c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    3a40:	b0 d3       	rcall	.+1888   	; 0x41a2 <Endpoint_IsSETUPReceived>
    3a42:	88 23       	and	r24, r24
    3a44:	89 f0       	breq	.+34     	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3a46:	90 91 15 27 	lds	r25, 0x2715

		switch (USB_ControlRequest.bRequest)
    3a4a:	80 91 16 27 	lds	r24, 0x2716
    3a4e:	85 30       	cpi	r24, 0x05	; 5
    3a50:	09 f4       	brne	.+2      	; 0x3a54 <USB_Device_ProcessControlRequest+0x5a>
    3a52:	52 c0       	rjmp	.+164    	; 0x3af8 <USB_Device_ProcessControlRequest+0xfe>
    3a54:	b0 f0       	brcs	.+44     	; 0x3a82 <USB_Device_ProcessControlRequest+0x88>
    3a56:	88 30       	cpi	r24, 0x08	; 8
    3a58:	09 f4       	brne	.+2      	; 0x3a5c <USB_Device_ProcessControlRequest+0x62>
    3a5a:	b3 c0       	rjmp	.+358    	; 0x3bc2 <USB_Device_ProcessControlRequest+0x1c8>
    3a5c:	89 30       	cpi	r24, 0x09	; 9
    3a5e:	09 f4       	brne	.+2      	; 0x3a62 <USB_Device_ProcessControlRequest+0x68>
    3a60:	98 c0       	rjmp	.+304    	; 0x3b92 <USB_Device_ProcessControlRequest+0x198>
    3a62:	86 30       	cpi	r24, 0x06	; 6
    3a64:	09 f4       	brne	.+2      	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
    3a66:	5a c0       	rjmp	.+180    	; 0x3b1c <USB_Device_ProcessControlRequest+0x122>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3a68:	9c d3       	rcall	.+1848   	; 0x41a2 <Endpoint_IsSETUPReceived>
    3a6a:	88 23       	and	r24, r24
    3a6c:	11 f0       	breq	.+4      	; 0x3a72 <USB_Device_ProcessControlRequest+0x78>
	{
		Endpoint_ClearSETUP();
    3a6e:	6d d3       	rcall	.+1754   	; 0x414a <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    3a70:	50 d3       	rcall	.+1696   	; 0x4112 <Endpoint_StallTransaction>
	}
}
    3a72:	ec 96       	adiw	r28, 0x3c	; 60
    3a74:	cd bf       	out	0x3d, r28	; 61
    3a76:	de bf       	out	0x3e, r29	; 62
    3a78:	df 91       	pop	r29
    3a7a:	cf 91       	pop	r28
    3a7c:	1f 91       	pop	r17
    3a7e:	0f 91       	pop	r16
    3a80:	08 95       	ret

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
    3a82:	81 30       	cpi	r24, 0x01	; 1
    3a84:	21 f0       	breq	.+8      	; 0x3a8e <USB_Device_ProcessControlRequest+0x94>
    3a86:	08 f4       	brcc	.+2      	; 0x3a8a <USB_Device_ProcessControlRequest+0x90>
    3a88:	68 c0       	rjmp	.+208    	; 0x3b5a <USB_Device_ProcessControlRequest+0x160>
    3a8a:	83 30       	cpi	r24, 0x03	; 3
    3a8c:	69 f7       	brne	.-38     	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3a8e:	99 23       	and	r25, r25
    3a90:	09 f4       	brne	.+2      	; 0x3a94 <USB_Device_ProcessControlRequest+0x9a>
    3a92:	a1 c0       	rjmp	.+322    	; 0x3bd6 <USB_Device_ProcessControlRequest+0x1dc>
    3a94:	92 30       	cpi	r25, 0x02	; 2
    3a96:	41 f7       	brne	.-48     	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3a98:	80 91 17 27 	lds	r24, 0x2717
    3a9c:	81 11       	cpse	r24, r1
    3a9e:	27 c0       	rjmp	.+78     	; 0x3aee <USB_Device_ProcessControlRequest+0xf4>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3aa0:	00 91 19 27 	lds	r16, 0x2719
    3aa4:	10 91 1a 27 	lds	r17, 0x271A
    3aa8:	0f 70       	andi	r16, 0x0F	; 15
    3aaa:	11 27       	eor	r17, r17

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3aac:	01 15       	cp	r16, r1
    3aae:	11 05       	cpc	r17, r1
    3ab0:	d9 f2       	breq	.-74     	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    3ab2:	80 2f       	mov	r24, r16
    3ab4:	f5 d2       	rcall	.+1514   	; 0x40a0 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3ab6:	80 91 16 27 	lds	r24, 0x2716
    3aba:	83 30       	cpi	r24, 0x03	; 3
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <USB_Device_ProcessControlRequest+0xc6>
    3abe:	e6 c0       	rjmp	.+460    	; 0x3c8c <USB_Device_ProcessControlRequest+0x292>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    3ac0:	e0 91 1f 27 	lds	r30, 0x271F
    3ac4:	f0 91 20 27 	lds	r31, 0x2720
    3ac8:	81 81       	ldd	r24, Z+1	; 0x01
    3aca:	8b 7f       	andi	r24, 0xFB	; 251
    3acc:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    3ace:	84 e8       	ldi	r24, 0x84	; 132
    3ad0:	80 9f       	mul	r24, r16
    3ad2:	f0 01       	movw	r30, r0
    3ad4:	81 9f       	mul	r24, r17
    3ad6:	f0 0d       	add	r31, r0
    3ad8:	11 24       	eor	r1, r1
    3ada:	ed 59       	subi	r30, 0x9D	; 157
    3adc:	f8 4d       	sbci	r31, 0xD8	; 216
    3ade:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    3ae0:	e0 91 1f 27 	lds	r30, 0x271F
    3ae4:	f0 91 20 27 	lds	r31, 0x2720
    3ae8:	80 81       	ld	r24, Z
    3aea:	8e 7f       	andi	r24, 0xFE	; 254
    3aec:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	d7 d2       	rcall	.+1454   	; 0x40a0 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    3af2:	2b d3       	rcall	.+1622   	; 0x414a <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    3af4:	8f d4       	rcall	.+2334   	; 0x4414 <Endpoint_ClearStatusStage>
    3af6:	b8 cf       	rjmp	.-144    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3af8:	91 11       	cpse	r25, r1
    3afa:	b6 cf       	rjmp	.-148    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3afc:	10 91 17 27 	lds	r17, 0x2717
    3b00:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    3b02:	23 d3       	rcall	.+1606   	; 0x414a <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    3b04:	87 d4       	rcall	.+2318   	; 0x4414 <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    3b06:	7f d3       	rcall	.+1790   	; 0x4206 <Endpoint_IsINReady>
    3b08:	88 23       	and	r24, r24
    3b0a:	e9 f3       	breq	.-6      	; 0x3b06 <USB_Device_ProcessControlRequest+0x10c>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    3b0c:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3b10:	11 11       	cpse	r17, r1
    3b12:	76 c0       	rjmp	.+236    	; 0x3c00 <USB_Device_ProcessControlRequest+0x206>
    3b14:	82 e0       	ldi	r24, 0x02	; 2
    3b16:	80 93 14 27 	sts	0x2714, r24
    3b1a:	a6 cf       	rjmp	.-180    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3b1c:	90 58       	subi	r25, 0x80	; 128
    3b1e:	92 30       	cpi	r25, 0x02	; 2
    3b20:	08 f0       	brcs	.+2      	; 0x3b24 <USB_Device_ProcessControlRequest+0x12a>
    3b22:	a2 cf       	rjmp	.-188    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3b24:	80 91 17 27 	lds	r24, 0x2717
    3b28:	90 91 18 27 	lds	r25, 0x2718
    3b2c:	8c 3d       	cpi	r24, 0xDC	; 220
    3b2e:	23 e0       	ldi	r18, 0x03	; 3
    3b30:	92 07       	cpc	r25, r18
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <USB_Device_ProcessControlRequest+0x13c>
    3b34:	67 c0       	rjmp	.+206    	; 0x3c04 <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3b36:	ae 01       	movw	r20, r28
    3b38:	45 5c       	subi	r20, 0xC5	; 197
    3b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b3c:	60 91 19 27 	lds	r22, 0x2719
    3b40:	0e 94 ac 03 	call	0x758	; 0x758 <CALLBACK_USB_GetDescriptor>
    3b44:	8c 01       	movw	r16, r24
    3b46:	00 97       	sbiw	r24, 0x00	; 0
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <USB_Device_ProcessControlRequest+0x152>
    3b4a:	8e cf       	rjmp	.-228    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    3b4c:	fe d2       	rcall	.+1532   	; 0x414a <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3b4e:	b8 01       	movw	r22, r16
    3b50:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b52:	9c ad       	ldd	r25, Y+60	; 0x3c
    3b54:	c0 d1       	rcall	.+896    	; 0x3ed6 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    3b56:	77 d2       	rcall	.+1262   	; 0x4046 <Endpoint_ClearOUT>
    3b58:	87 cf       	rjmp	.-242    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3b5a:	90 38       	cpi	r25, 0x80	; 128
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <USB_Device_ProcessControlRequest+0x166>
    3b5e:	47 c0       	rjmp	.+142    	; 0x3bee <USB_Device_ProcessControlRequest+0x1f4>
    3b60:	92 38       	cpi	r25, 0x82	; 130
    3b62:	09 f0       	breq	.+2      	; 0x3b66 <USB_Device_ProcessControlRequest+0x16c>
    3b64:	81 cf       	rjmp	.-254    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3b66:	80 91 19 27 	lds	r24, 0x2719
    3b6a:	8f 70       	andi	r24, 0x0F	; 15
    3b6c:	99 d2       	rcall	.+1330   	; 0x40a0 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    3b6e:	e0 91 1f 27 	lds	r30, 0x271F
    3b72:	f0 91 20 27 	lds	r31, 0x2720
    3b76:	11 81       	ldd	r17, Z+1	; 0x01
    3b78:	12 fb       	bst	r17, 2
    3b7a:	11 27       	eor	r17, r17
    3b7c:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	8f d2       	rcall	.+1310   	; 0x40a0 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    3b82:	e3 d2       	rcall	.+1478   	; 0x414a <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    3b84:	81 2f       	mov	r24, r17
    3b86:	7d d2       	rcall	.+1274   	; 0x4082 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	7b d2       	rcall	.+1270   	; 0x4082 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    3b8c:	43 d2       	rcall	.+1158   	; 0x4014 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    3b8e:	42 d4       	rcall	.+2180   	; 0x4414 <Endpoint_ClearStatusStage>
    3b90:	6b cf       	rjmp	.-298    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3b92:	91 11       	cpse	r25, r1
    3b94:	69 cf       	rjmp	.-302    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3b96:	80 91 17 27 	lds	r24, 0x2717
    3b9a:	82 30       	cpi	r24, 0x02	; 2
    3b9c:	08 f0       	brcs	.+2      	; 0x3ba0 <USB_Device_ProcessControlRequest+0x1a6>
    3b9e:	64 cf       	rjmp	.-312    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    3ba0:	d4 d2       	rcall	.+1448   	; 0x414a <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3ba2:	80 91 17 27 	lds	r24, 0x2717
    3ba6:	80 93 10 27 	sts	0x2710, r24

	Endpoint_ClearStatusStage();
    3baa:	34 d4       	rcall	.+2152   	; 0x4414 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3bac:	80 91 10 27 	lds	r24, 0x2710
    3bb0:	88 23       	and	r24, r24
    3bb2:	09 f4       	brne	.+2      	; 0x3bb6 <USB_Device_ProcessControlRequest+0x1bc>
    3bb4:	61 c0       	rjmp	.+194    	; 0x3c78 <USB_Device_ProcessControlRequest+0x27e>
	  USB_DeviceState = DEVICE_STATE_Configured;
    3bb6:	84 e0       	ldi	r24, 0x04	; 4
    3bb8:	80 93 14 27 	sts	0x2714, r24
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;

	EVENT_USB_Device_ConfigurationChanged();
    3bbc:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <EVENT_USB_Device_ConfigurationChanged>
    3bc0:	53 cf       	rjmp	.-346    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3bc2:	90 38       	cpi	r25, 0x80	; 128
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <USB_Device_ProcessControlRequest+0x1ce>
    3bc6:	50 cf       	rjmp	.-352    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    3bc8:	c0 d2       	rcall	.+1408   	; 0x414a <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3bca:	80 91 10 27 	lds	r24, 0x2710
    3bce:	59 d2       	rcall	.+1202   	; 0x4082 <Endpoint_Write_8>
	Endpoint_ClearIN();
    3bd0:	21 d2       	rcall	.+1090   	; 0x4014 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    3bd2:	20 d4       	rcall	.+2112   	; 0x4414 <Endpoint_ClearStatusStage>
    3bd4:	49 cf       	rjmp	.-366    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3bd6:	90 91 17 27 	lds	r25, 0x2717
    3bda:	91 30       	cpi	r25, 0x01	; 1
    3bdc:	09 f0       	breq	.+2      	; 0x3be0 <USB_Device_ProcessControlRequest+0x1e6>
    3bde:	44 cf       	rjmp	.-376    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3be0:	91 e0       	ldi	r25, 0x01	; 1
    3be2:	83 30       	cpi	r24, 0x03	; 3
    3be4:	09 f0       	breq	.+2      	; 0x3be8 <USB_Device_ProcessControlRequest+0x1ee>
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	90 93 12 27 	sts	0x2712, r25
    3bec:	80 cf       	rjmp	.-256    	; 0x3aee <USB_Device_ProcessControlRequest+0xf4>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3bee:	10 91 11 27 	lds	r17, 0x2711
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3bf2:	80 91 12 27 	lds	r24, 0x2712
    3bf6:	88 23       	and	r24, r24
    3bf8:	09 f4       	brne	.+2      	; 0x3bfc <USB_Device_ProcessControlRequest+0x202>
    3bfa:	c3 cf       	rjmp	.-122    	; 0x3b82 <USB_Device_ProcessControlRequest+0x188>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3bfc:	12 60       	ori	r17, 0x02	; 2
    3bfe:	c1 cf       	rjmp	.-126    	; 0x3b82 <USB_Device_ProcessControlRequest+0x188>

	while (!(Endpoint_IsINReady()));

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3c00:	83 e0       	ldi	r24, 0x03	; 3
    3c02:	89 cf       	rjmp	.-238    	; 0x3b16 <USB_Device_ProcessControlRequest+0x11c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3c04:	83 e0       	ldi	r24, 0x03	; 3
    3c06:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3c08:	8a e3       	ldi	r24, 0x3A	; 58
    3c0a:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    3c0c:	5f b7       	in	r21, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    3c0e:	f8 94       	cli

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    3c10:	82 e0       	ldi	r24, 0x02	; 2
    3c12:	80 93 ca 01 	sts	0x01CA, r24
					SerialByte = pgm_read_byte(SigReadAddress);
    3c16:	e8 e0       	ldi	r30, 0x08	; 8
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	e4 91       	lpm	r30, Z
					NVM.CMD    = 0;
    3c1c:	10 92 ca 01 	sts	0x01CA, r1

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    3c20:	de 01       	movw	r26, r28
    3c22:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3c24:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3c26:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    3c28:	42 e0       	ldi	r20, 0x02	; 2
					{
						SerialByte >>= 4;
						SigReadAddress++;
					}

					SerialByte &= 0x0F;
    3c2a:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3c2c:	8e 2f       	mov	r24, r30
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	ea 30       	cpi	r30, 0x0A	; 10
    3c32:	b8 f0       	brcs	.+46     	; 0x3c62 <USB_Device_ProcessControlRequest+0x268>
    3c34:	c7 96       	adiw	r24, 0x37	; 55
    3c36:	8d 93       	st	X+, r24
    3c38:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3c3a:	2f 5f       	subi	r18, 0xFF	; 255
    3c3c:	2c 31       	cpi	r18, 0x1C	; 28
    3c3e:	99 f0       	breq	.+38     	; 0x3c66 <USB_Device_ProcessControlRequest+0x26c>
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    3c40:	40 93 ca 01 	sts	0x01CA, r20
					SerialByte = pgm_read_byte(SigReadAddress);
    3c44:	e3 2f       	mov	r30, r19
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	e4 91       	lpm	r30, Z
					NVM.CMD    = 0;
    3c4a:	10 92 ca 01 	sts	0x01CA, r1

					if (SerialCharNum & 0x01)
    3c4e:	20 ff       	sbrs	r18, 0
    3c50:	ec cf       	rjmp	.-40     	; 0x3c2a <USB_Device_ProcessControlRequest+0x230>
					{
						SerialByte >>= 4;
    3c52:	e2 95       	swap	r30
    3c54:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    3c56:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    3c58:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3c5a:	8e 2f       	mov	r24, r30
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	ea 30       	cpi	r30, 0x0A	; 10
    3c60:	48 f7       	brcc	.-46     	; 0x3c34 <USB_Device_ProcessControlRequest+0x23a>
    3c62:	c0 96       	adiw	r24, 0x30	; 48
    3c64:	e8 cf       	rjmp	.-48     	; 0x3c36 <USB_Device_ProcessControlRequest+0x23c>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    3c66:	5f bf       	out	0x3f, r21	; 63

	Endpoint_ClearSETUP();
    3c68:	70 d2       	rcall	.+1248   	; 0x414a <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3c6a:	6a e3       	ldi	r22, 0x3A	; 58
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	ce 01       	movw	r24, r28
    3c70:	01 96       	adiw	r24, 0x01	; 1
    3c72:	90 d0       	rcall	.+288    	; 0x3d94 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    3c74:	e8 d1       	rcall	.+976    	; 0x4046 <Endpoint_ClearOUT>
    3c76:	f8 ce       	rjmp	.-528    	; 0x3a68 <USB_Device_ProcessControlRequest+0x6e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    3c78:	80 91 c3 04 	lds	r24, 0x04C3
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3c7c:	88 23       	and	r24, r24
    3c7e:	21 f0       	breq	.+8      	; 0x3c88 <USB_Device_ProcessControlRequest+0x28e>
    3c80:	84 e0       	ldi	r24, 0x04	; 4
    3c82:	80 93 14 27 	sts	0x2714, r24
    3c86:	9a cf       	rjmp	.-204    	; 0x3bbc <USB_Device_ProcessControlRequest+0x1c2>
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	fb cf       	rjmp	.-10     	; 0x3c82 <USB_Device_ProcessControlRequest+0x288>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
					{
						Endpoint_StallTransaction();
    3c8c:	42 d2       	rcall	.+1156   	; 0x4112 <Endpoint_StallTransaction>
    3c8e:	2f cf       	rjmp	.-418    	; 0x3aee <USB_Device_ProcessControlRequest+0xf4>

00003c90 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3c90:	08 95       	ret

00003c92 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3c92:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3c94:	80 91 14 27 	lds	r24, 0x2714
    3c98:	81 11       	cpse	r24, r1
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <USB_USBTask+0xe>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3c9c:	cf 91       	pop	r28
    3c9e:	08 95       	ret
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    3ca0:	c0 91 21 27 	lds	r28, 0x2721
	if (USB_DeviceState == DEVICE_STATE_Unattached)
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	fc d1       	rcall	.+1016   	; 0x40a0 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    3ca8:	7c d2       	rcall	.+1272   	; 0x41a2 <Endpoint_IsSETUPReceived>
    3caa:	81 11       	cpse	r24, r1
    3cac:	03 c0       	rjmp	.+6      	; 0x3cb4 <USB_USBTask+0x22>
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    3cae:	8c 2f       	mov	r24, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3cb0:	cf 91       	pop	r28
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    3cb2:	f6 c1       	rjmp	.+1004   	; 0x40a0 <Endpoint_SelectEndpoint>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    3cb4:	a2 de       	rcall	.-700    	; 0x39fa <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    3cb6:	8c 2f       	mov	r24, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3cb8:	cf 91       	pop	r28
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    3cba:	f2 c1       	rjmp	.+996    	; 0x40a0 <Endpoint_SelectEndpoint>

00003cbc <Endpoint_Write_Stream_LE>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3cbc:	af 92       	push	r10
    3cbe:	bf 92       	push	r11
    3cc0:	df 92       	push	r13
    3cc2:	ef 92       	push	r14
    3cc4:	ff 92       	push	r15
    3cc6:	0f 93       	push	r16
    3cc8:	1f 93       	push	r17
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	8c 01       	movw	r16, r24
    3cd0:	eb 01       	movw	r28, r22
    3cd2:	7a 01       	movw	r14, r20
    3cd4:	b5 d3       	rcall	.+1898   	; 0x4440 <Endpoint_WaitUntilReady>
    3cd6:	d8 2e       	mov	r13, r24
    3cd8:	81 11       	cpse	r24, r1
    3cda:	27 c0       	rjmp	.+78     	; 0x3d2a <Endpoint_Write_Stream_LE+0x6e>
    3cdc:	e1 14       	cp	r14, r1
    3cde:	f1 04       	cpc	r15, r1
    3ce0:	a1 f1       	breq	.+104    	; 0x3d4a <Endpoint_Write_Stream_LE+0x8e>
    3ce2:	f7 01       	movw	r30, r14
    3ce4:	20 81       	ld	r18, Z
    3ce6:	31 81       	ldd	r19, Z+1	; 0x01
    3ce8:	c2 1b       	sub	r28, r18
    3cea:	d3 0b       	sbc	r29, r19
    3cec:	02 0f       	add	r16, r18
    3cee:	13 1f       	adc	r17, r19
    3cf0:	20 97       	sbiw	r28, 0x00	; 0
    3cf2:	d9 f0       	breq	.+54     	; 0x3d2a <Endpoint_Write_Stream_LE+0x6e>
    3cf4:	a1 2c       	mov	r10, r1
    3cf6:	b1 2c       	mov	r11, r1
    3cf8:	80 91 1d 27 	lds	r24, 0x271D
    3cfc:	90 91 1e 27 	lds	r25, 0x271E
    3d00:	fc 01       	movw	r30, r24
    3d02:	ef 5b       	subi	r30, 0xBF	; 191
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	20 81       	ld	r18, Z
    3d08:	fc 01       	movw	r30, r24
    3d0a:	e0 5c       	subi	r30, 0xC0	; 192
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 81       	ld	r24, Z
    3d10:	28 17       	cp	r18, r24
    3d12:	90 f1       	brcs	.+100    	; 0x3d78 <Endpoint_Write_Stream_LE+0xbc>
    3d14:	7f d1       	rcall	.+766    	; 0x4014 <Endpoint_ClearIN>
    3d16:	bd df       	rcall	.-134    	; 0x3c92 <USB_USBTask>
    3d18:	f7 01       	movw	r30, r14
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	8a 0d       	add	r24, r10
    3d20:	9b 1d       	adc	r25, r11
    3d22:	80 83       	st	Z, r24
    3d24:	91 83       	std	Z+1, r25	; 0x01
    3d26:	25 e0       	ldi	r18, 0x05	; 5
    3d28:	d2 2e       	mov	r13, r18
    3d2a:	8d 2d       	mov	r24, r13
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	1f 91       	pop	r17
    3d32:	0f 91       	pop	r16
    3d34:	ff 90       	pop	r15
    3d36:	ef 90       	pop	r14
    3d38:	df 90       	pop	r13
    3d3a:	bf 90       	pop	r11
    3d3c:	af 90       	pop	r10
    3d3e:	08 95       	ret
    3d40:	69 d1       	rcall	.+722    	; 0x4014 <Endpoint_ClearIN>
    3d42:	a7 df       	rcall	.-178    	; 0x3c92 <USB_USBTask>
    3d44:	7d d3       	rcall	.+1786   	; 0x4440 <Endpoint_WaitUntilReady>
    3d46:	81 11       	cpse	r24, r1
    3d48:	23 c0       	rjmp	.+70     	; 0x3d90 <Endpoint_Write_Stream_LE+0xd4>
    3d4a:	20 97       	sbiw	r28, 0x00	; 0
    3d4c:	71 f3       	breq	.-36     	; 0x3d2a <Endpoint_Write_Stream_LE+0x6e>
    3d4e:	20 91 1d 27 	lds	r18, 0x271D
    3d52:	30 91 1e 27 	lds	r19, 0x271E
    3d56:	f9 01       	movw	r30, r18
    3d58:	ef 5b       	subi	r30, 0xBF	; 191
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	90 81       	ld	r25, Z
    3d5e:	f9 01       	movw	r30, r18
    3d60:	e0 5c       	subi	r30, 0xC0	; 192
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	80 81       	ld	r24, Z
    3d66:	98 17       	cp	r25, r24
    3d68:	58 f7       	brcc	.-42     	; 0x3d40 <Endpoint_Write_Stream_LE+0x84>
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	81 91       	ld	r24, Z+
    3d6e:	8f 01       	movw	r16, r30
    3d70:	88 d1       	rcall	.+784    	; 0x4082 <Endpoint_Write_8>
    3d72:	21 97       	sbiw	r28, 0x01	; 1
    3d74:	61 f7       	brne	.-40     	; 0x3d4e <Endpoint_Write_Stream_LE+0x92>
    3d76:	d9 cf       	rjmp	.-78     	; 0x3d2a <Endpoint_Write_Stream_LE+0x6e>
    3d78:	f8 01       	movw	r30, r16
    3d7a:	81 91       	ld	r24, Z+
    3d7c:	8f 01       	movw	r16, r30
    3d7e:	81 d1       	rcall	.+770    	; 0x4082 <Endpoint_Write_8>
    3d80:	ff ef       	ldi	r31, 0xFF	; 255
    3d82:	af 1a       	sub	r10, r31
    3d84:	bf 0a       	sbc	r11, r31
    3d86:	ca 15       	cp	r28, r10
    3d88:	db 05       	cpc	r29, r11
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <Endpoint_Write_Stream_LE+0xd2>
    3d8c:	b5 cf       	rjmp	.-150    	; 0x3cf8 <Endpoint_Write_Stream_LE+0x3c>
    3d8e:	cd cf       	rjmp	.-102    	; 0x3d2a <Endpoint_Write_Stream_LE+0x6e>
    3d90:	d8 2e       	mov	r13, r24
    3d92:	cb cf       	rjmp	.-106    	; 0x3d2a <Endpoint_Write_Stream_LE+0x6e>

00003d94 <Endpoint_Write_Control_Stream_LE>:
    3d94:	cf 92       	push	r12
    3d96:	df 92       	push	r13
    3d98:	ef 92       	push	r14
    3d9a:	ff 92       	push	r15
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	6c 01       	movw	r12, r24
    3da6:	eb 01       	movw	r28, r22
    3da8:	80 91 21 27 	lds	r24, 0x2721
    3dac:	80 68       	ori	r24, 0x80	; 128
    3dae:	78 d1       	rcall	.+752    	; 0x40a0 <Endpoint_SelectEndpoint>
    3db0:	00 91 1b 27 	lds	r16, 0x271B
    3db4:	10 91 1c 27 	lds	r17, 0x271C
    3db8:	0c 17       	cp	r16, r28
    3dba:	1d 07       	cpc	r17, r29
    3dbc:	20 f0       	brcs	.+8      	; 0x3dc6 <Endpoint_Write_Control_Stream_LE+0x32>
    3dbe:	20 97       	sbiw	r28, 0x00	; 0
    3dc0:	09 f4       	brne	.+2      	; 0x3dc4 <Endpoint_Write_Control_Stream_LE+0x30>
    3dc2:	83 c0       	rjmp	.+262    	; 0x3eca <Endpoint_Write_Control_Stream_LE+0x136>
    3dc4:	8e 01       	movw	r16, r28
    3dc6:	c0 e0       	ldi	r28, 0x00	; 0
    3dc8:	01 15       	cp	r16, r1
    3dca:	11 05       	cpc	r17, r1
    3dcc:	09 f0       	breq	.+2      	; 0x3dd0 <Endpoint_Write_Control_Stream_LE+0x3c>
    3dce:	4a c0       	rjmp	.+148    	; 0x3e64 <Endpoint_Write_Control_Stream_LE+0xd0>
    3dd0:	cc 23       	and	r28, r28
    3dd2:	09 f4       	brne	.+2      	; 0x3dd6 <Endpoint_Write_Control_Stream_LE+0x42>
    3dd4:	5c c0       	rjmp	.+184    	; 0x3e8e <Endpoint_Write_Control_Stream_LE+0xfa>
    3dd6:	80 91 14 27 	lds	r24, 0x2714
    3dda:	88 23       	and	r24, r24
    3ddc:	09 f4       	brne	.+2      	; 0x3de0 <Endpoint_Write_Control_Stream_LE+0x4c>
    3dde:	55 c0       	rjmp	.+170    	; 0x3e8a <Endpoint_Write_Control_Stream_LE+0xf6>
    3de0:	85 30       	cpi	r24, 0x05	; 5
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <Endpoint_Write_Control_Stream_LE+0x52>
    3de4:	5d c0       	rjmp	.+186    	; 0x3ea0 <Endpoint_Write_Control_Stream_LE+0x10c>
    3de6:	dd d1       	rcall	.+954    	; 0x41a2 <Endpoint_IsSETUPReceived>
    3de8:	81 11       	cpse	r24, r1
    3dea:	6d c0       	rjmp	.+218    	; 0x3ec6 <Endpoint_Write_Control_Stream_LE+0x132>
    3dec:	f3 d1       	rcall	.+998    	; 0x41d4 <Endpoint_IsOUTReceived>
    3dee:	81 11       	cpse	r24, r1
    3df0:	4e c0       	rjmp	.+156    	; 0x3e8e <Endpoint_Write_Control_Stream_LE+0xfa>
    3df2:	09 d2       	rcall	.+1042   	; 0x4206 <Endpoint_IsINReady>
    3df4:	88 23       	and	r24, r24
    3df6:	79 f3       	breq	.-34     	; 0x3dd6 <Endpoint_Write_Control_Stream_LE+0x42>
    3df8:	80 91 21 27 	lds	r24, 0x2721
    3dfc:	87 fd       	sbrc	r24, 7
    3dfe:	5a c0       	rjmp	.+180    	; 0x3eb4 <Endpoint_Write_Control_Stream_LE+0x120>
    3e00:	20 91 1d 27 	lds	r18, 0x271D
    3e04:	30 91 1e 27 	lds	r19, 0x271E
    3e08:	f9 01       	movw	r30, r18
    3e0a:	e0 5c       	subi	r30, 0xC0	; 192
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	e0 80       	ld	r14, Z
    3e10:	f9 01       	movw	r30, r18
    3e12:	ef 5b       	subi	r30, 0xBF	; 191
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	80 81       	ld	r24, Z
    3e18:	f1 2c       	mov	r15, r1
    3e1a:	e8 1a       	sub	r14, r24
    3e1c:	f1 08       	sbc	r15, r1
    3e1e:	01 15       	cp	r16, r1
    3e20:	11 05       	cpc	r17, r1
    3e22:	a9 f0       	breq	.+42     	; 0x3e4e <Endpoint_Write_Control_Stream_LE+0xba>
    3e24:	88 e0       	ldi	r24, 0x08	; 8
    3e26:	e8 16       	cp	r14, r24
    3e28:	f1 04       	cpc	r15, r1
    3e2a:	88 f4       	brcc	.+34     	; 0x3e4e <Endpoint_Write_Control_Stream_LE+0xba>
    3e2c:	e6 01       	movw	r28, r12
    3e2e:	04 c0       	rjmp	.+8      	; 0x3e38 <Endpoint_Write_Control_Stream_LE+0xa4>
    3e30:	88 e0       	ldi	r24, 0x08	; 8
    3e32:	e8 16       	cp	r14, r24
    3e34:	f1 04       	cpc	r15, r1
    3e36:	59 f0       	breq	.+22     	; 0x3e4e <Endpoint_Write_Control_Stream_LE+0xba>
    3e38:	89 91       	ld	r24, Y+
    3e3a:	23 d1       	rcall	.+582    	; 0x4082 <Endpoint_Write_8>
    3e3c:	6e 01       	movw	r12, r28
    3e3e:	01 50       	subi	r16, 0x01	; 1
    3e40:	11 09       	sbc	r17, r1
    3e42:	8f ef       	ldi	r24, 0xFF	; 255
    3e44:	e8 1a       	sub	r14, r24
    3e46:	f8 0a       	sbc	r15, r24
    3e48:	01 15       	cp	r16, r1
    3e4a:	11 05       	cpc	r17, r1
    3e4c:	89 f7       	brne	.-30     	; 0x3e30 <Endpoint_Write_Control_Stream_LE+0x9c>
    3e4e:	c1 e0       	ldi	r28, 0x01	; 1
    3e50:	88 e0       	ldi	r24, 0x08	; 8
    3e52:	e8 16       	cp	r14, r24
    3e54:	f1 04       	cpc	r15, r1
    3e56:	09 f0       	breq	.+2      	; 0x3e5a <Endpoint_Write_Control_Stream_LE+0xc6>
    3e58:	c0 e0       	ldi	r28, 0x00	; 0
    3e5a:	dc d0       	rcall	.+440    	; 0x4014 <Endpoint_ClearIN>
    3e5c:	01 15       	cp	r16, r1
    3e5e:	11 05       	cpc	r17, r1
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <Endpoint_Write_Control_Stream_LE+0xd0>
    3e62:	b6 cf       	rjmp	.-148    	; 0x3dd0 <Endpoint_Write_Control_Stream_LE+0x3c>
    3e64:	80 91 14 27 	lds	r24, 0x2714
    3e68:	88 23       	and	r24, r24
    3e6a:	79 f0       	breq	.+30     	; 0x3e8a <Endpoint_Write_Control_Stream_LE+0xf6>
    3e6c:	85 30       	cpi	r24, 0x05	; 5
    3e6e:	c1 f0       	breq	.+48     	; 0x3ea0 <Endpoint_Write_Control_Stream_LE+0x10c>
    3e70:	98 d1       	rcall	.+816    	; 0x41a2 <Endpoint_IsSETUPReceived>
    3e72:	81 11       	cpse	r24, r1
    3e74:	28 c0       	rjmp	.+80     	; 0x3ec6 <Endpoint_Write_Control_Stream_LE+0x132>
    3e76:	ae d1       	rcall	.+860    	; 0x41d4 <Endpoint_IsOUTReceived>
    3e78:	81 11       	cpse	r24, r1
    3e7a:	09 c0       	rjmp	.+18     	; 0x3e8e <Endpoint_Write_Control_Stream_LE+0xfa>
    3e7c:	c4 d1       	rcall	.+904    	; 0x4206 <Endpoint_IsINReady>
    3e7e:	81 11       	cpse	r24, r1
    3e80:	bb cf       	rjmp	.-138    	; 0x3df8 <Endpoint_Write_Control_Stream_LE+0x64>
    3e82:	80 91 14 27 	lds	r24, 0x2714
    3e86:	81 11       	cpse	r24, r1
    3e88:	f1 cf       	rjmp	.-30     	; 0x3e6c <Endpoint_Write_Control_Stream_LE+0xd8>
    3e8a:	82 e0       	ldi	r24, 0x02	; 2
    3e8c:	0a c0       	rjmp	.+20     	; 0x3ea2 <Endpoint_Write_Control_Stream_LE+0x10e>
    3e8e:	a2 d1       	rcall	.+836    	; 0x41d4 <Endpoint_IsOUTReceived>
    3e90:	81 11       	cpse	r24, r1
    3e92:	1f c0       	rjmp	.+62     	; 0x3ed2 <Endpoint_Write_Control_Stream_LE+0x13e>
    3e94:	80 91 14 27 	lds	r24, 0x2714
    3e98:	88 23       	and	r24, r24
    3e9a:	b9 f3       	breq	.-18     	; 0x3e8a <Endpoint_Write_Control_Stream_LE+0xf6>
    3e9c:	85 30       	cpi	r24, 0x05	; 5
    3e9e:	b9 f7       	brne	.-18     	; 0x3e8e <Endpoint_Write_Control_Stream_LE+0xfa>
    3ea0:	83 e0       	ldi	r24, 0x03	; 3
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	ff 90       	pop	r15
    3eac:	ef 90       	pop	r14
    3eae:	df 90       	pop	r13
    3eb0:	cf 90       	pop	r12
    3eb2:	08 95       	ret
    3eb4:	e0 91 1d 27 	lds	r30, 0x271D
    3eb8:	f0 91 1e 27 	lds	r31, 0x271E
    3ebc:	ef 5b       	subi	r30, 0xBF	; 191
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	e0 80       	ld	r14, Z
    3ec2:	f1 2c       	mov	r15, r1
    3ec4:	ac cf       	rjmp	.-168    	; 0x3e1e <Endpoint_Write_Control_Stream_LE+0x8a>
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	ec cf       	rjmp	.-40     	; 0x3ea2 <Endpoint_Write_Control_Stream_LE+0x10e>
    3eca:	a4 d0       	rcall	.+328    	; 0x4014 <Endpoint_ClearIN>
    3ecc:	00 e0       	ldi	r16, 0x00	; 0
    3ece:	10 e0       	ldi	r17, 0x00	; 0
    3ed0:	7a cf       	rjmp	.-268    	; 0x3dc6 <Endpoint_Write_Control_Stream_LE+0x32>
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	e6 cf       	rjmp	.-52     	; 0x3ea2 <Endpoint_Write_Control_Stream_LE+0x10e>

00003ed6 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3ed6:	cf 92       	push	r12
    3ed8:	df 92       	push	r13
    3eda:	ef 92       	push	r14
    3edc:	ff 92       	push	r15
    3ede:	0f 93       	push	r16
    3ee0:	1f 93       	push	r17
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	d8 2e       	mov	r13, r24
    3ee8:	c9 2e       	mov	r12, r25
    3eea:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    3eec:	80 91 21 27 	lds	r24, 0x2721
    3ef0:	80 68       	ori	r24, 0x80	; 128
    3ef2:	d6 d0       	rcall	.+428    	; 0x40a0 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    3ef4:	c0 91 1b 27 	lds	r28, 0x271B
    3ef8:	d0 91 1c 27 	lds	r29, 0x271C
    3efc:	c0 17       	cp	r28, r16
    3efe:	d1 07       	cpc	r29, r17
    3f00:	28 f0       	brcs	.+10     	; 0x3f0c <Endpoint_Write_Control_PStream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3f02:	01 15       	cp	r16, r1
    3f04:	11 05       	cpc	r17, r1
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <Endpoint_Write_Control_PStream_LE+0x34>
    3f08:	7f c0       	rjmp	.+254    	; 0x4008 <Endpoint_Write_Control_PStream_LE+0x132>
    3f0a:	e8 01       	movw	r28, r16
    3f0c:	ed 2c       	mov	r14, r13
    3f0e:	fc 2c       	mov	r15, r12
    3f10:	d1 2c       	mov	r13, r1
    3f12:	20 97       	sbiw	r28, 0x00	; 0
    3f14:	09 f0       	breq	.+2      	; 0x3f18 <Endpoint_Write_Control_PStream_LE+0x42>
    3f16:	45 c0       	rjmp	.+138    	; 0x3fa2 <Endpoint_Write_Control_PStream_LE+0xcc>
    3f18:	dd 20       	and	r13, r13
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <Endpoint_Write_Control_PStream_LE+0x48>
    3f1c:	57 c0       	rjmp	.+174    	; 0x3fcc <Endpoint_Write_Control_PStream_LE+0xf6>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3f1e:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3f22:	88 23       	and	r24, r24
    3f24:	09 f4       	brne	.+2      	; 0x3f28 <Endpoint_Write_Control_PStream_LE+0x52>
    3f26:	50 c0       	rjmp	.+160    	; 0x3fc8 <Endpoint_Write_Control_PStream_LE+0xf2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3f28:	85 30       	cpi	r24, 0x05	; 5
    3f2a:	09 f4       	brne	.+2      	; 0x3f2e <Endpoint_Write_Control_PStream_LE+0x58>
    3f2c:	58 c0       	rjmp	.+176    	; 0x3fde <Endpoint_Write_Control_PStream_LE+0x108>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3f2e:	39 d1       	rcall	.+626    	; 0x41a2 <Endpoint_IsSETUPReceived>
    3f30:	81 11       	cpse	r24, r1
    3f32:	68 c0       	rjmp	.+208    	; 0x4004 <Endpoint_Write_Control_PStream_LE+0x12e>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3f34:	4f d1       	rcall	.+670    	; 0x41d4 <Endpoint_IsOUTReceived>
    3f36:	81 11       	cpse	r24, r1
    3f38:	49 c0       	rjmp	.+146    	; 0x3fcc <Endpoint_Write_Control_PStream_LE+0xf6>
		  break;

		if (Endpoint_IsINReady())
    3f3a:	65 d1       	rcall	.+714    	; 0x4206 <Endpoint_IsINReady>
    3f3c:	88 23       	and	r24, r24
    3f3e:	79 f3       	breq	.-34     	; 0x3f1e <Endpoint_Write_Control_PStream_LE+0x48>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    3f40:	80 91 21 27 	lds	r24, 0x2721
    3f44:	87 fd       	sbrc	r24, 7
    3f46:	55 c0       	rjmp	.+170    	; 0x3ff2 <Endpoint_Write_Control_PStream_LE+0x11c>
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    3f48:	80 91 1d 27 	lds	r24, 0x271D
    3f4c:	90 91 1e 27 	lds	r25, 0x271E
    3f50:	fc 01       	movw	r30, r24
    3f52:	e0 5c       	subi	r30, 0xC0	; 192
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	00 81       	ld	r16, Z
    3f58:	fc 01       	movw	r30, r24
    3f5a:	ef 5b       	subi	r30, 0xBF	; 191
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 81       	ld	r24, Z
    3f60:	10 e0       	ldi	r17, 0x00	; 0
    3f62:	08 1b       	sub	r16, r24
    3f64:	11 09       	sbc	r17, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3f66:	20 97       	sbiw	r28, 0x00	; 0
    3f68:	91 f0       	breq	.+36     	; 0x3f8e <Endpoint_Write_Control_PStream_LE+0xb8>
    3f6a:	08 30       	cpi	r16, 0x08	; 8
    3f6c:	11 05       	cpc	r17, r1
    3f6e:	20 f0       	brcs	.+8      	; 0x3f78 <Endpoint_Write_Control_PStream_LE+0xa2>
    3f70:	0e c0       	rjmp	.+28     	; 0x3f8e <Endpoint_Write_Control_PStream_LE+0xb8>
    3f72:	08 30       	cpi	r16, 0x08	; 8
    3f74:	11 05       	cpc	r17, r1
    3f76:	59 f0       	breq	.+22     	; 0x3f8e <Endpoint_Write_Control_PStream_LE+0xb8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3f78:	f7 01       	movw	r30, r14
    3f7a:	84 91       	lpm	r24, Z
    3f7c:	82 d0       	rcall	.+260    	; 0x4082 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3f7e:	ff ef       	ldi	r31, 0xFF	; 255
    3f80:	ef 1a       	sub	r14, r31
    3f82:	ff 0a       	sbc	r15, r31
				Length--;
    3f84:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    3f86:	0f 5f       	subi	r16, 0xFF	; 255
    3f88:	1f 4f       	sbci	r17, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3f8a:	20 97       	sbiw	r28, 0x00	; 0
    3f8c:	91 f7       	brne	.-28     	; 0x3f72 <Endpoint_Write_Control_PStream_LE+0x9c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3f8e:	dd 24       	eor	r13, r13
    3f90:	d3 94       	inc	r13
    3f92:	08 30       	cpi	r16, 0x08	; 8
    3f94:	11 05       	cpc	r17, r1
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <Endpoint_Write_Control_PStream_LE+0xc4>
    3f98:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    3f9a:	3c d0       	rcall	.+120    	; 0x4014 <Endpoint_ClearIN>
    3f9c:	20 97       	sbiw	r28, 0x00	; 0
    3f9e:	09 f4       	brne	.+2      	; 0x3fa2 <Endpoint_Write_Control_PStream_LE+0xcc>
    3fa0:	bb cf       	rjmp	.-138    	; 0x3f18 <Endpoint_Write_Control_PStream_LE+0x42>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3fa2:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3fa6:	88 23       	and	r24, r24
    3fa8:	79 f0       	breq	.+30     	; 0x3fc8 <Endpoint_Write_Control_PStream_LE+0xf2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3faa:	85 30       	cpi	r24, 0x05	; 5
    3fac:	c1 f0       	breq	.+48     	; 0x3fde <Endpoint_Write_Control_PStream_LE+0x108>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3fae:	f9 d0       	rcall	.+498    	; 0x41a2 <Endpoint_IsSETUPReceived>
    3fb0:	81 11       	cpse	r24, r1
    3fb2:	28 c0       	rjmp	.+80     	; 0x4004 <Endpoint_Write_Control_PStream_LE+0x12e>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3fb4:	0f d1       	rcall	.+542    	; 0x41d4 <Endpoint_IsOUTReceived>
    3fb6:	81 11       	cpse	r24, r1
    3fb8:	09 c0       	rjmp	.+18     	; 0x3fcc <Endpoint_Write_Control_PStream_LE+0xf6>
		  break;

		if (Endpoint_IsINReady())
    3fba:	25 d1       	rcall	.+586    	; 0x4206 <Endpoint_IsINReady>
    3fbc:	81 11       	cpse	r24, r1
    3fbe:	c0 cf       	rjmp	.-128    	; 0x3f40 <Endpoint_Write_Control_PStream_LE+0x6a>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3fc0:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3fc4:	81 11       	cpse	r24, r1
    3fc6:	f1 cf       	rjmp	.-30     	; 0x3faa <Endpoint_Write_Control_PStream_LE+0xd4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3fc8:	82 e0       	ldi	r24, 0x02	; 2
    3fca:	0a c0       	rjmp	.+20     	; 0x3fe0 <Endpoint_Write_Control_PStream_LE+0x10a>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3fcc:	03 d1       	rcall	.+518    	; 0x41d4 <Endpoint_IsOUTReceived>
    3fce:	81 11       	cpse	r24, r1
    3fd0:	1f c0       	rjmp	.+62     	; 0x4010 <Endpoint_Write_Control_PStream_LE+0x13a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3fd2:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3fd6:	88 23       	and	r24, r24
    3fd8:	b9 f3       	breq	.-18     	; 0x3fc8 <Endpoint_Write_Control_PStream_LE+0xf2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3fda:	85 30       	cpi	r24, 0x05	; 5
    3fdc:	b9 f7       	brne	.-18     	; 0x3fcc <Endpoint_Write_Control_PStream_LE+0xf6>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3fde:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3fe0:	df 91       	pop	r29
    3fe2:	cf 91       	pop	r28
    3fe4:	1f 91       	pop	r17
    3fe6:	0f 91       	pop	r16
    3fe8:	ff 90       	pop	r15
    3fea:	ef 90       	pop	r14
    3fec:	df 90       	pop	r13
    3fee:	cf 90       	pop	r12
    3ff0:	08 95       	ret
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    3ff2:	e0 91 1d 27 	lds	r30, 0x271D
    3ff6:	f0 91 1e 27 	lds	r31, 0x271E
    3ffa:	ef 5b       	subi	r30, 0xBF	; 191
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	00 81       	ld	r16, Z
    4000:	10 e0       	ldi	r17, 0x00	; 0
    4002:	b1 cf       	rjmp	.-158    	; 0x3f66 <Endpoint_Write_Control_PStream_LE+0x90>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	ec cf       	rjmp	.-40     	; 0x3fe0 <Endpoint_Write_Control_PStream_LE+0x10a>
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();
    4008:	05 d0       	rcall	.+10     	; 0x4014 <Endpoint_ClearIN>
    400a:	c0 e0       	ldi	r28, 0x00	; 0
    400c:	d0 e0       	ldi	r29, 0x00	; 0
    400e:	7e cf       	rjmp	.-260    	; 0x3f0c <Endpoint_Write_Control_PStream_LE+0x36>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	e6 cf       	rjmp	.-52     	; 0x3fe0 <Endpoint_Write_Control_PStream_LE+0x10a>

00004014 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    4014:	e0 91 1f 27 	lds	r30, 0x271F
    4018:	f0 91 20 27 	lds	r31, 0x2720
    401c:	a0 91 1d 27 	lds	r26, 0x271D
    4020:	b0 91 1e 27 	lds	r27, 0x271E
    4024:	af 5b       	subi	r26, 0xBF	; 191
    4026:	bf 4f       	sbci	r27, 0xFF	; 255
    4028:	8c 91       	ld	r24, X
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	82 83       	std	Z+2, r24	; 0x02
    402e:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    4030:	80 81       	ld	r24, Z
    4032:	8d 79       	andi	r24, 0x9D	; 157
    4034:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    4036:	e0 91 1d 27 	lds	r30, 0x271D
    403a:	f0 91 1e 27 	lds	r31, 0x271E
    403e:	ef 5b       	subi	r30, 0xBF	; 191
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	10 82       	st	Z, r1
    4044:	08 95       	ret

00004046 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    4046:	e0 91 1f 27 	lds	r30, 0x271F
    404a:	f0 91 20 27 	lds	r31, 0x2720
    404e:	80 81       	ld	r24, Z
    4050:	8d 79       	andi	r24, 0x9D	; 157
    4052:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    4054:	e0 91 1d 27 	lds	r30, 0x271D
    4058:	f0 91 1e 27 	lds	r31, 0x271E
    405c:	ef 5b       	subi	r30, 0xBF	; 191
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	10 82       	st	Z, r1
    4062:	08 95       	ret

00004064 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    4064:	80 91 1d 27 	lds	r24, 0x271D
    4068:	90 91 1e 27 	lds	r25, 0x271E
    406c:	fc 01       	movw	r30, r24
    406e:	ef 5b       	subi	r30, 0xBF	; 191
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	20 81       	ld	r18, Z
    4074:	dc 01       	movw	r26, r24
    4076:	a2 0f       	add	r26, r18
    4078:	b1 1d       	adc	r27, r1
    407a:	8c 91       	ld	r24, X
    407c:	2f 5f       	subi	r18, 0xFF	; 255
    407e:	20 83       	st	Z, r18
}
    4080:	08 95       	ret

00004082 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    4082:	20 91 1d 27 	lds	r18, 0x271D
    4086:	30 91 1e 27 	lds	r19, 0x271E
    408a:	f9 01       	movw	r30, r18
    408c:	ef 5b       	subi	r30, 0xBF	; 191
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	90 81       	ld	r25, Z
    4092:	d9 01       	movw	r26, r18
    4094:	a9 0f       	add	r26, r25
    4096:	b1 1d       	adc	r27, r1
    4098:	8c 93       	st	X, r24
    409a:	9f 5f       	subi	r25, 0xFF	; 255
    409c:	90 83       	st	Z, r25
    409e:	08 95       	ret

000040a0 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    40a0:	80 93 21 27 	sts	0x2721, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    40a4:	28 2f       	mov	r18, r24
    40a6:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    40a8:	62 2f       	mov	r22, r18
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	94 e8       	ldi	r25, 0x84	; 132
    40ae:	29 9f       	mul	r18, r25
    40b0:	90 01       	movw	r18, r0
    40b2:	11 24       	eor	r1, r1
    40b4:	2e 5d       	subi	r18, 0xDE	; 222
    40b6:	38 4d       	sbci	r19, 0xD8	; 216
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    40b8:	40 91 c6 04 	lds	r20, 0x04C6
    40bc:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    40c0:	87 fd       	sbrc	r24, 7
    40c2:	12 c0       	rjmp	.+36     	; 0x40e8 <Endpoint_SelectEndpoint+0x48>
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    40c4:	20 93 1d 27 	sts	0x271D, r18
    40c8:	30 93 1e 27 	sts	0x271E, r19
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    40cc:	cb 01       	movw	r24, r22
    40ce:	82 95       	swap	r24
    40d0:	92 95       	swap	r25
    40d2:	90 7f       	andi	r25, 0xF0	; 240
    40d4:	98 27       	eor	r25, r24
    40d6:	80 7f       	andi	r24, 0xF0	; 240
    40d8:	98 27       	eor	r25, r24
    40da:	84 0f       	add	r24, r20
    40dc:	95 1f       	adc	r25, r21
    40de:	80 93 1f 27 	sts	0x271F, r24
    40e2:	90 93 20 27 	sts	0x2720, r25
    40e6:	08 95       	ret
	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;

	if (Address & ENDPOINT_DIR_IN)
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    40e8:	2e 5b       	subi	r18, 0xBE	; 190
    40ea:	3f 4f       	sbci	r19, 0xFF	; 255
    40ec:	20 93 1d 27 	sts	0x271D, r18
    40f0:	30 93 1e 27 	sts	0x271E, r19
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    40f4:	62 95       	swap	r22
    40f6:	72 95       	swap	r23
    40f8:	70 7f       	andi	r23, 0xF0	; 240
    40fa:	76 27       	eor	r23, r22
    40fc:	60 7f       	andi	r22, 0xF0	; 240
    40fe:	76 27       	eor	r23, r22
    4100:	68 5f       	subi	r22, 0xF8	; 248
    4102:	7f 4f       	sbci	r23, 0xFF	; 255
    4104:	64 0f       	add	r22, r20
    4106:	75 1f       	adc	r23, r21
    4108:	60 93 1f 27 	sts	0x271F, r22
    410c:	70 93 20 27 	sts	0x2720, r23
    4110:	08 95       	ret

00004112 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    4112:	e0 91 1f 27 	lds	r30, 0x271F
    4116:	f0 91 20 27 	lds	r31, 0x2720
    411a:	81 81       	ldd	r24, Z+1	; 0x01
    411c:	84 60       	ori	r24, 0x04	; 4
    411e:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    4120:	e0 91 1f 27 	lds	r30, 0x271F
    4124:	f0 91 20 27 	lds	r31, 0x2720
    4128:	81 81       	ldd	r24, Z+1	; 0x01
    412a:	80 7c       	andi	r24, 0xC0	; 192
    412c:	80 34       	cpi	r24, 0x40	; 64
    412e:	09 f0       	breq	.+2      	; 0x4132 <Endpoint_StallTransaction+0x20>
    4130:	08 95       	ret
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    4132:	80 91 21 27 	lds	r24, 0x2721
    4136:	80 58       	subi	r24, 0x80	; 128
    4138:	b3 df       	rcall	.-154    	; 0x40a0 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    413a:	e0 91 1f 27 	lds	r30, 0x271F
    413e:	f0 91 20 27 	lds	r31, 0x2720
    4142:	81 81       	ldd	r24, Z+1	; 0x01
    4144:	84 60       	ori	r24, 0x04	; 4
    4146:	81 83       	std	Z+1, r24	; 0x01
    4148:	08 95       	ret

0000414a <Endpoint_ClearSETUP>:
	return false;
}

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    414a:	80 91 21 27 	lds	r24, 0x2721
    414e:	8f 77       	andi	r24, 0x7F	; 127
    4150:	a7 df       	rcall	.-178    	; 0x40a0 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    4152:	e0 91 1f 27 	lds	r30, 0x271F
    4156:	f0 91 20 27 	lds	r31, 0x2720
    415a:	80 81       	ld	r24, Z
    415c:	8d 78       	andi	r24, 0x8D	; 141
    415e:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    4160:	e0 91 1f 27 	lds	r30, 0x271F
    4164:	f0 91 20 27 	lds	r31, 0x2720
    4168:	80 81       	ld	r24, Z
    416a:	81 60       	ori	r24, 0x01	; 1
    416c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    416e:	e0 91 1d 27 	lds	r30, 0x271D
    4172:	f0 91 1e 27 	lds	r31, 0x271E
    4176:	ef 5b       	subi	r30, 0xBF	; 191
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    417c:	80 91 21 27 	lds	r24, 0x2721
    4180:	80 68       	ori	r24, 0x80	; 128
    4182:	8e df       	rcall	.-228    	; 0x40a0 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    4184:	e0 91 1f 27 	lds	r30, 0x271F
    4188:	f0 91 20 27 	lds	r31, 0x2720
    418c:	80 81       	ld	r24, Z
    418e:	81 60       	ori	r24, 0x01	; 1
    4190:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    4192:	e0 91 1d 27 	lds	r30, 0x271D
    4196:	f0 91 1e 27 	lds	r31, 0x271E
    419a:	ef 5b       	subi	r30, 0xBF	; 191
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	10 82       	st	Z, r1
    41a0:	08 95       	ret

000041a2 <Endpoint_IsSETUPReceived>:
	return false;
}

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    41a2:	80 91 21 27 	lds	r24, 0x2721
    41a6:	8f 77       	andi	r24, 0x7F	; 127
    41a8:	7b df       	rcall	.-266    	; 0x40a0 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    41aa:	e0 91 1f 27 	lds	r30, 0x271F
    41ae:	f0 91 20 27 	lds	r31, 0x2720
    41b2:	80 81       	ld	r24, Z
    41b4:	84 ff       	sbrs	r24, 4
    41b6:	0c c0       	rjmp	.+24     	; 0x41d0 <Endpoint_IsSETUPReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    41b8:	20 91 1d 27 	lds	r18, 0x271D
    41bc:	30 91 1e 27 	lds	r19, 0x271E
    41c0:	82 81       	ldd	r24, Z+2	; 0x02
    41c2:	93 81       	ldd	r25, Z+3	; 0x03
    41c4:	f9 01       	movw	r30, r18
    41c6:	e0 5c       	subi	r30, 0xC0	; 192
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	80 83       	st	Z, r24
		return true;
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	08 95       	ret
	}

	return false;
    41d0:	80 e0       	ldi	r24, 0x00	; 0
}
    41d2:	08 95       	ret

000041d4 <Endpoint_IsOUTReceived>:
	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
}

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    41d4:	80 91 21 27 	lds	r24, 0x2721
    41d8:	8f 77       	andi	r24, 0x7F	; 127
    41da:	62 df       	rcall	.-316    	; 0x40a0 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    41dc:	e0 91 1f 27 	lds	r30, 0x271F
    41e0:	f0 91 20 27 	lds	r31, 0x2720
    41e4:	80 81       	ld	r24, Z
    41e6:	85 ff       	sbrs	r24, 5
    41e8:	0c c0       	rjmp	.+24     	; 0x4202 <Endpoint_IsOUTReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    41ea:	20 91 1d 27 	lds	r18, 0x271D
    41ee:	30 91 1e 27 	lds	r19, 0x271E
    41f2:	82 81       	ldd	r24, Z+2	; 0x02
    41f4:	93 81       	ldd	r25, Z+3	; 0x03
    41f6:	f9 01       	movw	r30, r18
    41f8:	e0 5c       	subi	r30, 0xC0	; 192
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	80 83       	st	Z, r24
		return true;
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	08 95       	ret
	}

	return false;
    4202:	80 e0       	ldi	r24, 0x00	; 0
}
    4204:	08 95       	ret

00004206 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    4206:	80 91 21 27 	lds	r24, 0x2721
    420a:	80 68       	ori	r24, 0x80	; 128
    420c:	49 df       	rcall	.-366    	; 0x40a0 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    420e:	e0 91 1f 27 	lds	r30, 0x271F
    4212:	f0 91 20 27 	lds	r31, 0x2720
    4216:	80 81       	ld	r24, Z
}
    4218:	86 95       	lsr	r24
    421a:	81 70       	andi	r24, 0x01	; 1
    421c:	08 95       	ret

0000421e <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    421e:	1f 93       	push	r17
    4220:	cf 93       	push	r28
    4222:	df 93       	push	r29
    4224:	00 d0       	rcall	.+0      	; 0x4226 <Endpoint_ConfigureEndpoint_PRV+0x8>
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	18 2f       	mov	r17, r24
	Endpoint_SelectEndpoint(Address);
    422c:	4a 83       	std	Y+2, r20	; 0x02
    422e:	69 83       	std	Y+1, r22	; 0x01
    4230:	37 df       	rcall	.-402    	; 0x40a0 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    4232:	e0 91 1f 27 	lds	r30, 0x271F
    4236:	f0 91 20 27 	lds	r31, 0x2720
    423a:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    423c:	e0 91 1f 27 	lds	r30, 0x271F
    4240:	f0 91 20 27 	lds	r31, 0x2720
    4244:	4a 81       	ldd	r20, Y+2	; 0x02
    4246:	69 81       	ldd	r22, Y+1	; 0x01
    4248:	17 fd       	sbrc	r17, 7
    424a:	22 c0       	rjmp	.+68     	; 0x4290 <Endpoint_ConfigureEndpoint_PRV+0x72>
    424c:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    424e:	e0 91 1f 27 	lds	r30, 0x271F
    4252:	f0 91 20 27 	lds	r31, 0x2720
    4256:	61 83       	std	Z+1, r22	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    4258:	e0 91 1f 27 	lds	r30, 0x271F
    425c:	f0 91 20 27 	lds	r31, 0x2720
    4260:	12 82       	std	Z+2, r1	; 0x02
    4262:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    4264:	80 91 1d 27 	lds	r24, 0x271D
    4268:	90 91 1e 27 	lds	r25, 0x271E
    426c:	84 83       	std	Z+4, r24	; 0x04
    426e:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    4270:	40 e0       	ldi	r20, 0x00	; 0
    4272:	fc 01       	movw	r30, r24
    4274:	e0 5c       	subi	r30, 0xC0	; 192
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    427a:	fc 01       	movw	r30, r24
    427c:	ef 5b       	subi	r30, 0xBF	; 191
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	10 82       	st	Z, r1

	return true;
}
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	df 91       	pop	r29
    428a:	cf 91       	pop	r28
    428c:	1f 91       	pop	r17
    428e:	08 95       	ret
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    4290:	82 e0       	ldi	r24, 0x02	; 2
    4292:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    4294:	e0 91 1f 27 	lds	r30, 0x271F
    4298:	f0 91 20 27 	lds	r31, 0x2720
    429c:	61 83       	std	Z+1, r22	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    429e:	e0 91 1f 27 	lds	r30, 0x271F
    42a2:	f0 91 20 27 	lds	r31, 0x2720
    42a6:	12 82       	std	Z+2, r1	; 0x02
    42a8:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    42aa:	80 91 1d 27 	lds	r24, 0x271D
    42ae:	90 91 1e 27 	lds	r25, 0x271E
    42b2:	84 83       	std	Z+4, r24	; 0x04
    42b4:	95 83       	std	Z+5, r25	; 0x05
    42b6:	dd cf       	rjmp	.-70     	; 0x4272 <Endpoint_ConfigureEndpoint_PRV+0x54>

000042b8 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    42b8:	af 92       	push	r10
    42ba:	bf 92       	push	r11
    42bc:	df 92       	push	r13
    42be:	ef 92       	push	r14
    42c0:	ff 92       	push	r15
    42c2:	0f 93       	push	r16
    42c4:	1f 93       	push	r17
    42c6:	cf 93       	push	r28
    42c8:	df 93       	push	r29
    42ca:	00 d0       	rcall	.+0      	; 0x42cc <Endpoint_ConfigureEndpointTable+0x14>
    42cc:	cd b7       	in	r28, 0x3d	; 61
    42ce:	de b7       	in	r29, 0x3e	; 62
    42d0:	e6 2e       	mov	r14, r22
	for (uint8_t i = 0; i < Entries; i++)
    42d2:	66 23       	and	r22, r22
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <Endpoint_ConfigureEndpointTable+0x20>
    42d6:	4a c0       	rjmp	.+148    	; 0x436c <Endpoint_ConfigureEndpointTable+0xb4>
    42d8:	5c 01       	movw	r10, r24
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
    42da:	8c 01       	movw	r16, r24
    42dc:	0c 5f       	subi	r16, 0xFC	; 252
    42de:	1f 4f       	sbci	r17, 0xFF	; 255
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    42e0:	f1 2c       	mov	r15, r1
	{
		if (!(Table[i].Address))
    42e2:	d5 01       	movw	r26, r10
    42e4:	5c 91       	ld	r21, X
    42e6:	55 23       	and	r21, r21
    42e8:	c9 f1       	breq	.+114    	; 0x435c <Endpoint_ConfigureEndpointTable+0xa4>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    42ea:	d5 01       	movw	r26, r10
    42ec:	11 96       	adiw	r26, 0x01	; 1
    42ee:	ed 91       	ld	r30, X+
    42f0:	fc 91       	ld	r31, X
    42f2:	12 97       	sbiw	r26, 0x02	; 2
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
    42f4:	d8 01       	movw	r26, r16
    42f6:	11 97       	sbiw	r26, 0x01	; 1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    42f8:	4c 91       	ld	r20, X
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    42fa:	d8 01       	movw	r26, r16
    42fc:	8c 91       	ld	r24, X
    42fe:	82 30       	cpi	r24, 0x02	; 2
    4300:	08 f4       	brcc	.+2      	; 0x4304 <Endpoint_ConfigureEndpointTable+0x4c>
    4302:	43 c0       	rjmp	.+134    	; 0x438a <Endpoint_ConfigureEndpointTable+0xd2>
    4304:	98 e1       	ldi	r25, 0x18	; 24
    4306:	88 e1       	ldi	r24, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    4308:	e9 30       	cpi	r30, 0x09	; 9
    430a:	f1 05       	cpc	r31, r1
    430c:	50 f0       	brcs	.+20     	; 0x4322 <Endpoint_ConfigureEndpointTable+0x6a>
    430e:	28 e0       	ldi	r18, 0x08	; 8
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    4314:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    4316:	22 0f       	add	r18, r18
    4318:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    431a:	2e 17       	cp	r18, r30
    431c:	3f 07       	cpc	r19, r31
    431e:	d0 f3       	brcs	.-12     	; 0x4314 <Endpoint_ConfigureEndpointTable+0x5c>
    4320:	98 2b       	or	r25, r24
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    4322:	25 2f       	mov	r18, r21
    4324:	2f 70       	andi	r18, 0x0F	; 15
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	26 30       	cpi	r18, 0x06	; 6
    432a:	31 05       	cpc	r19, r1
    432c:	64 f5       	brge	.+88     	; 0x4386 <Endpoint_ConfigureEndpointTable+0xce>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
				if (Size > 64)
    432e:	e1 34       	cpi	r30, 0x41	; 65
    4330:	f1 05       	cpc	r31, r1
    4332:	48 f5       	brcc	.+82     	; 0x4386 <Endpoint_ConfigureEndpointTable+0xce>

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    4334:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
				  return false;

				switch (Type)
    4336:	41 11       	cpse	r20, r1
    4338:	2b c0       	rjmp	.+86     	; 0x4390 <Endpoint_ConfigureEndpointTable+0xd8>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    433a:	90 64       	ori	r25, 0x40	; 64
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    433c:	de 2e       	mov	r13, r30
    433e:	4e 2f       	mov	r20, r30
    4340:	69 2f       	mov	r22, r25
    4342:	85 2f       	mov	r24, r21
    4344:	80 58       	subi	r24, 0x80	; 128
    4346:	59 83       	std	Y+1, r21	; 0x01
    4348:	9a 83       	std	Y+2, r25	; 0x02
    434a:	69 df       	rcall	.-302    	; 0x421e <Endpoint_ConfigureEndpoint_PRV>
    434c:	9a 81       	ldd	r25, Y+2	; 0x02
    434e:	59 81       	ldd	r21, Y+1	; 0x01

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    4350:	4d 2d       	mov	r20, r13
    4352:	69 2f       	mov	r22, r25
    4354:	85 2f       	mov	r24, r21
    4356:	63 df       	rcall	.-314    	; 0x421e <Endpoint_ConfigureEndpoint_PRV>
    4358:	88 23       	and	r24, r24
    435a:	a9 f0       	breq	.+42     	; 0x4386 <Endpoint_ConfigureEndpointTable+0xce>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    435c:	f3 94       	inc	r15
    435e:	b5 e0       	ldi	r27, 0x05	; 5
    4360:	ab 0e       	add	r10, r27
    4362:	b1 1c       	adc	r11, r1
    4364:	0b 5f       	subi	r16, 0xFB	; 251
    4366:	1f 4f       	sbci	r17, 0xFF	; 255
    4368:	fe 10       	cpse	r15, r14
    436a:	bb cf       	rjmp	.-138    	; 0x42e2 <Endpoint_ConfigureEndpointTable+0x2a>
		{
			return false;
		}
	}

	return true;
    436c:	81 e0       	ldi	r24, 0x01	; 1
}
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
    4372:	df 91       	pop	r29
    4374:	cf 91       	pop	r28
    4376:	1f 91       	pop	r17
    4378:	0f 91       	pop	r16
    437a:	ff 90       	pop	r15
    437c:	ef 90       	pop	r14
    437e:	df 90       	pop	r13
    4380:	bf 90       	pop	r11
    4382:	af 90       	pop	r10
    4384:	08 95       	ret
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	f2 cf       	rjmp	.-28     	; 0x436e <Endpoint_ConfigureEndpointTable+0xb6>
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    438a:	98 e0       	ldi	r25, 0x08	; 8
    438c:	88 e0       	ldi	r24, 0x08	; 8
    438e:	bc cf       	rjmp	.-136    	; 0x4308 <Endpoint_ConfigureEndpointTable+0x50>
				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
				if (Size > 64)
				  return false;

				switch (Type)
    4390:	41 30       	cpi	r20, 0x01	; 1
    4392:	29 f0       	breq	.+10     	; 0x439e <Endpoint_ConfigureEndpointTable+0xe6>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    4394:	90 68       	ori	r25, 0x80	; 128
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    4396:	44 23       	and	r20, r20
    4398:	89 f2       	breq	.-94     	; 0x433c <Endpoint_ConfigureEndpointTable+0x84>
    439a:	de 2e       	mov	r13, r30
    439c:	d9 cf       	rjmp	.-78     	; 0x4350 <Endpoint_ConfigureEndpointTable+0x98>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    439e:	90 6c       	ori	r25, 0xC0	; 192
    43a0:	de 2e       	mov	r13, r30
    43a2:	d6 cf       	rjmp	.-84     	; 0x4350 <Endpoint_ConfigureEndpointTable+0x98>

000043a4 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43a4:	e0 ec       	ldi	r30, 0xC0	; 192
    43a6:	f4 e0       	ldi	r31, 0x04	; 4
    43a8:	a6 81       	ldd	r26, Z+6	; 0x06
    43aa:	b7 81       	ldd	r27, Z+7	; 0x07
    43ac:	19 96       	adiw	r26, 0x09	; 9
    43ae:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    43b0:	a6 81       	ldd	r26, Z+6	; 0x06
    43b2:	b7 81       	ldd	r27, Z+7	; 0x07
    43b4:	11 96       	adiw	r26, 0x01	; 1
    43b6:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43b8:	a6 81       	ldd	r26, Z+6	; 0x06
    43ba:	b7 81       	ldd	r27, Z+7	; 0x07
    43bc:	59 96       	adiw	r26, 0x19	; 25
    43be:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    43c0:	a6 81       	ldd	r26, Z+6	; 0x06
    43c2:	b7 81       	ldd	r27, Z+7	; 0x07
    43c4:	51 96       	adiw	r26, 0x11	; 17
    43c6:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43c8:	a6 81       	ldd	r26, Z+6	; 0x06
    43ca:	b7 81       	ldd	r27, Z+7	; 0x07
    43cc:	99 96       	adiw	r26, 0x29	; 41
    43ce:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    43d0:	a6 81       	ldd	r26, Z+6	; 0x06
    43d2:	b7 81       	ldd	r27, Z+7	; 0x07
    43d4:	91 96       	adiw	r26, 0x21	; 33
    43d6:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43d8:	a6 81       	ldd	r26, Z+6	; 0x06
    43da:	b7 81       	ldd	r27, Z+7	; 0x07
    43dc:	d9 96       	adiw	r26, 0x39	; 57
    43de:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    43e0:	a6 81       	ldd	r26, Z+6	; 0x06
    43e2:	b7 81       	ldd	r27, Z+7	; 0x07
    43e4:	d1 96       	adiw	r26, 0x31	; 49
    43e6:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43e8:	a6 81       	ldd	r26, Z+6	; 0x06
    43ea:	b7 81       	ldd	r27, Z+7	; 0x07
    43ec:	a7 5b       	subi	r26, 0xB7	; 183
    43ee:	bf 4f       	sbci	r27, 0xFF	; 255
    43f0:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    43f2:	a6 81       	ldd	r26, Z+6	; 0x06
    43f4:	b7 81       	ldd	r27, Z+7	; 0x07
    43f6:	af 5b       	subi	r26, 0xBF	; 191
    43f8:	bf 4f       	sbci	r27, 0xFF	; 255
    43fa:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43fc:	a6 81       	ldd	r26, Z+6	; 0x06
    43fe:	b7 81       	ldd	r27, Z+7	; 0x07
    4400:	a7 5a       	subi	r26, 0xA7	; 167
    4402:	bf 4f       	sbci	r27, 0xFF	; 255
    4404:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    4406:	06 80       	ldd	r0, Z+6	; 0x06
    4408:	f7 81       	ldd	r31, Z+7	; 0x07
    440a:	e0 2d       	mov	r30, r0
    440c:	ef 5a       	subi	r30, 0xAF	; 175
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	10 82       	st	Z, r1
    4412:	08 95       	ret

00004414 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    4414:	80 91 15 27 	lds	r24, 0x2715
    4418:	87 fd       	sbrc	r24, 7
    441a:	08 c0       	rjmp	.+16     	; 0x442c <Endpoint_ClearStatusStage+0x18>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    441c:	f4 de       	rcall	.-536    	; 0x4206 <Endpoint_IsINReady>
    441e:	81 11       	cpse	r24, r1
    4420:	0d c0       	rjmp	.+26     	; 0x443c <Endpoint_ClearStatusStage+0x28>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    4422:	80 91 14 27 	lds	r24, 0x2714
    4426:	81 11       	cpse	r24, r1
    4428:	f9 cf       	rjmp	.-14     	; 0x441c <Endpoint_ClearStatusStage+0x8>
    442a:	08 95       	ret

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    442c:	d3 de       	rcall	.-602    	; 0x41d4 <Endpoint_IsOUTReceived>
    442e:	81 11       	cpse	r24, r1
    4430:	06 c0       	rjmp	.+12     	; 0x443e <Endpoint_ClearStatusStage+0x2a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    4432:	80 91 14 27 	lds	r24, 0x2714
    4436:	81 11       	cpse	r24, r1
    4438:	f9 cf       	rjmp	.-14     	; 0x442c <Endpoint_ClearStatusStage+0x18>
    443a:	08 95       	ret
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    443c:	eb cd       	rjmp	.-1066   	; 0x4014 <Endpoint_ClearIN>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    443e:	03 ce       	rjmp	.-1018   	; 0x4046 <Endpoint_ClearOUT>

00004440 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    4440:	1f 93       	push	r17
    4442:	cf 93       	push	r28
    4444:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    4446:	e0 91 c6 04 	lds	r30, 0x04C6
    444a:	f0 91 c7 04 	lds	r31, 0x04C7
    444e:	e0 5a       	subi	r30, 0xA0	; 160
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	c0 81       	ld	r28, Z
    4454:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    4456:	14 e6       	ldi	r17, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    4458:	80 91 21 27 	lds	r24, 0x2721
    445c:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    445e:	80 38       	cpi	r24, 0x80	; 128
    4460:	31 f1       	breq	.+76     	; 0x44ae <Endpoint_WaitUntilReady+0x6e>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    4462:	b8 de       	rcall	.-656    	; 0x41d4 <Endpoint_IsOUTReceived>
    4464:	81 11       	cpse	r24, r1
    4466:	26 c0       	rjmp	.+76     	; 0x44b4 <Endpoint_WaitUntilReady+0x74>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4468:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    446c:	88 23       	and	r24, r24
    446e:	39 f1       	breq	.+78     	; 0x44be <Endpoint_WaitUntilReady+0x7e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4470:	85 30       	cpi	r24, 0x05	; 5
    4472:	51 f1       	breq	.+84     	; 0x44c8 <Endpoint_WaitUntilReady+0x88>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    4474:	e0 91 1f 27 	lds	r30, 0x271F
    4478:	f0 91 20 27 	lds	r31, 0x2720
    447c:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    447e:	82 fd       	sbrc	r24, 2
    4480:	28 c0       	rjmp	.+80     	; 0x44d2 <Endpoint_WaitUntilReady+0x92>
    4482:	e0 91 c6 04 	lds	r30, 0x04C6
    4486:	f0 91 c7 04 	lds	r31, 0x04C7
    448a:	e0 5a       	subi	r30, 0xA0	; 160
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	80 81       	ld	r24, Z
    4490:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    4492:	c8 17       	cp	r28, r24
    4494:	d9 07       	cpc	r29, r25
    4496:	01 f3       	breq	.-64     	; 0x4458 <Endpoint_WaitUntilReady+0x18>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    4498:	21 2f       	mov	r18, r17
    449a:	21 50       	subi	r18, 0x01	; 1
    449c:	11 23       	and	r17, r17
    449e:	f1 f0       	breq	.+60     	; 0x44dc <Endpoint_WaitUntilReady+0x9c>
    44a0:	ec 01       	movw	r28, r24
    44a2:	12 2f       	mov	r17, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    44a4:	80 91 21 27 	lds	r24, 0x2721
    44a8:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    44aa:	80 38       	cpi	r24, 0x80	; 128
    44ac:	d1 f6       	brne	.-76     	; 0x4462 <Endpoint_WaitUntilReady+0x22>
		{
			if (Endpoint_IsINReady())
    44ae:	ab de       	rcall	.-682    	; 0x4206 <Endpoint_IsINReady>
    44b0:	88 23       	and	r24, r24
    44b2:	d1 f2       	breq	.-76     	; 0x4468 <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_NoError;
    44b4:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    44b6:	df 91       	pop	r29
    44b8:	cf 91       	pop	r28
    44ba:	1f 91       	pop	r17
    44bc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    44be:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    44c0:	df 91       	pop	r29
    44c2:	cf 91       	pop	r28
    44c4:	1f 91       	pop	r17
    44c6:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    44c8:	83 e0       	ldi	r24, 0x03	; 3

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    44ca:	df 91       	pop	r29
    44cc:	cf 91       	pop	r28
    44ce:	1f 91       	pop	r17
    44d0:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    44d2:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    44d4:	df 91       	pop	r29
    44d6:	cf 91       	pop	r28
    44d8:	1f 91       	pop	r17
    44da:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    44dc:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	1f 91       	pop	r17
    44e4:	08 95       	ret

000044e6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    44e6:	63 d0       	rcall	.+198    	; 0x45ae <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    44e8:	69 d0       	rcall	.+210    	; 0x45bc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    44ea:	e0 ec       	ldi	r30, 0xC0	; 192
    44ec:	f4 e0       	ldi	r31, 0x04	; 4
    44ee:	81 81       	ldd	r24, Z+1	; 0x01
    44f0:	8e 7f       	andi	r24, 0xFE	; 254
    44f2:	81 83       	std	Z+1, r24	; 0x01
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    44f4:	80 81       	ld	r24, Z
    44f6:	8f 77       	andi	r24, 0x7F	; 127
    44f8:	80 83       	st	Z, r24

	USB_Detach();
	USB_Controller_Disable();

	USB_IsInitialized = false;
    44fa:	10 92 13 27 	sts	0x2713, r1
    44fe:	08 95       	ret

00004500 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
	#if defined(USB_DEVICE_OPT_FULLSPEED)
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	else
	  CLK.USBCTRL = (((F_USB / 48000000) - 1) << CLK_USBPSDIV_gp);
    4504:	e0 e4       	ldi	r30, 0x40	; 64
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	14 82       	std	Z+4, r1	; 0x04
	#else
	CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	#endif

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
    450a:	84 81       	ldd	r24, Z+4	; 0x04
    450c:	81 60       	ori	r24, 0x01	; 1
    450e:	84 83       	std	Z+4, r24	; 0x04
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    4510:	4e d0       	rcall	.+156    	; 0x45ae <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    4512:	54 d0       	rcall	.+168    	; 0x45bc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    4514:	c0 ec       	ldi	r28, 0xC0	; 192
    4516:	d4 e0       	ldi	r29, 0x04	; 4
    4518:	88 81       	ld	r24, Y
    451a:	8f 77       	andi	r24, 0x7F	; 127
    451c:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    451e:	88 81       	ld	r24, Y
    4520:	80 68       	ori	r24, 0x80	; 128
    4522:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    4524:	10 92 14 27 	sts	0x2714, r1
	USB_Device_ConfigurationNumber  = 0;
    4528:	10 92 10 27 	sts	0x2710, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    452c:	10 92 12 27 	sts	0x2712, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    4530:	10 92 11 27 	sts	0x2711, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    4534:	88 81       	ld	r24, Y
    4536:	80 64       	ori	r24, 0x40	; 64
    4538:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    453a:	48 e0       	ldi	r20, 0x08	; 8
    453c:	68 e4       	ldi	r22, 0x48	; 72
    453e:	80 e8       	ldi	r24, 0x80	; 128
    4540:	6e de       	rcall	.-804    	; 0x421e <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    4542:	48 e0       	ldi	r20, 0x08	; 8
    4544:	68 e4       	ldi	r22, 0x48	; 72
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	6a de       	rcall	.-812    	; 0x421e <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    454a:	88 85       	ldd	r24, Y+8	; 0x08
    454c:	80 64       	ori	r24, 0x40	; 64
    454e:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    4550:	89 81       	ldd	r24, Y+1	; 0x01
    4552:	81 60       	ori	r24, 0x01	; 1
    4554:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    4556:	df 91       	pop	r29
    4558:	cf 91       	pop	r28
    455a:	08 95       	ret

0000455c <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    455c:	cf 93       	push	r28
    455e:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    4560:	3f b7       	in	r19, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    4562:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    4564:	c0 ec       	ldi	r28, 0xC0	; 192
    4566:	d1 e0       	ldi	r29, 0x01	; 1
    4568:	22 e0       	ldi	r18, 0x02	; 2
    456a:	2a 87       	std	Y+10, r18	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    456c:	ea e1       	ldi	r30, 0x1A	; 26
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	e4 91       	lpm	r30, Z
    4572:	a0 ec       	ldi	r26, 0xC0	; 192
    4574:	b4 e0       	ldi	r27, 0x04	; 4
    4576:	da 96       	adiw	r26, 0x3a	; 58
    4578:	ec 93       	st	X, r30
    457a:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    457c:	eb e1       	ldi	r30, 0x1B	; 27
    457e:	f0 e0       	ldi	r31, 0x00	; 0
    4580:	e4 91       	lpm	r30, Z
    4582:	db 96       	adiw	r26, 0x3b	; 59
    4584:	ec 93       	st	X, r30
    4586:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    4588:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    458a:	8b e3       	ldi	r24, 0x3B	; 59
    458c:	9a e2       	ldi	r25, 0x2A	; 42
    458e:	8e 7f       	andi	r24, 0xFE	; 254
    4590:	16 96       	adiw	r26, 0x06	; 6
    4592:	8d 93       	st	X+, r24
    4594:	9c 93       	st	X, r25
    4596:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    4598:	85 e1       	ldi	r24, 0x15	; 21
    459a:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
	else if ((USB_Options & USB_OPT_BUSEVENT_PRIMED) == USB_OPT_BUSEVENT_PRIMED)
	  USB.INTCTRLA = (2 << USB_INTLVL_gp);
    459c:	18 96       	adiw	r26, 0x08	; 8
    459e:	2c 93       	st	X, r18
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    45a0:	3f bf       	out	0x3f, r19	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	80 93 13 27 	sts	0x2713, r24

	USB_ResetInterface();
}
    45a8:	df 91       	pop	r29
    45aa:	cf 91       	pop	r28
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;

	USB_ResetInterface();
    45ac:	a9 cf       	rjmp	.-174    	; 0x4500 <USB_ResetInterface>

000045ae <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    45ae:	e0 ec       	ldi	r30, 0xC0	; 192
    45b0:	f4 e0       	ldi	r31, 0x04	; 4
    45b2:	80 85       	ldd	r24, Z+8	; 0x08
    45b4:	83 70       	andi	r24, 0x03	; 3
    45b6:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    45b8:	11 86       	std	Z+9, r1	; 0x09
    45ba:	08 95       	ret

000045bc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    45bc:	e0 ec       	ldi	r30, 0xC0	; 192
    45be:	f4 e0       	ldi	r31, 0x04	; 4
    45c0:	8f ef       	ldi	r24, 0xFF	; 255
    45c2:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    45c4:	84 87       	std	Z+12, r24	; 0x0c
    45c6:	08 95       	ret

000045c8 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    45c8:	1f 92       	push	r1
    45ca:	0f 92       	push	r0
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	0f 92       	push	r0
    45d0:	11 24       	eor	r1, r1
    45d2:	2f 93       	push	r18
    45d4:	3f 93       	push	r19
    45d6:	4f 93       	push	r20
    45d8:	5f 93       	push	r21
    45da:	6f 93       	push	r22
    45dc:	7f 93       	push	r23
    45de:	8f 93       	push	r24
    45e0:	9f 93       	push	r25
    45e2:	af 93       	push	r26
    45e4:	bf 93       	push	r27
    45e6:	ef 93       	push	r30
    45e8:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    45ea:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    45ee:	87 fd       	sbrc	r24, 7
    45f0:	4d c0       	rjmp	.+154    	; 0x468c <__vector_125+0xc4>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    45f2:	80 91 ca 04 	lds	r24, 0x04CA

		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    45f6:	86 fd       	sbrc	r24, 6
    45f8:	41 c0       	rjmp	.+130    	; 0x467c <__vector_125+0xb4>
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    45fa:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    45fe:	85 ff       	sbrs	r24, 5
    4600:	0c c0       	rjmp	.+24     	; 0x461a <__vector_125+0x52>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    4602:	80 e2       	ldi	r24, 0x20	; 32
    4604:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    4608:	80 91 10 27 	lds	r24, 0x2710
    460c:	88 23       	and	r24, r24
    460e:	71 f1       	breq	.+92     	; 0x466c <__vector_125+0xa4>
		  USB_DeviceState = DEVICE_STATE_Configured;
    4610:	84 e0       	ldi	r24, 0x04	; 4
    4612:	80 93 14 27 	sts	0x2714, r24
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    4616:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    461a:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    461e:	84 ff       	sbrs	r24, 4
    4620:	14 c0       	rjmp	.+40     	; 0x464a <__vector_125+0x82>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    4622:	80 e1       	ldi	r24, 0x10	; 16
    4624:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    4628:	82 e0       	ldi	r24, 0x02	; 2
    462a:	80 93 14 27 	sts	0x2714, r24
		USB_Device_ConfigurationNumber = 0;
    462e:	10 92 10 27 	sts	0x2710, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    4632:	10 92 c3 04 	sts	0x04C3, r1

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    4636:	b6 de       	rcall	.-660    	; 0x43a4 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    4638:	48 e0       	ldi	r20, 0x08	; 8
    463a:	68 e4       	ldi	r22, 0x48	; 72
    463c:	80 e8       	ldi	r24, 0x80	; 128
    463e:	ef dd       	rcall	.-1058   	; 0x421e <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    4640:	48 e0       	ldi	r20, 0x08	; 8
    4642:	68 e4       	ldi	r22, 0x48	; 72
    4644:	80 e0       	ldi	r24, 0x00	; 0
    4646:	eb dd       	rcall	.-1066   	; 0x421e <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    4648:	23 db       	rcall	.-2490   	; 0x3c90 <USB_Event_Stub>
	}
}
    464a:	ff 91       	pop	r31
    464c:	ef 91       	pop	r30
    464e:	bf 91       	pop	r27
    4650:	af 91       	pop	r26
    4652:	9f 91       	pop	r25
    4654:	8f 91       	pop	r24
    4656:	7f 91       	pop	r23
    4658:	6f 91       	pop	r22
    465a:	5f 91       	pop	r21
    465c:	4f 91       	pop	r20
    465e:	3f 91       	pop	r19
    4660:	2f 91       	pop	r18
    4662:	0f 90       	pop	r0
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	0f 90       	pop	r0
    4668:	1f 90       	pop	r1
    466a:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    466c:	80 91 c3 04 	lds	r24, 0x04C3
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    4670:	81 11       	cpse	r24, r1
    4672:	15 c0       	rjmp	.+42     	; 0x469e <__vector_125+0xd6>
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	80 93 14 27 	sts	0x2714, r24
    467a:	cd cf       	rjmp	.-102    	; 0x4616 <__vector_125+0x4e>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    467c:	80 e4       	ldi	r24, 0x40	; 64
    467e:	80 93 ca 04 	sts	0x04CA, r24
	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    4682:	10 92 14 27 	sts	0x2714, r1
		EVENT_USB_Device_Disconnect();
    4686:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <EVENT_USB_Device_Disconnect>
    468a:	b7 cf       	rjmp	.-146    	; 0x45fa <__vector_125+0x32>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    468c:	80 91 c8 04 	lds	r24, 0x04C8
}

ISR(USB_BUSEVENT_vect)
{
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    4690:	87 ff       	sbrs	r24, 7
    4692:	af cf       	rjmp	.-162    	; 0x45f2 <__vector_125+0x2a>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    4694:	80 e8       	ldi	r24, 0x80	; 128
    4696:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    469a:	fa da       	rcall	.-2572   	; 0x3c90 <USB_Event_Stub>
    469c:	aa cf       	rjmp	.-172    	; 0x45f2 <__vector_125+0x2a>
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    469e:	83 e0       	ldi	r24, 0x03	; 3
    46a0:	ea cf       	rjmp	.-44     	; 0x4676 <__vector_125+0xae>

000046a2 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    46a2:	cf 93       	push	r28
    46a4:	df 93       	push	r29
    46a6:	ec 01       	movw	r28, r24
    46a8:	40 96       	adiw	r24, 0x10	; 16
    46aa:	fc 01       	movw	r30, r24
    46ac:	8b e0       	ldi	r24, 0x0B	; 11
    46ae:	df 01       	movw	r26, r30
    46b0:	1d 92       	st	X+, r1
    46b2:	8a 95       	dec	r24
    46b4:	e9 f7       	brne	.-6      	; 0x46b0 <CDC_Device_ConfigureEndpoints+0xe>
    46b6:	82 e0       	ldi	r24, 0x02	; 2
    46b8:	8c 83       	std	Y+4, r24	; 0x04
    46ba:	89 87       	std	Y+9, r24	; 0x09
    46bc:	83 e0       	ldi	r24, 0x03	; 3
    46be:	8e 87       	std	Y+14, r24	; 0x0e
    46c0:	61 e0       	ldi	r22, 0x01	; 1
    46c2:	ce 01       	movw	r24, r28
    46c4:	01 96       	adiw	r24, 0x01	; 1
    46c6:	f8 dd       	rcall	.-1040   	; 0x42b8 <Endpoint_ConfigureEndpointTable>
    46c8:	81 11       	cpse	r24, r1
    46ca:	04 c0       	rjmp	.+8      	; 0x46d4 <CDC_Device_ConfigureEndpoints+0x32>
    46cc:	80 e0       	ldi	r24, 0x00	; 0
    46ce:	df 91       	pop	r29
    46d0:	cf 91       	pop	r28
    46d2:	08 95       	ret
    46d4:	61 e0       	ldi	r22, 0x01	; 1
    46d6:	ce 01       	movw	r24, r28
    46d8:	06 96       	adiw	r24, 0x06	; 6
    46da:	ee dd       	rcall	.-1060   	; 0x42b8 <Endpoint_ConfigureEndpointTable>
    46dc:	88 23       	and	r24, r24
    46de:	b1 f3       	breq	.-20     	; 0x46cc <CDC_Device_ConfigureEndpoints+0x2a>
    46e0:	61 e0       	ldi	r22, 0x01	; 1
    46e2:	ce 01       	movw	r24, r28
    46e4:	0b 96       	adiw	r24, 0x0b	; 11
    46e6:	df 91       	pop	r29
    46e8:	cf 91       	pop	r28
    46ea:	e6 cd       	rjmp	.-1076   	; 0x42b8 <Endpoint_ConfigureEndpointTable>

000046ec <CDC_Device_SendString>:
    46ec:	cf 93       	push	r28
    46ee:	df 93       	push	r29
    46f0:	d6 2f       	mov	r29, r22
    46f2:	c7 2f       	mov	r28, r23
    46f4:	20 91 14 27 	lds	r18, 0x2714
    46f8:	24 30       	cpi	r18, 0x04	; 4
    46fa:	21 f0       	breq	.+8      	; 0x4704 <CDC_Device_SendString+0x18>
    46fc:	82 e0       	ldi	r24, 0x02	; 2
    46fe:	df 91       	pop	r29
    4700:	cf 91       	pop	r28
    4702:	08 95       	ret
    4704:	fc 01       	movw	r30, r24
    4706:	44 89       	ldd	r20, Z+20	; 0x14
    4708:	55 89       	ldd	r21, Z+21	; 0x15
    470a:	66 89       	ldd	r22, Z+22	; 0x16
    470c:	77 89       	ldd	r23, Z+23	; 0x17
    470e:	45 2b       	or	r20, r21
    4710:	46 2b       	or	r20, r22
    4712:	47 2b       	or	r20, r23
    4714:	99 f3       	breq	.-26     	; 0x46fc <CDC_Device_SendString+0x10>
    4716:	81 81       	ldd	r24, Z+1	; 0x01
    4718:	c3 dc       	rcall	.-1658   	; 0x40a0 <Endpoint_SelectEndpoint>
    471a:	ad 2f       	mov	r26, r29
    471c:	bc 2f       	mov	r27, r28
    471e:	fd 01       	movw	r30, r26
    4720:	01 90       	ld	r0, Z+
    4722:	00 20       	and	r0, r0
    4724:	e9 f7       	brne	.-6      	; 0x4720 <CDC_Device_SendString+0x34>
    4726:	bf 01       	movw	r22, r30
    4728:	61 50       	subi	r22, 0x01	; 1
    472a:	71 09       	sbc	r23, r1
    472c:	6a 1b       	sub	r22, r26
    472e:	7b 0b       	sbc	r23, r27
    4730:	40 e0       	ldi	r20, 0x00	; 0
    4732:	50 e0       	ldi	r21, 0x00	; 0
    4734:	8d 2f       	mov	r24, r29
    4736:	9c 2f       	mov	r25, r28
    4738:	df 91       	pop	r29
    473a:	cf 91       	pop	r28
    473c:	bf ca       	rjmp	.-2690   	; 0x3cbc <Endpoint_Write_Stream_LE>

0000473e <CDC_Device_SendData>:
    473e:	ef 92       	push	r14
    4740:	ff 92       	push	r15
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	cf 93       	push	r28
    4748:	df 93       	push	r29
    474a:	eb 01       	movw	r28, r22
    474c:	7a 01       	movw	r14, r20
    474e:	20 91 14 27 	lds	r18, 0x2714
    4752:	24 30       	cpi	r18, 0x04	; 4
    4754:	41 f0       	breq	.+16     	; 0x4766 <CDC_Device_SendData+0x28>
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	1f 91       	pop	r17
    475e:	0f 91       	pop	r16
    4760:	ff 90       	pop	r15
    4762:	ef 90       	pop	r14
    4764:	08 95       	ret
    4766:	fc 01       	movw	r30, r24
    4768:	04 89       	ldd	r16, Z+20	; 0x14
    476a:	15 89       	ldd	r17, Z+21	; 0x15
    476c:	26 89       	ldd	r18, Z+22	; 0x16
    476e:	37 89       	ldd	r19, Z+23	; 0x17
    4770:	01 2b       	or	r16, r17
    4772:	02 2b       	or	r16, r18
    4774:	03 2b       	or	r16, r19
    4776:	79 f3       	breq	.-34     	; 0x4756 <CDC_Device_SendData+0x18>
    4778:	81 81       	ldd	r24, Z+1	; 0x01
    477a:	92 dc       	rcall	.-1756   	; 0x40a0 <Endpoint_SelectEndpoint>
    477c:	40 e0       	ldi	r20, 0x00	; 0
    477e:	50 e0       	ldi	r21, 0x00	; 0
    4780:	b7 01       	movw	r22, r14
    4782:	ce 01       	movw	r24, r28
    4784:	df 91       	pop	r29
    4786:	cf 91       	pop	r28
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	ff 90       	pop	r15
    478e:	ef 90       	pop	r14
    4790:	95 ca       	rjmp	.-2774   	; 0x3cbc <Endpoint_Write_Stream_LE>

00004792 <CDC_Device_SendByte>:
    4792:	0f 93       	push	r16
    4794:	1f 93       	push	r17
    4796:	cf 93       	push	r28
    4798:	df 93       	push	r29
    479a:	1f 92       	push	r1
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	20 91 14 27 	lds	r18, 0x2714
    47a4:	24 30       	cpi	r18, 0x04	; 4
    47a6:	39 f0       	breq	.+14     	; 0x47b6 <CDC_Device_SendByte+0x24>
    47a8:	82 e0       	ldi	r24, 0x02	; 2
    47aa:	0f 90       	pop	r0
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	1f 91       	pop	r17
    47b2:	0f 91       	pop	r16
    47b4:	08 95       	ret
    47b6:	fc 01       	movw	r30, r24
    47b8:	04 89       	ldd	r16, Z+20	; 0x14
    47ba:	15 89       	ldd	r17, Z+21	; 0x15
    47bc:	26 89       	ldd	r18, Z+22	; 0x16
    47be:	37 89       	ldd	r19, Z+23	; 0x17
    47c0:	01 2b       	or	r16, r17
    47c2:	02 2b       	or	r16, r18
    47c4:	03 2b       	or	r16, r19
    47c6:	81 f3       	breq	.-32     	; 0x47a8 <CDC_Device_SendByte+0x16>
    47c8:	81 81       	ldd	r24, Z+1	; 0x01
    47ca:	69 83       	std	Y+1, r22	; 0x01
    47cc:	69 dc       	rcall	.-1838   	; 0x40a0 <Endpoint_SelectEndpoint>
    47ce:	20 91 1d 27 	lds	r18, 0x271D
    47d2:	30 91 1e 27 	lds	r19, 0x271E
    47d6:	f9 01       	movw	r30, r18
    47d8:	ef 5b       	subi	r30, 0xBF	; 191
    47da:	ff 4f       	sbci	r31, 0xFF	; 255
    47dc:	90 81       	ld	r25, Z
    47de:	f9 01       	movw	r30, r18
    47e0:	e0 5c       	subi	r30, 0xC0	; 192
    47e2:	ff 4f       	sbci	r31, 0xFF	; 255
    47e4:	80 81       	ld	r24, Z
    47e6:	69 81       	ldd	r22, Y+1	; 0x01
    47e8:	98 17       	cp	r25, r24
    47ea:	30 f0       	brcs	.+12     	; 0x47f8 <CDC_Device_SendByte+0x66>
    47ec:	69 83       	std	Y+1, r22	; 0x01
    47ee:	12 dc       	rcall	.-2012   	; 0x4014 <Endpoint_ClearIN>
    47f0:	27 de       	rcall	.-946    	; 0x4440 <Endpoint_WaitUntilReady>
    47f2:	69 81       	ldd	r22, Y+1	; 0x01
    47f4:	81 11       	cpse	r24, r1
    47f6:	d9 cf       	rjmp	.-78     	; 0x47aa <CDC_Device_SendByte+0x18>
    47f8:	86 2f       	mov	r24, r22
    47fa:	43 dc       	rcall	.-1914   	; 0x4082 <Endpoint_Write_8>
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	d5 cf       	rjmp	.-86     	; 0x47aa <CDC_Device_SendByte+0x18>

00004800 <CDC_Device_Flush>:
    4800:	0f 93       	push	r16
    4802:	1f 93       	push	r17
    4804:	cf 93       	push	r28
    4806:	df 93       	push	r29
    4808:	1f 92       	push	r1
    480a:	cd b7       	in	r28, 0x3d	; 61
    480c:	de b7       	in	r29, 0x3e	; 62
    480e:	20 91 14 27 	lds	r18, 0x2714
    4812:	24 30       	cpi	r18, 0x04	; 4
    4814:	39 f0       	breq	.+14     	; 0x4824 <CDC_Device_Flush+0x24>
    4816:	82 e0       	ldi	r24, 0x02	; 2
    4818:	0f 90       	pop	r0
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	1f 91       	pop	r17
    4820:	0f 91       	pop	r16
    4822:	08 95       	ret
    4824:	fc 01       	movw	r30, r24
    4826:	44 89       	ldd	r20, Z+20	; 0x14
    4828:	55 89       	ldd	r21, Z+21	; 0x15
    482a:	66 89       	ldd	r22, Z+22	; 0x16
    482c:	77 89       	ldd	r23, Z+23	; 0x17
    482e:	45 2b       	or	r20, r21
    4830:	46 2b       	or	r20, r22
    4832:	47 2b       	or	r20, r23
    4834:	81 f3       	breq	.-32     	; 0x4816 <CDC_Device_Flush+0x16>
    4836:	81 81       	ldd	r24, Z+1	; 0x01
    4838:	33 dc       	rcall	.-1946   	; 0x40a0 <Endpoint_SelectEndpoint>
    483a:	80 91 21 27 	lds	r24, 0x2721
    483e:	20 91 1d 27 	lds	r18, 0x271D
    4842:	30 91 1e 27 	lds	r19, 0x271E
    4846:	f9 01       	movw	r30, r18
    4848:	87 fd       	sbrc	r24, 7
    484a:	1d c0       	rjmp	.+58     	; 0x4886 <CDC_Device_Flush+0x86>
    484c:	e0 5c       	subi	r30, 0xC0	; 192
    484e:	ff 4f       	sbci	r31, 0xFF	; 255
    4850:	80 81       	ld	r24, Z
    4852:	f9 01       	movw	r30, r18
    4854:	ef 5b       	subi	r30, 0xBF	; 191
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	40 81       	ld	r20, Z
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	84 1b       	sub	r24, r20
    485e:	91 09       	sbc	r25, r1
    4860:	89 2b       	or	r24, r25
    4862:	11 f4       	brne	.+4      	; 0x4868 <CDC_Device_Flush+0x68>
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	d8 cf       	rjmp	.-80     	; 0x4818 <CDC_Device_Flush+0x18>
    4868:	00 81       	ld	r16, Z
    486a:	f9 01       	movw	r30, r18
    486c:	e0 5c       	subi	r30, 0xC0	; 192
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	10 81       	ld	r17, Z
    4872:	d0 db       	rcall	.-2144   	; 0x4014 <Endpoint_ClearIN>
    4874:	01 17       	cp	r16, r17
    4876:	b0 f3       	brcs	.-20     	; 0x4864 <CDC_Device_Flush+0x64>
    4878:	e3 dd       	rcall	.-1082   	; 0x4440 <Endpoint_WaitUntilReady>
    487a:	81 11       	cpse	r24, r1
    487c:	cd cf       	rjmp	.-102    	; 0x4818 <CDC_Device_Flush+0x18>
    487e:	89 83       	std	Y+1, r24	; 0x01
    4880:	c9 db       	rcall	.-2158   	; 0x4014 <Endpoint_ClearIN>
    4882:	89 81       	ldd	r24, Y+1	; 0x01
    4884:	c9 cf       	rjmp	.-110    	; 0x4818 <CDC_Device_Flush+0x18>
    4886:	ef 5b       	subi	r30, 0xBF	; 191
    4888:	ff 4f       	sbci	r31, 0xFF	; 255
    488a:	80 81       	ld	r24, Z
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	e8 cf       	rjmp	.-48     	; 0x4860 <CDC_Device_Flush+0x60>

00004890 <CDC_Device_USBTask>:
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
    4894:	ec 01       	movw	r28, r24
    4896:	80 91 14 27 	lds	r24, 0x2714
    489a:	84 30       	cpi	r24, 0x04	; 4
    489c:	19 f0       	breq	.+6      	; 0x48a4 <CDC_Device_USBTask+0x14>
    489e:	df 91       	pop	r29
    48a0:	cf 91       	pop	r28
    48a2:	08 95       	ret
    48a4:	4c 89       	ldd	r20, Y+20	; 0x14
    48a6:	5d 89       	ldd	r21, Y+21	; 0x15
    48a8:	6e 89       	ldd	r22, Y+22	; 0x16
    48aa:	7f 89       	ldd	r23, Y+23	; 0x17
    48ac:	45 2b       	or	r20, r21
    48ae:	46 2b       	or	r20, r22
    48b0:	47 2b       	or	r20, r23
    48b2:	a9 f3       	breq	.-22     	; 0x489e <CDC_Device_USBTask+0xe>
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
    48b6:	f4 db       	rcall	.-2072   	; 0x40a0 <Endpoint_SelectEndpoint>
    48b8:	a6 dc       	rcall	.-1716   	; 0x4206 <Endpoint_IsINReady>
    48ba:	88 23       	and	r24, r24
    48bc:	81 f3       	breq	.-32     	; 0x489e <CDC_Device_USBTask+0xe>
    48be:	ce 01       	movw	r24, r28
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	9d cf       	rjmp	.-198    	; 0x4800 <CDC_Device_Flush>

000048c6 <CDC_Device_ReceiveByte>:
    48c6:	cf 93       	push	r28
    48c8:	df 93       	push	r29
    48ca:	20 91 14 27 	lds	r18, 0x2714
    48ce:	24 30       	cpi	r18, 0x04	; 4
    48d0:	c1 f5       	brne	.+112    	; 0x4942 <CDC_Device_ReceiveByte+0x7c>
    48d2:	fc 01       	movw	r30, r24
    48d4:	44 89       	ldd	r20, Z+20	; 0x14
    48d6:	55 89       	ldd	r21, Z+21	; 0x15
    48d8:	66 89       	ldd	r22, Z+22	; 0x16
    48da:	77 89       	ldd	r23, Z+23	; 0x17
    48dc:	45 2b       	or	r20, r21
    48de:	46 2b       	or	r20, r22
    48e0:	47 2b       	or	r20, r23
    48e2:	79 f1       	breq	.+94     	; 0x4942 <CDC_Device_ReceiveByte+0x7c>
    48e4:	86 81       	ldd	r24, Z+6	; 0x06
    48e6:	dc db       	rcall	.-2120   	; 0x40a0 <Endpoint_SelectEndpoint>
    48e8:	75 dc       	rcall	.-1814   	; 0x41d4 <Endpoint_IsOUTReceived>
    48ea:	88 23       	and	r24, r24
    48ec:	51 f1       	breq	.+84     	; 0x4942 <CDC_Device_ReceiveByte+0x7c>
    48ee:	80 91 21 27 	lds	r24, 0x2721
    48f2:	87 fd       	sbrc	r24, 7
    48f4:	3d c0       	rjmp	.+122    	; 0x4970 <CDC_Device_ReceiveByte+0xaa>
    48f6:	80 91 1d 27 	lds	r24, 0x271D
    48fa:	90 91 1e 27 	lds	r25, 0x271E
    48fe:	fc 01       	movw	r30, r24
    4900:	e0 5c       	subi	r30, 0xC0	; 192
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	20 81       	ld	r18, Z
    4906:	fc 01       	movw	r30, r24
    4908:	ef 5b       	subi	r30, 0xBF	; 191
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	40 81       	ld	r20, Z
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	24 1b       	sub	r18, r20
    4912:	31 09       	sbc	r19, r1
    4914:	23 2b       	or	r18, r19
    4916:	d9 f4       	brne	.+54     	; 0x494e <CDC_Device_ReceiveByte+0x88>
    4918:	cf ef       	ldi	r28, 0xFF	; 255
    491a:	df ef       	ldi	r29, 0xFF	; 255
    491c:	20 91 21 27 	lds	r18, 0x2721
    4920:	27 fd       	sbrc	r18, 7
    4922:	23 c0       	rjmp	.+70     	; 0x496a <CDC_Device_ReceiveByte+0xa4>
    4924:	dc 01       	movw	r26, r24
    4926:	a0 5c       	subi	r26, 0xC0	; 192
    4928:	bf 4f       	sbci	r27, 0xFF	; 255
    492a:	8c 91       	ld	r24, X
    492c:	20 81       	ld	r18, Z
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	82 1b       	sub	r24, r18
    4932:	91 09       	sbc	r25, r1
    4934:	89 2b       	or	r24, r25
    4936:	39 f4       	brne	.+14     	; 0x4946 <CDC_Device_ReceiveByte+0x80>
    4938:	86 db       	rcall	.-2292   	; 0x4046 <Endpoint_ClearOUT>
    493a:	ce 01       	movw	r24, r28
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	08 95       	ret
    4942:	cf ef       	ldi	r28, 0xFF	; 255
    4944:	df ef       	ldi	r29, 0xFF	; 255
    4946:	ce 01       	movw	r24, r28
    4948:	df 91       	pop	r29
    494a:	cf 91       	pop	r28
    494c:	08 95       	ret
    494e:	8a db       	rcall	.-2284   	; 0x4064 <Endpoint_Read_8>
    4950:	c8 2f       	mov	r28, r24
    4952:	d0 e0       	ldi	r29, 0x00	; 0
    4954:	80 91 1d 27 	lds	r24, 0x271D
    4958:	90 91 1e 27 	lds	r25, 0x271E
    495c:	fc 01       	movw	r30, r24
    495e:	ef 5b       	subi	r30, 0xBF	; 191
    4960:	ff 4f       	sbci	r31, 0xFF	; 255
    4962:	20 91 21 27 	lds	r18, 0x2721
    4966:	27 ff       	sbrs	r18, 7
    4968:	dd cf       	rjmp	.-70     	; 0x4924 <CDC_Device_ReceiveByte+0x5e>
    496a:	80 81       	ld	r24, Z
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	e2 cf       	rjmp	.-60     	; 0x4934 <CDC_Device_ReceiveByte+0x6e>
    4970:	80 91 1d 27 	lds	r24, 0x271D
    4974:	90 91 1e 27 	lds	r25, 0x271E
    4978:	fc 01       	movw	r30, r24
    497a:	ef 5b       	subi	r30, 0xBF	; 191
    497c:	ff 4f       	sbci	r31, 0xFF	; 255
    497e:	20 81       	ld	r18, Z
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	c8 cf       	rjmp	.-112    	; 0x4914 <CDC_Device_ReceiveByte+0x4e>

00004984 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    4984:	08 95       	ret

00004986 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    4986:	ff 92       	push	r15
    4988:	0f 93       	push	r16
    498a:	1f 93       	push	r17
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    4992:	07 dc       	rcall	.-2034   	; 0x41a2 <Endpoint_IsSETUPReceived>
    4994:	88 23       	and	r24, r24
    4996:	49 f0       	breq	.+18     	; 0x49aa <CDC_Device_ProcessControlRequest+0x24>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    4998:	88 81       	ld	r24, Y
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	20 91 19 27 	lds	r18, 0x2719
    49a0:	30 91 1a 27 	lds	r19, 0x271A
    49a4:	28 17       	cp	r18, r24
    49a6:	39 07       	cpc	r19, r25
    49a8:	31 f0       	breq	.+12     	; 0x49b6 <CDC_Device_ProcessControlRequest+0x30>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    49aa:	df 91       	pop	r29
    49ac:	cf 91       	pop	r28
    49ae:	1f 91       	pop	r17
    49b0:	0f 91       	pop	r16
    49b2:	ff 90       	pop	r15
    49b4:	08 95       	ret
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    49b6:	80 91 16 27 	lds	r24, 0x2716
    49ba:	81 32       	cpi	r24, 0x21	; 33
    49bc:	09 f4       	brne	.+2      	; 0x49c0 <CDC_Device_ProcessControlRequest+0x3a>
    49be:	4b c0       	rjmp	.+150    	; 0x4a56 <CDC_Device_ProcessControlRequest+0xd0>
    49c0:	08 f0       	brcs	.+2      	; 0x49c4 <CDC_Device_ProcessControlRequest+0x3e>
    49c2:	33 c0       	rjmp	.+102    	; 0x4a2a <CDC_Device_ProcessControlRequest+0xa4>
    49c4:	80 32       	cpi	r24, 0x20	; 32
    49c6:	89 f7       	brne	.-30     	; 0x49aa <CDC_Device_ProcessControlRequest+0x24>
				Endpoint_ClearStatusStage();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    49c8:	80 91 15 27 	lds	r24, 0x2715
    49cc:	81 32       	cpi	r24, 0x21	; 33
    49ce:	69 f7       	brne	.-38     	; 0x49aa <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    49d0:	bc db       	rcall	.-2184   	; 0x414a <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    49d2:	04 c0       	rjmp	.+8      	; 0x49dc <CDC_Device_ProcessControlRequest+0x56>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    49d4:	80 91 14 27 	lds	r24, 0x2714
    49d8:	88 23       	and	r24, r24
    49da:	39 f3       	breq	.-50     	; 0x49aa <CDC_Device_ProcessControlRequest+0x24>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    49dc:	fb db       	rcall	.-2058   	; 0x41d4 <Endpoint_IsOUTReceived>
    49de:	88 23       	and	r24, r24
    49e0:	c9 f3       	breq	.-14     	; 0x49d4 <CDC_Device_ProcessControlRequest+0x4e>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    49e2:	40 db       	rcall	.-2432   	; 0x4064 <Endpoint_Read_8>
    49e4:	08 2f       	mov	r16, r24
				uint32_t Byte1 = Endpoint_Read_8();
    49e6:	3e db       	rcall	.-2436   	; 0x4064 <Endpoint_Read_8>
    49e8:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    49ea:	3c db       	rcall	.-2440   	; 0x4064 <Endpoint_Read_8>
    49ec:	f8 2e       	mov	r15, r24
				uint32_t Byte3 = Endpoint_Read_8();
    49ee:	3a db       	rcall	.-2444   	; 0x4064 <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    49f0:	4f 2d       	mov	r20, r15
    49f2:	50 e0       	ldi	r21, 0x00	; 0
    49f4:	60 e0       	ldi	r22, 0x00	; 0
    49f6:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    49f8:	ba 01       	movw	r22, r20
    49fa:	55 27       	eor	r21, r21
    49fc:	44 27       	eor	r20, r20
    49fe:	78 2b       	or	r23, r24
    4a00:	40 2b       	or	r20, r16
    4a02:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    4a04:	4c 8b       	std	Y+20, r20	; 0x14
    4a06:	5d 8b       	std	Y+21, r21	; 0x15
    4a08:	6e 8b       	std	Y+22, r22	; 0x16
    4a0a:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    4a0c:	2b db       	rcall	.-2474   	; 0x4064 <Endpoint_Read_8>
    4a0e:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    4a10:	29 db       	rcall	.-2478   	; 0x4064 <Endpoint_Read_8>
    4a12:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    4a14:	27 db       	rcall	.-2482   	; 0x4064 <Endpoint_Read_8>
    4a16:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    4a18:	16 db       	rcall	.-2516   	; 0x4046 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    4a1a:	fc dc       	rcall	.-1544   	; 0x4414 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    4a1c:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    4a1e:	df 91       	pop	r29
    4a20:	cf 91       	pop	r28
    4a22:	1f 91       	pop	r17
    4a24:	0f 91       	pop	r16
    4a26:	ff 90       	pop	r15
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    4a28:	ad cf       	rjmp	.-166    	; 0x4984 <CDC_Device_Event_Stub>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    4a2a:	82 32       	cpi	r24, 0x22	; 34
    4a2c:	09 f4       	brne	.+2      	; 0x4a30 <CDC_Device_ProcessControlRequest+0xaa>
    4a2e:	34 c0       	rjmp	.+104    	; 0x4a98 <CDC_Device_ProcessControlRequest+0x112>
    4a30:	83 32       	cpi	r24, 0x23	; 35
    4a32:	09 f0       	breq	.+2      	; 0x4a36 <CDC_Device_ProcessControlRequest+0xb0>
    4a34:	ba cf       	rjmp	.-140    	; 0x49aa <CDC_Device_ProcessControlRequest+0x24>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4a36:	80 91 15 27 	lds	r24, 0x2715
    4a3a:	81 32       	cpi	r24, 0x21	; 33
    4a3c:	09 f0       	breq	.+2      	; 0x4a40 <CDC_Device_ProcessControlRequest+0xba>
    4a3e:	b5 cf       	rjmp	.-150    	; 0x49aa <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    4a40:	84 db       	rcall	.-2296   	; 0x414a <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    4a42:	e8 dc       	rcall	.-1584   	; 0x4414 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    4a44:	60 91 17 27 	lds	r22, 0x2717
    4a48:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    4a4a:	df 91       	pop	r29
    4a4c:	cf 91       	pop	r28
    4a4e:	1f 91       	pop	r17
    4a50:	0f 91       	pop	r16
    4a52:	ff 90       	pop	r15
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    4a54:	97 cf       	rjmp	.-210    	; 0x4984 <CDC_Device_Event_Stub>
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4a56:	80 91 15 27 	lds	r24, 0x2715
    4a5a:	81 3a       	cpi	r24, 0xA1	; 161
    4a5c:	09 f0       	breq	.+2      	; 0x4a60 <CDC_Device_ProcessControlRequest+0xda>
    4a5e:	a5 cf       	rjmp	.-182    	; 0x49aa <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    4a60:	74 db       	rcall	.-2328   	; 0x414a <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    4a62:	d1 db       	rcall	.-2142   	; 0x4206 <Endpoint_IsINReady>
    4a64:	88 23       	and	r24, r24
    4a66:	e9 f3       	breq	.-6      	; 0x4a62 <CDC_Device_ProcessControlRequest+0xdc>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    4a68:	8c 89       	ldd	r24, Y+20	; 0x14
    4a6a:	fd 88       	ldd	r15, Y+21	; 0x15
    4a6c:	0e 89       	ldd	r16, Y+22	; 0x16
    4a6e:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    4a70:	08 db       	rcall	.-2544   	; 0x4082 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    4a72:	8f 2d       	mov	r24, r15
    4a74:	06 db       	rcall	.-2548   	; 0x4082 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    4a76:	80 2f       	mov	r24, r16
    4a78:	04 db       	rcall	.-2552   	; 0x4082 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    4a7a:	81 2f       	mov	r24, r17
    4a7c:	02 db       	rcall	.-2556   	; 0x4082 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    4a7e:	88 8d       	ldd	r24, Y+24	; 0x18
    4a80:	00 db       	rcall	.-2560   	; 0x4082 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    4a82:	89 8d       	ldd	r24, Y+25	; 0x19
    4a84:	fe da       	rcall	.-2564   	; 0x4082 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    4a86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4a88:	fc da       	rcall	.-2568   	; 0x4082 <Endpoint_Write_8>

				Endpoint_ClearIN();
    4a8a:	c4 da       	rcall	.-2680   	; 0x4014 <Endpoint_ClearIN>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	1f 91       	pop	r17
    4a92:	0f 91       	pop	r16
    4a94:	ff 90       	pop	r15
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4a96:	be cc       	rjmp	.-1668   	; 0x4414 <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4a98:	80 91 15 27 	lds	r24, 0x2715
    4a9c:	81 32       	cpi	r24, 0x21	; 33
    4a9e:	09 f0       	breq	.+2      	; 0x4aa2 <CDC_Device_ProcessControlRequest+0x11c>
    4aa0:	84 cf       	rjmp	.-248    	; 0x49aa <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    4aa2:	53 db       	rcall	.-2394   	; 0x414a <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    4aa4:	b7 dc       	rcall	.-1682   	; 0x4414 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    4aa6:	80 91 17 27 	lds	r24, 0x2717
    4aaa:	90 91 18 27 	lds	r25, 0x2718
    4aae:	88 8b       	std	Y+16, r24	; 0x10
    4ab0:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    4ab2:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    4ab4:	df 91       	pop	r29
    4ab6:	cf 91       	pop	r28
    4ab8:	1f 91       	pop	r17
    4aba:	0f 91       	pop	r16
    4abc:	ff 90       	pop	r15
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    4abe:	62 cf       	rjmp	.-316    	; 0x4984 <CDC_Device_Event_Stub>

00004ac0 <__mulshisi3>:
    4ac0:	b7 ff       	sbrs	r27, 7
    4ac2:	04 c0       	rjmp	.+8      	; 0x4acc <__muluhisi3>

00004ac4 <__mulohisi3>:
    4ac4:	03 d0       	rcall	.+6      	; 0x4acc <__muluhisi3>
    4ac6:	82 1b       	sub	r24, r18
    4ac8:	93 0b       	sbc	r25, r19
    4aca:	08 95       	ret

00004acc <__muluhisi3>:
    4acc:	09 d0       	rcall	.+18     	; 0x4ae0 <__umulhisi3>
    4ace:	a5 9f       	mul	r26, r21
    4ad0:	90 0d       	add	r25, r0
    4ad2:	b4 9f       	mul	r27, r20
    4ad4:	90 0d       	add	r25, r0
    4ad6:	a4 9f       	mul	r26, r20
    4ad8:	80 0d       	add	r24, r0
    4ada:	91 1d       	adc	r25, r1
    4adc:	11 24       	eor	r1, r1
    4ade:	08 95       	ret

00004ae0 <__umulhisi3>:
    4ae0:	a2 9f       	mul	r26, r18
    4ae2:	b0 01       	movw	r22, r0
    4ae4:	b3 9f       	mul	r27, r19
    4ae6:	c0 01       	movw	r24, r0
    4ae8:	a3 9f       	mul	r26, r19
    4aea:	01 d0       	rcall	.+2      	; 0x4aee <__umulhisi3+0xe>
    4aec:	b2 9f       	mul	r27, r18
    4aee:	70 0d       	add	r23, r0
    4af0:	81 1d       	adc	r24, r1
    4af2:	11 24       	eor	r1, r1
    4af4:	91 1d       	adc	r25, r1
    4af6:	08 95       	ret

00004af8 <do_rand>:
    4af8:	8f 92       	push	r8
    4afa:	9f 92       	push	r9
    4afc:	af 92       	push	r10
    4afe:	bf 92       	push	r11
    4b00:	cf 92       	push	r12
    4b02:	df 92       	push	r13
    4b04:	ef 92       	push	r14
    4b06:	ff 92       	push	r15
    4b08:	cf 93       	push	r28
    4b0a:	df 93       	push	r29
    4b0c:	ec 01       	movw	r28, r24
    4b0e:	68 81       	ld	r22, Y
    4b10:	79 81       	ldd	r23, Y+1	; 0x01
    4b12:	8a 81       	ldd	r24, Y+2	; 0x02
    4b14:	9b 81       	ldd	r25, Y+3	; 0x03
    4b16:	61 15       	cp	r22, r1
    4b18:	71 05       	cpc	r23, r1
    4b1a:	81 05       	cpc	r24, r1
    4b1c:	91 05       	cpc	r25, r1
    4b1e:	21 f4       	brne	.+8      	; 0x4b28 <do_rand+0x30>
    4b20:	64 e2       	ldi	r22, 0x24	; 36
    4b22:	79 ed       	ldi	r23, 0xD9	; 217
    4b24:	8b e5       	ldi	r24, 0x5B	; 91
    4b26:	97 e0       	ldi	r25, 0x07	; 7
    4b28:	2d e1       	ldi	r18, 0x1D	; 29
    4b2a:	33 ef       	ldi	r19, 0xF3	; 243
    4b2c:	41 e0       	ldi	r20, 0x01	; 1
    4b2e:	50 e0       	ldi	r21, 0x00	; 0
    4b30:	38 d3       	rcall	.+1648   	; 0x51a2 <__divmodsi4>
    4b32:	49 01       	movw	r8, r18
    4b34:	5a 01       	movw	r10, r20
    4b36:	9b 01       	movw	r18, r22
    4b38:	ac 01       	movw	r20, r24
    4b3a:	a7 ea       	ldi	r26, 0xA7	; 167
    4b3c:	b1 e4       	ldi	r27, 0x41	; 65
    4b3e:	c6 df       	rcall	.-116    	; 0x4acc <__muluhisi3>
    4b40:	6b 01       	movw	r12, r22
    4b42:	7c 01       	movw	r14, r24
    4b44:	ac ee       	ldi	r26, 0xEC	; 236
    4b46:	b4 ef       	ldi	r27, 0xF4	; 244
    4b48:	a5 01       	movw	r20, r10
    4b4a:	94 01       	movw	r18, r8
    4b4c:	bb df       	rcall	.-138    	; 0x4ac4 <__mulohisi3>
    4b4e:	c6 0e       	add	r12, r22
    4b50:	d7 1e       	adc	r13, r23
    4b52:	e8 1e       	adc	r14, r24
    4b54:	f9 1e       	adc	r15, r25
    4b56:	f7 fe       	sbrs	r15, 7
    4b58:	06 c0       	rjmp	.+12     	; 0x4b66 <do_rand+0x6e>
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	c8 1a       	sub	r12, r24
    4b5e:	d1 08       	sbc	r13, r1
    4b60:	e1 08       	sbc	r14, r1
    4b62:	80 e8       	ldi	r24, 0x80	; 128
    4b64:	f8 0a       	sbc	r15, r24
    4b66:	c8 82       	st	Y, r12
    4b68:	d9 82       	std	Y+1, r13	; 0x01
    4b6a:	ea 82       	std	Y+2, r14	; 0x02
    4b6c:	fb 82       	std	Y+3, r15	; 0x03
    4b6e:	e8 94       	clt
    4b70:	d7 f8       	bld	r13, 7
    4b72:	ee 24       	eor	r14, r14
    4b74:	ff 24       	eor	r15, r15
    4b76:	c6 01       	movw	r24, r12
    4b78:	df 91       	pop	r29
    4b7a:	cf 91       	pop	r28
    4b7c:	ff 90       	pop	r15
    4b7e:	ef 90       	pop	r14
    4b80:	df 90       	pop	r13
    4b82:	cf 90       	pop	r12
    4b84:	bf 90       	pop	r11
    4b86:	af 90       	pop	r10
    4b88:	9f 90       	pop	r9
    4b8a:	8f 90       	pop	r8
    4b8c:	08 95       	ret

00004b8e <rand_r>:
    4b8e:	b4 cf       	rjmp	.-152    	; 0x4af8 <do_rand>

00004b90 <rand>:
    4b90:	8c e1       	ldi	r24, 0x1C	; 28
    4b92:	90 e2       	ldi	r25, 0x20	; 32
    4b94:	b1 cf       	rjmp	.-158    	; 0x4af8 <do_rand>

00004b96 <srand>:
    4b96:	a0 e0       	ldi	r26, 0x00	; 0
    4b98:	b0 e0       	ldi	r27, 0x00	; 0
    4b9a:	80 93 1c 20 	sts	0x201C, r24
    4b9e:	90 93 1d 20 	sts	0x201D, r25
    4ba2:	a0 93 1e 20 	sts	0x201E, r26
    4ba6:	b0 93 1f 20 	sts	0x201F, r27
    4baa:	08 95       	ret

00004bac <memcpy_P>:
    4bac:	fb 01       	movw	r30, r22
    4bae:	dc 01       	movw	r26, r24
    4bb0:	02 c0       	rjmp	.+4      	; 0x4bb6 <memcpy_P+0xa>
    4bb2:	05 90       	lpm	r0, Z+
    4bb4:	0d 92       	st	X+, r0
    4bb6:	41 50       	subi	r20, 0x01	; 1
    4bb8:	50 40       	sbci	r21, 0x00	; 0
    4bba:	d8 f7       	brcc	.-10     	; 0x4bb2 <memcpy_P+0x6>
    4bbc:	08 95       	ret

00004bbe <strcmp_P>:
    4bbe:	fb 01       	movw	r30, r22
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	8d 91       	ld	r24, X+
    4bc4:	05 90       	lpm	r0, Z+
    4bc6:	80 19       	sub	r24, r0
    4bc8:	01 10       	cpse	r0, r1
    4bca:	d9 f3       	breq	.-10     	; 0x4bc2 <strcmp_P+0x4>
    4bcc:	99 0b       	sbc	r25, r25
    4bce:	08 95       	ret

00004bd0 <strncpy_P>:
    4bd0:	fb 01       	movw	r30, r22
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	41 50       	subi	r20, 0x01	; 1
    4bd6:	50 40       	sbci	r21, 0x00	; 0
    4bd8:	48 f0       	brcs	.+18     	; 0x4bec <strncpy_P+0x1c>
    4bda:	05 90       	lpm	r0, Z+
    4bdc:	0d 92       	st	X+, r0
    4bde:	00 20       	and	r0, r0
    4be0:	c9 f7       	brne	.-14     	; 0x4bd4 <strncpy_P+0x4>
    4be2:	01 c0       	rjmp	.+2      	; 0x4be6 <strncpy_P+0x16>
    4be4:	1d 92       	st	X+, r1
    4be6:	41 50       	subi	r20, 0x01	; 1
    4be8:	50 40       	sbci	r21, 0x00	; 0
    4bea:	e0 f7       	brcc	.-8      	; 0x4be4 <strncpy_P+0x14>
    4bec:	08 95       	ret

00004bee <memcpy>:
    4bee:	fb 01       	movw	r30, r22
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	02 c0       	rjmp	.+4      	; 0x4bf8 <memcpy+0xa>
    4bf4:	01 90       	ld	r0, Z+
    4bf6:	0d 92       	st	X+, r0
    4bf8:	41 50       	subi	r20, 0x01	; 1
    4bfa:	50 40       	sbci	r21, 0x00	; 0
    4bfc:	d8 f7       	brcc	.-10     	; 0x4bf4 <memcpy+0x6>
    4bfe:	08 95       	ret

00004c00 <snprintf_P>:
    4c00:	ae e0       	ldi	r26, 0x0E	; 14
    4c02:	b0 e0       	ldi	r27, 0x00	; 0
    4c04:	e5 e0       	ldi	r30, 0x05	; 5
    4c06:	f6 e2       	ldi	r31, 0x26	; 38
    4c08:	f5 c2       	rjmp	.+1514   	; 0x51f4 <__prologue_saves__+0x1c>
    4c0a:	0d 89       	ldd	r16, Y+21	; 0x15
    4c0c:	1e 89       	ldd	r17, Y+22	; 0x16
    4c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c10:	98 8d       	ldd	r25, Y+24	; 0x18
    4c12:	2e e0       	ldi	r18, 0x0E	; 14
    4c14:	2c 83       	std	Y+4, r18	; 0x04
    4c16:	09 83       	std	Y+1, r16	; 0x01
    4c18:	1a 83       	std	Y+2, r17	; 0x02
    4c1a:	97 ff       	sbrs	r25, 7
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <snprintf_P+0x22>
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	90 e8       	ldi	r25, 0x80	; 128
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	8d 83       	std	Y+5, r24	; 0x05
    4c26:	9e 83       	std	Y+6, r25	; 0x06
    4c28:	ce 01       	movw	r24, r28
    4c2a:	4b 96       	adiw	r24, 0x1b	; 27
    4c2c:	ac 01       	movw	r20, r24
    4c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    4c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c32:	ce 01       	movw	r24, r28
    4c34:	01 96       	adiw	r24, 0x01	; 1
    4c36:	11 d0       	rcall	.+34     	; 0x4c5a <vfprintf>
    4c38:	4d 81       	ldd	r20, Y+5	; 0x05
    4c3a:	5e 81       	ldd	r21, Y+6	; 0x06
    4c3c:	57 fd       	sbrc	r21, 7
    4c3e:	0a c0       	rjmp	.+20     	; 0x4c54 <snprintf_P+0x54>
    4c40:	2f 81       	ldd	r18, Y+7	; 0x07
    4c42:	38 85       	ldd	r19, Y+8	; 0x08
    4c44:	42 17       	cp	r20, r18
    4c46:	53 07       	cpc	r21, r19
    4c48:	0c f4       	brge	.+2      	; 0x4c4c <snprintf_P+0x4c>
    4c4a:	9a 01       	movw	r18, r20
    4c4c:	f8 01       	movw	r30, r16
    4c4e:	e2 0f       	add	r30, r18
    4c50:	f3 1f       	adc	r31, r19
    4c52:	10 82       	st	Z, r1
    4c54:	2e 96       	adiw	r28, 0x0e	; 14
    4c56:	e4 e0       	ldi	r30, 0x04	; 4
    4c58:	e6 c2       	rjmp	.+1484   	; 0x5226 <__epilogue_restores__+0x1c>

00004c5a <vfprintf>:
    4c5a:	ac e0       	ldi	r26, 0x0C	; 12
    4c5c:	b0 e0       	ldi	r27, 0x00	; 0
    4c5e:	e2 e3       	ldi	r30, 0x32	; 50
    4c60:	f6 e2       	ldi	r31, 0x26	; 38
    4c62:	ba c2       	rjmp	.+1396   	; 0x51d8 <__prologue_saves__>
    4c64:	7c 01       	movw	r14, r24
    4c66:	6b 01       	movw	r12, r22
    4c68:	8a 01       	movw	r16, r20
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	16 82       	std	Z+6, r1	; 0x06
    4c6e:	17 82       	std	Z+7, r1	; 0x07
    4c70:	83 81       	ldd	r24, Z+3	; 0x03
    4c72:	81 ff       	sbrs	r24, 1
    4c74:	b9 c1       	rjmp	.+882    	; 0x4fe8 <vfprintf+0x38e>
    4c76:	88 24       	eor	r8, r8
    4c78:	83 94       	inc	r8
    4c7a:	91 2c       	mov	r9, r1
    4c7c:	8c 0e       	add	r8, r28
    4c7e:	9d 1e       	adc	r9, r29
    4c80:	f7 01       	movw	r30, r14
    4c82:	93 81       	ldd	r25, Z+3	; 0x03
    4c84:	f6 01       	movw	r30, r12
    4c86:	93 fd       	sbrc	r25, 3
    4c88:	85 91       	lpm	r24, Z+
    4c8a:	93 ff       	sbrs	r25, 3
    4c8c:	81 91       	ld	r24, Z+
    4c8e:	6f 01       	movw	r12, r30
    4c90:	88 23       	and	r24, r24
    4c92:	09 f4       	brne	.+2      	; 0x4c96 <vfprintf+0x3c>
    4c94:	a5 c1       	rjmp	.+842    	; 0x4fe0 <vfprintf+0x386>
    4c96:	85 32       	cpi	r24, 0x25	; 37
    4c98:	39 f4       	brne	.+14     	; 0x4ca8 <vfprintf+0x4e>
    4c9a:	93 fd       	sbrc	r25, 3
    4c9c:	85 91       	lpm	r24, Z+
    4c9e:	93 ff       	sbrs	r25, 3
    4ca0:	81 91       	ld	r24, Z+
    4ca2:	6f 01       	movw	r12, r30
    4ca4:	85 32       	cpi	r24, 0x25	; 37
    4ca6:	21 f4       	brne	.+8      	; 0x4cb0 <vfprintf+0x56>
    4ca8:	b7 01       	movw	r22, r14
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	f0 d1       	rcall	.+992    	; 0x508e <fputc>
    4cae:	e8 cf       	rjmp	.-48     	; 0x4c80 <vfprintf+0x26>
    4cb0:	51 2c       	mov	r5, r1
    4cb2:	31 2c       	mov	r3, r1
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	20 32       	cpi	r18, 0x20	; 32
    4cb8:	a8 f4       	brcc	.+42     	; 0x4ce4 <vfprintf+0x8a>
    4cba:	8b 32       	cpi	r24, 0x2B	; 43
    4cbc:	61 f0       	breq	.+24     	; 0x4cd6 <vfprintf+0x7c>
    4cbe:	28 f4       	brcc	.+10     	; 0x4cca <vfprintf+0x70>
    4cc0:	80 32       	cpi	r24, 0x20	; 32
    4cc2:	51 f0       	breq	.+20     	; 0x4cd8 <vfprintf+0x7e>
    4cc4:	83 32       	cpi	r24, 0x23	; 35
    4cc6:	71 f4       	brne	.+28     	; 0x4ce4 <vfprintf+0x8a>
    4cc8:	0b c0       	rjmp	.+22     	; 0x4ce0 <vfprintf+0x86>
    4cca:	8d 32       	cpi	r24, 0x2D	; 45
    4ccc:	39 f0       	breq	.+14     	; 0x4cdc <vfprintf+0x82>
    4cce:	80 33       	cpi	r24, 0x30	; 48
    4cd0:	49 f4       	brne	.+18     	; 0x4ce4 <vfprintf+0x8a>
    4cd2:	21 60       	ori	r18, 0x01	; 1
    4cd4:	28 c0       	rjmp	.+80     	; 0x4d26 <vfprintf+0xcc>
    4cd6:	22 60       	ori	r18, 0x02	; 2
    4cd8:	24 60       	ori	r18, 0x04	; 4
    4cda:	25 c0       	rjmp	.+74     	; 0x4d26 <vfprintf+0xcc>
    4cdc:	28 60       	ori	r18, 0x08	; 8
    4cde:	23 c0       	rjmp	.+70     	; 0x4d26 <vfprintf+0xcc>
    4ce0:	20 61       	ori	r18, 0x10	; 16
    4ce2:	21 c0       	rjmp	.+66     	; 0x4d26 <vfprintf+0xcc>
    4ce4:	27 fd       	sbrc	r18, 7
    4ce6:	27 c0       	rjmp	.+78     	; 0x4d36 <vfprintf+0xdc>
    4ce8:	38 2f       	mov	r19, r24
    4cea:	30 53       	subi	r19, 0x30	; 48
    4cec:	3a 30       	cpi	r19, 0x0A	; 10
    4cee:	78 f4       	brcc	.+30     	; 0x4d0e <vfprintf+0xb4>
    4cf0:	26 ff       	sbrs	r18, 6
    4cf2:	06 c0       	rjmp	.+12     	; 0x4d00 <vfprintf+0xa6>
    4cf4:	fa e0       	ldi	r31, 0x0A	; 10
    4cf6:	5f 9e       	mul	r5, r31
    4cf8:	30 0d       	add	r19, r0
    4cfa:	11 24       	eor	r1, r1
    4cfc:	53 2e       	mov	r5, r19
    4cfe:	13 c0       	rjmp	.+38     	; 0x4d26 <vfprintf+0xcc>
    4d00:	8a e0       	ldi	r24, 0x0A	; 10
    4d02:	38 9e       	mul	r3, r24
    4d04:	30 0d       	add	r19, r0
    4d06:	11 24       	eor	r1, r1
    4d08:	33 2e       	mov	r3, r19
    4d0a:	20 62       	ori	r18, 0x20	; 32
    4d0c:	0c c0       	rjmp	.+24     	; 0x4d26 <vfprintf+0xcc>
    4d0e:	8e 32       	cpi	r24, 0x2E	; 46
    4d10:	21 f4       	brne	.+8      	; 0x4d1a <vfprintf+0xc0>
    4d12:	26 fd       	sbrc	r18, 6
    4d14:	65 c1       	rjmp	.+714    	; 0x4fe0 <vfprintf+0x386>
    4d16:	20 64       	ori	r18, 0x40	; 64
    4d18:	06 c0       	rjmp	.+12     	; 0x4d26 <vfprintf+0xcc>
    4d1a:	8c 36       	cpi	r24, 0x6C	; 108
    4d1c:	11 f4       	brne	.+4      	; 0x4d22 <vfprintf+0xc8>
    4d1e:	20 68       	ori	r18, 0x80	; 128
    4d20:	02 c0       	rjmp	.+4      	; 0x4d26 <vfprintf+0xcc>
    4d22:	88 36       	cpi	r24, 0x68	; 104
    4d24:	41 f4       	brne	.+16     	; 0x4d36 <vfprintf+0xdc>
    4d26:	f6 01       	movw	r30, r12
    4d28:	93 fd       	sbrc	r25, 3
    4d2a:	85 91       	lpm	r24, Z+
    4d2c:	93 ff       	sbrs	r25, 3
    4d2e:	81 91       	ld	r24, Z+
    4d30:	6f 01       	movw	r12, r30
    4d32:	81 11       	cpse	r24, r1
    4d34:	c0 cf       	rjmp	.-128    	; 0x4cb6 <vfprintf+0x5c>
    4d36:	98 2f       	mov	r25, r24
    4d38:	95 54       	subi	r25, 0x45	; 69
    4d3a:	93 30       	cpi	r25, 0x03	; 3
    4d3c:	18 f0       	brcs	.+6      	; 0x4d44 <vfprintf+0xea>
    4d3e:	90 52       	subi	r25, 0x20	; 32
    4d40:	93 30       	cpi	r25, 0x03	; 3
    4d42:	28 f4       	brcc	.+10     	; 0x4d4e <vfprintf+0xf4>
    4d44:	0c 5f       	subi	r16, 0xFC	; 252
    4d46:	1f 4f       	sbci	r17, 0xFF	; 255
    4d48:	ff e3       	ldi	r31, 0x3F	; 63
    4d4a:	f9 83       	std	Y+1, r31	; 0x01
    4d4c:	0d c0       	rjmp	.+26     	; 0x4d68 <vfprintf+0x10e>
    4d4e:	83 36       	cpi	r24, 0x63	; 99
    4d50:	31 f0       	breq	.+12     	; 0x4d5e <vfprintf+0x104>
    4d52:	83 37       	cpi	r24, 0x73	; 115
    4d54:	71 f0       	breq	.+28     	; 0x4d72 <vfprintf+0x118>
    4d56:	83 35       	cpi	r24, 0x53	; 83
    4d58:	09 f0       	breq	.+2      	; 0x4d5c <vfprintf+0x102>
    4d5a:	5a c0       	rjmp	.+180    	; 0x4e10 <vfprintf+0x1b6>
    4d5c:	22 c0       	rjmp	.+68     	; 0x4da2 <vfprintf+0x148>
    4d5e:	f8 01       	movw	r30, r16
    4d60:	80 81       	ld	r24, Z
    4d62:	89 83       	std	Y+1, r24	; 0x01
    4d64:	0e 5f       	subi	r16, 0xFE	; 254
    4d66:	1f 4f       	sbci	r17, 0xFF	; 255
    4d68:	44 24       	eor	r4, r4
    4d6a:	43 94       	inc	r4
    4d6c:	51 2c       	mov	r5, r1
    4d6e:	54 01       	movw	r10, r8
    4d70:	14 c0       	rjmp	.+40     	; 0x4d9a <vfprintf+0x140>
    4d72:	38 01       	movw	r6, r16
    4d74:	f2 e0       	ldi	r31, 0x02	; 2
    4d76:	6f 0e       	add	r6, r31
    4d78:	71 1c       	adc	r7, r1
    4d7a:	f8 01       	movw	r30, r16
    4d7c:	a0 80       	ld	r10, Z
    4d7e:	b1 80       	ldd	r11, Z+1	; 0x01
    4d80:	26 ff       	sbrs	r18, 6
    4d82:	03 c0       	rjmp	.+6      	; 0x4d8a <vfprintf+0x130>
    4d84:	65 2d       	mov	r22, r5
    4d86:	70 e0       	ldi	r23, 0x00	; 0
    4d88:	02 c0       	rjmp	.+4      	; 0x4d8e <vfprintf+0x134>
    4d8a:	6f ef       	ldi	r22, 0xFF	; 255
    4d8c:	7f ef       	ldi	r23, 0xFF	; 255
    4d8e:	c5 01       	movw	r24, r10
    4d90:	2c 87       	std	Y+12, r18	; 0x0c
    4d92:	72 d1       	rcall	.+740    	; 0x5078 <strnlen>
    4d94:	2c 01       	movw	r4, r24
    4d96:	83 01       	movw	r16, r6
    4d98:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d9a:	6f e7       	ldi	r22, 0x7F	; 127
    4d9c:	26 2e       	mov	r2, r22
    4d9e:	22 22       	and	r2, r18
    4da0:	17 c0       	rjmp	.+46     	; 0x4dd0 <vfprintf+0x176>
    4da2:	38 01       	movw	r6, r16
    4da4:	f2 e0       	ldi	r31, 0x02	; 2
    4da6:	6f 0e       	add	r6, r31
    4da8:	71 1c       	adc	r7, r1
    4daa:	f8 01       	movw	r30, r16
    4dac:	a0 80       	ld	r10, Z
    4dae:	b1 80       	ldd	r11, Z+1	; 0x01
    4db0:	26 ff       	sbrs	r18, 6
    4db2:	03 c0       	rjmp	.+6      	; 0x4dba <vfprintf+0x160>
    4db4:	65 2d       	mov	r22, r5
    4db6:	70 e0       	ldi	r23, 0x00	; 0
    4db8:	02 c0       	rjmp	.+4      	; 0x4dbe <vfprintf+0x164>
    4dba:	6f ef       	ldi	r22, 0xFF	; 255
    4dbc:	7f ef       	ldi	r23, 0xFF	; 255
    4dbe:	c5 01       	movw	r24, r10
    4dc0:	2c 87       	std	Y+12, r18	; 0x0c
    4dc2:	4f d1       	rcall	.+670    	; 0x5062 <strnlen_P>
    4dc4:	2c 01       	movw	r4, r24
    4dc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    4dc8:	50 e8       	ldi	r21, 0x80	; 128
    4dca:	25 2e       	mov	r2, r21
    4dcc:	22 2a       	or	r2, r18
    4dce:	83 01       	movw	r16, r6
    4dd0:	23 fc       	sbrc	r2, 3
    4dd2:	1a c0       	rjmp	.+52     	; 0x4e08 <vfprintf+0x1ae>
    4dd4:	05 c0       	rjmp	.+10     	; 0x4de0 <vfprintf+0x186>
    4dd6:	b7 01       	movw	r22, r14
    4dd8:	80 e2       	ldi	r24, 0x20	; 32
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	58 d1       	rcall	.+688    	; 0x508e <fputc>
    4dde:	3a 94       	dec	r3
    4de0:	83 2d       	mov	r24, r3
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	48 16       	cp	r4, r24
    4de6:	59 06       	cpc	r5, r25
    4de8:	b0 f3       	brcs	.-20     	; 0x4dd6 <vfprintf+0x17c>
    4dea:	0e c0       	rjmp	.+28     	; 0x4e08 <vfprintf+0x1ae>
    4dec:	f5 01       	movw	r30, r10
    4dee:	27 fc       	sbrc	r2, 7
    4df0:	85 91       	lpm	r24, Z+
    4df2:	27 fe       	sbrs	r2, 7
    4df4:	81 91       	ld	r24, Z+
    4df6:	5f 01       	movw	r10, r30
    4df8:	b7 01       	movw	r22, r14
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	48 d1       	rcall	.+656    	; 0x508e <fputc>
    4dfe:	31 10       	cpse	r3, r1
    4e00:	3a 94       	dec	r3
    4e02:	f1 e0       	ldi	r31, 0x01	; 1
    4e04:	4f 1a       	sub	r4, r31
    4e06:	51 08       	sbc	r5, r1
    4e08:	41 14       	cp	r4, r1
    4e0a:	51 04       	cpc	r5, r1
    4e0c:	79 f7       	brne	.-34     	; 0x4dec <vfprintf+0x192>
    4e0e:	e5 c0       	rjmp	.+458    	; 0x4fda <vfprintf+0x380>
    4e10:	84 36       	cpi	r24, 0x64	; 100
    4e12:	11 f0       	breq	.+4      	; 0x4e18 <vfprintf+0x1be>
    4e14:	89 36       	cpi	r24, 0x69	; 105
    4e16:	39 f5       	brne	.+78     	; 0x4e66 <vfprintf+0x20c>
    4e18:	f8 01       	movw	r30, r16
    4e1a:	27 ff       	sbrs	r18, 7
    4e1c:	07 c0       	rjmp	.+14     	; 0x4e2c <vfprintf+0x1d2>
    4e1e:	60 81       	ld	r22, Z
    4e20:	71 81       	ldd	r23, Z+1	; 0x01
    4e22:	82 81       	ldd	r24, Z+2	; 0x02
    4e24:	93 81       	ldd	r25, Z+3	; 0x03
    4e26:	0c 5f       	subi	r16, 0xFC	; 252
    4e28:	1f 4f       	sbci	r17, 0xFF	; 255
    4e2a:	08 c0       	rjmp	.+16     	; 0x4e3c <vfprintf+0x1e2>
    4e2c:	60 81       	ld	r22, Z
    4e2e:	71 81       	ldd	r23, Z+1	; 0x01
    4e30:	88 27       	eor	r24, r24
    4e32:	77 fd       	sbrc	r23, 7
    4e34:	80 95       	com	r24
    4e36:	98 2f       	mov	r25, r24
    4e38:	0e 5f       	subi	r16, 0xFE	; 254
    4e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3c:	4f e6       	ldi	r20, 0x6F	; 111
    4e3e:	b4 2e       	mov	r11, r20
    4e40:	b2 22       	and	r11, r18
    4e42:	97 ff       	sbrs	r25, 7
    4e44:	09 c0       	rjmp	.+18     	; 0x4e58 <vfprintf+0x1fe>
    4e46:	90 95       	com	r25
    4e48:	80 95       	com	r24
    4e4a:	70 95       	com	r23
    4e4c:	61 95       	neg	r22
    4e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e50:	8f 4f       	sbci	r24, 0xFF	; 255
    4e52:	9f 4f       	sbci	r25, 0xFF	; 255
    4e54:	f0 e8       	ldi	r31, 0x80	; 128
    4e56:	bf 2a       	or	r11, r31
    4e58:	2a e0       	ldi	r18, 0x0A	; 10
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	a4 01       	movw	r20, r8
    4e5e:	43 d1       	rcall	.+646    	; 0x50e6 <__ultoa_invert>
    4e60:	a8 2e       	mov	r10, r24
    4e62:	a8 18       	sub	r10, r8
    4e64:	42 c0       	rjmp	.+132    	; 0x4eea <vfprintf+0x290>
    4e66:	85 37       	cpi	r24, 0x75	; 117
    4e68:	31 f4       	brne	.+12     	; 0x4e76 <vfprintf+0x21c>
    4e6a:	3f ee       	ldi	r19, 0xEF	; 239
    4e6c:	b3 2e       	mov	r11, r19
    4e6e:	b2 22       	and	r11, r18
    4e70:	2a e0       	ldi	r18, 0x0A	; 10
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	24 c0       	rjmp	.+72     	; 0x4ebe <vfprintf+0x264>
    4e76:	99 ef       	ldi	r25, 0xF9	; 249
    4e78:	b9 2e       	mov	r11, r25
    4e7a:	b2 22       	and	r11, r18
    4e7c:	8f 36       	cpi	r24, 0x6F	; 111
    4e7e:	b9 f0       	breq	.+46     	; 0x4eae <vfprintf+0x254>
    4e80:	20 f4       	brcc	.+8      	; 0x4e8a <vfprintf+0x230>
    4e82:	88 35       	cpi	r24, 0x58	; 88
    4e84:	09 f0       	breq	.+2      	; 0x4e88 <vfprintf+0x22e>
    4e86:	ac c0       	rjmp	.+344    	; 0x4fe0 <vfprintf+0x386>
    4e88:	0d c0       	rjmp	.+26     	; 0x4ea4 <vfprintf+0x24a>
    4e8a:	80 37       	cpi	r24, 0x70	; 112
    4e8c:	21 f0       	breq	.+8      	; 0x4e96 <vfprintf+0x23c>
    4e8e:	88 37       	cpi	r24, 0x78	; 120
    4e90:	09 f0       	breq	.+2      	; 0x4e94 <vfprintf+0x23a>
    4e92:	a6 c0       	rjmp	.+332    	; 0x4fe0 <vfprintf+0x386>
    4e94:	02 c0       	rjmp	.+4      	; 0x4e9a <vfprintf+0x240>
    4e96:	20 e1       	ldi	r18, 0x10	; 16
    4e98:	b2 2a       	or	r11, r18
    4e9a:	b4 fe       	sbrs	r11, 4
    4e9c:	0b c0       	rjmp	.+22     	; 0x4eb4 <vfprintf+0x25a>
    4e9e:	84 e0       	ldi	r24, 0x04	; 4
    4ea0:	b8 2a       	or	r11, r24
    4ea2:	08 c0       	rjmp	.+16     	; 0x4eb4 <vfprintf+0x25a>
    4ea4:	24 ff       	sbrs	r18, 4
    4ea6:	09 c0       	rjmp	.+18     	; 0x4eba <vfprintf+0x260>
    4ea8:	e6 e0       	ldi	r30, 0x06	; 6
    4eaa:	be 2a       	or	r11, r30
    4eac:	06 c0       	rjmp	.+12     	; 0x4eba <vfprintf+0x260>
    4eae:	28 e0       	ldi	r18, 0x08	; 8
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	05 c0       	rjmp	.+10     	; 0x4ebe <vfprintf+0x264>
    4eb4:	20 e1       	ldi	r18, 0x10	; 16
    4eb6:	30 e0       	ldi	r19, 0x00	; 0
    4eb8:	02 c0       	rjmp	.+4      	; 0x4ebe <vfprintf+0x264>
    4eba:	20 e1       	ldi	r18, 0x10	; 16
    4ebc:	32 e0       	ldi	r19, 0x02	; 2
    4ebe:	f8 01       	movw	r30, r16
    4ec0:	b7 fe       	sbrs	r11, 7
    4ec2:	07 c0       	rjmp	.+14     	; 0x4ed2 <vfprintf+0x278>
    4ec4:	60 81       	ld	r22, Z
    4ec6:	71 81       	ldd	r23, Z+1	; 0x01
    4ec8:	82 81       	ldd	r24, Z+2	; 0x02
    4eca:	93 81       	ldd	r25, Z+3	; 0x03
    4ecc:	0c 5f       	subi	r16, 0xFC	; 252
    4ece:	1f 4f       	sbci	r17, 0xFF	; 255
    4ed0:	06 c0       	rjmp	.+12     	; 0x4ede <vfprintf+0x284>
    4ed2:	60 81       	ld	r22, Z
    4ed4:	71 81       	ldd	r23, Z+1	; 0x01
    4ed6:	80 e0       	ldi	r24, 0x00	; 0
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	0e 5f       	subi	r16, 0xFE	; 254
    4edc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ede:	a4 01       	movw	r20, r8
    4ee0:	02 d1       	rcall	.+516    	; 0x50e6 <__ultoa_invert>
    4ee2:	a8 2e       	mov	r10, r24
    4ee4:	a8 18       	sub	r10, r8
    4ee6:	ff e7       	ldi	r31, 0x7F	; 127
    4ee8:	bf 22       	and	r11, r31
    4eea:	b6 fe       	sbrs	r11, 6
    4eec:	0b c0       	rjmp	.+22     	; 0x4f04 <vfprintf+0x2aa>
    4eee:	2b 2d       	mov	r18, r11
    4ef0:	2e 7f       	andi	r18, 0xFE	; 254
    4ef2:	a5 14       	cp	r10, r5
    4ef4:	50 f4       	brcc	.+20     	; 0x4f0a <vfprintf+0x2b0>
    4ef6:	b4 fe       	sbrs	r11, 4
    4ef8:	0a c0       	rjmp	.+20     	; 0x4f0e <vfprintf+0x2b4>
    4efa:	b2 fc       	sbrc	r11, 2
    4efc:	08 c0       	rjmp	.+16     	; 0x4f0e <vfprintf+0x2b4>
    4efe:	2b 2d       	mov	r18, r11
    4f00:	2e 7e       	andi	r18, 0xEE	; 238
    4f02:	05 c0       	rjmp	.+10     	; 0x4f0e <vfprintf+0x2b4>
    4f04:	7a 2c       	mov	r7, r10
    4f06:	2b 2d       	mov	r18, r11
    4f08:	03 c0       	rjmp	.+6      	; 0x4f10 <vfprintf+0x2b6>
    4f0a:	7a 2c       	mov	r7, r10
    4f0c:	01 c0       	rjmp	.+2      	; 0x4f10 <vfprintf+0x2b6>
    4f0e:	75 2c       	mov	r7, r5
    4f10:	24 ff       	sbrs	r18, 4
    4f12:	0d c0       	rjmp	.+26     	; 0x4f2e <vfprintf+0x2d4>
    4f14:	fe 01       	movw	r30, r28
    4f16:	ea 0d       	add	r30, r10
    4f18:	f1 1d       	adc	r31, r1
    4f1a:	80 81       	ld	r24, Z
    4f1c:	80 33       	cpi	r24, 0x30	; 48
    4f1e:	11 f4       	brne	.+4      	; 0x4f24 <vfprintf+0x2ca>
    4f20:	29 7e       	andi	r18, 0xE9	; 233
    4f22:	09 c0       	rjmp	.+18     	; 0x4f36 <vfprintf+0x2dc>
    4f24:	22 ff       	sbrs	r18, 2
    4f26:	06 c0       	rjmp	.+12     	; 0x4f34 <vfprintf+0x2da>
    4f28:	73 94       	inc	r7
    4f2a:	73 94       	inc	r7
    4f2c:	04 c0       	rjmp	.+8      	; 0x4f36 <vfprintf+0x2dc>
    4f2e:	82 2f       	mov	r24, r18
    4f30:	86 78       	andi	r24, 0x86	; 134
    4f32:	09 f0       	breq	.+2      	; 0x4f36 <vfprintf+0x2dc>
    4f34:	73 94       	inc	r7
    4f36:	23 fd       	sbrc	r18, 3
    4f38:	13 c0       	rjmp	.+38     	; 0x4f60 <vfprintf+0x306>
    4f3a:	20 ff       	sbrs	r18, 0
    4f3c:	0e c0       	rjmp	.+28     	; 0x4f5a <vfprintf+0x300>
    4f3e:	5a 2c       	mov	r5, r10
    4f40:	73 14       	cp	r7, r3
    4f42:	58 f4       	brcc	.+22     	; 0x4f5a <vfprintf+0x300>
    4f44:	53 0c       	add	r5, r3
    4f46:	57 18       	sub	r5, r7
    4f48:	73 2c       	mov	r7, r3
    4f4a:	07 c0       	rjmp	.+14     	; 0x4f5a <vfprintf+0x300>
    4f4c:	b7 01       	movw	r22, r14
    4f4e:	80 e2       	ldi	r24, 0x20	; 32
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	2c 87       	std	Y+12, r18	; 0x0c
    4f54:	9c d0       	rcall	.+312    	; 0x508e <fputc>
    4f56:	73 94       	inc	r7
    4f58:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f5a:	73 14       	cp	r7, r3
    4f5c:	b8 f3       	brcs	.-18     	; 0x4f4c <vfprintf+0x2f2>
    4f5e:	04 c0       	rjmp	.+8      	; 0x4f68 <vfprintf+0x30e>
    4f60:	73 14       	cp	r7, r3
    4f62:	10 f4       	brcc	.+4      	; 0x4f68 <vfprintf+0x30e>
    4f64:	37 18       	sub	r3, r7
    4f66:	01 c0       	rjmp	.+2      	; 0x4f6a <vfprintf+0x310>
    4f68:	31 2c       	mov	r3, r1
    4f6a:	24 ff       	sbrs	r18, 4
    4f6c:	11 c0       	rjmp	.+34     	; 0x4f90 <vfprintf+0x336>
    4f6e:	b7 01       	movw	r22, r14
    4f70:	80 e3       	ldi	r24, 0x30	; 48
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	2c 87       	std	Y+12, r18	; 0x0c
    4f76:	8b d0       	rcall	.+278    	; 0x508e <fputc>
    4f78:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f7a:	22 ff       	sbrs	r18, 2
    4f7c:	1c c0       	rjmp	.+56     	; 0x4fb6 <vfprintf+0x35c>
    4f7e:	21 ff       	sbrs	r18, 1
    4f80:	03 c0       	rjmp	.+6      	; 0x4f88 <vfprintf+0x32e>
    4f82:	88 e5       	ldi	r24, 0x58	; 88
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	02 c0       	rjmp	.+4      	; 0x4f8c <vfprintf+0x332>
    4f88:	88 e7       	ldi	r24, 0x78	; 120
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	b7 01       	movw	r22, r14
    4f8e:	0c c0       	rjmp	.+24     	; 0x4fa8 <vfprintf+0x34e>
    4f90:	82 2f       	mov	r24, r18
    4f92:	86 78       	andi	r24, 0x86	; 134
    4f94:	81 f0       	breq	.+32     	; 0x4fb6 <vfprintf+0x35c>
    4f96:	21 fd       	sbrc	r18, 1
    4f98:	02 c0       	rjmp	.+4      	; 0x4f9e <vfprintf+0x344>
    4f9a:	80 e2       	ldi	r24, 0x20	; 32
    4f9c:	01 c0       	rjmp	.+2      	; 0x4fa0 <vfprintf+0x346>
    4f9e:	8b e2       	ldi	r24, 0x2B	; 43
    4fa0:	27 fd       	sbrc	r18, 7
    4fa2:	8d e2       	ldi	r24, 0x2D	; 45
    4fa4:	b7 01       	movw	r22, r14
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	72 d0       	rcall	.+228    	; 0x508e <fputc>
    4faa:	05 c0       	rjmp	.+10     	; 0x4fb6 <vfprintf+0x35c>
    4fac:	b7 01       	movw	r22, r14
    4fae:	80 e3       	ldi	r24, 0x30	; 48
    4fb0:	90 e0       	ldi	r25, 0x00	; 0
    4fb2:	6d d0       	rcall	.+218    	; 0x508e <fputc>
    4fb4:	5a 94       	dec	r5
    4fb6:	a5 14       	cp	r10, r5
    4fb8:	c8 f3       	brcs	.-14     	; 0x4fac <vfprintf+0x352>
    4fba:	aa 94       	dec	r10
    4fbc:	f4 01       	movw	r30, r8
    4fbe:	ea 0d       	add	r30, r10
    4fc0:	f1 1d       	adc	r31, r1
    4fc2:	b7 01       	movw	r22, r14
    4fc4:	80 81       	ld	r24, Z
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	62 d0       	rcall	.+196    	; 0x508e <fputc>
    4fca:	a1 10       	cpse	r10, r1
    4fcc:	f6 cf       	rjmp	.-20     	; 0x4fba <vfprintf+0x360>
    4fce:	05 c0       	rjmp	.+10     	; 0x4fda <vfprintf+0x380>
    4fd0:	b7 01       	movw	r22, r14
    4fd2:	80 e2       	ldi	r24, 0x20	; 32
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	5b d0       	rcall	.+182    	; 0x508e <fputc>
    4fd8:	3a 94       	dec	r3
    4fda:	31 10       	cpse	r3, r1
    4fdc:	f9 cf       	rjmp	.-14     	; 0x4fd0 <vfprintf+0x376>
    4fde:	50 ce       	rjmp	.-864    	; 0x4c80 <vfprintf+0x26>
    4fe0:	f7 01       	movw	r30, r14
    4fe2:	26 81       	ldd	r18, Z+6	; 0x06
    4fe4:	37 81       	ldd	r19, Z+7	; 0x07
    4fe6:	02 c0       	rjmp	.+4      	; 0x4fec <vfprintf+0x392>
    4fe8:	2f ef       	ldi	r18, 0xFF	; 255
    4fea:	3f ef       	ldi	r19, 0xFF	; 255
    4fec:	c9 01       	movw	r24, r18
    4fee:	2c 96       	adiw	r28, 0x0c	; 12
    4ff0:	e2 e1       	ldi	r30, 0x12	; 18
    4ff2:	0b c1       	rjmp	.+534    	; 0x520a <__epilogue_restores__>

00004ff4 <__eerd_block_x32a4u>:
    4ff4:	e0 ec       	ldi	r30, 0xC0	; 192
    4ff6:	f1 e0       	ldi	r31, 0x01	; 1
    4ff8:	a7 85       	ldd	r26, Z+15	; 0x0f
    4ffa:	a7 fd       	sbrc	r26, 7
    4ffc:	fd cf       	rjmp	.-6      	; 0x4ff8 <__eerd_block_x32a4u+0x4>
    4ffe:	a4 85       	ldd	r26, Z+12	; 0x0c
    5000:	a8 60       	ori	r26, 0x08	; 8
    5002:	a4 87       	std	Z+12, r26	; 0x0c
    5004:	60 50       	subi	r22, 0x00	; 0
    5006:	70 4f       	sbci	r23, 0xF0	; 240
    5008:	f2 cd       	rjmp	.-1052   	; 0x4bee <memcpy>

0000500a <__eewr_block_x32a4u>:
    500a:	dc 01       	movw	r26, r24
    500c:	cb 01       	movw	r24, r22
    500e:	02 c0       	rjmp	.+4      	; 0x5014 <__eewr_block_x32a4u+0xa>
    5010:	2d 91       	ld	r18, X+
    5012:	05 d0       	rcall	.+10     	; 0x501e <__eewr_r18_x32a4u>
    5014:	41 50       	subi	r20, 0x01	; 1
    5016:	50 40       	sbci	r21, 0x00	; 0
    5018:	d8 f7       	brcc	.-10     	; 0x5010 <__eewr_block_x32a4u+0x6>
    501a:	08 95       	ret

0000501c <__eewr_byte_x32a4u>:
    501c:	26 2f       	mov	r18, r22

0000501e <__eewr_r18_x32a4u>:
    501e:	e0 ec       	ldi	r30, 0xC0	; 192
    5020:	f1 e0       	ldi	r31, 0x01	; 1
    5022:	37 85       	ldd	r19, Z+15	; 0x0f
    5024:	37 fd       	sbrc	r19, 7
    5026:	fd cf       	rjmp	.-6      	; 0x5022 <__eewr_r18_x32a4u+0x4>
    5028:	34 85       	ldd	r19, Z+12	; 0x0c
    502a:	37 7f       	andi	r19, 0xF7	; 247
    502c:	34 87       	std	Z+12, r19	; 0x0c
    502e:	37 85       	ldd	r19, Z+15	; 0x0f
    5030:	31 ff       	sbrs	r19, 1
    5032:	09 c0       	rjmp	.+18     	; 0x5046 <__eewr_r18_x32a4u+0x28>
    5034:	36 e3       	ldi	r19, 0x36	; 54
    5036:	32 87       	std	Z+10, r19	; 0x0a
    5038:	38 ed       	ldi	r19, 0xD8	; 216
    503a:	34 bf       	out	0x34, r19	; 52
    503c:	31 e0       	ldi	r19, 0x01	; 1
    503e:	33 87       	std	Z+11, r19	; 0x0b
    5040:	37 85       	ldd	r19, Z+15	; 0x0f
    5042:	37 fd       	sbrc	r19, 7
    5044:	fd cf       	rjmp	.-6      	; 0x5040 <__eewr_r18_x32a4u+0x22>
    5046:	33 e3       	ldi	r19, 0x33	; 51
    5048:	32 87       	std	Z+10, r19	; 0x0a
    504a:	80 83       	st	Z, r24
    504c:	91 83       	std	Z+1, r25	; 0x01
    504e:	12 82       	std	Z+2, r1	; 0x02
    5050:	24 83       	std	Z+4, r18	; 0x04
    5052:	25 e3       	ldi	r18, 0x35	; 53
    5054:	22 87       	std	Z+10, r18	; 0x0a
    5056:	28 ed       	ldi	r18, 0xD8	; 216
    5058:	31 e0       	ldi	r19, 0x01	; 1
    505a:	24 bf       	out	0x34, r18	; 52
    505c:	33 87       	std	Z+11, r19	; 0x0b
    505e:	01 96       	adiw	r24, 0x01	; 1
    5060:	08 95       	ret

00005062 <strnlen_P>:
    5062:	fc 01       	movw	r30, r24
    5064:	05 90       	lpm	r0, Z+
    5066:	61 50       	subi	r22, 0x01	; 1
    5068:	70 40       	sbci	r23, 0x00	; 0
    506a:	01 10       	cpse	r0, r1
    506c:	d8 f7       	brcc	.-10     	; 0x5064 <strnlen_P+0x2>
    506e:	80 95       	com	r24
    5070:	90 95       	com	r25
    5072:	8e 0f       	add	r24, r30
    5074:	9f 1f       	adc	r25, r31
    5076:	08 95       	ret

00005078 <strnlen>:
    5078:	fc 01       	movw	r30, r24
    507a:	61 50       	subi	r22, 0x01	; 1
    507c:	70 40       	sbci	r23, 0x00	; 0
    507e:	01 90       	ld	r0, Z+
    5080:	01 10       	cpse	r0, r1
    5082:	d8 f7       	brcc	.-10     	; 0x507a <strnlen+0x2>
    5084:	80 95       	com	r24
    5086:	90 95       	com	r25
    5088:	8e 0f       	add	r24, r30
    508a:	9f 1f       	adc	r25, r31
    508c:	08 95       	ret

0000508e <fputc>:
    508e:	0f 93       	push	r16
    5090:	1f 93       	push	r17
    5092:	cf 93       	push	r28
    5094:	df 93       	push	r29
    5096:	8c 01       	movw	r16, r24
    5098:	eb 01       	movw	r28, r22
    509a:	8b 81       	ldd	r24, Y+3	; 0x03
    509c:	81 fd       	sbrc	r24, 1
    509e:	03 c0       	rjmp	.+6      	; 0x50a6 <fputc+0x18>
    50a0:	0f ef       	ldi	r16, 0xFF	; 255
    50a2:	1f ef       	ldi	r17, 0xFF	; 255
    50a4:	1a c0       	rjmp	.+52     	; 0x50da <fputc+0x4c>
    50a6:	82 ff       	sbrs	r24, 2
    50a8:	0d c0       	rjmp	.+26     	; 0x50c4 <fputc+0x36>
    50aa:	2e 81       	ldd	r18, Y+6	; 0x06
    50ac:	3f 81       	ldd	r19, Y+7	; 0x07
    50ae:	8c 81       	ldd	r24, Y+4	; 0x04
    50b0:	9d 81       	ldd	r25, Y+5	; 0x05
    50b2:	28 17       	cp	r18, r24
    50b4:	39 07       	cpc	r19, r25
    50b6:	64 f4       	brge	.+24     	; 0x50d0 <fputc+0x42>
    50b8:	e8 81       	ld	r30, Y
    50ba:	f9 81       	ldd	r31, Y+1	; 0x01
    50bc:	01 93       	st	Z+, r16
    50be:	e8 83       	st	Y, r30
    50c0:	f9 83       	std	Y+1, r31	; 0x01
    50c2:	06 c0       	rjmp	.+12     	; 0x50d0 <fputc+0x42>
    50c4:	e8 85       	ldd	r30, Y+8	; 0x08
    50c6:	f9 85       	ldd	r31, Y+9	; 0x09
    50c8:	80 2f       	mov	r24, r16
    50ca:	09 95       	icall
    50cc:	89 2b       	or	r24, r25
    50ce:	41 f7       	brne	.-48     	; 0x50a0 <fputc+0x12>
    50d0:	8e 81       	ldd	r24, Y+6	; 0x06
    50d2:	9f 81       	ldd	r25, Y+7	; 0x07
    50d4:	01 96       	adiw	r24, 0x01	; 1
    50d6:	8e 83       	std	Y+6, r24	; 0x06
    50d8:	9f 83       	std	Y+7, r25	; 0x07
    50da:	c8 01       	movw	r24, r16
    50dc:	df 91       	pop	r29
    50de:	cf 91       	pop	r28
    50e0:	1f 91       	pop	r17
    50e2:	0f 91       	pop	r16
    50e4:	08 95       	ret

000050e6 <__ultoa_invert>:
    50e6:	fa 01       	movw	r30, r20
    50e8:	aa 27       	eor	r26, r26
    50ea:	28 30       	cpi	r18, 0x08	; 8
    50ec:	51 f1       	breq	.+84     	; 0x5142 <__ultoa_invert+0x5c>
    50ee:	20 31       	cpi	r18, 0x10	; 16
    50f0:	81 f1       	breq	.+96     	; 0x5152 <__ultoa_invert+0x6c>
    50f2:	e8 94       	clt
    50f4:	6f 93       	push	r22
    50f6:	6e 7f       	andi	r22, 0xFE	; 254
    50f8:	6e 5f       	subi	r22, 0xFE	; 254
    50fa:	7f 4f       	sbci	r23, 0xFF	; 255
    50fc:	8f 4f       	sbci	r24, 0xFF	; 255
    50fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5100:	af 4f       	sbci	r26, 0xFF	; 255
    5102:	b1 e0       	ldi	r27, 0x01	; 1
    5104:	3e d0       	rcall	.+124    	; 0x5182 <__ultoa_invert+0x9c>
    5106:	b4 e0       	ldi	r27, 0x04	; 4
    5108:	3c d0       	rcall	.+120    	; 0x5182 <__ultoa_invert+0x9c>
    510a:	67 0f       	add	r22, r23
    510c:	78 1f       	adc	r23, r24
    510e:	89 1f       	adc	r24, r25
    5110:	9a 1f       	adc	r25, r26
    5112:	a1 1d       	adc	r26, r1
    5114:	68 0f       	add	r22, r24
    5116:	79 1f       	adc	r23, r25
    5118:	8a 1f       	adc	r24, r26
    511a:	91 1d       	adc	r25, r1
    511c:	a1 1d       	adc	r26, r1
    511e:	6a 0f       	add	r22, r26
    5120:	71 1d       	adc	r23, r1
    5122:	81 1d       	adc	r24, r1
    5124:	91 1d       	adc	r25, r1
    5126:	a1 1d       	adc	r26, r1
    5128:	20 d0       	rcall	.+64     	; 0x516a <__ultoa_invert+0x84>
    512a:	09 f4       	brne	.+2      	; 0x512e <__ultoa_invert+0x48>
    512c:	68 94       	set
    512e:	3f 91       	pop	r19
    5130:	2a e0       	ldi	r18, 0x0A	; 10
    5132:	26 9f       	mul	r18, r22
    5134:	11 24       	eor	r1, r1
    5136:	30 19       	sub	r19, r0
    5138:	30 5d       	subi	r19, 0xD0	; 208
    513a:	31 93       	st	Z+, r19
    513c:	de f6       	brtc	.-74     	; 0x50f4 <__ultoa_invert+0xe>
    513e:	cf 01       	movw	r24, r30
    5140:	08 95       	ret
    5142:	46 2f       	mov	r20, r22
    5144:	47 70       	andi	r20, 0x07	; 7
    5146:	40 5d       	subi	r20, 0xD0	; 208
    5148:	41 93       	st	Z+, r20
    514a:	b3 e0       	ldi	r27, 0x03	; 3
    514c:	0f d0       	rcall	.+30     	; 0x516c <__ultoa_invert+0x86>
    514e:	c9 f7       	brne	.-14     	; 0x5142 <__ultoa_invert+0x5c>
    5150:	f6 cf       	rjmp	.-20     	; 0x513e <__ultoa_invert+0x58>
    5152:	46 2f       	mov	r20, r22
    5154:	4f 70       	andi	r20, 0x0F	; 15
    5156:	40 5d       	subi	r20, 0xD0	; 208
    5158:	4a 33       	cpi	r20, 0x3A	; 58
    515a:	18 f0       	brcs	.+6      	; 0x5162 <__ultoa_invert+0x7c>
    515c:	49 5d       	subi	r20, 0xD9	; 217
    515e:	31 fd       	sbrc	r19, 1
    5160:	40 52       	subi	r20, 0x20	; 32
    5162:	41 93       	st	Z+, r20
    5164:	02 d0       	rcall	.+4      	; 0x516a <__ultoa_invert+0x84>
    5166:	a9 f7       	brne	.-22     	; 0x5152 <__ultoa_invert+0x6c>
    5168:	ea cf       	rjmp	.-44     	; 0x513e <__ultoa_invert+0x58>
    516a:	b4 e0       	ldi	r27, 0x04	; 4
    516c:	a6 95       	lsr	r26
    516e:	97 95       	ror	r25
    5170:	87 95       	ror	r24
    5172:	77 95       	ror	r23
    5174:	67 95       	ror	r22
    5176:	ba 95       	dec	r27
    5178:	c9 f7       	brne	.-14     	; 0x516c <__ultoa_invert+0x86>
    517a:	00 97       	sbiw	r24, 0x00	; 0
    517c:	61 05       	cpc	r22, r1
    517e:	71 05       	cpc	r23, r1
    5180:	08 95       	ret
    5182:	9b 01       	movw	r18, r22
    5184:	ac 01       	movw	r20, r24
    5186:	0a 2e       	mov	r0, r26
    5188:	06 94       	lsr	r0
    518a:	57 95       	ror	r21
    518c:	47 95       	ror	r20
    518e:	37 95       	ror	r19
    5190:	27 95       	ror	r18
    5192:	ba 95       	dec	r27
    5194:	c9 f7       	brne	.-14     	; 0x5188 <__ultoa_invert+0xa2>
    5196:	62 0f       	add	r22, r18
    5198:	73 1f       	adc	r23, r19
    519a:	84 1f       	adc	r24, r20
    519c:	95 1f       	adc	r25, r21
    519e:	a0 1d       	adc	r26, r0
    51a0:	08 95       	ret

000051a2 <__divmodsi4>:
    51a2:	05 2e       	mov	r0, r21
    51a4:	97 fb       	bst	r25, 7
    51a6:	16 f4       	brtc	.+4      	; 0x51ac <__divmodsi4+0xa>
    51a8:	00 94       	com	r0
    51aa:	06 d0       	rcall	.+12     	; 0x51b8 <__divmodsi4_neg1>
    51ac:	57 fd       	sbrc	r21, 7
    51ae:	0c d0       	rcall	.+24     	; 0x51c8 <__divmodsi4_neg2>
    51b0:	44 d0       	rcall	.+136    	; 0x523a <__udivmodsi4>
    51b2:	07 fc       	sbrc	r0, 7
    51b4:	09 d0       	rcall	.+18     	; 0x51c8 <__divmodsi4_neg2>
    51b6:	7e f4       	brtc	.+30     	; 0x51d6 <__divmodsi4_exit>

000051b8 <__divmodsi4_neg1>:
    51b8:	90 95       	com	r25
    51ba:	80 95       	com	r24
    51bc:	70 95       	com	r23
    51be:	61 95       	neg	r22
    51c0:	7f 4f       	sbci	r23, 0xFF	; 255
    51c2:	8f 4f       	sbci	r24, 0xFF	; 255
    51c4:	9f 4f       	sbci	r25, 0xFF	; 255
    51c6:	08 95       	ret

000051c8 <__divmodsi4_neg2>:
    51c8:	50 95       	com	r21
    51ca:	40 95       	com	r20
    51cc:	30 95       	com	r19
    51ce:	21 95       	neg	r18
    51d0:	3f 4f       	sbci	r19, 0xFF	; 255
    51d2:	4f 4f       	sbci	r20, 0xFF	; 255
    51d4:	5f 4f       	sbci	r21, 0xFF	; 255

000051d6 <__divmodsi4_exit>:
    51d6:	08 95       	ret

000051d8 <__prologue_saves__>:
    51d8:	2f 92       	push	r2
    51da:	3f 92       	push	r3
    51dc:	4f 92       	push	r4
    51de:	5f 92       	push	r5
    51e0:	6f 92       	push	r6
    51e2:	7f 92       	push	r7
    51e4:	8f 92       	push	r8
    51e6:	9f 92       	push	r9
    51e8:	af 92       	push	r10
    51ea:	bf 92       	push	r11
    51ec:	cf 92       	push	r12
    51ee:	df 92       	push	r13
    51f0:	ef 92       	push	r14
    51f2:	ff 92       	push	r15
    51f4:	0f 93       	push	r16
    51f6:	1f 93       	push	r17
    51f8:	cf 93       	push	r28
    51fa:	df 93       	push	r29
    51fc:	cd b7       	in	r28, 0x3d	; 61
    51fe:	de b7       	in	r29, 0x3e	; 62
    5200:	ca 1b       	sub	r28, r26
    5202:	db 0b       	sbc	r29, r27
    5204:	cd bf       	out	0x3d, r28	; 61
    5206:	de bf       	out	0x3e, r29	; 62
    5208:	09 94       	ijmp

0000520a <__epilogue_restores__>:
    520a:	2a 88       	ldd	r2, Y+18	; 0x12
    520c:	39 88       	ldd	r3, Y+17	; 0x11
    520e:	48 88       	ldd	r4, Y+16	; 0x10
    5210:	5f 84       	ldd	r5, Y+15	; 0x0f
    5212:	6e 84       	ldd	r6, Y+14	; 0x0e
    5214:	7d 84       	ldd	r7, Y+13	; 0x0d
    5216:	8c 84       	ldd	r8, Y+12	; 0x0c
    5218:	9b 84       	ldd	r9, Y+11	; 0x0b
    521a:	aa 84       	ldd	r10, Y+10	; 0x0a
    521c:	b9 84       	ldd	r11, Y+9	; 0x09
    521e:	c8 84       	ldd	r12, Y+8	; 0x08
    5220:	df 80       	ldd	r13, Y+7	; 0x07
    5222:	ee 80       	ldd	r14, Y+6	; 0x06
    5224:	fd 80       	ldd	r15, Y+5	; 0x05
    5226:	0c 81       	ldd	r16, Y+4	; 0x04
    5228:	1b 81       	ldd	r17, Y+3	; 0x03
    522a:	aa 81       	ldd	r26, Y+2	; 0x02
    522c:	b9 81       	ldd	r27, Y+1	; 0x01
    522e:	ce 0f       	add	r28, r30
    5230:	d1 1d       	adc	r29, r1
    5232:	cd bf       	out	0x3d, r28	; 61
    5234:	de bf       	out	0x3e, r29	; 62
    5236:	ed 01       	movw	r28, r26
    5238:	08 95       	ret

0000523a <__udivmodsi4>:
    523a:	a1 e2       	ldi	r26, 0x21	; 33
    523c:	1a 2e       	mov	r1, r26
    523e:	aa 1b       	sub	r26, r26
    5240:	bb 1b       	sub	r27, r27
    5242:	fd 01       	movw	r30, r26
    5244:	0d c0       	rjmp	.+26     	; 0x5260 <__udivmodsi4_ep>

00005246 <__udivmodsi4_loop>:
    5246:	aa 1f       	adc	r26, r26
    5248:	bb 1f       	adc	r27, r27
    524a:	ee 1f       	adc	r30, r30
    524c:	ff 1f       	adc	r31, r31
    524e:	a2 17       	cp	r26, r18
    5250:	b3 07       	cpc	r27, r19
    5252:	e4 07       	cpc	r30, r20
    5254:	f5 07       	cpc	r31, r21
    5256:	20 f0       	brcs	.+8      	; 0x5260 <__udivmodsi4_ep>
    5258:	a2 1b       	sub	r26, r18
    525a:	b3 0b       	sbc	r27, r19
    525c:	e4 0b       	sbc	r30, r20
    525e:	f5 0b       	sbc	r31, r21

00005260 <__udivmodsi4_ep>:
    5260:	66 1f       	adc	r22, r22
    5262:	77 1f       	adc	r23, r23
    5264:	88 1f       	adc	r24, r24
    5266:	99 1f       	adc	r25, r25
    5268:	1a 94       	dec	r1
    526a:	69 f7       	brne	.-38     	; 0x5246 <__udivmodsi4_loop>
    526c:	60 95       	com	r22
    526e:	70 95       	com	r23
    5270:	80 95       	com	r24
    5272:	90 95       	com	r25
    5274:	9b 01       	movw	r18, r22
    5276:	ac 01       	movw	r20, r24
    5278:	bd 01       	movw	r22, r26
    527a:	cf 01       	movw	r24, r30
    527c:	08 95       	ret

0000527e <_exit>:
    527e:	f8 94       	cli

00005280 <__stop_program>:
    5280:	ff cf       	rjmp	.-2      	; 0x5280 <__stop_program>
