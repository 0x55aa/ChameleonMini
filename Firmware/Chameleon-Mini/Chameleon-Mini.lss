
Chameleon-Mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00802000  000052be  00005372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000060b  008020a2  008020a2  00005414  2**0
                  ALLOC
  3 .eeprom       00000013  00810000  00810000  00005414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000014d0  00000000  00000000  00005428  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000601  00000000  00000000  000068f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000b78  00000000  00000000  00006f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000159d0  00000000  00000000  00007a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004a41  00000000  00000000  0001d448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000075a6  00000000  00000000  00021e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001e1c  00000000  00000000  00029430  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000076b2  00000000  00000000  0002b24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b6e8  00000000  00000000  000328fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001ae0  00000000  00000000  0003dfe6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c3       	rjmp	.+1638   	; 0x668 <__ctors_end>
       2:	00 00       	nop
       4:	4d c3       	rjmp	.+1690   	; 0x6a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	4b c3       	rjmp	.+1686   	; 0x6a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c3       	rjmp	.+1682   	; 0x6a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c3       	rjmp	.+1678   	; 0x6a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c3       	rjmp	.+1674   	; 0x6a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	43 c3       	rjmp	.+1670   	; 0x6a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	41 c3       	rjmp	.+1666   	; 0x6a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c3       	rjmp	.+1662   	; 0x6a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c3       	rjmp	.+1658   	; 0x6a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c3       	rjmp	.+1654   	; 0x6a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c3       	rjmp	.+1650   	; 0x6a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c3       	rjmp	.+1646   	; 0x6a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c3       	rjmp	.+1642   	; 0x6a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c3       	rjmp	.+1638   	; 0x6a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c3       	rjmp	.+1634   	; 0x6a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c3       	rjmp	.+1630   	; 0x6a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c3       	rjmp	.+1626   	; 0x6a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c3       	rjmp	.+1622   	; 0x6a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c3       	rjmp	.+1618   	; 0x6a0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c3       	rjmp	.+1614   	; 0x6a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c3       	rjmp	.+1610   	; 0x6a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__vector_22>
      5c:	21 c3       	rjmp	.+1602   	; 0x6a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c3       	rjmp	.+1598   	; 0x6a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c3       	rjmp	.+1594   	; 0x6a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	1b c3       	rjmp	.+1590   	; 0x6a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	19 c3       	rjmp	.+1586   	; 0x6a0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	17 c3       	rjmp	.+1582   	; 0x6a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	15 c3       	rjmp	.+1578   	; 0x6a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	13 c3       	rjmp	.+1574   	; 0x6a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	11 c3       	rjmp	.+1570   	; 0x6a0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0f c3       	rjmp	.+1566   	; 0x6a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	0d c3       	rjmp	.+1562   	; 0x6a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 26 11 	jmp	0x224c	; 0x224c <__vector_34>
      8c:	09 c3       	rjmp	.+1554   	; 0x6a0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	07 c3       	rjmp	.+1550   	; 0x6a0 <__bad_interrupt>
      92:	00 00       	nop
      94:	05 c3       	rjmp	.+1546   	; 0x6a0 <__bad_interrupt>
      96:	00 00       	nop
      98:	03 c3       	rjmp	.+1542   	; 0x6a0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	01 c3       	rjmp	.+1538   	; 0x6a0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ff c2       	rjmp	.+1534   	; 0x6a0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	fd c2       	rjmp	.+1530   	; 0x6a0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	fb c2       	rjmp	.+1526   	; 0x6a0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f9 c2       	rjmp	.+1522   	; 0x6a0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f7 c2       	rjmp	.+1518   	; 0x6a0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f5 c2       	rjmp	.+1514   	; 0x6a0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f3 c2       	rjmp	.+1510   	; 0x6a0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f1 c2       	rjmp	.+1506   	; 0x6a0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	ef c2       	rjmp	.+1502   	; 0x6a0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ed c2       	rjmp	.+1498   	; 0x6a0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	eb c2       	rjmp	.+1494   	; 0x6a0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e9 c2       	rjmp	.+1490   	; 0x6a0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e7 c2       	rjmp	.+1486   	; 0x6a0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e5 c2       	rjmp	.+1482   	; 0x6a0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e3 c2       	rjmp	.+1478   	; 0x6a0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e1 c2       	rjmp	.+1474   	; 0x6a0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	df c2       	rjmp	.+1470   	; 0x6a0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	dd c2       	rjmp	.+1466   	; 0x6a0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	db c2       	rjmp	.+1462   	; 0x6a0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d9 c2       	rjmp	.+1458   	; 0x6a0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d7 c2       	rjmp	.+1454   	; 0x6a0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d5 c2       	rjmp	.+1450   	; 0x6a0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d3 c2       	rjmp	.+1446   	; 0x6a0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d1 c2       	rjmp	.+1442   	; 0x6a0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	cf c2       	rjmp	.+1438   	; 0x6a0 <__bad_interrupt>
     102:	00 00       	nop
     104:	cd c2       	rjmp	.+1434   	; 0x6a0 <__bad_interrupt>
     106:	00 00       	nop
     108:	cb c2       	rjmp	.+1430   	; 0x6a0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c9 c2       	rjmp	.+1426   	; 0x6a0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c7 c2       	rjmp	.+1422   	; 0x6a0 <__bad_interrupt>
     112:	00 00       	nop
     114:	c5 c2       	rjmp	.+1418   	; 0x6a0 <__bad_interrupt>
     116:	00 00       	nop
     118:	c3 c2       	rjmp	.+1414   	; 0x6a0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	c1 c2       	rjmp	.+1410   	; 0x6a0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	bf c2       	rjmp	.+1406   	; 0x6a0 <__bad_interrupt>
     122:	00 00       	nop
     124:	bd c2       	rjmp	.+1402   	; 0x6a0 <__bad_interrupt>
     126:	00 00       	nop
     128:	bb c2       	rjmp	.+1398   	; 0x6a0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	b9 c2       	rjmp	.+1394   	; 0x6a0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b7 c2       	rjmp	.+1390   	; 0x6a0 <__bad_interrupt>
     132:	00 00       	nop
     134:	b5 c2       	rjmp	.+1386   	; 0x6a0 <__bad_interrupt>
     136:	00 00       	nop
     138:	b3 c2       	rjmp	.+1382   	; 0x6a0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	b1 c2       	rjmp	.+1378   	; 0x6a0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	af c2       	rjmp	.+1374   	; 0x6a0 <__bad_interrupt>
     142:	00 00       	nop
     144:	ad c2       	rjmp	.+1370   	; 0x6a0 <__bad_interrupt>
     146:	00 00       	nop
     148:	ab c2       	rjmp	.+1366   	; 0x6a0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__vector_83>
     150:	a7 c2       	rjmp	.+1358   	; 0x6a0 <__bad_interrupt>
     152:	00 00       	nop
     154:	a5 c2       	rjmp	.+1354   	; 0x6a0 <__bad_interrupt>
     156:	00 00       	nop
     158:	a3 c2       	rjmp	.+1350   	; 0x6a0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	a1 c2       	rjmp	.+1346   	; 0x6a0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	9f c2       	rjmp	.+1342   	; 0x6a0 <__bad_interrupt>
     162:	00 00       	nop
     164:	9d c2       	rjmp	.+1338   	; 0x6a0 <__bad_interrupt>
     166:	00 00       	nop
     168:	9b c2       	rjmp	.+1334   	; 0x6a0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	99 c2       	rjmp	.+1330   	; 0x6a0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	97 c2       	rjmp	.+1326   	; 0x6a0 <__bad_interrupt>
     172:	00 00       	nop
     174:	95 c2       	rjmp	.+1322   	; 0x6a0 <__bad_interrupt>
     176:	00 00       	nop
     178:	93 c2       	rjmp	.+1318   	; 0x6a0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	91 c2       	rjmp	.+1314   	; 0x6a0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	8f c2       	rjmp	.+1310   	; 0x6a0 <__bad_interrupt>
     182:	00 00       	nop
     184:	8d c2       	rjmp	.+1306   	; 0x6a0 <__bad_interrupt>
     186:	00 00       	nop
     188:	8b c2       	rjmp	.+1302   	; 0x6a0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	89 c2       	rjmp	.+1298   	; 0x6a0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	87 c2       	rjmp	.+1294   	; 0x6a0 <__bad_interrupt>
     192:	00 00       	nop
     194:	85 c2       	rjmp	.+1290   	; 0x6a0 <__bad_interrupt>
     196:	00 00       	nop
     198:	83 c2       	rjmp	.+1286   	; 0x6a0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	81 c2       	rjmp	.+1282   	; 0x6a0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	7f c2       	rjmp	.+1278   	; 0x6a0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7d c2       	rjmp	.+1274   	; 0x6a0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	7b c2       	rjmp	.+1270   	; 0x6a0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	79 c2       	rjmp	.+1266   	; 0x6a0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	77 c2       	rjmp	.+1262   	; 0x6a0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	75 c2       	rjmp	.+1258   	; 0x6a0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	73 c2       	rjmp	.+1254   	; 0x6a0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	71 c2       	rjmp	.+1250   	; 0x6a0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	6f c2       	rjmp	.+1246   	; 0x6a0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6d c2       	rjmp	.+1242   	; 0x6a0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	6b c2       	rjmp	.+1238   	; 0x6a0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	69 c2       	rjmp	.+1234   	; 0x6a0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	67 c2       	rjmp	.+1230   	; 0x6a0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	65 c2       	rjmp	.+1226   	; 0x6a0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	63 c2       	rjmp	.+1222   	; 0x6a0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	61 c2       	rjmp	.+1218   	; 0x6a0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	5f c2       	rjmp	.+1214   	; 0x6a0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5d c2       	rjmp	.+1210   	; 0x6a0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	5b c2       	rjmp	.+1206   	; 0x6a0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	59 c2       	rjmp	.+1202   	; 0x6a0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	57 c2       	rjmp	.+1198   	; 0x6a0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 fa 22 	jmp	0x45f4	; 0x45f4 <__vector_125>
     1f8:	53 c2       	rjmp	.+1190   	; 0x6a0 <__bad_interrupt>
     1fa:	00 00       	nop

000001fc <ProductString>:
     1fc:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     20c:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000021a <ManufacturerString>:
     21a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     22a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000234 <LanguageString>:
     234:	04 03 09 04                                         ....

00000238 <ConfigurationDescriptor>:
     238:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     248:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     258:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     268:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000276 <DeviceDescriptor>:
     276:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     286:	dc 01                                               ..

00000288 <ConfigurationTable>:
     288:	00 4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00     .NONE...........
     298:	00 3c 04 3d 04 3e 04 3f 04 40 04 41 04 44 04 45     .<.=.>.?.@.A.D.E
     2a8:	04 00 00 00 01 01 4d 46 5f 43 4c 41 53 53 49 43     ......MF_CLASSIC
     2b8:	5f 31 4b 00 00 00 17 13 4f 13 c8 13 e2 13 e6 13     _1K.....O.......
     2c8:	e7 13 c5 18 cb 18 00 04 04 00 02 4d 46 5f 43 4c     ...........MF_CL
     2d8:	41 53 53 49 43 5f 34 4b 00 00 00 17 13 4f 13 d5     ASSIC_4K.....O..
     2e8:	13 e2 13 e6 13 e7 13 c5 18 cb 18 00 10 04 00        ...............

000002f7 <ButtonActionTable>:
     2f7:	4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00 00     NONE............
     307:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     317:	55 49 44 5f 52 41 4e 44 4f 4d 00 00 00 00 00 00     UID_RANDOM......
     327:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     337:	55 49 44 5f 4c 45 46 54 5f 49 4e 43 52 45 4d 45     UID_LEFT_INCREME
     347:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     357:	55 49 44 5f 52 49 47 48 54 5f 49 4e 43 52 45 4d     UID_RIGHT_INCREM
     367:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     377:	55 49 44 5f 4c 45 46 54 5f 44 45 43 52 45 4d 45     UID_LEFT_DECREME
     387:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     397:	55 49 44 5f 52 49 47 48 54 5f 44 45 43 52 45 4d     UID_RIGHT_DECREM
     3a7:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     3b7:	43 59 43 4c 45 5f 53 45 54 54 49 4e 47 53 00 00     CYCLE_SETTINGS..
     3c7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000003d7 <__c.6198>:
     3d7:	43 68 61 6d 65 6c 65 6f 6e 2d 4d 69 6e 69 20 25     Chameleon-Mini %
     3e7:	53 20 75 73 69 6e 67 20 4c 55 46 41 20 25 53 20     S using LUFA %S 
     3f7:	63 6f 6d 70 69 6c 65 64 20 77 69 74 68 20 41 56     compiled with AV
     407:	52 2d 47 43 43 20 25 53 00                          R-GCC %S.

00000410 <__c.6200>:
     410:	31 34 30 31 30 32 00                                140102.

00000417 <__c.6202>:
     417:	31 33 30 39 30 31 00                                130901.

0000041e <__c.6204>:
     41e:	34 2e 36 2e 32 00                                   4.6.2.

00000424 <__c.6209>:
     424:	25 73 00                                            %s.

00000427 <__c.6227>:
     427:	52 41 4e 44 4f 4d 00                                RANDOM.

0000042e <__c.6254>:
     42e:	25 75 00                                            %u.

00000431 <__c.6259>:
     431:	25 75 00                                            %u.

00000434 <__c.6298>:
     434:	25 35 75 20 6d 56 00                                %5u mV.

0000043b <CommandTable>:
     43b:	56 45 52 53 49 4f 4e 00 00 00 00 00 00 00 00 00     VERSION.........
     44b:	00 00 00 00 84 0b 43 4f 4e 46 49 47 00 00 00 00     ......CONFIG....
     45b:	00 00 00 00 00 00 de 0b d6 0b b1 0b 55 49 44 00     ............UID.
     46b:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 09 0c     ................
     47b:	e3 0b 52 45 41 44 4f 4e 4c 59 00 00 00 00 00 00     ..READONLY......
     48b:	00 00 00 00 6c 0c 5d 0c 55 50 4c 4f 41 44 00 00     ....l.].UPLOAD..
     49b:	00 00 00 00 00 00 00 00 82 0c 00 00 00 00 44 4f     ..............DO
     4ab:	57 4e 4c 4f 41 44 00 00 00 00 00 00 00 00 87 0c     WNLOAD..........
     4bb:	00 00 00 00 52 45 53 45 54 00 00 00 00 00 00 00     ....RESET.......
     4cb:	00 00 00 00 8c 0c 00 00 00 00 55 50 47 52 41 44     ..........UPGRAD
     4db:	45 00 00 00 00 00 00 00 00 00 97 0c 00 00 00 00     E...............
     4eb:	4d 45 4d 53 49 5a 45 00 00 00 00 00 00 00 00 00     MEMSIZE.........
     4fb:	00 00 00 00 a2 0c 55 49 44 53 49 5a 45 00 00 00     ......UIDSIZE...
     50b:	00 00 00 00 00 00 00 00 00 00 c9 0c 42 55 54 54     ............BUTT
     51b:	4f 4e 00 00 00 00 00 00 00 00 00 00 ee 0c f8 0c     ON..............
     52b:	f3 0c 53 45 54 54 49 4e 47 00 00 00 00 00 00 00     ..SETTING.......
     53b:	00 00 00 00 05 0d 00 0d 43 4c 45 41 52 00 00 00     ........CLEAR...
     54b:	00 00 00 00 00 00 00 00 0d 0d 00 00 00 00 48 45     ..............HE
     55b:	4c 50 00 00 00 00 00 00 00 00 00 00 00 00 10 0d     LP..............
     56b:	00 00 00 00 52 53 53 49 00 00 00 00 00 00 00 00     ....RSSI........
     57b:	00 00 00 00 00 00 00 00 5d 0d 00 00 00 00 00 00     ........].......
     58b:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000059b <__c.5994>:
     59b:	0d 0a 00                                            ...

0000059e <__c.5996>:
     59e:	0d 0a 00                                            ...

000005a1 <StatusTable>:
     5a1:	64 31 30 30 3a 4f 4b 00 00 00 00 00 00 00 00 00     d100:OK.........
     5b1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5c1:	00 65 31 30 31 3a 4f 4b 20 57 49 54 48 20 54 45     .e101:OK WITH TE
     5d1:	58 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     XT..............
     5e1:	00 00 6e 31 31 30 3a 57 41 49 54 49 4e 47 20 46     ..n110:WAITING F
     5f1:	4f 52 20 58 4d 4f 44 45 4d 00 00 00 00 00 00 00     OR XMODEM.......
     601:	00 00 00 c8 32 30 30 3a 55 4e 4b 4e 4f 57 4e 20     ....200:UNKNOWN 
     611:	43 4f 4d 4d 41 4e 44 00 00 00 00 00 00 00 00 00     COMMAND.........
     621:	00 00 00 00 c9 32 30 31 3a 49 4e 56 41 4c 49 44     .....201:INVALID
     631:	20 43 4f 4d 4d 41 4e 44 20 55 53 41 47 45 00 00      COMMAND USAGE..
     641:	00 00 00 00 00 ca 32 30 32 3a 49 4e 56 41 4c 49     ......202:INVALI
     651:	44 20 50 41 52 41 4d 45 54 45 52 00 00 00 00 00     D PARAMETER.....
     661:	00 00 00 00 00 00 00                                .......

00000668 <__ctors_end>:
     668:	11 24       	eor	r1, r1
     66a:	1f be       	out	0x3f, r1	; 63
     66c:	cf ef       	ldi	r28, 0xFF	; 255
     66e:	df e2       	ldi	r29, 0x2F	; 47
     670:	de bf       	out	0x3e, r29	; 62
     672:	cd bf       	out	0x3d, r28	; 61

00000674 <__do_copy_data>:
     674:	10 e2       	ldi	r17, 0x20	; 32
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b0 e2       	ldi	r27, 0x20	; 32
     67a:	ee eb       	ldi	r30, 0xBE	; 190
     67c:	f2 e5       	ldi	r31, 0x52	; 82
     67e:	02 c0       	rjmp	.+4      	; 0x684 <__do_copy_data+0x10>
     680:	05 90       	lpm	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	a2 3a       	cpi	r26, 0xA2	; 162
     686:	b1 07       	cpc	r27, r17
     688:	d9 f7       	brne	.-10     	; 0x680 <__do_copy_data+0xc>

0000068a <__do_clear_bss>:
     68a:	16 e2       	ldi	r17, 0x26	; 38
     68c:	a2 ea       	ldi	r26, 0xA2	; 162
     68e:	b0 e2       	ldi	r27, 0x20	; 32
     690:	01 c0       	rjmp	.+2      	; 0x694 <.do_clear_bss_start>

00000692 <.do_clear_bss_loop>:
     692:	1d 92       	st	X+, r1

00000694 <.do_clear_bss_start>:
     694:	ad 3a       	cpi	r26, 0xAD	; 173
     696:	b1 07       	cpc	r27, r17
     698:	e1 f7       	brne	.-8      	; 0x692 <.do_clear_bss_loop>
     69a:	03 d0       	rcall	.+6      	; 0x6a2 <main>
     69c:	0c 94 5d 29 	jmp	0x52ba	; 0x52ba <_exit>

000006a0 <__bad_interrupt>:
     6a0:	6f c0       	rjmp	.+222    	; 0x780 <__vector_default>

000006a2 <main>:

#include "Chameleon-Mini.h"

int main(void)
{
    SystemInit();
     6a2:	74 d0       	rcall	.+232    	; 0x78c <SystemInit>
     6a4:	f2 d6       	rcall	.+3556   	; 0x148a <SettingsLoad>
    SettingsLoad();
     6a6:	80 e3       	ldi	r24, 0x30	; 48
     6a8:	e0 e0       	ldi	r30, 0x00	; 0

extern uint8_t LEDPulseMask;

static inline
void LEDInit(void) {
    LED_PORT.DIRSET = LED_MASK;
     6aa:	f6 e0       	ldi	r31, 0x06	; 6
     6ac:	81 83       	std	Z+1, r24	; 0x01
     6ae:	4e d2       	rcall	.+1180   	; 0xb4c <MemoryInit>
     6b0:	16 d1       	rcall	.+556    	; 0x8de <ConfigurationInit>
    LEDInit();
    MemoryInit();
     6b2:	b3 d7       	rcall	.+3942   	; 0x161a <TerminalInit>
     6b4:	9c d1       	rcall	.+824    	; 0x9ee <RandomInit>
    ConfigurationInit();
     6b6:	73 d5       	rcall	.+2790   	; 0x119e <ButtonInit>
     6b8:	e0 e0       	ldi	r30, 0x00	; 0
    TerminalInit();
     6ba:	f2 e0       	ldi	r31, 0x02	; 2
     6bc:	81 e0       	ldi	r24, 0x01	; 1
    RandomInit();
     6be:	80 93 00 02 	sts	0x0200, r24
    ButtonInit();
     6c2:	11 82       	std	Z+1, r1	; 0x01
     6c4:	92 e0       	ldi	r25, 0x02	; 2
#define ANTENNA_LEVEL_DENOMINATOR (ANTENNA_LEVEL_SCALE)

static inline
void AntennaLevelInit(void)
{
	ADCA.CTRLA = ADC_ENABLE_bm;
     6c6:	92 83       	std	Z+2, r25	; 0x02
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	94 83       	std	Z+4, r25	; 0x04
     6cc:	80 a3       	lds	r24, 0x50
     6ce:	88 e3       	ldi	r24, 0x38	; 56
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc;
     6d0:	81 a3       	lds	r24, 0x51
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc | ADC_BANDGAP_bm;
     6d2:	cc d0       	rcall	.+408    	; 0x86c <SystemInterruptInit>
     6d4:	c0 e0       	ldi	r28, 0x00	; 0
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
     6d6:	da e0       	ldi	r29, 0x0A	; 10
     6d8:	ff 24       	eor	r15, r15
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     6da:	f3 94       	inc	r15
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;
     6dc:	00 e0       	ldi	r16, 0x00	; 0
     6de:	16 e0       	ldi	r17, 0x06	; 6
    AntennaLevelInit();

    SystemInterruptInit();
     6e0:	a1 d7       	rcall	.+3906   	; 0x1624 <TerminalTask>
     6e2:	e0 91 fb 20 	lds	r30, 0x20FB
    return RTC.CNT;
}

INLINE bool SystemTick100ms(void)
{
    if (TCE0.INTFLAGS & TC0_OVFIF_bm) {
     6e6:	f0 91 fc 20 	lds	r31, 0x20FC
        TCE0.INTFLAGS = TC0_OVFIF_bm;
     6ea:	09 95       	icall
	LED_PORT.OUTSET = Mask;
}

static inline
void LEDTick(void) {
	LED_PORT.OUTCLR = LEDPulseMask;
     6ec:	e0 91 01 21 	lds	r30, 0x2101

    while(1) {
        TerminalTask();
     6f0:	f0 91 02 21 	lds	r31, 0x2102
INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
}

INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
     6f4:	09 95       	icall
     6f6:	80 91 0c 0a 	lds	r24, 0x0A0C
     6fa:	80 ff       	sbrs	r24, 0
     6fc:	f1 cf       	rjmp	.-30     	; 0x6e0 <main+0x3e>
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
}

INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
     6fe:	fc 86       	std	Y+12, r15	; 0x0c
     700:	91 d1       	rcall	.+802    	; 0xa24 <RandomTick>
     702:	b1 d7       	rcall	.+3938   	; 0x1666 <TerminalTick>
     704:	53 d5       	rcall	.+2726   	; 0x11ac <ButtonTick>
     706:	80 91 a3 20 	lds	r24, 0x20A3
    return RTC.CNT;
}

INLINE bool SystemTick100ms(void)
{
    if (TCE0.INTFLAGS & TC0_OVFIF_bm) {
     70a:	f8 01       	movw	r30, r16
     70c:	86 83       	std	Z+6, r24	; 0x06
     70e:	10 92 a3 20 	sts	0x20A3, r1
        CodecTask();
        ApplicationTask();

        if (SystemTick100ms()) {
            RandomTick();
     712:	e6 cf       	rjmp	.-52     	; 0x6e0 <main+0x3e>

00000714 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     714:	92 30       	cpi	r25, 0x02	; 2
     716:	f9 f0       	breq	.+62     	; 0x756 <CALLBACK_USB_GetDescriptor+0x42>
     718:	93 30       	cpi	r25, 0x03	; 3
     71a:	a1 f0       	breq	.+40     	; 0x744 <CALLBACK_USB_GetDescriptor+0x30>
     71c:	91 30       	cpi	r25, 0x01	; 1
     71e:	49 f0       	breq	.+18     	; 0x732 <CALLBACK_USB_GetDescriptor+0x1e>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     724:	e0 e0       	ldi	r30, 0x00	; 0
     726:	f0 e0       	ldi	r31, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
     728:	da 01       	movw	r26, r20
     72a:	ed 93       	st	X+, r30
     72c:	fc 93       	st	X, r31
     72e:	11 97       	sbiw	r26, 0x01	; 1
    return Size;
}
     730:	08 95       	ret

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     732:	82 e1       	ldi	r24, 0x12	; 18
     734:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     736:	e6 e7       	ldi	r30, 0x76	; 118
     738:	f2 e0       	ldi	r31, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     73a:	da 01       	movw	r26, r20
     73c:	ed 93       	st	X+, r30
     73e:	fc 93       	st	X, r31
     740:	11 97       	sbiw	r26, 0x01	; 1
    return Size;
}
     742:	08 95       	ret
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	81 f0       	breq	.+32     	; 0x768 <CALLBACK_USB_GetDescriptor+0x54>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	98 f4       	brcc	.+38     	; 0x772 <CALLBACK_USB_GetDescriptor+0x5e>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     74c:	e4 e3       	ldi	r30, 0x34	; 52
     74e:	f2 e0       	ldi	r31, 0x02	; 2
     750:	84 91       	lpm	r24, Z
     752:	90 e0       	ldi	r25, 0x00	; 0
                    break;
     754:	e9 cf       	rjmp	.-46     	; 0x728 <CALLBACK_USB_GetDescriptor+0x14>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     756:	8e e3       	ldi	r24, 0x3E	; 62
     758:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     75a:	e8 e3       	ldi	r30, 0x38	; 56
     75c:	f2 e0       	ldi	r31, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     75e:	da 01       	movw	r26, r20
     760:	ed 93       	st	X+, r30
     762:	fc 93       	st	X, r31
     764:	11 97       	sbiw	r26, 0x01	; 1
    return Size;
}
     766:	08 95       	ret
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     768:	ea e1       	ldi	r30, 0x1A	; 26
     76a:	f2 e0       	ldi	r31, 0x02	; 2
     76c:	84 91       	lpm	r24, Z
     76e:	90 e0       	ldi	r25, 0x00	; 0
                    break;
     770:	db cf       	rjmp	.-74     	; 0x728 <CALLBACK_USB_GetDescriptor+0x14>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	a9 f6       	brne	.-86     	; 0x720 <CALLBACK_USB_GetDescriptor+0xc>
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     776:	ec ef       	ldi	r30, 0xFC	; 252
     778:	f1 e0       	ldi	r31, 0x01	; 1
     77a:	84 91       	lpm	r24, Z
     77c:	90 e0       	ldi	r25, 0x00	; 0
                    break;
     77e:	d4 cf       	rjmp	.-88     	; 0x728 <CALLBACK_USB_GetDescriptor+0x14>

00000780 <__vector_default>:

#include "System.h"
#include "LED.h"

ISR(BADISR_vect)
{
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	ff cf       	rjmp	.-2      	; 0x78a <__vector_default+0xa>

0000078c <SystemInit>:
    while(1);
}

void SystemInit(void)
{
    if (RST.STATUS & RST_WDRF_bm) {
     78c:	80 91 78 00 	lds	r24, 0x0078
     790:	83 ff       	sbrs	r24, 3
     792:	0a c0       	rjmp	.+20     	; 0x7a8 <SystemInit+0x1c>
        /* On Watchdog reset clear WDRF bit, disable watchdog
        * and jump into bootloader */
        RST.STATUS = RST_WDRF_bm;
     794:	88 e0       	ldi	r24, 0x08	; 8
     796:	80 93 78 00 	sts	0x0078, r24

        CCP = CCP_IOREG_gc;
     79a:	88 ed       	ldi	r24, 0xD8	; 216
     79c:	84 bf       	out	0x34, r24	; 52
        WDT.CTRL = WDT_CEN_bm;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	80 93 80 00 	sts	0x0080, r24

        asm volatile ("jmp %0"::"i" (BOOT_SECTION_START + 0x1FC));
     7a4:	fd 95 fe c0 	jmp	0x7f81fc	; 0x7f81fc <__data_load_end+0x7f2e9c>
    }

    /* 32MHz system clock using internal RC and 32K DFLL*/
    OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;
     7a8:	80 91 50 00 	lds	r24, 0x0050
     7ac:	86 60       	ori	r24, 0x06	; 6
     7ae:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm))
     7b2:	80 91 51 00 	lds	r24, 0x0051
     7b6:	81 ff       	sbrs	r24, 1
     7b8:	fc cf       	rjmp	.-8      	; 0x7b2 <SystemInit+0x26>
        ;
    while(!(OSC.STATUS & OSC_RC32KRDY_bm))
     7ba:	80 91 51 00 	lds	r24, 0x0051
     7be:	82 ff       	sbrs	r24, 2
     7c0:	fc cf       	rjmp	.-8      	; 0x7ba <SystemInit+0x2e>
        ;

    OSC.DFLLCTRL = OSC_RC32MCREF_RC32K_gc;
     7c2:	e0 e5       	ldi	r30, 0x50	; 80
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	16 82       	std	Z+6, r1	; 0x06
    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
     7c8:	21 e0       	ldi	r18, 0x01	; 1
     7ca:	20 93 60 00 	sts	0x0060, r18

    CCP = CCP_IOREG_gc;
     7ce:	88 ed       	ldi	r24, 0xD8	; 216
     7d0:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     7d2:	20 93 40 00 	sts	0x0040, r18

    /* Use TCE0 as system tick */
    TCE0.PER = F_CPU / 256 / SYSTEM_TICK_FREQ - 1;
     7d6:	83 ed       	ldi	r24, 0xD3	; 211
     7d8:	90 e3       	ldi	r25, 0x30	; 48
     7da:	e0 e0       	ldi	r30, 0x00	; 0
     7dc:	fa e0       	ldi	r31, 0x0A	; 10
     7de:	86 a3       	lds	r24, 0x56
     7e0:	97 a3       	lds	r25, 0x57
    TCE0.CTRLA = TC_CLKSEL_DIV256_gc;
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	80 93 00 0a 	sts	0x0A00, r24

    /* Enable RTC with roughly 1kHz clock */
    CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm;
     7e8:	e0 e4       	ldi	r30, 0x40	; 64
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	23 83       	std	Z+3, r18	; 0x03
    RTC.CTRL = RTC_PRESCALER_DIV1_gc;
     7ee:	20 93 00 04 	sts	0x0400, r18

    /* Enable EEPROM data memory mapping */
    NVM.CTRLB |= NVM_EEMAPEN_bm;
     7f2:	80 91 cc 01 	lds	r24, 0x01CC
     7f6:	88 60       	ori	r24, 0x08	; 8
     7f8:	e0 ec       	ldi	r30, 0xC0	; 192
     7fa:	f1 e0       	ldi	r31, 0x01	; 1
     7fc:	84 87       	std	Z+12, r24	; 0x0c
}
     7fe:	08 95       	ret

00000800 <SystemReset>:

void SystemReset(void)
{
    CCP = CCP_IOREG_gc;
     800:	88 ed       	ldi	r24, 0xD8	; 216
     802:	84 bf       	out	0x34, r24	; 52
    RST.CTRL = RST_SWRST_bm;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	e8 e7       	ldi	r30, 0x78	; 120
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	81 83       	std	Z+1, r24	; 0x01

}
     80c:	08 95       	ret

0000080e <SystemEnterBootloader>:

void SystemEnterBootloader(void)
{
    /* Use Watchdog timer to reset into bootloader. */
    CCP = CCP_IOREG_gc;
     80e:	88 ed       	ldi	r24, 0xD8	; 216
     810:	84 bf       	out	0x34, r24	; 52
    WDT.CTRL = WDT_PER_500CLK_gc | WDT_ENABLE_bm | WDT_CEN_bm;
     812:	8b e1       	ldi	r24, 0x1B	; 27
     814:	80 93 80 00 	sts	0x0080, r24
}
     818:	08 95       	ret

0000081a <SystemStartUSBClock>:


void SystemStartUSBClock(void)
{
    /* 48MHz USB Clock using 12MHz XTAL */
    OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     81a:	8b ec       	ldi	r24, 0xCB	; 203
     81c:	e0 e5       	ldi	r30, 0x50	; 80
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	82 83       	std	Z+2, r24	; 0x02
    OSC.CTRL |= OSC_XOSCEN_bm;
     822:	80 91 50 00 	lds	r24, 0x0050
     826:	88 60       	ori	r24, 0x08	; 8
     828:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_XOSCRDY_bm))
     82c:	80 91 51 00 	lds	r24, 0x0051
     830:	83 ff       	sbrs	r24, 3
     832:	fc cf       	rjmp	.-8      	; 0x82c <SystemStartUSBClock+0x12>
        ;

    OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (4 << OSC_PLLFAC_gp);
     834:	84 ec       	ldi	r24, 0xC4	; 196
     836:	e0 e5       	ldi	r30, 0x50	; 80
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	85 83       	std	Z+5, r24	; 0x05

    OSC.CTRL |= OSC_PLLEN_bm;
     83c:	80 91 50 00 	lds	r24, 0x0050
     840:	80 61       	ori	r24, 0x10	; 16
     842:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_PLLRDY_bm))
     846:	80 91 51 00 	lds	r24, 0x0051
     84a:	84 ff       	sbrs	r24, 4
     84c:	fc cf       	rjmp	.-8      	; 0x846 <SystemStartUSBClock+0x2c>
        ;
}
     84e:	08 95       	ret

00000850 <SystemStopUSBClock>:

void SystemStopUSBClock(void)
{
    /* Disable USB Clock to minimize power consumption */
    CLK.USBCTRL &= ~CLK_USBSEN_bm;
     850:	e0 e4       	ldi	r30, 0x40	; 64
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	84 81       	ldd	r24, Z+4	; 0x04
     856:	8e 7f       	andi	r24, 0xFE	; 254
     858:	84 83       	std	Z+4, r24	; 0x04
    OSC.CTRL &= ~OSC_PLLEN_bm;
     85a:	e0 e5       	ldi	r30, 0x50	; 80
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	8f 7e       	andi	r24, 0xEF	; 239
     862:	80 83       	st	Z, r24
    OSC.CTRL &= ~OSC_XOSCEN_bm;
     864:	80 81       	ld	r24, Z
     866:	87 7f       	andi	r24, 0xF7	; 247
     868:	80 83       	st	Z, r24
}
     86a:	08 95       	ret

0000086c <SystemInterruptInit>:

void SystemInterruptInit(void)
{
    /* Enable all interrupt levels */
    PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     86c:	87 e0       	ldi	r24, 0x07	; 7
     86e:	e0 ea       	ldi	r30, 0xA0	; 160
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	82 83       	std	Z+2, r24	; 0x02
    sei();
     874:	78 94       	sei
}
     876:	08 95       	ret

00000878 <CodecInitDummy>:

/* Include all Codecs and Applications */
#include "Codec/Codec.h"
#include "Application/Application.h"

static void CodecInitDummy(void) { }
     878:	08 95       	ret

0000087a <CodecTaskDummy>:
static void CodecTaskDummy(void) { }
     87a:	08 95       	ret

0000087c <ApplicationInitDummy>:
static void ApplicationInitDummy(void) {}
     87c:	08 95       	ret

0000087e <ApplicationResetDummy>:
static void ApplicationResetDummy(void) {}
     87e:	08 95       	ret

00000880 <ApplicationTaskDummy>:
static void ApplicationTaskDummy(void) {}
     880:	08 95       	ret

00000882 <ApplicationProcessDummy>:
static uint16_t ApplicationProcessDummy(uint8_t* ByteBuffer, uint16_t ByteCount) { return 0; }
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	08 95       	ret

00000888 <ApplicationGetUidDummy>:
static void ApplicationGetUidDummy(ConfigurationUidType Uid) { }
     888:	08 95       	ret

0000088a <ApplicationSetUidDummy>:
static void ApplicationSetUidDummy(ConfigurationUidType Uid) { }
     88a:	08 95       	ret

0000088c <ConfigurationSetById>:
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
}

void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;
     88c:	e0 91 0e 21 	lds	r30, 0x210E
     890:	f0 91 0f 21 	lds	r31, 0x210F
     894:	81 83       	std	Z+1, r24	; 0x01

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	9c 01       	movw	r18, r24
     89a:	22 0f       	add	r18, r18
     89c:	33 1f       	adc	r19, r19
     89e:	22 0f       	add	r18, r18
     8a0:	33 1f       	adc	r19, r19
     8a2:	b9 01       	movw	r22, r18
     8a4:	66 0f       	add	r22, r22
     8a6:	77 1f       	adc	r23, r23
     8a8:	66 0f       	add	r22, r22
     8aa:	77 1f       	adc	r23, r23
     8ac:	66 0f       	add	r22, r22
     8ae:	77 1f       	adc	r23, r23
     8b0:	62 0f       	add	r22, r18
     8b2:	73 1f       	adc	r23, r19
     8b4:	68 0f       	add	r22, r24
     8b6:	79 1f       	adc	r23, r25
     8b8:	68 57       	subi	r22, 0x78	; 120
     8ba:	7d 4f       	sbci	r23, 0xFD	; 253
     8bc:	88 ee       	ldi	r24, 0xE8	; 232
     8be:	90 e2       	ldi	r25, 0x20	; 32
     8c0:	45 e2       	ldi	r20, 0x25	; 37
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	0e 94 f2 25 	call	0x4be4	; 0x4be4 <memcpy_P>
/* Applications */
#include "MifareClassic.h"

/* Function wrappers */
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
     8c8:	e0 91 fd 20 	lds	r30, 0x20FD
     8cc:	f0 91 fe 20 	lds	r31, 0x20FE
     8d0:	09 95       	icall
#define CODEC_CARRIER_FREQ          13560000

extern uint8_t CodecBuffer[CODEC_BUFFER_SIZE];

INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
     8d2:	e0 91 f9 20 	lds	r30, 0x20F9
     8d6:	f0 91 fa 20 	lds	r31, 0x20FA
     8da:	09 95       	icall
            &ConfigurationTable[Configuration], sizeof(ConfigurationType));


    ApplicationInit();
    CodecInit();
}
     8dc:	08 95       	ret

000008de <ConfigurationInit>:

ConfigurationType ActiveConfiguration;

void ConfigurationInit(void)
{
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
     8de:	e0 91 0e 21 	lds	r30, 0x210E
     8e2:	f0 91 0f 21 	lds	r31, 0x210F
     8e6:	81 81       	ldd	r24, Z+1	; 0x01
     8e8:	d1 cf       	rjmp	.-94     	; 0x88c <ConfigurationSetById>

000008ea <ConfigurationSetByName>:
     8ea:	0f 93       	push	r16
}
     8ec:	1f 93       	push	r17
    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ac 01       	movw	r20, r24
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0

    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
     8f8:	8c 01       	movw	r16, r24
     8fa:	0f 5f       	subi	r16, 0xFF	; 255
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
            ConfigurationSetById(i);
            return true;
        }
    }

    return false;
     8fe:	62 2f       	mov	r22, r18
{
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
     900:	c9 01       	movw	r24, r18
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	fc 01       	movw	r30, r24
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	e8 0f       	add	r30, r24
     91a:	f9 1f       	adc	r31, r25
     91c:	e2 0f       	add	r30, r18
     91e:	f3 1f       	adc	r31, r19
     920:	e7 57       	subi	r30, 0x77	; 119
     922:	fd 4f       	sbci	r31, 0xFD	; 253
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);
     924:	84 91       	lpm	r24, Z

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     926:	da 01       	movw	r26, r20
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     928:	88 23       	and	r24, r24
     92a:	59 f0       	breq	.+22     	; 0x942 <ConfigurationSetByName+0x58>
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     92c:	9c 91       	ld	r25, X
     92e:	99 23       	and	r25, r25
     930:	59 f0       	breq	.+22     	; 0x948 <ConfigurationSetByName+0x5e>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     932:	98 17       	cp	r25, r24
     934:	49 f4       	brne	.+18     	; 0x948 <ConfigurationSetByName+0x5e>

    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
     936:	e8 01       	movw	r28, r16
                StringMismatch = true;
                break;
            }

            /* Proceed to next character */
            pTableConfigName++;
     938:	31 96       	adiw	r30, 0x01	; 1
            pRequestedConfigName++;
     93a:	11 96       	adiw	r26, 0x01	; 1

            c = pgm_read_byte(pTableConfigName);
     93c:	84 91       	lpm	r24, Z
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     93e:	88 23       	and	r24, r24
     940:	71 f4       	brne	.+28     	; 0x95e <ConfigurationSetByName+0x74>
     942:	8c 91       	ld	r24, X
     944:	88 23       	and	r24, r24
     946:	89 f0       	breq	.+34     	; 0x96a <ConfigurationSetByName+0x80>
     948:	2f 5f       	subi	r18, 0xFF	; 255
     94a:	3f 4f       	sbci	r19, 0xFF	; 255
bool ConfigurationSetByName(const char* ConfigurationName)
{
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
     94c:	23 30       	cpi	r18, 0x03	; 3
     94e:	31 05       	cpc	r19, r1
     950:	b1 f6       	brne	.-84     	; 0x8fe <ConfigurationSetByName+0x14>
            ConfigurationSetById(i);
            return true;
        }
    }

    return false;
     952:	80 e0       	ldi	r24, 0x00	; 0
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     95e:	99 91       	ld	r25, Y+
     960:	99 23       	and	r25, r25
     962:	91 f3       	breq	.-28     	; 0x948 <ConfigurationSetByName+0x5e>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     964:	98 17       	cp	r25, r24
     966:	41 f3       	breq	.-48     	; 0x938 <ConfigurationSetByName+0x4e>
     968:	ef cf       	rjmp	.-34     	; 0x948 <ConfigurationSetByName+0x5e>
            c = pgm_read_byte(pTableConfigName);
        }

        if (!StringMismatch) {
            /* Configuration found */
            ConfigurationSetById(i);
     96a:	86 2f       	mov	r24, r22
     96c:	8f df       	rcall	.-226    	; 0x88c <ConfigurationSetById>
     96e:	81 e0       	ldi	r24, 0x01	; 1
            return true;
     970:	df 91       	pop	r29
        }
    }

    return false;
}
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	08 95       	ret

0000097a <ConfigurationGetList>:
     97a:	cf 93       	push	r28

void ConfigurationGetList(char* ConfigListOut, uint16_t ByteCount)
{
     97c:	df 93       	push	r29
     97e:	ec 01       	movw	r28, r24
    uint8_t i;

    /* Account for '\0' */
    ByteCount--;
     980:	61 50       	subi	r22, 0x01	; 1
     982:	70 40       	sbci	r23, 0x00	; 0
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     988:	4c e2       	ldi	r20, 0x2C	; 44

    /* Account for '\0' */
    ByteCount--;

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
     98a:	c9 01       	movw	r24, r18
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	fc 01       	movw	r30, r24
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	e8 0f       	add	r30, r24
     9a4:	f9 1f       	adc	r31, r25
     9a6:	e2 0f       	add	r30, r18
     9a8:	f3 1f       	adc	r31, r19
     9aa:	e7 57       	subi	r30, 0x77	; 119
     9ac:	fd 4f       	sbci	r31, 0xFD	; 253
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     9ae:	84 91       	lpm	r24, Z
     9b0:	88 23       	and	r24, r24
     9b2:	81 f0       	breq	.+32     	; 0x9d4 <ConfigurationGetList+0x5a>
     9b4:	61 31       	cpi	r22, 0x11	; 17
     9b6:	71 05       	cpc	r23, r1
     9b8:	68 f0       	brcs	.+26     	; 0x9d4 <ConfigurationGetList+0x5a>
     9ba:	de 01       	movw	r26, r28
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <ConfigurationGetList+0x4a>
     9be:	60 31       	cpi	r22, 0x10	; 16
     9c0:	71 05       	cpc	r23, r1
     9c2:	41 f0       	breq	.+16     	; 0x9d4 <ConfigurationGetList+0x5a>
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ConfigListOut++ = c;
     9c4:	8d 93       	st	X+, r24
     9c6:	ed 01       	movw	r28, r26
            ConfigName++;
     9c8:	31 96       	adiw	r30, 0x01	; 1
            ByteCount--;
     9ca:	61 50       	subi	r22, 0x01	; 1
     9cc:	70 40       	sbci	r23, 0x00	; 0

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     9ce:	84 91       	lpm	r24, Z
     9d0:	88 23       	and	r24, r24
     9d2:	a9 f7       	brne	.-22     	; 0x9be <ConfigurationGetList+0x44>
            *ConfigListOut++ = c;
            ConfigName++;
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
     9d4:	22 30       	cpi	r18, 0x02	; 2
     9d6:	31 05       	cpc	r19, r1
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <ConfigurationGetList+0x68>
            *ConfigListOut++ = ',';
            ByteCount--;
        }
    }

    *ConfigListOut = '\0';
     9da:	18 82       	st	Y, r1
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     9e2:	49 93       	st	Y+, r20
            ByteCount--;
     9e4:	61 50       	subi	r22, 0x01	; 1
     9e6:	70 40       	sbci	r23, 0x00	; 0
     9e8:	2f 5f       	subi	r18, 0xFF	; 255
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	ce cf       	rjmp	.-100    	; 0x98a <ConfigurationGetList+0x10>

000009ee <RandomInit>:
#include <stdlib.h>

void RandomInit(void)
{

}
     9ee:	08 95       	ret

000009f0 <RandomGetByte>:

uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
     9f0:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <rand>
}
     9f4:	08 95       	ret

000009f6 <RandomGetBuffer>:

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     9fe:	66 23       	and	r22, r22
     a00:	61 f0       	breq	.+24     	; 0xa1a <RandomGetBuffer+0x24>
uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
}

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
     a02:	8c 01       	movw	r16, r24
     a04:	0f 5f       	subi	r16, 0xFF	; 255
     a06:	1f 4f       	sbci	r17, 0xFF	; 255
{
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     a08:	61 50       	subi	r22, 0x01	; 1
uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
}

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
     a0a:	06 0f       	add	r16, r22
     a0c:	11 1d       	adc	r17, r1
{
    uint8_t* BufferPtr = (uint8_t*) Buffer;
     a0e:	ec 01       	movw	r28, r24

    while(ByteCount--) {
        *BufferPtr++ = RandomGetByte();
     a10:	ef df       	rcall	.-34     	; 0x9f0 <RandomGetByte>
     a12:	89 93       	st	Y+, r24
     a14:	c0 17       	cp	r28, r16

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     a16:	d1 07       	cpc	r29, r17
     a18:	d9 f7       	brne	.-10     	; 0xa10 <RandomGetBuffer+0x1a>
     a1a:	df 91       	pop	r29
        *BufferPtr++ = RandomGetByte();
    }
}
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	08 95       	ret

00000a24 <RandomTick>:
     a24:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <rand>

void RandomTick(void)
{
    rand();
    rand();
     a28:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <rand>
    rand();
     a2c:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <rand>
    rand();
     a30:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <rand>

00000a34 <BufferToHexString>:
 */

#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	fc 01       	movw	r30, r24
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a3a:	21 15       	cp	r18, r1
     a3c:	31 05       	cpc	r19, r1
     a3e:	81 f1       	breq	.+96     	; 0xaa0 <BufferToHexString+0x6c>
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;
     a40:	61 50       	subi	r22, 0x01	; 1
     a42:	70 40       	sbci	r23, 0x00	; 0

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a44:	62 30       	cpi	r22, 0x02	; 2
     a46:	71 05       	cpc	r23, r1
     a48:	58 f1       	brcs	.+86     	; 0xaa0 <BufferToHexString+0x6c>
     a4a:	da 01       	movw	r26, r20
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	18 c0       	rjmp	.+48     	; 0xa82 <BufferToHexString+0x4e>
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
        uint8_t Byte = *ByteBuffer;

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     a52:	d0 5d       	subi	r29, 0xD0	; 208
     a54:	d0 83       	st	Z, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     a56:	8c 2f       	mov	r24, r28
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	8f 70       	andi	r24, 0x0F	; 15
     a5c:	90 70       	andi	r25, 0x00	; 0
     a5e:	8a 30       	cpi	r24, 0x0A	; 10
     a60:	91 05       	cpc	r25, r1
     a62:	d4 f4       	brge	.+52     	; 0xa98 <BufferToHexString+0x64>
     a64:	8c 2f       	mov	r24, r28
     a66:	8f 70       	andi	r24, 0x0F	; 15
     a68:	80 5d       	subi	r24, 0xD0	; 208
     a6a:	81 83       	std	Z+1, r24	; 0x01

        HexOut += 2;
     a6c:	32 96       	adiw	r30, 0x02	; 2
        MaxChars -= 2;
        CharCount += 2;
     a6e:	4e 5f       	subi	r20, 0xFE	; 254
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
        ByteBuffer++;
        ByteCount -= 1;
     a72:	21 50       	subi	r18, 0x01	; 1
     a74:	30 40       	sbci	r19, 0x00	; 0
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a76:	b1 f0       	breq	.+44     	; 0xaa4 <BufferToHexString+0x70>

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );

        HexOut += 2;
        MaxChars -= 2;
     a78:	62 50       	subi	r22, 0x02	; 2
     a7a:	70 40       	sbci	r23, 0x00	; 0
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a7c:	62 30       	cpi	r22, 0x02	; 2
     a7e:	71 05       	cpc	r23, r1
     a80:	88 f0       	brcs	.+34     	; 0xaa4 <BufferToHexString+0x70>
        uint8_t Byte = *ByteBuffer;
     a82:	cd 91       	ld	r28, X+

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     a84:	dc 2f       	mov	r29, r28
     a86:	d2 95       	swap	r29
     a88:	df 70       	andi	r29, 0x0F	; 15
     a8a:	8d 2f       	mov	r24, r29
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	8a 30       	cpi	r24, 0x0A	; 10
     a90:	91 05       	cpc	r25, r1
     a92:	fc f2       	brlt	.-66     	; 0xa52 <BufferToHexString+0x1e>
     a94:	d9 5c       	subi	r29, 0xC9	; 201
     a96:	de cf       	rjmp	.-68     	; 0xa54 <BufferToHexString+0x20>
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     a98:	8c 2f       	mov	r24, r28
     a9a:	8f 70       	andi	r24, 0x0F	; 15
     a9c:	89 5c       	subi	r24, 0xC9	; 201
     a9e:	e5 cf       	rjmp	.-54     	; 0xa6a <BufferToHexString+0x36>
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
        CharCount += 2;
        ByteBuffer++;
        ByteCount -= 1;
    }

    *HexOut = '\0';
     aa4:	10 82       	st	Z, r1

    return CharCount;
}
     aa6:	ca 01       	movw	r24, r20
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <HexStringToBuffer>:

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	da 01       	movw	r26, r20
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     ab4:	2c 91       	ld	r18, X
     ab6:	22 23       	and	r18, r18
     ab8:	09 f4       	brne	.+2      	; 0xabc <HexStringToBuffer+0xe>
     aba:	43 c0       	rjmp	.+134    	; 0xb42 <HexStringToBuffer+0x94>
     abc:	11 96       	adiw	r26, 0x01	; 1
     abe:	3c 91       	ld	r19, X
     ac0:	11 97       	sbiw	r26, 0x01	; 1
     ac2:	33 23       	and	r19, r19
     ac4:	f1 f1       	breq	.+124    	; 0xb42 <HexStringToBuffer+0x94>
     ac6:	61 15       	cp	r22, r1
     ac8:	71 05       	cpc	r23, r1
     aca:	d9 f1       	breq	.+118    	; 0xb42 <HexStringToBuffer+0x94>
    *HexOut = '\0';

    return CharCount;
}

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
     acc:	13 96       	adiw	r26, 0x03	; 3
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
     ace:	ec 01       	movw	r28, r24
    uint16_t ByteCount = 0;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	14 c0       	rjmp	.+40     	; 0xafe <HexStringToBuffer+0x50>

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     ad6:	22 95       	swap	r18
     ad8:	20 7f       	andi	r18, 0xF0	; 240
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     ada:	31 34       	cpi	r19, 0x41	; 65
     adc:	30 f5       	brcc	.+76     	; 0xb2a <HexStringToBuffer+0x7c>
     ade:	34 2f       	mov	r19, r20
     ae0:	23 2b       	or	r18, r19

            *ByteBuffer = Byte;
     ae2:	29 93       	st	Y+, r18

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     ae4:	01 96       	adiw	r24, 0x01	; 1
    *HexOut = '\0';

    return CharCount;
}

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
     ae6:	fd 01       	movw	r30, r26
     ae8:	31 97       	sbiw	r30, 0x01	; 1
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     aea:	20 81       	ld	r18, Z
     aec:	22 23       	and	r18, r18
     aee:	31 f1       	breq	.+76     	; 0xb3c <HexStringToBuffer+0x8e>
     af0:	3c 91       	ld	r19, X
     af2:	33 23       	and	r19, r19
     af4:	31 f1       	breq	.+76     	; 0xb42 <HexStringToBuffer+0x94>
     af6:	12 96       	adiw	r26, 0x02	; 2
     af8:	68 17       	cp	r22, r24
     afa:	79 07       	cpc	r23, r25
     afc:	f9 f0       	breq	.+62     	; 0xb3c <HexStringToBuffer+0x8e>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
     afe:	42 2f       	mov	r20, r18
     b00:	40 53       	subi	r20, 0x30	; 48
     b02:	4a 30       	cpi	r20, 0x0A	; 10
     b04:	18 f0       	brcs	.+6      	; 0xb0c <HexStringToBuffer+0x5e>
     b06:	41 51       	subi	r20, 0x11	; 17
     b08:	46 30       	cpi	r20, 0x06	; 6
     b0a:	d8 f4       	brcc	.+54     	; 0xb42 <HexStringToBuffer+0x94>
     b0c:	43 2f       	mov	r20, r19
     b0e:	40 53       	subi	r20, 0x30	; 48
     b10:	4a 30       	cpi	r20, 0x0A	; 10
     b12:	20 f0       	brcs	.+8      	; 0xb1c <HexStringToBuffer+0x6e>
     b14:	53 2f       	mov	r21, r19
     b16:	51 54       	subi	r21, 0x41	; 65
     b18:	56 30       	cpi	r21, 0x06	; 6
     b1a:	98 f4       	brcc	.+38     	; 0xb42 <HexStringToBuffer+0x94>
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     b1c:	21 34       	cpi	r18, 0x41	; 65
     b1e:	d8 f2       	brcs	.-74     	; 0xad6 <HexStringToBuffer+0x28>
     b20:	22 95       	swap	r18
     b22:	20 7f       	andi	r18, 0xF0	; 240
     b24:	20 57       	subi	r18, 0x70	; 112
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     b26:	31 34       	cpi	r19, 0x41	; 65
     b28:	d0 f2       	brcs	.-76     	; 0xade <HexStringToBuffer+0x30>
     b2a:	37 53       	subi	r19, 0x37	; 55
     b2c:	23 2b       	or	r18, r19

            *ByteBuffer = Byte;
     b2e:	29 93       	st	Y+, r18

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     b30:	01 96       	adiw	r24, 0x01	; 1
    *HexOut = '\0';

    return CharCount;
}

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
     b32:	fd 01       	movw	r30, r26
     b34:	31 97       	sbiw	r30, 0x01	; 1
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     b36:	20 81       	ld	r18, Z
     b38:	22 23       	and	r18, r18
     b3a:	d1 f6       	brne	.-76     	; 0xaf0 <HexStringToBuffer+0x42>
        /* Odd number of characters */
        return 0;
    }

    return ByteCount;
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret
        }
    }

    if ( (HexIn[0] != '\0') && (HexIn[1] == '\0') ) {
        /* Odd number of characters */
        return 0;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
    }

    return ByteCount;
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <MemoryInit>:
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

void MemoryInit(void)
{
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	00 d0       	rcall	.+0      	; 0xb52 <MemoryInit+0x6>
     b52:	00 d0       	rcall	.+0      	; 0xb54 <MemoryInit+0x8>
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
	/* Configure MEMORY_FLASH_USART for SPI master mode 0 with maximum clock frequency */
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     b58:	a0 e6       	ldi	r26, 0x60	; 96
     b5a:	b6 e0       	ldi	r27, 0x06	; 6
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	15 96       	adiw	r26, 0x05	; 5
     b60:	8c 93       	st	X, r24
     b62:	15 97       	sbiw	r26, 0x05	; 5
	MEMORY_FLASH_PORT.DIRSET = MEMORY_FLASH_SCK | MEMORY_FLASH_MOSI | MEMORY_FLASH_CS;
     b64:	9a e1       	ldi	r25, 0x1A	; 26
     b66:	11 96       	adiw	r26, 0x01	; 1
     b68:	9c 93       	st	X, r25
     b6a:	11 97       	sbiw	r26, 0x01	; 1

    MEMORY_FLASH_USART.BAUDCTRLA = 0;
     b6c:	e0 ea       	ldi	r30, 0xA0	; 160
     b6e:	f9 e0       	ldi	r31, 0x09	; 9
     b70:	16 82       	std	Z+6, r1	; 0x06
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
     b72:	17 82       	std	Z+7, r1	; 0x07
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc | USART_CHSIZE_8BIT_gc;
     b74:	93 ec       	ldi	r25, 0xC3	; 195
     b76:	95 83       	std	Z+5, r25	; 0x05
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     b78:	98 e1       	ldi	r25, 0x18	; 24
     b7a:	94 83       	std	Z+4, r25	; 0x04

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     b7c:	16 96       	adiw	r26, 0x06	; 6
     b7e:	8c 93       	st	X, r24
     b80:	16 97       	sbiw	r26, 0x06	; 6
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     b82:	87 ed       	ldi	r24, 0xD7	; 215
     b84:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     b88:	80 91 a1 09 	lds	r24, 0x09A1
     b8c:	86 ff       	sbrs	r24, 6
     b8e:	fc cf       	rjmp	.-8      	; 0xb88 <MemoryInit+0x3c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     b90:	80 e4       	ldi	r24, 0x40	; 64
     b92:	e0 ea       	ldi	r30, 0xA0	; 160
     b94:	f9 e0       	ldi	r31, 0x09	; 9
     b96:	81 83       	std	Z+1, r24	; 0x01

	return MEMORY_FLASH_USART.DATA;
     b98:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     b9c:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ba0:	80 91 a1 09 	lds	r24, 0x09A1
     ba4:	86 ff       	sbrs	r24, 6
     ba6:	fc cf       	rjmp	.-8      	; 0xba0 <MemoryInit+0x54>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	e0 ea       	ldi	r30, 0xA0	; 160
     bac:	f9 e0       	ldi	r31, 0x09	; 9
     bae:	81 83       	std	Z+1, r24	; 0x01

	return MEMORY_FLASH_USART.DATA;
     bb0:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     bb4:	90 e1       	ldi	r25, 0x10	; 16
     bb6:	e0 e6       	ldi	r30, 0x60	; 96
     bb8:	f6 e0       	ldi	r31, 0x06	; 6
     bba:	95 83       	std	Z+5, r25	; 0x05
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc | USART_CHSIZE_8BIT_gc;
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;


	if ( !(FlashReadStatusRegister() & FLASH_STATUS_REG_PAGESIZE_BIT) ) {
     bbc:	80 fd       	sbrc	r24, 0
     bbe:	47 c0       	rjmp	.+142    	; 0xc4e <MemoryInit+0x102>
	return !(FlashReadStatusRegister() & FLASH_STATUS_REG_READY_BIT);
}

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};
     bc0:	8d e3       	ldi	r24, 0x3D	; 61
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	8a e2       	ldi	r24, 0x2A	; 42
     bc6:	8a 83       	std	Y+2, r24	; 0x02
     bc8:	80 e8       	ldi	r24, 0x80	; 128
     bca:	8b 83       	std	Y+3, r24	; 0x03
     bcc:	86 ea       	ldi	r24, 0xA6	; 166
     bce:	8c 83       	std	Y+4, r24	; 0x04

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     bd0:	a0 e6       	ldi	r26, 0x60	; 96
     bd2:	b6 e0       	ldi	r27, 0x06	; 6
     bd4:	20 e1       	ldi	r18, 0x10	; 16
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     bd6:	37 ed       	ldi	r19, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     bd8:	e0 ea       	ldi	r30, 0xA0	; 160
     bda:	f9 e0       	ldi	r31, 0x09	; 9

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     bdc:	90 e4       	ldi	r25, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     bde:	16 96       	adiw	r26, 0x06	; 6
     be0:	2c 93       	st	X, r18
     be2:	16 97       	sbiw	r26, 0x06	; 6
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     be4:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     be8:	80 91 a1 09 	lds	r24, 0x09A1
     bec:	86 ff       	sbrs	r24, 6
     bee:	fc cf       	rjmp	.-8      	; 0xbe8 <MemoryInit+0x9c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     bf0:	91 83       	std	Z+1, r25	; 0x01

	return MEMORY_FLASH_USART.DATA;
     bf2:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     bf6:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     bfa:	80 91 a1 09 	lds	r24, 0x09A1
     bfe:	86 ff       	sbrs	r24, 6
     c00:	fc cf       	rjmp	.-8      	; 0xbfa <MemoryInit+0xae>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c02:	91 83       	std	Z+1, r25	; 0x01

	return MEMORY_FLASH_USART.DATA;
     c04:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     c08:	15 96       	adiw	r26, 0x05	; 5
     c0a:	2c 93       	st	X, r18
     c0c:	15 97       	sbiw	r26, 0x05	; 5

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};

	while(FlashIsBusy());
     c0e:	87 ff       	sbrs	r24, 7
     c10:	e6 cf       	rjmp	.-52     	; 0xbde <MemoryInit+0x92>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	e0 e6       	ldi	r30, 0x60	; 96
     c16:	f6 e0       	ldi	r31, 0x06	; 6
     c18:	86 83       	std	Z+6, r24	; 0x06
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

void MemoryInit(void)
     c1a:	ce 01       	movw	r24, r28
     c1c:	05 96       	adiw	r24, 0x05	; 5
	}
}

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;
     c1e:	fe 01       	movw	r30, r28
     c20:	31 96       	adiw	r30, 0x01	; 1

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c22:	a0 ea       	ldi	r26, 0xA0	; 160
     c24:	b9 e0       	ldi	r27, 0x09	; 9
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c26:	30 e4       	ldi	r19, 0x40	; 64
INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     c28:	21 91       	ld	r18, Z+
     c2a:	20 93 a0 09 	sts	0x09A0, r18
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c2e:	20 91 a1 09 	lds	r18, 0x09A1
     c32:	26 ff       	sbrs	r18, 6
     c34:	fc cf       	rjmp	.-8      	; 0xc2e <MemoryInit+0xe2>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	3c 93       	st	X, r19
     c3a:	11 97       	sbiw	r26, 0x01	; 1
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
     c3c:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     c40:	e8 17       	cp	r30, r24
     c42:	f9 07       	cpc	r31, r25
     c44:	89 f7       	brne	.-30     	; 0xc28 <MemoryInit+0xdc>

	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPIWriteBlock(Sequence, sizeof(Sequence));
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     c46:	80 e1       	ldi	r24, 0x10	; 16
     c48:	e0 e6       	ldi	r30, 0x60	; 96
     c4a:	f6 e0       	ldi	r31, 0x06	; 6
     c4c:	85 83       	std	Z+5, r24	; 0x05

	if ( !(FlashReadStatusRegister() & FLASH_STATUS_REG_PAGESIZE_BIT) ) {
		/* Configure for 256 byte Dataflash if not already done. */
		FlashConfigurePageSize();
	}
}
     c4e:	24 96       	adiw	r28, 0x04	; 4
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <MemoryReadBlock>:

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
{
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	ec 01       	movw	r28, r24
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
     c64:	8b 01       	movw	r16, r22
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	80 91 0d 21 	lds	r24, 0x210D
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a0 e0       	ldi	r26, 0x00	; 0
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	dc 01       	movw	r26, r24
     c76:	99 27       	eor	r25, r25
     c78:	88 27       	eor	r24, r24
     c7a:	08 0f       	add	r16, r24
     c7c:	19 1f       	adc	r17, r25
     c7e:	2a 1f       	adc	r18, r26
     c80:	3b 1f       	adc	r19, r27

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c82:	a0 e6       	ldi	r26, 0x60	; 96
     c84:	b6 e0       	ldi	r27, 0x06	; 6
     c86:	60 e1       	ldi	r22, 0x10	; 16
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c88:	77 ed       	ldi	r23, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c8a:	e0 ea       	ldi	r30, 0xA0	; 160
     c8c:	f9 e0       	ldi	r31, 0x09	; 9

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c8e:	90 e4       	ldi	r25, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c90:	16 96       	adiw	r26, 0x06	; 6
     c92:	6c 93       	st	X, r22
     c94:	16 97       	sbiw	r26, 0x06	; 6
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c96:	70 93 a0 09 	sts	0x09A0, r23

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c9a:	80 91 a1 09 	lds	r24, 0x09A1
     c9e:	86 ff       	sbrs	r24, 6
     ca0:	fc cf       	rjmp	.-8      	; 0xc9a <MemoryReadBlock+0x40>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ca2:	91 83       	std	Z+1, r25	; 0x01

	return MEMORY_FLASH_USART.DATA;
     ca4:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ca8:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cac:	80 91 a1 09 	lds	r24, 0x09A1
     cb0:	86 ff       	sbrs	r24, 6
     cb2:	fc cf       	rjmp	.-8      	; 0xcac <MemoryReadBlock+0x52>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cb4:	91 83       	std	Z+1, r25	; 0x01

	return MEMORY_FLASH_USART.DATA;
     cb6:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     cba:	15 96       	adiw	r26, 0x05	; 5
     cbc:	6c 93       	st	X, r22
     cbe:	15 97       	sbiw	r26, 0x05	; 5
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashRead(void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     cc0:	87 ff       	sbrs	r24, 7
     cc2:	e6 cf       	rjmp	.-52     	; 0xc90 <MemoryReadBlock+0x36>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     cc4:	80 e1       	ldi	r24, 0x10	; 16
     cc6:	e0 e6       	ldi	r30, 0x60	; 96
     cc8:	f6 e0       	ldi	r31, 0x06	; 6
     cca:	86 83       	std	Z+6, r24	; 0x06
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cd2:	80 91 a1 09 	lds	r24, 0x09A1
     cd6:	86 ff       	sbrs	r24, 6
     cd8:	fc cf       	rjmp	.-8      	; 0xcd2 <MemoryReadBlock+0x78>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	e0 ea       	ldi	r30, 0xA0	; 160
     cde:	f9 e0       	ldi	r31, 0x09	; 9
     ce0:	81 83       	std	Z+1, r24	; 0x01

	return MEMORY_FLASH_USART.DATA;
     ce2:	80 91 a0 09 	lds	r24, 0x09A0
{
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
     ce6:	c9 01       	movw	r24, r18
     ce8:	aa 27       	eor	r26, r26
     cea:	bb 27       	eor	r27, r27
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     cec:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cf0:	80 91 a1 09 	lds	r24, 0x09A1
     cf4:	86 ff       	sbrs	r24, 6
     cf6:	fc cf       	rjmp	.-8      	; 0xcf0 <MemoryReadBlock+0x96>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	e0 ea       	ldi	r30, 0xA0	; 160
     cfc:	f9 e0       	ldi	r31, 0x09	; 9
     cfe:	81 83       	std	Z+1, r24	; 0x01

	return MEMORY_FLASH_USART.DATA;
     d00:	80 91 a0 09 	lds	r24, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
     d04:	bb 27       	eor	r27, r27
     d06:	a3 2f       	mov	r26, r19
     d08:	92 2f       	mov	r25, r18
     d0a:	81 2f       	mov	r24, r17
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d0c:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d10:	80 91 a1 09 	lds	r24, 0x09A1
     d14:	86 ff       	sbrs	r24, 6
     d16:	fc cf       	rjmp	.-8      	; 0xd10 <MemoryReadBlock+0xb6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d18:	80 e4       	ldi	r24, 0x40	; 64
     d1a:	e0 ea       	ldi	r30, 0xA0	; 160
     d1c:	f9 e0       	ldi	r31, 0x09	; 9
     d1e:	81 83       	std	Z+1, r24	; 0x01

	return MEMORY_FLASH_USART.DATA;
     d20:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d24:	00 93 a0 09 	sts	0x09A0, r16

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d28:	80 91 a1 09 	lds	r24, 0x09A1
     d2c:	86 ff       	sbrs	r24, 6
     d2e:	fc cf       	rjmp	.-8      	; 0xd28 <MemoryReadBlock+0xce>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	e0 ea       	ldi	r30, 0xA0	; 160
     d34:	f9 e0       	ldi	r31, 0x09	; 9
     d36:	81 83       	std	Z+1, r24	; 0x01

	return MEMORY_FLASH_USART.DATA;
     d38:	80 91 a0 09 	lds	r24, 0x09A0

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     d3c:	41 15       	cp	r20, r1
     d3e:	51 05       	cpc	r21, r1
     d40:	71 f0       	breq	.+28     	; 0xd5e <MemoryReadBlock+0x104>
		MEMORY_FLASH_USART.DATA = 0;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d42:	90 e4       	ldi	r25, 0x40	; 64
INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = 0;
     d44:	10 92 a0 09 	sts	0x09A0, r1
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d48:	80 91 a1 09 	lds	r24, 0x09A1
     d4c:	86 ff       	sbrs	r24, 6
     d4e:	fc cf       	rjmp	.-8      	; 0xd48 <MemoryReadBlock+0xee>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d50:	91 83       	std	Z+1, r25	; 0x01
		*ByteBuffer++ = MEMORY_FLASH_USART.DATA;
     d52:	80 91 a0 09 	lds	r24, 0x09A0
     d56:	89 93       	st	Y+, r24
     d58:	41 50       	subi	r20, 0x01	; 1
     d5a:	50 40       	sbci	r21, 0x00	; 0

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     d5c:	99 f7       	brne	.-26     	; 0xd44 <MemoryReadBlock+0xea>
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
	SPITransferByte( (Address >> 0) & 0xFF );
	SPIReadBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     d5e:	80 e1       	ldi	r24, 0x10	; 16
     d60:	e0 e6       	ldi	r30, 0x60	; 96
     d62:	f6 e0       	ldi	r31, 0x06	; 6
     d64:	85 83       	std	Z+5, r24	; 0x05

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
	FlashRead(Buffer, FlashAddress, ByteCount);
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <MemoryWriteBlock>:

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
{
     d70:	2f 92       	push	r2
     d72:	3f 92       	push	r3
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	26 97       	sbiw	r28, 0x06	; 6
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	8b 83       	std	Y+3, r24	; 0x03
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	4a 01       	movw	r8, r20
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
     da4:	80 91 0d 21 	lds	r24, 0x210D
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
     da8:	41 15       	cp	r20, r1
     daa:	51 05       	cpc	r21, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <MemoryWriteBlock+0x40>
     dae:	1e c1       	rjmp	.+572    	; 0xfec <MemoryWriteBlock+0x27c>
	FlashRead(Buffer, FlashAddress, ByteCount);
}

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
     db0:	6b 01       	movw	r12, r22
     db2:	ee 24       	eor	r14, r14
     db4:	ff 24       	eor	r15, r15
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e0       	ldi	r26, 0x00	; 0
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	dc 01       	movw	r26, r24
     dbe:	99 27       	eor	r25, r25
     dc0:	88 27       	eor	r24, r24
     dc2:	c8 0e       	add	r12, r24
     dc4:	d9 1e       	adc	r13, r25
     dc6:	ea 1e       	adc	r14, r26
     dc8:	fb 1e       	adc	r15, r27
INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / MEMORY_PAGE_SIZE;
		uint8_t ByteAddress = Address % MEMORY_PAGE_SIZE;
		uint16_t PageBytes = MIN(MEMORY_PAGE_SIZE - ByteAddress, ByteCount);
     dca:	21 2c       	mov	r2, r1
     dcc:	01 e0       	ldi	r16, 0x01	; 1
     dce:	30 2e       	mov	r3, r16

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     dd0:	00 e1       	ldi	r16, 0x10	; 16
     dd2:	30 e1       	ldi	r19, 0x10	; 16
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     dd4:	47 ed       	ldi	r20, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     dd6:	e0 ea       	ldi	r30, 0xA0	; 160
     dd8:	f9 e0       	ldi	r31, 0x09	; 9

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     dda:	50 e4       	ldi	r21, 0x40	; 64
     ddc:	20 e4       	ldi	r18, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     dde:	10 e6       	ldi	r17, 0x60	; 96
     de0:	61 2e       	mov	r6, r17
     de2:	16 e0       	ldi	r17, 0x06	; 6
     de4:	71 2e       	mov	r7, r17
     de6:	60 e1       	ldi	r22, 0x10	; 16
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     de8:	17 ed       	ldi	r17, 0xD7	; 215
     dea:	24 01       	movw	r4, r8
     dec:	46 01       	movw	r8, r12
     dee:	57 01       	movw	r10, r14
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / MEMORY_PAGE_SIZE;
     df0:	bb 27       	eor	r27, r27
     df2:	ab 2d       	mov	r26, r11
     df4:	9a 2d       	mov	r25, r10
     df6:	89 2d       	mov	r24, r9
     df8:	7c 01       	movw	r14, r24
		uint8_t ByteAddress = Address % MEMORY_PAGE_SIZE;
     dfa:	98 2d       	mov	r25, r8
		uint16_t PageBytes = MIN(MEMORY_PAGE_SIZE - ByteAddress, ByteCount);
     dfc:	61 01       	movw	r12, r2
     dfe:	c8 18       	sub	r12, r8
     e00:	d1 08       	sbc	r13, r1
     e02:	4c 14       	cp	r4, r12
     e04:	5d 04       	cpc	r5, r13
     e06:	08 f4       	brcc	.+2      	; 0xe0a <MemoryWriteBlock+0x9a>
     e08:	62 01       	movw	r12, r4

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e0a:	60 93 66 06 	sts	0x0666, r22
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e0e:	10 93 a0 09 	sts	0x09A0, r17

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e12:	80 91 a1 09 	lds	r24, 0x09A1
     e16:	86 ff       	sbrs	r24, 6
     e18:	fc cf       	rjmp	.-8      	; 0xe12 <MemoryWriteBlock+0xa2>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e1a:	21 83       	std	Z+1, r18	; 0x01

	return MEMORY_FLASH_USART.DATA;
     e1c:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e20:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e24:	80 91 a1 09 	lds	r24, 0x09A1
     e28:	86 ff       	sbrs	r24, 6
     e2a:	fc cf       	rjmp	.-8      	; 0xe24 <MemoryWriteBlock+0xb4>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e2c:	21 83       	std	Z+1, r18	; 0x01

	return MEMORY_FLASH_USART.DATA;
     e2e:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     e32:	30 93 65 06 	sts	0x0665, r19
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashMemoryToBuffer(uint16_t PageAddress)
{
	while(FlashIsBusy());
     e36:	87 ff       	sbrs	r24, 7
     e38:	e8 cf       	rjmp	.-48     	; 0xe0a <MemoryWriteBlock+0x9a>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e3a:	d3 01       	movw	r26, r6
     e3c:	16 96       	adiw	r26, 0x06	; 6
     e3e:	3c 93       	st	X, r19
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e40:	b3 e5       	ldi	r27, 0x53	; 83
     e42:	b0 93 a0 09 	sts	0x09A0, r27

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e46:	80 91 a1 09 	lds	r24, 0x09A1
     e4a:	86 ff       	sbrs	r24, 6
     e4c:	fc cf       	rjmp	.-8      	; 0xe46 <MemoryWriteBlock+0xd6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e4e:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     e50:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e54:	f0 92 a0 09 	sts	0x09A0, r15

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e58:	80 91 a1 09 	lds	r24, 0x09A1
     e5c:	86 ff       	sbrs	r24, 6
     e5e:	fc cf       	rjmp	.-8      	; 0xe58 <MemoryWriteBlock+0xe8>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e60:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     e62:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e66:	e0 92 a0 09 	sts	0x09A0, r14

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e6a:	80 91 a1 09 	lds	r24, 0x09A1
     e6e:	86 ff       	sbrs	r24, 6
     e70:	fc cf       	rjmp	.-8      	; 0xe6a <MemoryWriteBlock+0xfa>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e72:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     e74:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e78:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e7c:	80 91 a1 09 	lds	r24, 0x09A1
     e80:	86 ff       	sbrs	r24, 6
     e82:	fc cf       	rjmp	.-8      	; 0xe7c <MemoryWriteBlock+0x10c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e84:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     e86:	80 91 a0 09 	lds	r24, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     e8a:	00 93 65 06 	sts	0x0665, r16

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e8e:	30 93 66 06 	sts	0x0666, r19
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e92:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e96:	80 91 a1 09 	lds	r24, 0x09A1
     e9a:	86 ff       	sbrs	r24, 6
     e9c:	fc cf       	rjmp	.-8      	; 0xe96 <MemoryWriteBlock+0x126>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e9e:	21 83       	std	Z+1, r18	; 0x01

	return MEMORY_FLASH_USART.DATA;
     ea0:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ea4:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ea8:	80 91 a1 09 	lds	r24, 0x09A1
     eac:	86 ff       	sbrs	r24, 6
     eae:	fc cf       	rjmp	.-8      	; 0xea8 <MemoryWriteBlock+0x138>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     eb0:	21 83       	std	Z+1, r18	; 0x01

	return MEMORY_FLASH_USART.DATA;
     eb2:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     eb6:	30 93 65 06 	sts	0x0665, r19
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWriteBuffer(const void* Buffer, uint8_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     eba:	87 ff       	sbrs	r24, 7
     ebc:	e8 cf       	rjmp	.-48     	; 0xe8e <MemoryWriteBlock+0x11e>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     ebe:	d3 01       	movw	r26, r6
     ec0:	16 96       	adiw	r26, 0x06	; 6
     ec2:	3c 93       	st	X, r19
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ec4:	b4 e8       	ldi	r27, 0x84	; 132
     ec6:	b0 93 a0 09 	sts	0x09A0, r27

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     eca:	80 91 a1 09 	lds	r24, 0x09A1
     ece:	86 ff       	sbrs	r24, 6
     ed0:	fc cf       	rjmp	.-8      	; 0xeca <MemoryWriteBlock+0x15a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ed2:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     ed4:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ed8:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     edc:	80 91 a1 09 	lds	r24, 0x09A1
     ee0:	86 ff       	sbrs	r24, 6
     ee2:	fc cf       	rjmp	.-8      	; 0xedc <MemoryWriteBlock+0x16c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ee4:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     ee6:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     eea:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     eee:	80 91 a1 09 	lds	r24, 0x09A1
     ef2:	86 ff       	sbrs	r24, 6
     ef4:	fc cf       	rjmp	.-8      	; 0xeee <MemoryWriteBlock+0x17e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ef6:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     ef8:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     efc:	90 93 a0 09 	sts	0x09A0, r25

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f00:	80 91 a1 09 	lds	r24, 0x09A1
     f04:	86 ff       	sbrs	r24, 6
     f06:	fc cf       	rjmp	.-8      	; 0xf00 <MemoryWriteBlock+0x190>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f08:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     f0a:	80 91 a0 09 	lds	r24, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     f0e:	c1 14       	cp	r12, r1
     f10:	d1 04       	cpc	r13, r1
     f12:	d9 f0       	breq	.+54     	; 0xf4a <MemoryWriteBlock+0x1da>
     f14:	c6 01       	movw	r24, r12
	}
}

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;
     f16:	ab 81       	ldd	r26, Y+3	; 0x03
     f18:	ad 83       	std	Y+5, r26	; 0x05
     f1a:	bc 81       	ldd	r27, Y+4	; 0x04
     f1c:	be 83       	std	Y+6, r27	; 0x06
     f1e:	c9 82       	std	Y+1, r12	; 0x01
     f20:	da 82       	std	Y+2, r13	; 0x02
     f22:	ad 81       	ldd	r26, Y+5	; 0x05
     f24:	be 81       	ldd	r27, Y+6	; 0x06

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     f26:	7d 91       	ld	r23, X+
     f28:	70 93 a0 09 	sts	0x09A0, r23
     f2c:	6d 01       	movw	r12, r26
     f2e:	dc 01       	movw	r26, r24
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f30:	80 91 a1 09 	lds	r24, 0x09A1
     f34:	86 ff       	sbrs	r24, 6
     f36:	fc cf       	rjmp	.-8      	; 0xf30 <MemoryWriteBlock+0x1c0>
     f38:	cd 01       	movw	r24, r26
     f3a:	d6 01       	movw	r26, r12
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f3c:	21 83       	std	Z+1, r18	; 0x01
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
     f3e:	70 91 a0 09 	lds	r23, 0x09A0
     f42:	01 97       	sbiw	r24, 0x01	; 1

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     f44:	81 f7       	brne	.-32     	; 0xf26 <MemoryWriteBlock+0x1b6>
     f46:	c9 80       	ldd	r12, Y+1	; 0x01
     f48:	da 80       	ldd	r13, Y+2	; 0x02
	SPITransferByte(FLASH_CMD_BUF1_WRITE);
	SPITransferByte( 0 );
	SPITransferByte( 0 );
	SPITransferByte( Address );
	SPIWriteBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f4a:	00 93 65 06 	sts	0x0665, r16

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f4e:	30 93 66 06 	sts	0x0666, r19
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f52:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f56:	80 91 a1 09 	lds	r24, 0x09A1
     f5a:	86 ff       	sbrs	r24, 6
     f5c:	fc cf       	rjmp	.-8      	; 0xf56 <MemoryWriteBlock+0x1e6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f5e:	21 83       	std	Z+1, r18	; 0x01

	return MEMORY_FLASH_USART.DATA;
     f60:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f64:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f68:	80 91 a1 09 	lds	r24, 0x09A1
     f6c:	86 ff       	sbrs	r24, 6
     f6e:	fc cf       	rjmp	.-8      	; 0xf68 <MemoryWriteBlock+0x1f8>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f70:	21 83       	std	Z+1, r18	; 0x01

	return MEMORY_FLASH_USART.DATA;
     f72:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f76:	30 93 65 06 	sts	0x0665, r19
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashBufferToMemory(uint16_t PageAddress)
{
	while(FlashIsBusy());
     f7a:	87 ff       	sbrs	r24, 7
     f7c:	e8 cf       	rjmp	.-48     	; 0xf4e <MemoryWriteBlock+0x1de>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f7e:	d3 01       	movw	r26, r6
     f80:	16 96       	adiw	r26, 0x06	; 6
     f82:	3c 93       	st	X, r19
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f84:	b3 e8       	ldi	r27, 0x83	; 131
     f86:	b0 93 a0 09 	sts	0x09A0, r27

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f8a:	80 91 a1 09 	lds	r24, 0x09A1
     f8e:	86 ff       	sbrs	r24, 6
     f90:	fc cf       	rjmp	.-8      	; 0xf8a <MemoryWriteBlock+0x21a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f92:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     f94:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f98:	f0 92 a0 09 	sts	0x09A0, r15

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f9c:	80 91 a1 09 	lds	r24, 0x09A1
     fa0:	86 ff       	sbrs	r24, 6
     fa2:	fc cf       	rjmp	.-8      	; 0xf9c <MemoryWriteBlock+0x22c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fa4:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     fa6:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     faa:	e0 92 a0 09 	sts	0x09A0, r14

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fae:	80 91 a1 09 	lds	r24, 0x09A1
     fb2:	86 ff       	sbrs	r24, 6
     fb4:	fc cf       	rjmp	.-8      	; 0xfae <MemoryWriteBlock+0x23e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fb6:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     fb8:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     fbc:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fc0:	80 91 a1 09 	lds	r24, 0x09A1
     fc4:	86 ff       	sbrs	r24, 6
     fc6:	fc cf       	rjmp	.-8      	; 0xfc0 <MemoryWriteBlock+0x250>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fc8:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
     fca:	80 91 a0 09 	lds	r24, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_BUF1_TO_MEM_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     fce:	00 93 65 06 	sts	0x0665, r16

		FlashMemoryToBuffer(PageAddress);
		FlashWriteBuffer(Buffer, ByteAddress, PageBytes);
		FlashBufferToMemory(PageAddress);

		ByteCount -= PageBytes;
     fd2:	4c 18       	sub	r4, r12
     fd4:	5d 08       	sbc	r5, r13
		Address += PageBytes;
     fd6:	c6 01       	movw	r24, r12
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	88 0e       	add	r8, r24
     fde:	99 1e       	adc	r9, r25
     fe0:	aa 1e       	adc	r10, r26
     fe2:	bb 1e       	adc	r11, r27
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
     fe4:	41 14       	cp	r4, r1
     fe6:	51 04       	cpc	r5, r1
     fe8:	09 f0       	breq	.+2      	; 0xfec <MemoryWriteBlock+0x27c>
     fea:	02 cf       	rjmp	.-508    	; 0xdf0 <MemoryWriteBlock+0x80>

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
	FlashWrite(Buffer, FlashAddress, ByteCount);
}
     fec:	26 96       	adiw	r28, 0x06	; 6
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	af 90       	pop	r10
    1006:	9f 90       	pop	r9
    1008:	8f 90       	pop	r8
    100a:	7f 90       	pop	r7
    100c:	6f 90       	pop	r6
    100e:	5f 90       	pop	r5
    1010:	4f 90       	pop	r4
    1012:	3f 90       	pop	r3
    1014:	2f 90       	pop	r2
    1016:	08 95       	ret

00001018 <MemoryClear>:

void MemoryClear(void)
{
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
	uint32_t PageAddress = ((uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING) / MEMORY_PAGE_SIZE;
    101e:	80 91 0d 21 	lds	r24, 0x210D
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	ba 2f       	mov	r27, r26
    102a:	a9 2f       	mov	r26, r25
    102c:	98 2f       	mov	r25, r24
    102e:	88 27       	eor	r24, r24
{
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
	FlashWrite(Buffer, FlashAddress, ByteCount);
}

void MemoryClear(void)
    1030:	9c 01       	movw	r18, r24
    1032:	20 50       	subi	r18, 0x00	; 0
    1034:	3f 4f       	sbci	r19, 0xFF	; 255

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1036:	a0 e6       	ldi	r26, 0x60	; 96
    1038:	b6 e0       	ldi	r27, 0x06	; 6
    103a:	d0 e1       	ldi	r29, 0x10	; 16
    103c:	60 e1       	ldi	r22, 0x10	; 16
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    103e:	77 ed       	ldi	r23, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1040:	e0 ea       	ldi	r30, 0xA0	; 160
    1042:	f9 e0       	ldi	r31, 0x09	; 9

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1044:	c0 e4       	ldi	r28, 0x40	; 64
    1046:	50 e4       	ldi	r21, 0x40	; 64
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1048:	11 e8       	ldi	r17, 0x81	; 129

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    104a:	16 96       	adiw	r26, 0x06	; 6
    104c:	6c 93       	st	X, r22
    104e:	16 97       	sbiw	r26, 0x06	; 6
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1050:	70 93 a0 09 	sts	0x09A0, r23

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1054:	40 91 a1 09 	lds	r20, 0x09A1
    1058:	46 ff       	sbrs	r20, 6
    105a:	fc cf       	rjmp	.-8      	; 0x1054 <MemoryClear+0x3c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    105c:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
    105e:	40 91 a0 09 	lds	r20, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1062:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1066:	40 91 a1 09 	lds	r20, 0x09A1
    106a:	46 ff       	sbrs	r20, 6
    106c:	fc cf       	rjmp	.-8      	; 0x1066 <MemoryClear+0x4e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    106e:	51 83       	std	Z+1, r21	; 0x01

	return MEMORY_FLASH_USART.DATA;
    1070:	40 91 a0 09 	lds	r20, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1074:	15 96       	adiw	r26, 0x05	; 5
    1076:	6c 93       	st	X, r22
    1078:	15 97       	sbiw	r26, 0x05	; 5
	}
}

INLINE void FlashClearPage(uint16_t PageAddress)
{
	while(FlashIsBusy());
    107a:	47 ff       	sbrs	r20, 7
    107c:	e6 cf       	rjmp	.-52     	; 0x104a <MemoryClear+0x32>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    107e:	16 96       	adiw	r26, 0x06	; 6
    1080:	dc 93       	st	X, r29
    1082:	16 97       	sbiw	r26, 0x06	; 6
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1084:	10 93 a0 09 	sts	0x09A0, r17

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1088:	40 91 a1 09 	lds	r20, 0x09A1
    108c:	46 ff       	sbrs	r20, 6
    108e:	fc cf       	rjmp	.-8      	; 0x1088 <MemoryClear+0x70>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1090:	c1 83       	std	Z+1, r28	; 0x01

	return MEMORY_FLASH_USART.DATA;
    1092:	40 91 a0 09 	lds	r20, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1096:	90 93 a0 09 	sts	0x09A0, r25

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    109a:	40 91 a1 09 	lds	r20, 0x09A1
    109e:	46 ff       	sbrs	r20, 6
    10a0:	fc cf       	rjmp	.-8      	; 0x109a <MemoryClear+0x82>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    10a2:	c1 83       	std	Z+1, r28	; 0x01

	return MEMORY_FLASH_USART.DATA;
    10a4:	40 91 a0 09 	lds	r20, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    10a8:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    10ac:	40 91 a1 09 	lds	r20, 0x09A1
    10b0:	46 ff       	sbrs	r20, 6
    10b2:	fc cf       	rjmp	.-8      	; 0x10ac <MemoryClear+0x94>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    10b4:	c1 83       	std	Z+1, r28	; 0x01

	return MEMORY_FLASH_USART.DATA;
    10b6:	40 91 a0 09 	lds	r20, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    10ba:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    10be:	40 91 a1 09 	lds	r20, 0x09A1
    10c2:	46 ff       	sbrs	r20, 6
    10c4:	fc cf       	rjmp	.-8      	; 0x10be <MemoryClear+0xa6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    10c6:	c1 83       	std	Z+1, r28	; 0x01

	return MEMORY_FLASH_USART.DATA;
    10c8:	40 91 a0 09 	lds	r20, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_PAGE_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	dc 93       	st	X, r29
    10d0:	15 97       	sbiw	r26, 0x05	; 5
    10d2:	01 96       	adiw	r24, 0x01	; 1
void MemoryClear(void)
{
	uint32_t PageAddress = ((uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING) / MEMORY_PAGE_SIZE;
	uint16_t PageCount = MEMORY_SIZE_PER_SETTING / MEMORY_PAGE_SIZE;

	while(PageCount > 0) {
    10d4:	82 17       	cp	r24, r18
    10d6:	93 07       	cpc	r25, r19
    10d8:	09 f0       	breq	.+2      	; 0x10dc <MemoryClear+0xc4>
    10da:	b7 cf       	rjmp	.-146    	; 0x104a <MemoryClear+0x32>
		FlashClearPage(PageAddress);
		PageCount--;
		PageAddress++;
	}
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	08 95       	ret

000010e4 <MemoryUploadBlock>:

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	fc 01       	movw	r30, r24
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    10ea:	40 30       	cpi	r20, 0x00	; 0
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	58 07       	cpc	r21, r24
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	68 07       	cpc	r22, r24
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	78 07       	cpc	r23, r24
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <MemoryUploadBlock+0x1e>
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		ByteCount = MIN(ByteCount, BytesLeft);
		MemoryWriteBlock(Buffer, BlockAddress, ByteCount);
		return true;
    }
}
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a1 e0       	ldi	r26, 0x01	; 1
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	84 1b       	sub	r24, r20
    110c:	95 0b       	sbc	r25, r21
    110e:	a6 0b       	sbc	r26, r22
    1110:	b7 0b       	sbc	r27, r23
		ByteCount = MIN(ByteCount, BytesLeft);
    1112:	89 01       	movw	r16, r18
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	80 17       	cp	r24, r16
    111a:	91 07       	cpc	r25, r17
    111c:	a2 07       	cpc	r26, r18
    111e:	b3 07       	cpc	r27, r19
    1120:	40 f0       	brcs	.+16     	; 0x1132 <MemoryUploadBlock+0x4e>
		MemoryWriteBlock(Buffer, BlockAddress, ByteCount);
    1122:	cf 01       	movw	r24, r30
    1124:	ba 01       	movw	r22, r20
    1126:	a8 01       	movw	r20, r16
    1128:	23 de       	rcall	.-954    	; 0xd70 <MemoryWriteBlock>
    112a:	81 e0       	ldi	r24, 0x01	; 1
		return true;
    }
}
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret
    1132:	8c 01       	movw	r16, r24
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		ByteCount = MIN(ByteCount, BytesLeft);
    1134:	9d 01       	movw	r18, r26
    1136:	cf 01       	movw	r24, r30
		MemoryWriteBlock(Buffer, BlockAddress, ByteCount);
    1138:	ba 01       	movw	r22, r20
    113a:	a8 01       	movw	r20, r16
    113c:	19 de       	rcall	.-974    	; 0xd70 <MemoryWriteBlock>
    113e:	f5 cf       	rjmp	.-22     	; 0x112a <MemoryUploadBlock+0x46>

00001140 <MemoryDownloadBlock>:
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
		return true;
    }
}

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    1144:	fc 01       	movw	r30, r24
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    1146:	40 30       	cpi	r20, 0x00	; 0
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	58 07       	cpc	r21, r24
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	68 07       	cpc	r22, r24
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	78 07       	cpc	r23, r24
    1154:	20 f0       	brcs	.+8      	; 0x115e <MemoryDownloadBlock+0x1e>
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    1156:	80 e0       	ldi	r24, 0x00	; 0
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		ByteCount = MIN(ByteCount, BytesLeft);
    	MemoryReadBlock(Buffer, BlockAddress, ByteCount);
        return true;
    }
}
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a1 e0       	ldi	r26, 0x01	; 1
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	84 1b       	sub	r24, r20
    1168:	95 0b       	sbc	r25, r21
    116a:	a6 0b       	sbc	r26, r22
    116c:	b7 0b       	sbc	r27, r23
		ByteCount = MIN(ByteCount, BytesLeft);
    116e:	89 01       	movw	r16, r18
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	80 17       	cp	r24, r16
    1176:	91 07       	cpc	r25, r17
    1178:	a2 07       	cpc	r26, r18
    117a:	b3 07       	cpc	r27, r19
    117c:	40 f0       	brcs	.+16     	; 0x118e <MemoryDownloadBlock+0x4e>
    	MemoryReadBlock(Buffer, BlockAddress, ByteCount);
    117e:	cf 01       	movw	r24, r30
    1180:	ba 01       	movw	r22, r20
    1182:	a8 01       	movw	r20, r16
    1184:	6a dd       	rcall	.-1324   	; 0xc5a <MemoryReadBlock>
    1186:	81 e0       	ldi	r24, 0x01	; 1
        return true;
    1188:	1f 91       	pop	r17
    }
}
    118a:	0f 91       	pop	r16
    118c:	08 95       	ret
    118e:	8c 01       	movw	r16, r24
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		ByteCount = MIN(ByteCount, BytesLeft);
    1190:	9d 01       	movw	r18, r26
    1192:	cf 01       	movw	r24, r30
    	MemoryReadBlock(Buffer, BlockAddress, ByteCount);
    1194:	ba 01       	movw	r22, r20
    1196:	a8 01       	movw	r20, r16
    1198:	60 dd       	rcall	.-1344   	; 0xc5a <MemoryReadBlock>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	f5 cf       	rjmp	.-22     	; 0x1188 <MemoryDownloadBlock+0x48>

0000119e <ButtonInit>:
    [BUTTON_ACTION_CYCLE_SETTINGS] = "CYCLE_SETTINGS"
};

void ButtonInit(void)
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
    119e:	e0 e0       	ldi	r30, 0x00	; 0
    11a0:	f6 e0       	ldi	r31, 0x06	; 6
    11a2:	80 e4       	ldi	r24, 0x40	; 64
    11a4:	82 83       	std	Z+2, r24	; 0x02
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
    11a6:	88 e1       	ldi	r24, 0x18	; 24
    11a8:	86 8b       	std	Z+22, r24	; 0x16
}
    11aa:	08 95       	ret

000011ac <ButtonTick>:

void ButtonTick(void)
{
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	a0 97       	sbiw	r28, 0x20	; 32
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	de bf       	out	0x3e, r29	; 62
    static uint8_t LastButtonState = 0;
    uint8_t ThisButtonState = ~BUTTON_PORT.IN;
    11c0:	90 91 08 06 	lds	r25, 0x0608
    11c4:	90 95       	com	r25
    uint8_t ThisButtonChange = ThisButtonState ^ LastButtonState;
    11c6:	80 91 a2 20 	lds	r24, 0x20A2
    11ca:	89 27       	eor	r24, r25
    uint8_t ThisButtonPress = ThisButtonChange & ThisButtonState;
    11cc:	89 23       	and	r24, r25
    LastButtonState = ThisButtonState;
    11ce:	90 93 a2 20 	sts	0x20A2, r25

    if ( ThisButtonPress & BUTTON_MASK ) {
    11d2:	86 ff       	sbrs	r24, 6
    11d4:	15 c0       	rjmp	.+42     	; 0x1200 <ButtonTick+0x54>
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;
    11d6:	e0 91 0e 21 	lds	r30, 0x210E
    11da:	f0 91 0f 21 	lds	r31, 0x210F
    11de:	80 81       	ld	r24, Z

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	b9 f0       	breq	.+46     	; 0x1212 <ButtonTick+0x66>
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
                UidBuffer[i] = RandomGetByte();
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	79 f1       	breq	.+94     	; 0x1246 <ButtonTick+0x9a>
                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	09 f4       	brne	.+2      	; 0x11ee <ButtonTick+0x42>
    11ec:	4e c0       	rjmp	.+156    	; 0x128a <ButtonTick+0xde>
                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <ButtonTick+0x48>
    11f2:	70 c0       	rjmp	.+224    	; 0x12d4 <ButtonTick+0x128>
                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
    11f4:	85 30       	cpi	r24, 0x05	; 5
    11f6:	09 f4       	brne	.+2      	; 0x11fa <ButtonTick+0x4e>
    11f8:	8f c0       	rjmp	.+286    	; 0x1318 <ButtonTick+0x16c>
                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
    11fa:	86 30       	cpi	r24, 0x06	; 6
    11fc:	09 f4       	brne	.+2      	; 0x1200 <ButtonTick+0x54>
    11fe:	68 c0       	rjmp	.+208    	; 0x12d0 <ButtonTick+0x124>
        	SettingsCycle();
        }
    }
}
    1200:	a0 96       	adiw	r28, 0x20	; 32
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	08 95       	ret
    if ( ThisButtonPress & BUTTON_MASK ) {
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
    1212:	80 91 0b 21 	lds	r24, 0x210B
    1216:	88 23       	and	r24, r24
    1218:	09 f4       	brne	.+2      	; 0x121c <ButtonTick+0x70>
    121a:	a1 c0       	rjmp	.+322    	; 0x135e <ButtonTick+0x1b2>
    121c:	ff 24       	eor	r15, r15
    121e:	8e 01       	movw	r16, r28
    1220:	0f 5f       	subi	r16, 0xFF	; 255
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
                UidBuffer[i] = RandomGetByte();
    1224:	e5 db       	rcall	.-2102   	; 0x9f0 <RandomGetByte>
    1226:	f8 01       	movw	r30, r16
    1228:	ef 0d       	add	r30, r15
    122a:	f1 1d       	adc	r31, r1
    122c:	80 83       	st	Z, r24
    122e:	f3 94       	inc	r15
    if ( ThisButtonPress & BUTTON_MASK ) {
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
    1230:	80 91 0b 21 	lds	r24, 0x210B
    1234:	f8 16       	cp	r15, r24
    1236:	b0 f3       	brcs	.-20     	; 0x1224 <ButtonTick+0x78>
    1238:	e0 91 07 21 	lds	r30, 0x2107
INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    123c:	f0 91 08 21 	lds	r31, 0x2108
    1240:	c8 01       	movw	r24, r16
    1242:	09 95       	icall
    1244:	dd cf       	rjmp	.-70     	; 0x1200 <ButtonTick+0x54>
    1246:	e0 91 05 21 	lds	r30, 0x2105
INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    124a:	f0 91 06 21 	lds	r31, 0x2106
    124e:	8e 01       	movw	r16, r28
    1250:	0f 5f       	subi	r16, 0xFF	; 255
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	c8 01       	movw	r24, r16
    1256:	09 95       	icall
    1258:	20 91 0b 21 	lds	r18, 0x210B
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    125c:	22 23       	and	r18, r18
    125e:	61 f3       	breq	.-40     	; 0x1238 <ButtonTick+0x8c>
    1260:	f8 01       	movw	r30, r16
    1262:	ce 01       	movw	r24, r28
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
}

void ButtonTick(void)
    1264:	02 96       	adiw	r24, 0x02	; 2
    1266:	21 50       	subi	r18, 0x01	; 1
    1268:	82 0f       	add	r24, r18
    126a:	91 1d       	adc	r25, r1
    126c:	21 e0       	ldi	r18, 0x01	; 1
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    126e:	22 23       	and	r18, r18
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
                if (Carry) {
    1270:	39 f0       	breq	.+14     	; 0x1280 <ButtonTick+0xd4>
    1272:	30 81       	ld	r19, Z
                    if (UidBuffer[i] == 0xFF) {
    1274:	21 e0       	ldi	r18, 0x01	; 1
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
}

void ButtonTick(void)
    1276:	3f 3f       	cpi	r19, 0xFF	; 255
    1278:	09 f0       	breq	.+2      	; 0x127c <ButtonTick+0xd0>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f 5f       	subi	r19, 0xFF	; 255
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
    127e:	30 83       	st	Z, r19
    1280:	31 96       	adiw	r30, 0x01	; 1
    1282:	e8 17       	cp	r30, r24
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    1284:	f9 07       	cpc	r31, r25
    1286:	99 f7       	brne	.-26     	; 0x126e <ButtonTick+0xc2>
    1288:	d7 cf       	rjmp	.-82     	; 0x1238 <ButtonTick+0x8c>
    128a:	e0 91 05 21 	lds	r30, 0x2105
    128e:	f0 91 06 21 	lds	r31, 0x2106
    1292:	8e 01       	movw	r16, r28
    1294:	0f 5f       	subi	r16, 0xFF	; 255
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	c8 01       	movw	r24, r16
    129a:	09 95       	icall
    129c:	20 91 0b 21 	lds	r18, 0x210B

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;
    12a0:	31 e0       	ldi	r19, 0x01	; 1
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    12a2:	22 23       	and	r18, r18
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    12a4:	49 f2       	breq	.-110    	; 0x1238 <ButtonTick+0x8c>
    12a6:	21 50       	subi	r18, 0x01	; 1
    12a8:	33 23       	and	r19, r19
                if (Carry) {
    12aa:	d9 f3       	breq	.-10     	; 0x12a2 <ButtonTick+0xf6>
    12ac:	82 2f       	mov	r24, r18
                    if (UidBuffer[i] == 0xFF) {
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	f8 01       	movw	r30, r16
    12b2:	e8 0f       	add	r30, r24
    12b4:	f9 1f       	adc	r31, r25
    12b6:	40 81       	ld	r20, Z
    12b8:	31 e0       	ldi	r19, 0x01	; 1
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
}

void ButtonTick(void)
    12ba:	4f 3f       	cpi	r20, 0xFF	; 255
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <ButtonTick+0x114>
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	80 0f       	add	r24, r16
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
    12c2:	91 1f       	adc	r25, r17
    12c4:	4f 5f       	subi	r20, 0xFF	; 255
    12c6:	fc 01       	movw	r30, r24
    12c8:	40 83       	st	Z, r20
    12ca:	22 23       	and	r18, r18
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    12cc:	61 f7       	brne	.-40     	; 0x12a6 <ButtonTick+0xfa>
    12ce:	b4 cf       	rjmp	.-152    	; 0x1238 <ButtonTick+0x8c>
    12d0:	fb d0       	rcall	.+502    	; 0x14c8 <SettingsCycle>
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
        	SettingsCycle();
    12d2:	96 cf       	rjmp	.-212    	; 0x1200 <ButtonTick+0x54>
    12d4:	e0 91 05 21 	lds	r30, 0x2105
    12d8:	f0 91 06 21 	lds	r31, 0x2106
    12dc:	8e 01       	movw	r16, r28
    12de:	0f 5f       	subi	r16, 0xFF	; 255
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	c8 01       	movw	r24, r16
    12e4:	09 95       	icall
    12e6:	20 91 0b 21 	lds	r18, 0x210B
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    12ea:	22 23       	and	r18, r18
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <ButtonTick+0x144>
    12ee:	a4 cf       	rjmp	.-184    	; 0x1238 <ButtonTick+0x8c>
    12f0:	f8 01       	movw	r30, r16
    12f2:	ce 01       	movw	r24, r28
    12f4:	02 96       	adiw	r24, 0x02	; 2
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
}

void ButtonTick(void)
    12f6:	21 50       	subi	r18, 0x01	; 1
    12f8:	82 0f       	add	r24, r18
    12fa:	91 1d       	adc	r25, r1
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	22 23       	and	r18, r18
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    1300:	31 f0       	breq	.+12     	; 0x130e <ButtonTick+0x162>
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
                if (Carry) {
    1302:	30 81       	ld	r19, Z
    1304:	21 e0       	ldi	r18, 0x01	; 1
                    if (UidBuffer[i] == 0x00) {
    1306:	31 11       	cpse	r19, r1
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
}

void ButtonTick(void)
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	31 50       	subi	r19, 0x01	; 1
    130c:	30 83       	st	Z, r19
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
    130e:	31 96       	adiw	r30, 0x01	; 1
    1310:	e8 17       	cp	r30, r24
    1312:	f9 07       	cpc	r31, r25
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    1314:	a1 f7       	brne	.-24     	; 0x12fe <ButtonTick+0x152>
    1316:	90 cf       	rjmp	.-224    	; 0x1238 <ButtonTick+0x8c>
    1318:	e0 91 05 21 	lds	r30, 0x2105
    131c:	f0 91 06 21 	lds	r31, 0x2106
    1320:	8e 01       	movw	r16, r28
    1322:	0f 5f       	subi	r16, 0xFF	; 255
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	c8 01       	movw	r24, r16
    1328:	09 95       	icall
    132a:	20 91 0b 21 	lds	r18, 0x210B

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;
    132e:	31 e0       	ldi	r19, 0x01	; 1
    1330:	22 23       	and	r18, r18
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    1332:	09 f4       	brne	.+2      	; 0x1336 <ButtonTick+0x18a>
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    1334:	81 cf       	rjmp	.-254    	; 0x1238 <ButtonTick+0x8c>
    1336:	21 50       	subi	r18, 0x01	; 1
    1338:	33 23       	and	r19, r19
    133a:	d1 f3       	breq	.-12     	; 0x1330 <ButtonTick+0x184>
                if (Carry) {
    133c:	82 2f       	mov	r24, r18
    133e:	90 e0       	ldi	r25, 0x00	; 0
                    if (UidBuffer[i] == 0x00) {
    1340:	f8 01       	movw	r30, r16
    1342:	e8 0f       	add	r30, r24
    1344:	f9 1f       	adc	r31, r25
    1346:	40 81       	ld	r20, Z
    1348:	31 e0       	ldi	r19, 0x01	; 1
    134a:	41 11       	cpse	r20, r1
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
}

void ButtonTick(void)
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	80 0f       	add	r24, r16
    1350:	91 1f       	adc	r25, r17
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
    1352:	41 50       	subi	r20, 0x01	; 1
    1354:	fc 01       	movw	r30, r24
    1356:	40 83       	st	Z, r20
    1358:	22 23       	and	r18, r18
    135a:	69 f7       	brne	.-38     	; 0x1336 <ButtonTick+0x18a>
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    135c:	6d cf       	rjmp	.-294    	; 0x1238 <ButtonTick+0x8c>
    135e:	8e 01       	movw	r16, r28
    1360:	0f 5f       	subi	r16, 0xFF	; 255
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	69 cf       	rjmp	.-302    	; 0x1238 <ButtonTick+0x8c>

00001366 <ButtonGetActionList>:
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
        }
    }
}

void ButtonGetActionList(char* ListOut, uint16_t BufferSize)
{
    136a:	ec 01       	movw	r28, r24
    uint8_t i;

    /* Account for '\0' */
    BufferSize--;
    136c:	61 50       	subi	r22, 0x01	; 1
    136e:	70 40       	sbci	r23, 0x00	; 0
    1370:	27 ef       	ldi	r18, 0xF7	; 247
    1372:	32 e0       	ldi	r19, 0x02	; 2
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    1374:	4c e2       	ldi	r20, 0x2C	; 44

    /* Account for '\0' */
    BufferSize--;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
    1376:	c9 01       	movw	r24, r18
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    1378:	f9 01       	movw	r30, r18
    137a:	54 91       	lpm	r21, Z
    137c:	55 23       	and	r21, r21
    137e:	89 f0       	breq	.+34     	; 0x13a2 <ButtonGetActionList+0x3c>
    1380:	61 32       	cpi	r22, 0x21	; 33
    1382:	71 05       	cpc	r23, r1
    1384:	70 f0       	brcs	.+28     	; 0x13a2 <ButtonGetActionList+0x3c>
    1386:	de 01       	movw	r26, r28
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <ButtonGetActionList+0x2a>
    138a:	60 32       	cpi	r22, 0x20	; 32
    138c:	71 05       	cpc	r23, r1
    138e:	49 f0       	breq	.+18     	; 0x13a2 <ButtonGetActionList+0x3c>
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ListOut++ = c;
    1390:	5d 93       	st	X+, r21
    1392:	ed 01       	movw	r28, r26
            ActionName++;
    1394:	01 96       	adiw	r24, 0x01	; 1
            BufferSize--;
    1396:	61 50       	subi	r22, 0x01	; 1
    1398:	70 40       	sbci	r23, 0x00	; 0

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    139a:	fc 01       	movw	r30, r24
    139c:	54 91       	lpm	r21, Z
    139e:	55 23       	and	r21, r21
    13a0:	a1 f7       	brne	.-24     	; 0x138a <ButtonGetActionList+0x24>
            *ListOut++ = c;
            ActionName++;
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
    13a2:	f3 e0       	ldi	r31, 0x03	; 3
    13a4:	27 3b       	cpi	r18, 0xB7	; 183
    13a6:	3f 07       	cpc	r19, r31
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <ButtonGetActionList+0x4c>
            *ListOut++ = ',';
            BufferSize--;
        }
    }

    *ListOut = '\0';
    13aa:	18 82       	st	Y, r1
}
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    13b2:	49 93       	st	Y+, r20
            BufferSize--;
    13b4:	61 50       	subi	r22, 0x01	; 1
    13b6:	70 40       	sbci	r23, 0x00	; 0
    13b8:	20 5e       	subi	r18, 0xE0	; 224
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;

    /* Account for '\0' */
    BufferSize--;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	27 3d       	cpi	r18, 0xD7	; 215
    13c0:	38 07       	cpc	r19, r24
    13c2:	c9 f6       	brne	.-78     	; 0x1376 <ButtonGetActionList+0x10>
    13c4:	f2 cf       	rjmp	.-28     	; 0x13aa <ButtonGetActionList+0x44>

000013c6 <ButtonSetActionById>:
    *ListOut = '\0';
}

void ButtonSetActionById(ButtonActionEnum Action)
{
	GlobalSettings.ActiveSettingPtr->ButtonAction = Action;
    13c6:	e0 91 0e 21 	lds	r30, 0x210E
    13ca:	f0 91 0f 21 	lds	r31, 0x210F
    13ce:	80 83       	st	Z, r24
}
    13d0:	08 95       	ret

000013d2 <ButtonGetActionByName>:

void ButtonGetActionByName(char* ActionOut, uint16_t BufferSize)
{
    13d2:	ab 01       	movw	r20, r22
    strncpy_P(ActionOut, ButtonActionTable[GlobalSettings.ActiveSettingPtr->ButtonAction], BufferSize);
    13d4:	e0 91 0e 21 	lds	r30, 0x210E
    13d8:	f0 91 0f 21 	lds	r31, 0x210F
    13dc:	60 81       	ld	r22, Z
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	62 95       	swap	r22
    13e6:	72 95       	swap	r23
    13e8:	70 7f       	andi	r23, 0xF0	; 240
    13ea:	76 27       	eor	r23, r22
    13ec:	60 7f       	andi	r22, 0xF0	; 240
    13ee:	76 27       	eor	r23, r22
    13f0:	69 50       	subi	r22, 0x09	; 9
    13f2:	7d 4f       	sbci	r23, 0xFD	; 253
    13f4:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <strncpy_P>

000013f8 <ButtonSetActionByName>:
}
    13f8:	cf 93       	push	r28

bool ButtonSetActionByName(const char* Action)
{
    13fa:	df 93       	push	r29
    13fc:	ec 01       	movw	r28, r24
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
    13fe:	67 ef       	ldi	r22, 0xF7	; 247
    1400:	72 e0       	ldi	r23, 0x02	; 2
    1402:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	71 f1       	breq	.+92     	; 0x1466 <ButtonSetActionByName+0x6e>
    140a:	ce 01       	movw	r24, r28
    140c:	67 e1       	ldi	r22, 0x17	; 23
    140e:	73 e0       	ldi	r23, 0x03	; 3
    1410:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	69 f1       	breq	.+90     	; 0x1472 <ButtonSetActionByName+0x7a>
    1418:	ce 01       	movw	r24, r28
    141a:	67 e3       	ldi	r22, 0x37	; 55
    141c:	73 e0       	ldi	r23, 0x03	; 3
    141e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	41 f1       	breq	.+80     	; 0x1476 <ButtonSetActionByName+0x7e>
    1426:	ce 01       	movw	r24, r28
    1428:	67 e5       	ldi	r22, 0x57	; 87
    142a:	73 e0       	ldi	r23, 0x03	; 3
    142c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	19 f1       	breq	.+70     	; 0x147a <ButtonSetActionByName+0x82>
    1434:	ce 01       	movw	r24, r28
    1436:	67 e7       	ldi	r22, 0x77	; 119
    1438:	73 e0       	ldi	r23, 0x03	; 3
    143a:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	f1 f0       	breq	.+60     	; 0x147e <ButtonSetActionByName+0x86>
    1442:	ce 01       	movw	r24, r28
    1444:	67 e9       	ldi	r22, 0x97	; 151
    1446:	73 e0       	ldi	r23, 0x03	; 3
    1448:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	c9 f0       	breq	.+50     	; 0x1482 <ButtonSetActionByName+0x8a>
    1450:	ce 01       	movw	r24, r28
    1452:	67 eb       	ldi	r22, 0xB7	; 183
    1454:	73 e0       	ldi	r23, 0x03	; 3
    1456:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	a1 f0       	breq	.+40     	; 0x1486 <ButtonSetActionByName+0x8e>
            return true;
        }
    }

    /* Button action not found */
    return false;
    145e:	80 e0       	ldi	r24, 0x00	; 0
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

bool ButtonSetActionByName(const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    1466:	80 e0       	ldi	r24, 0x00	; 0
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
            ButtonSetActionById(i);
    1468:	ae df       	rcall	.-164    	; 0x13c6 <ButtonSetActionById>
    146a:	81 e0       	ldi	r24, 0x01	; 1
            return true;
    146c:	df 91       	pop	r29
        }
    }

    /* Button action not found */
    return false;
}
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret
    1472:	81 e0       	ldi	r24, 0x01	; 1

bool ButtonSetActionByName(const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    1474:	f9 cf       	rjmp	.-14     	; 0x1468 <ButtonSetActionByName+0x70>
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	f7 cf       	rjmp	.-18     	; 0x1468 <ButtonSetActionByName+0x70>
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	f5 cf       	rjmp	.-22     	; 0x1468 <ButtonSetActionByName+0x70>
    147e:	84 e0       	ldi	r24, 0x04	; 4
    1480:	f3 cf       	rjmp	.-26     	; 0x1468 <ButtonSetActionByName+0x70>
    1482:	85 e0       	ldi	r24, 0x05	; 5
    1484:	f1 cf       	rjmp	.-30     	; 0x1468 <ButtonSetActionByName+0x70>
    1486:	86 e0       	ldi	r24, 0x06	; 6
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
    1488:	ef cf       	rjmp	.-34     	; 0x1468 <ButtonSetActionByName+0x70>

0000148a <SettingsLoad>:
		.ButtonAction =	DEFAULT_BUTTON_ACTION,
	} }
};

void SettingsLoad(void) {
	eeprom_read_block(&GlobalSettings, &StoredSettings, sizeof(SettingsType));
    148a:	8d e0       	ldi	r24, 0x0D	; 13
    148c:	91 e2       	ldi	r25, 0x21	; 33
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	43 e1       	ldi	r20, 0x13	; 19
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	0c 94 18 28 	jmp	0x5030	; 0x5030 <__eerd_block_x32a4u>

0000149a <SettingsSave>:
}
    149a:	8d e0       	ldi	r24, 0x0D	; 13

void SettingsSave(void) {
#if ENABLE_EEPROM_SETTINGS
	eeprom_write_block(&GlobalSettings, &StoredSettings, sizeof(SettingsType));
    149c:	91 e2       	ldi	r25, 0x21	; 33
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	43 e1       	ldi	r20, 0x13	; 19
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__eewr_block_x32a4u>

000014aa <SettingsSetActiveById>:
#endif
}
    14aa:	88 30       	cpi	r24, 0x08	; 8
		}
	}
}

void SettingsSetActiveById(uint8_t Setting) {
	if (Setting < SETTINGS_COUNT) {
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <SettingsSetActiveById+0x6>
    14ae:	08 95       	ret
		GlobalSettings.ActiveSetting = Setting;
    14b0:	80 93 0d 21 	sts	0x210D, r24
		GlobalSettings.ActiveSettingPtr =
				&GlobalSettings.Settings[GlobalSettings.ActiveSetting];
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	80 5f       	subi	r24, 0xF0	; 240
    14bc:	9e 4d       	sbci	r25, 0xDE	; 222
}

void SettingsSetActiveById(uint8_t Setting) {
	if (Setting < SETTINGS_COUNT) {
		GlobalSettings.ActiveSetting = Setting;
		GlobalSettings.ActiveSettingPtr =
    14be:	80 93 0e 21 	sts	0x210E, r24
    14c2:	90 93 0f 21 	sts	0x210F, r25
				&GlobalSettings.Settings[GlobalSettings.ActiveSetting];

		/* Settings have changed. Progress changes through system */
		ConfigurationInit();
    14c6:	0b ca       	rjmp	.-3050   	; 0x8de <ConfigurationInit>

000014c8 <SettingsCycle>:
    14c8:	80 91 0d 21 	lds	r24, 0x210D
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	87 70       	andi	r24, 0x07	; 7

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	f9 01       	movw	r30, r18
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	ef 5e       	subi	r30, 0xEF	; 239
    14dc:	fe 4d       	sbci	r31, 0xDE	; 222
    14de:	90 81       	ld	r25, Z
    14e0:	99 23       	and	r25, r25
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <SettingsCycle+0x1e>
    14e4:	5d c0       	rjmp	.+186    	; 0x15a0 <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    14e6:	c9 01       	movw	r24, r18
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	87 70       	andi	r24, 0x07	; 7

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	f9 01       	movw	r30, r18
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	ef 5e       	subi	r30, 0xEF	; 239
    14f8:	fe 4d       	sbci	r31, 0xDE	; 222
    14fa:	90 81       	ld	r25, Z
    14fc:	99 23       	and	r25, r25
    14fe:	09 f0       	breq	.+2      	; 0x1502 <SettingsCycle+0x3a>
    1500:	4f c0       	rjmp	.+158    	; 0x15a0 <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1502:	c9 01       	movw	r24, r18
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	87 70       	andi	r24, 0x07	; 7

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	f9 01       	movw	r30, r18
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	ef 5e       	subi	r30, 0xEF	; 239
    1514:	fe 4d       	sbci	r31, 0xDE	; 222
    1516:	90 81       	ld	r25, Z
    1518:	99 23       	and	r25, r25
    151a:	09 f0       	breq	.+2      	; 0x151e <SettingsCycle+0x56>
    151c:	41 c0       	rjmp	.+130    	; 0x15a0 <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    151e:	c9 01       	movw	r24, r18
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	87 70       	andi	r24, 0x07	; 7

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	f9 01       	movw	r30, r18
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	ef 5e       	subi	r30, 0xEF	; 239
    1530:	fe 4d       	sbci	r31, 0xDE	; 222
    1532:	90 81       	ld	r25, Z
    1534:	99 23       	and	r25, r25
    1536:	a1 f5       	brne	.+104    	; 0x15a0 <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1538:	c9 01       	movw	r24, r18
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	87 70       	andi	r24, 0x07	; 7

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	f9 01       	movw	r30, r18
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	ef 5e       	subi	r30, 0xEF	; 239
    154a:	fe 4d       	sbci	r31, 0xDE	; 222
    154c:	90 81       	ld	r25, Z
    154e:	99 23       	and	r25, r25
    1550:	39 f5       	brne	.+78     	; 0x15a0 <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1552:	c9 01       	movw	r24, r18
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	87 70       	andi	r24, 0x07	; 7

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	f9 01       	movw	r30, r18
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ef 5e       	subi	r30, 0xEF	; 239
    1564:	fe 4d       	sbci	r31, 0xDE	; 222
    1566:	90 81       	ld	r25, Z
    1568:	99 23       	and	r25, r25
    156a:	d1 f4       	brne	.+52     	; 0x15a0 <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    156c:	c9 01       	movw	r24, r18
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	87 70       	andi	r24, 0x07	; 7

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	ef 5e       	subi	r30, 0xEF	; 239
    157e:	fe 4d       	sbci	r31, 0xDE	; 222
    1580:	90 81       	ld	r25, Z
    1582:	99 23       	and	r25, r25
    1584:	69 f4       	brne	.+26     	; 0x15a0 <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1586:	c9 01       	movw	r24, r18
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	87 70       	andi	r24, 0x07	; 7

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    158c:	e8 2f       	mov	r30, r24
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	ef 5e       	subi	r30, 0xEF	; 239
    1596:	fe 4d       	sbci	r31, 0xDE	; 222
    1598:	90 81       	ld	r25, Z
    159a:	99 23       	and	r25, r25
    159c:	09 f4       	brne	.+2      	; 0x15a0 <SettingsCycle+0xd8>
    159e:	08 95       	ret
			SettingsSetActiveById(Setting);
    15a0:	84 cf       	rjmp	.-248    	; 0x14aa <SettingsSetActiveById>

000015a2 <SettingsGetActiveById>:
    15a2:	80 91 0d 21 	lds	r24, 0x210D
	}
}

uint8_t SettingsGetActiveById(void) {
	return GlobalSettings.ActiveSetting;
}
    15a6:	08 95       	ret

000015a8 <SettingsGetActiveByName>:

void SettingsGetActiveByName(char* SettingOut, uint16_t BufferSize) {
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
	SettingOut[0] = SettingsGetActiveById() + '0';
    15ae:	f9 df       	rcall	.-14     	; 0x15a2 <SettingsGetActiveById>
    15b0:	80 5d       	subi	r24, 0xD0	; 208
    15b2:	88 83       	st	Y, r24
    15b4:	19 82       	std	Y+1, r1	; 0x01
	SettingOut[1] = '\0';
    15b6:	df 91       	pop	r29
}
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <SettingsSetActiveByName>:
    15bc:	fc 01       	movw	r30, r24

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';
    15be:	80 81       	ld	r24, Z

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
    15c0:	91 81       	ldd	r25, Z+1	; 0x01
    15c2:	99 23       	and	r25, r25
    15c4:	41 f4       	brne	.+16     	; 0x15d6 <SettingsSetActiveByName+0x1a>
	SettingOut[0] = SettingsGetActiveById() + '0';
	SettingOut[1] = '\0';
}

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';
    15c6:	80 53       	subi	r24, 0x30	; 48

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
    15c8:	88 30       	cpi	r24, 0x08	; 8
    15ca:	10 f0       	brcs	.+4      	; 0x15d0 <SettingsSetActiveByName+0x14>
		SettingsSetActiveById(SettingNr);
		return true;
	} else {
		return false;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    15ce:	08 95       	ret

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
		SettingsSetActiveById(SettingNr);
    15d0:	6c df       	rcall	.-296    	; 0x14aa <SettingsSetActiveById>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
		return true;
    15d4:	08 95       	ret
    15d6:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		return false;
    15d8:	08 95       	ret

000015da <TerminalSendString>:

uint8_t TerminalBuffer[TERMINAL_BUFFER_SIZE];
TerminalStateEnum TerminalState = TERMINAL_UNINITIALIZED;
static uint8_t TerminalInitDelay = INIT_DELAY;

void TerminalSendString(const char* s) {
    15da:	bc 01       	movw	r22, r24
    CDC_Device_SendString(&TerminalHandle, s);
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e2       	ldi	r25, 0x20	; 32
    15e0:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <CDC_Device_SendString>

000015e4 <TerminalSendStringP>:
}
    15e4:	cf 93       	push	r28

void TerminalSendStringP(const char* s) {
    15e6:	df 93       	push	r29
    char c;

    while( (c = pgm_read_byte(s++)) != '\0' ) {
    15e8:	fc 01       	movw	r30, r24
    15ea:	64 91       	lpm	r22, Z
    15ec:	66 23       	and	r22, r22
    15ee:	59 f0       	breq	.+22     	; 0x1606 <TerminalSendStringP+0x22>
    15f0:	ec 01       	movw	r28, r24
    15f2:	21 96       	adiw	r28, 0x01	; 1
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e2       	ldi	r25, 0x20	; 32
    15f8:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    15fc:	fe 01       	movw	r30, r28
    15fe:	21 96       	adiw	r28, 0x01	; 1
    1600:	64 91       	lpm	r22, Z
    1602:	66 23       	and	r22, r22
    1604:	b9 f7       	brne	.-18     	; 0x15f4 <TerminalSendStringP+0x10>
        TerminalSendChar(c);
    }
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <TerminalSendBlock>:
#endif



void TerminalSendBlock(void* Buffer, uint16_t ByteCount)
{
    160c:	9c 01       	movw	r18, r24
    160e:	ab 01       	movw	r20, r22
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e2       	ldi	r25, 0x20	; 32
    1614:	b9 01       	movw	r22, r18
    1616:	0c 94 5f 24 	jmp	0x48be	; 0x48be <CDC_Device_SendData>

0000161a <TerminalInit>:
}
    161a:	80 e2       	ldi	r24, 0x20	; 32
    }
}

void TerminalInit(void)
{
    TERMINAL_VBUS_PORT.DIRCLR = TERMINAL_VBUS_MASK;
    161c:	e0 e6       	ldi	r30, 0x60	; 96
    161e:	f6 e0       	ldi	r31, 0x06	; 6
    1620:	82 83       	std	Z+2, r24	; 0x02
}
    1622:	08 95       	ret

00001624 <TerminalTask>:

void TerminalTask(void)
{
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
	CDC_Device_USBTask(&TerminalHandle);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e2       	ldi	r25, 0x20	; 32
    162c:	0e 94 f5 24 	call	0x49ea	; 0x49ea <CDC_Device_USBTask>
	USB_USBTask();
    1630:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <USB_USBTask>
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
}


static void ProcessByte(void) {
    int16_t Byte = CDC_Device_ReceiveByte(&TerminalHandle);
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e2       	ldi	r25, 0x20	; 32
    1638:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <CDC_Device_ReceiveByte>
    163c:	ec 01       	movw	r28, r24

    if (Byte >= 0) {
    163e:	97 fd       	sbrc	r25, 7
    1640:	0a c0       	rjmp	.+20     	; 0x1656 <TerminalTask+0x32>
    LED_PORT.OUTTGL = Mask;
}

static inline
void LEDPulse(uint8_t Mask) {
	LEDPulseMask = Mask;
    1642:	80 e1       	ldi	r24, 0x10	; 16
    1644:	80 93 a3 20 	sts	0x20A3, r24
	LED_PORT.OUTSET = Mask;
    1648:	e0 e0       	ldi	r30, 0x00	; 0
    164a:	f6 e0       	ldi	r31, 0x06	; 6
    164c:	85 83       	std	Z+5, r24	; 0x05
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
    164e:	8c 2f       	mov	r24, r28
    1650:	b3 d2       	rcall	.+1382   	; 0x1bb8 <XModemProcessByte>
    1652:	88 23       	and	r24, r24
    1654:	19 f0       	breq	.+6      	; 0x165c <TerminalTask+0x38>
    1656:	df 91       	pop	r29
{
	CDC_Device_USBTask(&TerminalHandle);
	USB_USBTask();

    ProcessByte();
}
    1658:	cf 91       	pop	r28
    165a:	08 95       	ret
    165c:	8c 2f       	mov	r24, r28
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    165e:	33 d4       	rcall	.+2150   	; 0x1ec6 <CommandLineProcessByte>
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
{
	CDC_Device_USBTask(&TerminalHandle);
	USB_USBTask();

    ProcessByte();
}
    1664:	08 95       	ret

00001666 <TerminalTick>:
    1666:	80 91 a4 20 	lds	r24, 0x20A4
    }
}

static void SenseVBus(void)
{
    switch(TerminalState) {
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	09 f1       	breq	.+66     	; 0x16b0 <TerminalTick+0x4a>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	30 f0       	brcs	.+12     	; 0x167e <TerminalTick+0x18>
    1672:	82 30       	cpi	r24, 0x02	; 2
    1674:	59 f1       	breq	.+86     	; 0x16cc <TerminalTick+0x66>
    1676:	83 30       	cpi	r24, 0x03	; 3
    1678:	71 f0       	breq	.+28     	; 0x1696 <TerminalTick+0x30>

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    167a:	f7 d3       	rcall	.+2030   	; 0x1e6a <XModemTick>
    167c:	c7 c5       	rjmp	.+2958   	; 0x220c <CommandLineTick>
    CommandLineTick();
    167e:	80 91 68 06 	lds	r24, 0x0668
}
    1682:	85 ff       	sbrs	r24, 5

static void SenseVBus(void)
{
    switch(TerminalState) {
    case TERMINAL_UNINITIALIZED:
    	if (TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK) {
    1684:	fa cf       	rjmp	.-12     	; 0x167a <TerminalTick+0x14>
    1686:	84 e1       	ldi	r24, 0x14	; 20
    1688:	80 93 1b 20 	sts	0x201B, r24
    		/* Not initialized and VBUS sense high */
    		TerminalInitDelay = INIT_DELAY;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 a4 20 	sts	0x20A4, r24
    		TerminalState = TERMINAL_INITIALIZING;
    1692:	eb d3       	rcall	.+2006   	; 0x1e6a <XModemTick>
    1694:	bb c5       	rjmp	.+2934   	; 0x220c <CommandLineTick>
    1696:	80 91 1b 20 	lds	r24, 0x201B

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    169a:	81 50       	subi	r24, 0x01	; 1
    CommandLineTick();
    169c:	80 93 1b 20 	sts	0x201B, r24
}
    16a0:	88 23       	and	r24, r24
    		TerminalState = TERMINAL_UNITIALIZING;
    	}
    	break;

    case TERMINAL_UNITIALIZING:
    	if (--TerminalInitDelay == 0) {
    16a2:	59 f7       	brne	.-42     	; 0x167a <TerminalTick+0x14>
    16a4:	0e 94 88 22 	call	0x4510	; 0x4510 <USB_Disable>
    16a8:	d3 d8       	rcall	.-3674   	; 0x850 <SystemStopUSBClock>
    16aa:	10 92 a4 20 	sts	0x20A4, r1
    16ae:	e5 cf       	rjmp	.-54     	; 0x167a <TerminalTick+0x14>
        	USB_Disable();
    16b0:	80 91 1b 20 	lds	r24, 0x201B
        	SystemStopUSBClock();
    16b4:	81 50       	subi	r24, 0x01	; 1
    16b6:	80 93 1b 20 	sts	0x201B, r24
        	TerminalState = TERMINAL_UNINITIALIZED;
    16ba:	88 23       	and	r24, r24
    16bc:	f1 f6       	brne	.-68     	; 0x167a <TerminalTick+0x14>
    		TerminalState = TERMINAL_INITIALIZING;
    	}
    break;

    case TERMINAL_INITIALIZING:
    	if (--TerminalInitDelay == 0) {
    16be:	ad d8       	rcall	.-3750   	; 0x81a <SystemStartUSBClock>
    16c0:	0e 94 c3 22 	call	0x4586	; 0x4586 <USB_Init>
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	80 93 a4 20 	sts	0x20A4, r24
    16ca:	d7 cf       	rjmp	.-82     	; 0x167a <TerminalTick+0x14>
            SystemStartUSBClock();
    16cc:	80 91 68 06 	lds	r24, 0x0668
            USB_Init();
    16d0:	85 fd       	sbrc	r24, 5
    16d2:	d3 cf       	rjmp	.-90     	; 0x167a <TerminalTick+0x14>
            TerminalState = TERMINAL_INITIALIZED;
    16d4:	84 e1       	ldi	r24, 0x14	; 20
    16d6:	80 93 1b 20 	sts	0x201B, r24
    16da:	83 e0       	ldi	r24, 0x03	; 3
    	}
    	break;

    case TERMINAL_INITIALIZED:
    	if (!(TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK)) {
    16dc:	80 93 a4 20 	sts	0x20A4, r24
    16e0:	c4 d3       	rcall	.+1928   	; 0x1e6a <XModemTick>
    16e2:	94 c5       	rjmp	.+2856   	; 0x220c <CommandLineTick>

000016e4 <EVENT_USB_Device_Connect>:
    		/* Initialized and VBUS sense low */
    		TerminalInitDelay = INIT_DELAY;
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	e0 e0       	ldi	r30, 0x00	; 0
    16e8:	f6 e0       	ldi	r31, 0x06	; 6
    		TerminalState = TERMINAL_UNITIALIZING;
    16ea:	85 83       	std	Z+5, r24	; 0x05
    16ec:	08 95       	ret

000016ee <EVENT_USB_Device_Disconnect>:
    16ee:	80 e2       	ldi	r24, 0x20	; 32

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    16f0:	e0 e0       	ldi	r30, 0x00	; 0
    16f2:	f6 e0       	ldi	r31, 0x06	; 6
    CommandLineTick();
    16f4:	86 83       	std	Z+6, r24	; 0x06
    16f6:	08 95       	ret

000016f8 <EVENT_USB_Device_ConfigurationChanged>:
}
    16f8:	80 e0       	ldi	r24, 0x00	; 0


/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    CDC_Device_ConfigureEndpoints(&TerminalHandle);
    16fa:	90 e2       	ldi	r25, 0x20	; 32
    16fc:	0c 94 15 24 	jmp	0x482a	; 0x482a <CDC_Device_ConfigureEndpoints>

00001700 <EVENT_USB_Device_ControlRequest>:
}
    1700:	80 e0       	ldi	r24, 0x00	; 0

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    CDC_Device_ProcessControlRequest(&TerminalHandle);
    1702:	90 e2       	ldi	r25, 0x20	; 32
    1704:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <CDC_Device_ProcessControlRequest>

00001708 <CommandGetVersion>:

extern const PROGMEM CommandEntryType CommandTable[];

CommandStatusIdType CommandGetVersion(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR(
    1708:	2d b7       	in	r18, 0x3d	; 61
    170a:	3e b7       	in	r19, 0x3e	; 62
    170c:	2c 50       	subi	r18, 0x0C	; 12
    170e:	30 40       	sbci	r19, 0x00	; 0
    1710:	2d bf       	out	0x3d, r18	; 61
    1712:	3e bf       	out	0x3e, r19	; 62
    1714:	ed b7       	in	r30, 0x3d	; 61
    1716:	fe b7       	in	r31, 0x3e	; 62
    1718:	31 96       	adiw	r30, 0x01	; 1
    171a:	ad b7       	in	r26, 0x3d	; 61
    171c:	be b7       	in	r27, 0x3e	; 62
    171e:	11 96       	adiw	r26, 0x01	; 1
    1720:	8d 93       	st	X+, r24
    1722:	9c 93       	st	X, r25
    1724:	12 97       	sbiw	r26, 0x02	; 2
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	82 83       	std	Z+2, r24	; 0x02
    172c:	93 83       	std	Z+3, r25	; 0x03
    172e:	87 ed       	ldi	r24, 0xD7	; 215
    1730:	93 e0       	ldi	r25, 0x03	; 3
    1732:	84 83       	std	Z+4, r24	; 0x04
    1734:	95 83       	std	Z+5, r25	; 0x05
    1736:	80 e1       	ldi	r24, 0x10	; 16
    1738:	94 e0       	ldi	r25, 0x04	; 4
    173a:	86 83       	std	Z+6, r24	; 0x06
    173c:	97 83       	std	Z+7, r25	; 0x07
    173e:	87 e1       	ldi	r24, 0x17	; 23
    1740:	94 e0       	ldi	r25, 0x04	; 4
    1742:	80 87       	std	Z+8, r24	; 0x08
    1744:	91 87       	std	Z+9, r25	; 0x09
    1746:	8e e1       	ldi	r24, 0x1E	; 30
    1748:	94 e0       	ldi	r25, 0x04	; 4
    174a:	82 87       	std	Z+10, r24	; 0x0a
    174c:	93 87       	std	Z+11, r25	; 0x0b
    174e:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <snprintf_P>
    "Chameleon-Mini %S using LUFA %S compiled with AVR-GCC %S"
    ), PSTR(CHAMELEON_MINI_VERSION_STRING), PSTR(LUFA_VERSION_STRING), PSTR(__VERSION__)
  );

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1752:	2d b7       	in	r18, 0x3d	; 61
    1754:	3e b7       	in	r19, 0x3e	; 62
    1756:	24 5f       	subi	r18, 0xF4	; 244
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	2d bf       	out	0x3d, r18	; 61
    175c:	3e bf       	out	0x3e, r19	; 62
}
    175e:	85 e6       	ldi	r24, 0x65	; 101
    1760:	08 95       	ret

00001762 <CommandGetConfig>:

CommandStatusIdType CommandGetConfig(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    1762:	2d b7       	in	r18, 0x3d	; 61
    1764:	3e b7       	in	r19, 0x3e	; 62
    1766:	28 50       	subi	r18, 0x08	; 8
    1768:	30 40       	sbci	r19, 0x00	; 0
    176a:	2d bf       	out	0x3d, r18	; 61
    176c:	3e bf       	out	0x3e, r19	; 62
    176e:	ed b7       	in	r30, 0x3d	; 61
    1770:	fe b7       	in	r31, 0x3e	; 62
    1772:	31 96       	adiw	r30, 0x01	; 1
    1774:	ad b7       	in	r26, 0x3d	; 61
    1776:	be b7       	in	r27, 0x3e	; 62
    1778:	11 96       	adiw	r26, 0x01	; 1
    177a:	8d 93       	st	X+, r24
    177c:	9c 93       	st	X, r25
    177e:	12 97       	sbiw	r26, 0x02	; 2
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	93 83       	std	Z+3, r25	; 0x03
    1788:	84 e2       	ldi	r24, 0x24	; 36
    178a:	94 e0       	ldi	r25, 0x04	; 4
    178c:	84 83       	std	Z+4, r24	; 0x04
    178e:	95 83       	std	Z+5, r25	; 0x05
    1790:	89 ee       	ldi	r24, 0xE9	; 233
    1792:	90 e2       	ldi	r25, 0x20	; 32
    1794:	86 83       	std	Z+6, r24	; 0x06
    1796:	97 83       	std	Z+7, r25	; 0x07
    1798:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <snprintf_P>
    PSTR("%s"), ActiveConfiguration.ConfigurationName);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    179c:	2d b7       	in	r18, 0x3d	; 61
    179e:	3e b7       	in	r19, 0x3e	; 62
    17a0:	28 5f       	subi	r18, 0xF8	; 248
    17a2:	3f 4f       	sbci	r19, 0xFF	; 255
    17a4:	2d bf       	out	0x3d, r18	; 61
    17a6:	3e bf       	out	0x3e, r19	; 62

}
    17a8:	85 e6       	ldi	r24, 0x65	; 101
    17aa:	08 95       	ret

000017ac <CommandSetConfig>:

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
    17ac:	9e d8       	rcall	.-3780   	; 0x8ea <ConfigurationSetByName>
    17ae:	88 23       	and	r24, r24
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <CommandSetConfig+0xa>
    17b2:	8a ec       	ldi	r24, 0xCA	; 202
	    SettingsSave();
    return COMMAND_INFO_OK_ID;
  } else {
    return COMMAND_ERR_INVALID_PARAM_ID;
    17b4:	08 95       	ret
  }
}
    17b6:	71 de       	rcall	.-798    	; 0x149a <SettingsSave>
}

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
	    SettingsSave();
    17b8:	84 e6       	ldi	r24, 0x64	; 100
    17ba:	08 95       	ret

000017bc <CommandExecConfig>:
    return COMMAND_INFO_OK_ID;
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	71 e0       	ldi	r23, 0x01	; 1
  }
}

CommandStatusIdType CommandExecConfig(char* OutMessage)
{
  ConfigurationGetList(OutMessage, TERMINAL_BUFFER_SIZE);
    17c0:	dc d8       	rcall	.-3656   	; 0x97a <ConfigurationGetList>
    17c2:	85 e6       	ldi	r24, 0x65	; 101

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    17c4:	08 95       	ret

000017c6 <CommandGetUid>:
    17c6:	0f 93       	push	r16

CommandStatusIdType CommandGetUid(char* OutParam)
{
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	a1 97       	sbiw	r28, 0x21	; 33
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    17da:	20 91 0b 21 	lds	r18, 0x210B
INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    17de:	e0 91 05 21 	lds	r30, 0x2105
    17e2:	f0 91 06 21 	lds	r31, 0x2106
    17e6:	ce 01       	movw	r24, r28
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	29 a3       	lds	r18, 0x59
    17ec:	09 95       	icall

  ApplicationGetUid(UidBuffer);

  BufferToHexString(OutParam, TERMINAL_BUFFER_SIZE,
    17ee:	c8 01       	movw	r24, r16
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	71 e0       	ldi	r23, 0x01	; 1
    17f4:	ae 01       	movw	r20, r28
    17f6:	4f 5f       	subi	r20, 0xFF	; 255
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	29 a1       	lds	r18, 0x49
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	1a d9       	rcall	.-3532   	; 0xa34 <BufferToHexString>
    1800:	85 e6       	ldi	r24, 0x65	; 101
    UidBuffer, UidSize);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1802:	a1 96       	adiw	r28, 0x21	; 33
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <CommandSetUid>:
    1812:	bf 92       	push	r11

CommandStatusIdType CommandSetUid(const char* InParam)
{
    1814:	cf 92       	push	r12
    1816:	df 92       	push	r13
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	a0 97       	sbiw	r28, 0x20	; 32
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    1830:	e0 90 0b 21 	lds	r14, 0x210B
    1834:	ff 24       	eor	r15, r15

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    1836:	67 e2       	ldi	r22, 0x27	; 39
    1838:	74 e0       	ldi	r23, 0x04	; 4
    183a:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	49 f5       	brne	.+82     	; 0x1894 <CommandSetUid+0x82>
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    1842:	e1 14       	cp	r14, r1
    1844:	f1 04       	cpc	r15, r1
    1846:	a1 f1       	breq	.+104    	; 0x18b0 <CommandSetUid+0x9e>
    1848:	bb 24       	eor	r11, r11
    184a:	00 e0       	ldi	r16, 0x00	; 0
    184c:	10 e0       	ldi	r17, 0x00	; 0
    184e:	6e 01       	movw	r12, r28
    1850:	08 94       	sec
    1852:	c1 1c       	adc	r12, r1
    1854:	d1 1c       	adc	r13, r1
      UidBuffer[i] = RandomGetByte();
    1856:	cc d8       	rcall	.-3688   	; 0x9f0 <RandomGetByte>
    1858:	f6 01       	movw	r30, r12
    185a:	e0 0f       	add	r30, r16
    185c:	f1 1f       	adc	r31, r17
    185e:	80 83       	st	Z, r24
    1860:	b3 94       	inc	r11
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    1862:	0b 2d       	mov	r16, r11
    1864:	10 e0       	ldi	r17, 0x00	; 0
    1866:	0e 15       	cp	r16, r14
    1868:	1f 05       	cpc	r17, r15
    186a:	a8 f3       	brcs	.-22     	; 0x1856 <CommandSetUid+0x44>
    186c:	e0 91 07 21 	lds	r30, 0x2107
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    1870:	f0 91 08 21 	lds	r31, 0x2108
    1874:	c6 01       	movw	r24, r12
    1876:	09 95       	icall
    1878:	84 e6       	ldi	r24, 0x64	; 100
    }
  }

  ApplicationSetUid(UidBuffer);

  return COMMAND_INFO_OK_ID;
    187a:	a0 96       	adiw	r28, 0x20	; 32
}
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	de bf       	out	0x3e, r29	; 62
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	bf 90       	pop	r11
    1892:	08 95       	ret
    1894:	6e 01       	movw	r12, r28
    for (uint8_t i=0; i<UidSize; i++) {
      UidBuffer[i] = RandomGetByte();
    }
  } else {
    /* Convert to Bytes */
    if (HexStringToBuffer(UidBuffer, sizeof(UidBuffer), InParam) != UidSize) {
    1896:	08 94       	sec
    1898:	c1 1c       	adc	r12, r1
    189a:	d1 1c       	adc	r13, r1
    189c:	c6 01       	movw	r24, r12
    189e:	60 e2       	ldi	r22, 0x20	; 32
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	a8 01       	movw	r20, r16
    18a4:	04 d9       	rcall	.-3576   	; 0xaae <HexStringToBuffer>
    18a6:	8e 15       	cp	r24, r14
    18a8:	9f 05       	cpc	r25, r15
    18aa:	01 f3       	breq	.-64     	; 0x186c <CommandSetUid+0x5a>
    18ac:	8a ec       	ldi	r24, 0xCA	; 202
    18ae:	e5 cf       	rjmp	.-54     	; 0x187a <CommandSetUid+0x68>
      /* Malformed input. Abort */
      return COMMAND_ERR_INVALID_PARAM_ID;
    18b0:	6e 01       	movw	r12, r28
    18b2:	08 94       	sec
    18b4:	c1 1c       	adc	r12, r1
    18b6:	d1 1c       	adc	r13, r1
    18b8:	d9 cf       	rjmp	.-78     	; 0x186c <CommandSetUid+0x5a>

000018ba <CommandGetReadOnly>:
    18ba:	fc 01       	movw	r30, r24
    18bc:	80 91 0c 21 	lds	r24, 0x210C
  return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    18c0:	88 23       	and	r24, r24
    18c2:	29 f4       	brne	.+10     	; 0x18ce <CommandGetReadOnly+0x14>
    OutParam[0] = COMMAND_CHAR_TRUE;
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
    18c4:	80 e3       	ldi	r24, 0x30	; 48
    18c6:	80 83       	st	Z, r24
  }

  OutParam[1] = '\0';
    18c8:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    18ca:	85 e6       	ldi	r24, 0x65	; 101
    18cc:	08 95       	ret
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    OutParam[0] = COMMAND_CHAR_TRUE;
    18ce:	81 e3       	ldi	r24, 0x31	; 49
    18d0:	80 83       	st	Z, r24
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
  }

  OutParam[1] = '\0';
    18d2:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    18d4:	85 e6       	ldi	r24, 0x65	; 101
    18d6:	08 95       	ret

000018d8 <CommandSetReadOnly>:

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
    18d8:	fc 01       	movw	r30, r24
  if (InParam[1] == '\0') {
    18da:	81 81       	ldd	r24, Z+1	; 0x01
    18dc:	88 23       	and	r24, r24
    18de:	39 f4       	brne	.+14     	; 0x18ee <CommandSetReadOnly+0x16>
    if (InParam[0] == COMMAND_CHAR_TRUE) {
    18e0:	80 81       	ld	r24, Z
    18e2:	81 33       	cpi	r24, 0x31	; 49
    18e4:	31 f0       	breq	.+12     	; 0x18f2 <CommandSetReadOnly+0x1a>
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
    18e6:	80 33       	cpi	r24, 0x30	; 48
    18e8:	49 f0       	breq	.+18     	; 0x18fc <CommandSetReadOnly+0x24>
      ActiveConfiguration.ReadOnly = false;
      return COMMAND_INFO_OK_ID;
    }
  }

  return COMMAND_ERR_INVALID_PARAM_ID;
    18ea:	8a ec       	ldi	r24, 0xCA	; 202
}
    18ec:	08 95       	ret
      ActiveConfiguration.ReadOnly = false;
      return COMMAND_INFO_OK_ID;
    }
  }

  return COMMAND_ERR_INVALID_PARAM_ID;
    18ee:	8a ec       	ldi	r24, 0xCA	; 202
    18f0:	08 95       	ret

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	80 93 0c 21 	sts	0x210C, r24
      return COMMAND_INFO_OK_ID;
    18f8:	84 e6       	ldi	r24, 0x64	; 100
    18fa:	08 95       	ret
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
      ActiveConfiguration.ReadOnly = false;
    18fc:	10 92 0c 21 	sts	0x210C, r1
      return COMMAND_INFO_OK_ID;
    1900:	84 e6       	ldi	r24, 0x64	; 100
    1902:	08 95       	ret

00001904 <CommandExecUpload>:
  return COMMAND_ERR_INVALID_PARAM_ID;
}

CommandStatusIdType CommandExecUpload(char* OutMessage)
{
    XModemReceive(MemoryUploadBlock);
    1904:	82 e7       	ldi	r24, 0x72	; 114
    1906:	98 e0       	ldi	r25, 0x08	; 8
    1908:	2c d1       	rcall	.+600    	; 0x1b62 <XModemReceive>
    190a:	8e e6       	ldi	r24, 0x6E	; 110
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    190c:	08 95       	ret

0000190e <CommandExecDownload>:
    190e:	80 ea       	ldi	r24, 0xA0	; 160

CommandStatusIdType CommandExecDownload(char* OutMessage)
{
    XModemSend(MemoryDownloadBlock);
    1910:	98 e0       	ldi	r25, 0x08	; 8
    1912:	3f d1       	rcall	.+638    	; 0x1b92 <XModemSend>
    1914:	8e e6       	ldi	r24, 0x6E	; 110
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    1916:	08 95       	ret

00001918 <CommandExecReset>:
    1918:	e0 ec       	ldi	r30, 0xC0	; 192
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    191a:	f4 e0       	ldi	r31, 0x04	; 4
    191c:	81 81       	ldd	r24, Z+1	; 0x01
    191e:	8e 7f       	andi	r24, 0xFE	; 254
    1920:	81 83       	std	Z+1, r24	; 0x01

CommandStatusIdType CommandExecReset(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    1922:	0e 94 88 22 	call	0x4510	; 0x4510 <USB_Disable>

  SystemReset();
    1926:	0e 94 00 04 	call	0x800	; 0x800 <SystemReset>

  return COMMAND_INFO_OK_ID;
}
    192a:	84 e6       	ldi	r24, 0x64	; 100
    192c:	08 95       	ret

0000192e <CommandExecUpgrade>:
    192e:	e0 ec       	ldi	r30, 0xC0	; 192
    1930:	f4 e0       	ldi	r31, 0x04	; 4
    1932:	81 81       	ldd	r24, Z+1	; 0x01
    1934:	8e 7f       	andi	r24, 0xFE	; 254
    1936:	81 83       	std	Z+1, r24	; 0x01

#ifdef SUPPORT_FIRMWARE_UPGRADE
CommandStatusIdType CommandExecUpgrade(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    1938:	0e 94 88 22 	call	0x4510	; 0x4510 <USB_Disable>

  SystemEnterBootloader();
    193c:	0e 94 07 04 	call	0x80e	; 0x80e <SystemEnterBootloader>

  return COMMAND_INFO_OK_ID;
}
    1940:	84 e6       	ldi	r24, 0x64	; 100
    1942:	08 95       	ret

00001944 <CommandGetMemSize>:
#endif

CommandStatusIdType CommandGetMemSize(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.MemorySize);
    1944:	2d b7       	in	r18, 0x3d	; 61
    1946:	3e b7       	in	r19, 0x3e	; 62
    1948:	28 50       	subi	r18, 0x08	; 8
    194a:	30 40       	sbci	r19, 0x00	; 0
    194c:	2d bf       	out	0x3d, r18	; 61
    194e:	3e bf       	out	0x3e, r19	; 62
    1950:	ed b7       	in	r30, 0x3d	; 61
    1952:	fe b7       	in	r31, 0x3e	; 62
    1954:	31 96       	adiw	r30, 0x01	; 1
    1956:	ad b7       	in	r26, 0x3d	; 61
    1958:	be b7       	in	r27, 0x3e	; 62
    195a:	11 96       	adiw	r26, 0x01	; 1
    195c:	8d 93       	st	X+, r24
    195e:	9c 93       	st	X, r25
    1960:	12 97       	sbiw	r26, 0x02	; 2
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	82 83       	std	Z+2, r24	; 0x02
    1968:	93 83       	std	Z+3, r25	; 0x03
    196a:	8e e2       	ldi	r24, 0x2E	; 46
    196c:	94 e0       	ldi	r25, 0x04	; 4
    196e:	84 83       	std	Z+4, r24	; 0x04
    1970:	95 83       	std	Z+5, r25	; 0x05
    1972:	80 91 09 21 	lds	r24, 0x2109
    1976:	90 91 0a 21 	lds	r25, 0x210A
    197a:	86 83       	std	Z+6, r24	; 0x06
    197c:	97 83       	std	Z+7, r25	; 0x07
    197e:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <snprintf_P>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1982:	2d b7       	in	r18, 0x3d	; 61
    1984:	3e b7       	in	r19, 0x3e	; 62
    1986:	28 5f       	subi	r18, 0xF8	; 248
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	2d bf       	out	0x3d, r18	; 61
    198c:	3e bf       	out	0x3e, r19	; 62
}
    198e:	85 e6       	ldi	r24, 0x65	; 101
    1990:	08 95       	ret

00001992 <CommandGetUidSize>:

CommandStatusIdType CommandGetUidSize(char* OutParam)
{
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.UidSize);
    1992:	2d b7       	in	r18, 0x3d	; 61
    1994:	3e b7       	in	r19, 0x3e	; 62
    1996:	28 50       	subi	r18, 0x08	; 8
    1998:	30 40       	sbci	r19, 0x00	; 0
    199a:	2d bf       	out	0x3d, r18	; 61
    199c:	3e bf       	out	0x3e, r19	; 62
    199e:	ed b7       	in	r30, 0x3d	; 61
    19a0:	fe b7       	in	r31, 0x3e	; 62
    19a2:	31 96       	adiw	r30, 0x01	; 1
    19a4:	ad b7       	in	r26, 0x3d	; 61
    19a6:	be b7       	in	r27, 0x3e	; 62
    19a8:	11 96       	adiw	r26, 0x01	; 1
    19aa:	8d 93       	st	X+, r24
    19ac:	9c 93       	st	X, r25
    19ae:	12 97       	sbiw	r26, 0x02	; 2
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	82 83       	std	Z+2, r24	; 0x02
    19b6:	93 83       	std	Z+3, r25	; 0x03
    19b8:	81 e3       	ldi	r24, 0x31	; 49
    19ba:	94 e0       	ldi	r25, 0x04	; 4
    19bc:	84 83       	std	Z+4, r24	; 0x04
    19be:	95 83       	std	Z+5, r25	; 0x05
    19c0:	80 91 0b 21 	lds	r24, 0x210B
    19c4:	86 83       	std	Z+6, r24	; 0x06
    19c6:	17 82       	std	Z+7, r1	; 0x07
    19c8:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <snprintf_P>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
    19cc:	2d b7       	in	r18, 0x3d	; 61
    19ce:	3e b7       	in	r19, 0x3e	; 62
    19d0:	28 5f       	subi	r18, 0xF8	; 248
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	2d bf       	out	0x3d, r18	; 61
    19d6:	3e bf       	out	0x3e, r19	; 62
}
    19d8:	85 e6       	ldi	r24, 0x65	; 101
    19da:	08 95       	ret

000019dc <CommandExecButton>:

CommandStatusIdType CommandExecButton(char* OutMessage)
{
    ButtonGetActionList(OutMessage, TERMINAL_BUFFER_SIZE);
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	71 e0       	ldi	r23, 0x01	; 1
    19e0:	c2 dc       	rcall	.-1660   	; 0x1366 <ButtonGetActionList>
    19e2:	85 e6       	ldi	r24, 0x65	; 101

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    19e4:	08 95       	ret

000019e6 <CommandGetButton>:
    19e6:	60 e0       	ldi	r22, 0x00	; 0

CommandStatusIdType CommandGetButton(char* OutParam)
{
    ButtonGetActionByName(OutParam, TERMINAL_BUFFER_SIZE);
    19e8:	71 e0       	ldi	r23, 0x01	; 1
    19ea:	f3 dc       	rcall	.-1562   	; 0x13d2 <ButtonGetActionByName>
    19ec:	85 e6       	ldi	r24, 0x65	; 101

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    19ee:	08 95       	ret

000019f0 <CommandSetButton>:
    19f0:	03 dd       	rcall	.-1530   	; 0x13f8 <ButtonSetActionByName>

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(InParam)) {
    19f2:	88 23       	and	r24, r24
    19f4:	11 f4       	brne	.+4      	; 0x19fa <CommandSetButton+0xa>
    19f6:	8a ec       	ldi	r24, 0xCA	; 202
        SettingsSave();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    19f8:	08 95       	ret
    }
}
    19fa:	4f dd       	rcall	.-1378   	; 0x149a <SettingsSave>
}

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(InParam)) {
        SettingsSave();
    19fc:	84 e6       	ldi	r24, 0x64	; 100
    19fe:	08 95       	ret

00001a00 <CommandGetSetting>:
        return COMMAND_INFO_OK_ID;
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	71 e0       	ldi	r23, 0x01	; 1
    }
}

CommandStatusIdType CommandGetSetting(char* OutParam)
{
	SettingsGetActiveByName(OutParam, TERMINAL_BUFFER_SIZE);
    1a04:	d1 dd       	rcall	.-1118   	; 0x15a8 <SettingsGetActiveByName>
    1a06:	85 e6       	ldi	r24, 0x65	; 101
	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1a08:	08 95       	ret

00001a0a <CommandSetSetting>:
    1a0a:	d8 dd       	rcall	.-1104   	; 0x15bc <SettingsSetActiveByName>

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
    1a0c:	88 23       	and	r24, r24
    1a0e:	11 f4       	brne	.+4      	; 0x1a14 <CommandSetSetting+0xa>
    1a10:	8a ec       	ldi	r24, 0xCA	; 202
		SettingsSave();
		return COMMAND_INFO_OK_ID;
	} else {
		return COMMAND_ERR_INVALID_PARAM_ID;
    1a12:	08 95       	ret
	}
}
    1a14:	42 dd       	rcall	.-1404   	; 0x149a <SettingsSave>
}

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
		SettingsSave();
    1a16:	84 e6       	ldi	r24, 0x64	; 100
    1a18:	08 95       	ret

00001a1a <CommandExecClear>:
		return COMMAND_INFO_OK_ID;
    1a1a:	fe da       	rcall	.-2564   	; 0x1018 <MemoryClear>
    1a1c:	84 e6       	ldi	r24, 0x64	; 100

CommandStatusIdType CommandExecClear(char* OutParam)
{
	MemoryClear();
	return COMMAND_INFO_OK_ID;
}
    1a1e:	08 95       	ret

00001a20 <CommandExecHelp>:
    1a20:	bf 92       	push	r11

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	7c 01       	movw	r14, r24
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */
    1a34:	cf ef       	ldi	r28, 0xFF	; 255
    1a36:	d0 e0       	ldi	r29, 0x00	; 0
	return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    1a38:	2b e3       	ldi	r18, 0x3B	; 59
    1a3a:	c2 2e       	mov	r12, r18
    1a3c:	24 e0       	ldi	r18, 0x04	; 4
    1a3e:	d2 2e       	mov	r13, r18
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    1a40:	3c e2       	ldi	r19, 0x2C	; 44
    1a42:	b3 2e       	mov	r11, r19
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    1a44:	86 01       	movw	r16, r12
    1a46:	8c e1       	ldi	r24, 0x1C	; 28
    1a48:	90 e2       	ldi	r25, 0x20	; 32
    1a4a:	b6 01       	movw	r22, r12
    1a4c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	29 f1       	breq	.+74     	; 0x1a9e <CommandExecHelp+0x7e>
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    1a54:	f6 01       	movw	r30, r12
    1a56:	84 91       	lpm	r24, Z
    1a58:	88 23       	and	r24, r24
    1a5a:	89 f0       	breq	.+34     	; 0x1a7e <CommandExecHelp+0x5e>
    1a5c:	c1 32       	cpi	r28, 0x21	; 33
    1a5e:	d1 05       	cpc	r29, r1
    1a60:	70 f0       	brcs	.+28     	; 0x1a7e <CommandExecHelp+0x5e>
    1a62:	d7 01       	movw	r26, r14
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <CommandExecHelp+0x4c>
    1a66:	c0 32       	cpi	r28, 0x20	; 32
    1a68:	d1 05       	cpc	r29, r1
    1a6a:	49 f0       	breq	.+18     	; 0x1a7e <CommandExecHelp+0x5e>
            *OutMessage++ = c;
    1a6c:	8d 93       	st	X+, r24
    1a6e:	7d 01       	movw	r14, r26
            CommandName++;
    1a70:	0f 5f       	subi	r16, 0xFF	; 255
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
            ByteCount--;
    1a74:	21 97       	sbiw	r28, 0x01	; 1

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    1a76:	f8 01       	movw	r30, r16
    1a78:	84 91       	lpm	r24, Z
    1a7a:	88 23       	and	r24, r24
    1a7c:	a1 f7       	brne	.-24     	; 0x1a66 <CommandExecHelp+0x46>
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    1a7e:	f7 01       	movw	r30, r14
    1a80:	b1 92       	st	Z+, r11
    1a82:	7f 01       	movw	r14, r30
        ByteCount--;
    1a84:	21 97       	sbiw	r28, 0x01	; 1

        EntryPtr++;
    1a86:	86 e1       	ldi	r24, 0x16	; 22
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	c8 0e       	add	r12, r24
    1a8c:	d9 1e       	adc	r13, r25
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    1a8e:	86 01       	movw	r16, r12
    1a90:	8c e1       	ldi	r24, 0x1C	; 28
    1a92:	90 e2       	ldi	r25, 0x20	; 32
    1a94:	b6 01       	movw	r22, r12
    1a96:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	d9 f6       	brne	.-74     	; 0x1a54 <CommandExecHelp+0x34>
        ByteCount--;

        EntryPtr++;
    }

    *--OutMessage = '\0';
    1a9e:	f7 01       	movw	r30, r14
    1aa0:	31 97       	sbiw	r30, 0x01	; 1
    1aa2:	10 82       	st	Z, r1

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1aa4:	85 e6       	ldi	r24, 0x65	; 101
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	08 95       	ret

00001aba <CommandGetRssi>:

CommandStatusIdType CommandGetRssi(char* OutParam)
{
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
}

static inline
uint16_t AntennaLevelGet(void)
{
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
    1abe:	20 91 20 02 	lds	r18, 0x0220
    1ac2:	20 68       	ori	r18, 0x80	; 128
    1ac4:	e0 e0       	ldi	r30, 0x00	; 0
    1ac6:	f2 e0       	ldi	r31, 0x02	; 2
    1ac8:	20 a3       	lds	r18, 0x50
	while( !(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm) );
    1aca:	20 91 23 02 	lds	r18, 0x0223
    1ace:	20 ff       	sbrs	r18, 0
    1ad0:	fc cf       	rjmp	.-8      	; 0x1aca <CommandGetRssi+0x10>

	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1ad2:	21 e0       	ldi	r18, 0x01	; 1
    1ad4:	e0 e0       	ldi	r30, 0x00	; 0
    1ad6:	f2 e0       	ldi	r31, 0x02	; 2
    1ad8:	23 a3       	lds	r18, 0x53

	int16_t Result = ADCA.CH0RES - ANTENNA_LEVEL_OFFSET;
    1ada:	60 91 10 02 	lds	r22, 0x0210
    1ade:	70 91 11 02 	lds	r23, 0x0211
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    1ae2:	2d b7       	in	r18, 0x3d	; 61
    1ae4:	3e b7       	in	r19, 0x3e	; 62
    1ae6:	28 50       	subi	r18, 0x08	; 8
    1ae8:	30 40       	sbci	r19, 0x00	; 0
    1aea:	2d bf       	out	0x3d, r18	; 61
    1aec:	3e bf       	out	0x3e, r19	; 62
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	21 96       	adiw	r28, 0x01	; 1
    1af4:	ed b7       	in	r30, 0x3d	; 61
    1af6:	fe b7       	in	r31, 0x3e	; 62
    1af8:	81 83       	std	Z+1, r24	; 0x01
    1afa:	92 83       	std	Z+2, r25	; 0x02
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	8a 83       	std	Y+2, r24	; 0x02
    1b02:	9b 83       	std	Y+3, r25	; 0x03
    1b04:	84 e3       	ldi	r24, 0x34	; 52
    1b06:	94 e0       	ldi	r25, 0x04	; 4
    1b08:	8c 83       	std	Y+4, r24	; 0x04
    1b0a:	9d 83       	std	Y+5, r25	; 0x05
	if (Result < 0) Result = 0;

	return (uint16_t) (((uint32_t) Result * ANTENNA_LEVEL_NUMERATOR) / ANTENNA_LEVEL_DENOMINATOR);
    1b0c:	6e 5b       	subi	r22, 0xBE	; 190
    1b0e:	70 40       	sbci	r23, 0x00	; 0
    1b10:	77 fd       	sbrc	r23, 7
    1b12:	1a c0       	rjmp	.+52     	; 0x1b48 <CommandGetRssi+0x8e>
    1b14:	88 27       	eor	r24, r24
    1b16:	77 fd       	sbrc	r23, 7
    1b18:	80 95       	com	r24
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	29 e6       	ldi	r18, 0x69	; 105
    1b1e:	37 e5       	ldi	r19, 0x57	; 87
    1b20:	4b e0       	ldi	r20, 0x0B	; 11
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	0e 94 75 25 	call	0x4aea	; 0x4aea <__mulsi3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	ae 83       	std	Y+6, r26	; 0x06
    1b2e:	bf 83       	std	Y+7, r27	; 0x07
    1b30:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <snprintf_P>
        PSTR("%5u mV"), AntennaLevelGet());


    return COMMAND_INFO_OK_WITH_TEXT_ID;
    1b34:	2d b7       	in	r18, 0x3d	; 61
    1b36:	3e b7       	in	r19, 0x3e	; 62
    1b38:	28 5f       	subi	r18, 0xF8	; 248
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	2d bf       	out	0x3d, r18	; 61
    1b3e:	3e bf       	out	0x3e, r19	; 62
}
    1b40:	85 e6       	ldi	r24, 0x65	; 101
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	e3 cf       	rjmp	.-58     	; 0x1b14 <CommandGetRssi+0x5a>

00001b4e <CalcChecksum.constprop.0>:
static uint32_t BlockAddress;

static XModemCallbackType CallbackFunc;

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t* DataPtr = (uint8_t*) Buffer;
    1b50:	e0 e2       	ldi	r30, 0x20	; 32
    1b52:	f1 e2       	ldi	r31, 0x21	; 33

    while(ByteCount--) {
        Checksum += *DataPtr++;
    1b54:	91 91       	ld	r25, Z+
    1b56:	89 0f       	add	r24, r25

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    1b58:	91 e2       	ldi	r25, 0x21	; 33
    1b5a:	e0 3a       	cpi	r30, 0xA0	; 160
    1b5c:	f9 07       	cpc	r31, r25
    1b5e:	d1 f7       	brne	.-12     	; 0x1b54 <CalcChecksum.constprop.0+0x6>
        Checksum += *DataPtr++;
    }

    return Checksum;
}
    1b60:	08 95       	ret

00001b62 <XModemReceive>:

void XModemReceive(XModemCallbackType TheCallbackFunc)
{
    State = STATE_RECEIVE_INIT;
    1b62:	21 e0       	ldi	r18, 0x01	; 1
    1b64:	20 93 a5 20 	sts	0x20A5, r18
    CurrentFrameNumber = FIRST_FRAME_NUMBER;
    1b68:	20 93 a6 20 	sts	0x20A6, r18
    RetryCount = RECV_INIT_COUNT;
    1b6c:	24 e1       	ldi	r18, 0x14	; 20
    1b6e:	20 93 a7 20 	sts	0x20A7, r18
    RetryTimeout = RECV_INIT_TIMEOUT;
    1b72:	25 e0       	ldi	r18, 0x05	; 5
    1b74:	20 93 a8 20 	sts	0x20A8, r18
    BlockAddress = 0;
    1b78:	10 92 a9 20 	sts	0x20A9, r1
    1b7c:	10 92 aa 20 	sts	0x20AA, r1
    1b80:	10 92 ab 20 	sts	0x20AB, r1
    1b84:	10 92 ac 20 	sts	0x20AC, r1

    CallbackFunc = TheCallbackFunc;
    1b88:	80 93 ad 20 	sts	0x20AD, r24
    1b8c:	90 93 ae 20 	sts	0x20AE, r25
}
    1b90:	08 95       	ret

00001b92 <XModemSend>:

void XModemSend(XModemCallbackType TheCallbackFunc)
{
    State = STATE_SEND_INIT;
    1b92:	27 e0       	ldi	r18, 0x07	; 7
    1b94:	20 93 a5 20 	sts	0x20A5, r18
    RetryTimeout = SEND_INIT_TIMEOUT;
    1b98:	24 e6       	ldi	r18, 0x64	; 100
    1b9a:	20 93 a8 20 	sts	0x20A8, r18
    BlockAddress = 0;
    1b9e:	10 92 a9 20 	sts	0x20A9, r1
    1ba2:	10 92 aa 20 	sts	0x20AA, r1
    1ba6:	10 92 ab 20 	sts	0x20AB, r1
    1baa:	10 92 ac 20 	sts	0x20AC, r1

    CallbackFunc = TheCallbackFunc;
    1bae:	80 93 ad 20 	sts	0x20AD, r24
    1bb2:	90 93 ae 20 	sts	0x20AE, r25
}
    1bb6:	08 95       	ret

00001bb8 <XModemProcessByte>:

bool XModemProcessByte(uint8_t Byte)
{
    1bb8:	cf 93       	push	r28
    1bba:	c8 2f       	mov	r28, r24
    switch(State) {
    1bbc:	80 91 a5 20 	lds	r24, 0x20A5
    1bc0:	85 30       	cpi	r24, 0x05	; 5
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <XModemProcessByte+0xe>
    1bc4:	84 c0       	rjmp	.+264    	; 0x1cce <XModemProcessByte+0x116>
    1bc6:	86 30       	cpi	r24, 0x06	; 6
    1bc8:	e8 f0       	brcs	.+58     	; 0x1c04 <XModemProcessByte+0x4c>
    1bca:	87 30       	cpi	r24, 0x07	; 7
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <XModemProcessByte+0x18>
    1bce:	4e c0       	rjmp	.+156    	; 0x1c6c <XModemProcessByte+0xb4>
    1bd0:	87 30       	cpi	r24, 0x07	; 7
    1bd2:	70 f5       	brcc	.+92     	; 0x1c30 <XModemProcessByte+0x78>
        }

        break;

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
    1bd4:	20 91 b2 20 	lds	r18, 0x20B2
    1bd8:	80 91 a6 20 	lds	r24, 0x20A6
    1bdc:	28 17       	cp	r18, r24
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <XModemProcessByte+0x2a>
    1be0:	e1 c0       	rjmp	.+450    	; 0x1da4 <XModemProcessByte+0x1ec>
            } else {
                /* Data seems to be damaged */
                TerminalSendByte(BYTE_NAK);
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	28 17       	cp	r18, r24
    1bea:	39 07       	cpc	r19, r25
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <XModemProcessByte+0x38>
    1bee:	0b c1       	rjmp	.+534    	; 0x1e06 <XModemProcessByte+0x24e>
INLINE void TerminalSendByte(uint8_t Byte) { CDC_Device_SendByte(&TerminalHandle, Byte); }
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e2       	ldi	r25, 0x20	; 32
    1bf4:	68 e1       	ldi	r22, 0x18	; 24
    1bf6:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
        } else {
            /* This frame is completely out of order. Just cancel */
            TerminalSendByte(BYTE_CAN);
            State = STATE_OFF;
    1bfa:	10 92 a5 20 	sts	0x20A5, r1
    default:
        return false;
        break;
    }

    return true;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
}
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <XModemProcessByte+0x52>
    1c08:	5a c0       	rjmp	.+180    	; 0x1cbe <XModemProcessByte+0x106>
    1c0a:	84 30       	cpi	r24, 0x04	; 4
    1c0c:	c0 f0       	brcs	.+48     	; 0x1c3e <XModemProcessByte+0x86>
        ReceivedFrameNumber = Byte;
        State = STATE_RECEIVE_FRAMENUM2;
        break;

    case STATE_RECEIVE_FRAMENUM2:
        if (Byte == (255 - ReceivedFrameNumber)) {
    1c0e:	8c 2f       	mov	r24, r28
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	40 91 b2 20 	lds	r20, 0x20B2
    1c16:	2f ef       	ldi	r18, 0xFF	; 255
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	24 1b       	sub	r18, r20
    1c1c:	31 09       	sbc	r19, r1
    1c1e:	82 17       	cp	r24, r18
    1c20:	93 07       	cpc	r25, r19
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <XModemProcessByte+0x6e>
    1c24:	6b c0       	rjmp	.+214    	; 0x1cfc <XModemProcessByte+0x144>
            /* frame-number check passed. */
            State = STATE_RECEIVE_DATA;
    1c26:	85 e0       	ldi	r24, 0x05	; 5
    1c28:	80 93 a5 20 	sts	0x20A5, r24
    default:
        return false;
        break;
    }

    return true;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	e8 cf       	rjmp	.-48     	; 0x1c00 <XModemProcessByte+0x48>
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    1c30:	88 30       	cpi	r24, 0x08	; 8
    1c32:	f9 f0       	breq	.+62     	; 0x1c72 <XModemProcessByte+0xba>
    1c34:	89 30       	cpi	r24, 0x09	; 9
    1c36:	a9 f0       	breq	.+42     	; 0x1c62 <XModemProcessByte+0xaa>
        /* Receive Ack */
        State = STATE_OFF;
        break;

    default:
        return false;
    1c38:	80 e0       	ldi	r24, 0x00	; 0
        break;
    }

    return true;
}
    1c3a:	cf 91       	pop	r28
    1c3c:	08 95       	ret
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	d8 f3       	brcs	.-10     	; 0x1c38 <XModemProcessByte+0x80>
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
    1c42:	c1 30       	cpi	r28, 0x01	; 1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <XModemProcessByte+0x90>
    1c46:	e9 c0       	rjmp	.+466    	; 0x1e1a <XModemProcessByte+0x262>
            /* Next frame incoming */
            BufferIdx = 0;
            Checksum = CHECKSUM_INIT_VALUE;
            State = STATE_RECEIVE_FRAMENUM1;
        } else if (Byte == BYTE_EOT) {
    1c48:	c4 30       	cpi	r28, 0x04	; 4
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <XModemProcessByte+0x96>
    1c4c:	fb c0       	rjmp	.+502    	; 0x1e44 <XModemProcessByte+0x28c>
            /* Transmission finished */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_CAN) {
    1c4e:	c8 31       	cpi	r28, 0x18	; 24
    1c50:	41 f0       	breq	.+16     	; 0x1c62 <XModemProcessByte+0xaa>
    default:
        return false;
        break;
    }

    return true;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
}
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e2       	ldi	r25, 0x20	; 32
    1c5c:	66 e0       	ldi	r22, 0x06	; 6
    1c5e:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>

    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
    1c62:	10 92 a5 20 	sts	0x20A5, r1
    default:
        return false;
        break;
    }

    return true;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
}
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret

        break;

    case STATE_SEND_INIT:
        /* Start sending on NAK */
        if (Byte == BYTE_NAK) {
    1c6c:	c5 31       	cpi	r28, 0x15	; 21
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <XModemProcessByte+0xba>
    1c70:	4f c0       	rjmp	.+158    	; 0x1d10 <XModemProcessByte+0x158>
        }

        /* Fallthrough */

    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
    1c72:	c8 31       	cpi	r28, 0x18	; 24
    1c74:	89 f3       	breq	.-30     	; 0x1c58 <XModemProcessByte+0xa0>
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
    1c76:	c6 30       	cpi	r28, 0x06	; 6
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <XModemProcessByte+0xc4>
    1c7a:	f3 c0       	rjmp	.+486    	; 0x1e62 <XModemProcessByte+0x2aa>
                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
            }
        } else if (Byte == BYTE_NAK){
    1c7c:	c5 31       	cpi	r28, 0x15	; 21
    1c7e:	49 f7       	brne	.-46     	; 0x1c52 <XModemProcessByte+0x9a>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e2       	ldi	r25, 0x20	; 32
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e2       	ldi	r25, 0x20	; 32
    1c8e:	60 91 a6 20 	lds	r22, 0x20A6
    1c92:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
            /* Resend frame */
            TerminalSendByte(BYTE_SOH);
            TerminalSendByte(CurrentFrameNumber);
            TerminalSendByte(255 - CurrentFrameNumber);
    1c96:	60 91 a6 20 	lds	r22, 0x20A6
    1c9a:	60 95       	com	r22
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e2       	ldi	r25, 0x20	; 32
    1ca0:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
            TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    1ca4:	80 e2       	ldi	r24, 0x20	; 32
    1ca6:	91 e2       	ldi	r25, 0x21	; 33
    1ca8:	60 e8       	ldi	r22, 0x80	; 128
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	af dc       	rcall	.-1698   	; 0x160c <TerminalSendBlock>
    1cae:	4f df       	rcall	.-354    	; 0x1b4e <CalcChecksum.constprop.0>
            TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));
    1cb0:	68 2f       	mov	r22, r24
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e2       	ldi	r25, 0x20	; 32
    1cb6:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	a1 cf       	rjmp	.-190    	; 0x1c00 <XModemProcessByte+0x48>
    default:
        return false;
        break;
    }

    return true;
    1cbe:	c0 93 b2 20 	sts	0x20B2, r28

        break;

    case STATE_RECEIVE_FRAMENUM1:
        /* Store frame number */
        ReceivedFrameNumber = Byte;
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	80 93 a5 20 	sts	0x20A5, r24
        State = STATE_RECEIVE_FRAMENUM2;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	cf 91       	pop	r28
    default:
        return false;
        break;
    }

    return true;
    1ccc:	08 95       	ret
}
    1cce:	20 91 af 20 	lds	r18, 0x20AF

        break;

    case STATE_RECEIVE_DATA:
        /* Process byte and update checksum */
        TerminalBuffer[BufferIdx++] = Byte;
    1cd2:	30 91 b0 20 	lds	r19, 0x20B0
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	e0 5e       	subi	r30, 0xE0	; 224
    1cda:	fe 4d       	sbci	r31, 0xDE	; 222
    1cdc:	c0 83       	st	Z, r28
    1cde:	c9 01       	movw	r24, r18
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	80 93 af 20 	sts	0x20AF, r24
    1ce6:	90 93 b0 20 	sts	0x20B0, r25
    1cea:	80 38       	cpi	r24, 0x80	; 128
    1cec:	91 05       	cpc	r25, r1

        if (BufferIdx == XMODEM_BLOCK_SIZE) {
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <XModemProcessByte+0x13a>
    1cf0:	b0 cf       	rjmp	.-160    	; 0x1c52 <XModemProcessByte+0x9a>
    1cf2:	86 e0       	ldi	r24, 0x06	; 6
    1cf4:	80 93 a5 20 	sts	0x20A5, r24
            /* Block full */
            State = STATE_RECEIVE_PROCESS;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	82 cf       	rjmp	.-252    	; 0x1c00 <XModemProcessByte+0x48>
    default:
        return false;
        break;
    }

    return true;
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e2       	ldi	r25, 0x20	; 32
    1d00:	65 e1       	ldi	r22, 0x15	; 21
    1d02:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	80 93 a5 20 	sts	0x20A5, r24
                    State = STATE_OFF;
                }
            } else {
                /* Data seems to be damaged */
                TerminalSendByte(BYTE_NAK);
                State = STATE_RECEIVE_WAIT;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	78 cf       	rjmp	.-272    	; 0x1c00 <XModemProcessByte+0x48>
    default:
        return false;
        break;
    }

    return true;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	80 93 a6 20 	sts	0x20A6, r24
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
            /* Acknowledge. Proceed to next frame, get data and calc checksum */
            CurrentFrameNumber++;
    1d16:	40 91 a9 20 	lds	r20, 0x20A9

            if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    1d1a:	50 91 aa 20 	lds	r21, 0x20AA
    1d1e:	60 91 ab 20 	lds	r22, 0x20AB
    1d22:	70 91 ac 20 	lds	r23, 0x20AC
    1d26:	e0 91 ad 20 	lds	r30, 0x20AD
    1d2a:	f0 91 ae 20 	lds	r31, 0x20AE
    1d2e:	80 e2       	ldi	r24, 0x20	; 32
    1d30:	91 e2       	ldi	r25, 0x21	; 33
    1d32:	20 e8       	ldi	r18, 0x80	; 128
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	09 95       	icall
    1d38:	88 23       	and	r24, r24
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <XModemProcessByte+0x186>
    1d3c:	79 c0       	rjmp	.+242    	; 0x1e30 <XModemProcessByte+0x278>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e2       	ldi	r25, 0x20	; 32
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e2       	ldi	r25, 0x20	; 32
    1d4c:	60 91 a6 20 	lds	r22, 0x20A6
    1d50:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1d54:	60 91 a6 20 	lds	r22, 0x20A6
                TerminalSendByte(BYTE_SOH);
                TerminalSendByte(CurrentFrameNumber);
                TerminalSendByte(255 - CurrentFrameNumber);
    1d58:	60 95       	com	r22
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e2       	ldi	r25, 0x20	; 32
    1d5e:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1d62:	80 e2       	ldi	r24, 0x20	; 32
    1d64:	91 e2       	ldi	r25, 0x21	; 33
                TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    1d66:	60 e8       	ldi	r22, 0x80	; 128
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	50 dc       	rcall	.-1888   	; 0x160c <TerminalSendBlock>
    1d6c:	f0 de       	rcall	.-544    	; 0x1b4e <CalcChecksum.constprop.0>
    1d6e:	68 2f       	mov	r22, r24
    1d70:	80 e0       	ldi	r24, 0x00	; 0
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));
    1d72:	90 e2       	ldi	r25, 0x20	; 32
    1d74:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1d78:	80 91 a9 20 	lds	r24, 0x20A9
    1d7c:	90 91 aa 20 	lds	r25, 0x20AA

                BlockAddress += XMODEM_BLOCK_SIZE;
    1d80:	a0 91 ab 20 	lds	r26, 0x20AB
    1d84:	b0 91 ac 20 	lds	r27, 0x20AC
    1d88:	80 58       	subi	r24, 0x80	; 128
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	af 4f       	sbci	r26, 0xFF	; 255
    1d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d90:	80 93 a9 20 	sts	0x20A9, r24
    1d94:	90 93 aa 20 	sts	0x20AA, r25
    1d98:	a0 93 ab 20 	sts	0x20AB, r26
    1d9c:	b0 93 ac 20 	sts	0x20AC, r27
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	2e cf       	rjmp	.-420    	; 0x1c00 <XModemProcessByte+0x48>
    1da4:	d4 de       	rcall	.-600    	; 0x1b4e <CalcChecksum.constprop.0>
    1da6:	8c 17       	cp	r24, r28
    default:
        return false;
        break;
    }

    return true;
    1da8:	09 f0       	breq	.+2      	; 0x1dac <XModemProcessByte+0x1f4>
    1daa:	a8 cf       	rjmp	.-176    	; 0x1cfc <XModemProcessByte+0x144>

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
            /* This is the expected frame. Calculate and verify checksum */

            if (CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE) == Byte) {
    1dac:	40 91 a9 20 	lds	r20, 0x20A9
    1db0:	50 91 aa 20 	lds	r21, 0x20AA
    1db4:	60 91 ab 20 	lds	r22, 0x20AB
                /* Checksum is valid. Pass received data to callback function */
                if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    1db8:	70 91 ac 20 	lds	r23, 0x20AC
    1dbc:	e0 91 ad 20 	lds	r30, 0x20AD
    1dc0:	f0 91 ae 20 	lds	r31, 0x20AE
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	91 e2       	ldi	r25, 0x21	; 33
    1dc8:	20 e8       	ldi	r18, 0x80	; 128
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	09 95       	icall
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <XModemProcessByte+0x21c>
    1dd2:	41 c0       	rjmp	.+130    	; 0x1e56 <XModemProcessByte+0x29e>
    1dd4:	80 91 a6 20 	lds	r24, 0x20A6
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	80 93 a6 20 	sts	0x20A6, r24
                    /* Proceed to next frame and send ACK */
                    CurrentFrameNumber++;
    1dde:	80 91 a9 20 	lds	r24, 0x20A9
    1de2:	90 91 aa 20 	lds	r25, 0x20AA
    1de6:	a0 91 ab 20 	lds	r26, 0x20AB
                    BlockAddress += XMODEM_BLOCK_SIZE;
    1dea:	b0 91 ac 20 	lds	r27, 0x20AC
    1dee:	80 58       	subi	r24, 0x80	; 128
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	af 4f       	sbci	r26, 0xFF	; 255
    1df4:	bf 4f       	sbci	r27, 0xFF	; 255
    1df6:	80 93 a9 20 	sts	0x20A9, r24
    1dfa:	90 93 aa 20 	sts	0x20AA, r25
    1dfe:	a0 93 ab 20 	sts	0x20AB, r26
    1e02:	b0 93 ac 20 	sts	0x20AC, r27
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e2       	ldi	r25, 0x20	; 32
    1e0a:	66 e0       	ldi	r22, 0x06	; 6
    1e0c:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	80 93 a5 20 	sts	0x20A5, r24
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	f3 ce       	rjmp	.-538    	; 0x1c00 <XModemProcessByte+0x48>
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
            /* This is a retransmission */
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
    1e1a:	10 92 af 20 	sts	0x20AF, r1
    1e1e:	10 92 b0 20 	sts	0x20B0, r1
    default:
        return false;
        break;
    }

    return true;
    1e22:	10 92 b1 20 	sts	0x20B1, r1
    switch(State) {
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
            /* Next frame incoming */
            BufferIdx = 0;
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	80 93 a5 20 	sts	0x20A5, r24
            Checksum = CHECKSUM_INIT_VALUE;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	e8 ce       	rjmp	.-560    	; 0x1c00 <XModemProcessByte+0x48>
            State = STATE_RECEIVE_FRAMENUM1;
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e2       	ldi	r25, 0x20	; 32
    1e34:	64 e0       	ldi	r22, 0x04	; 4
    default:
        return false;
        break;
    }

    return true;
    1e36:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1e3a:	89 e0       	ldi	r24, 0x09	; 9
    1e3c:	80 93 a5 20 	sts	0x20A5, r24
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	de ce       	rjmp	.-580    	; 0x1c00 <XModemProcessByte+0x48>
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));

                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e2       	ldi	r25, 0x20	; 32
    1e48:	66 e0       	ldi	r22, 0x06	; 6
    default:
        return false;
        break;
    }

    return true;
    1e4a:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1e4e:	10 92 a5 20 	sts	0x20A5, r1
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	d5 ce       	rjmp	.-598    	; 0x1c00 <XModemProcessByte+0x48>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
            Checksum = CHECKSUM_INIT_VALUE;
            State = STATE_RECEIVE_FRAMENUM1;
        } else if (Byte == BYTE_EOT) {
            /* Transmission finished */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
    1e58:	90 e2       	ldi	r25, 0x20	; 32
    1e5a:	68 e1       	ldi	r22, 0x18	; 24
    default:
        return false;
        break;
    }

    return true;
    1e5c:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1e60:	c7 ce       	rjmp	.-626    	; 0x1bf0 <XModemProcessByte+0x38>
    1e62:	80 91 a6 20 	lds	r24, 0x20A6
    1e66:	8f 5f       	subi	r24, 0xFF	; 255
    1e68:	54 cf       	rjmp	.-344    	; 0x1d12 <XModemProcessByte+0x15a>

00001e6a <XModemTick>:
    1e6a:	80 91 a5 20 	lds	r24, 0x20A5
    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	71 f0       	breq	.+28     	; 0x1e8e <XModemTick+0x24>
    1e72:	87 30       	cpi	r24, 0x07	; 7
}

void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <XModemTick+0xe>
    1e76:	08 95       	ret
            RetryTimeout = RECV_INIT_TIMEOUT;
        }
        break;

    case STATE_SEND_INIT:
        if (RetryTimeout-- == 0) {
    1e78:	80 91 a8 20 	lds	r24, 0x20A8
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	91 50       	subi	r25, 0x01	; 1
    1e80:	90 93 a8 20 	sts	0x20A8, r25
    1e84:	88 23       	and	r24, r24
    1e86:	b9 f7       	brne	.-18     	; 0x1e76 <XModemTick+0xc>
            /* Abort */
            State = STATE_OFF;
    1e88:	10 92 a5 20 	sts	0x20A5, r1
    1e8c:	08 95       	ret
void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    case STATE_RECEIVE_INIT:
        if (RetryTimeout-- == 0) {
    1e8e:	80 91 a8 20 	lds	r24, 0x20A8
    1e92:	98 2f       	mov	r25, r24
    1e94:	91 50       	subi	r25, 0x01	; 1
    1e96:	90 93 a8 20 	sts	0x20A8, r25
    1e9a:	88 23       	and	r24, r24
    1e9c:	61 f7       	brne	.-40     	; 0x1e76 <XModemTick+0xc>
            if (RetryCount-- > 0) {
    1e9e:	80 91 a7 20 	lds	r24, 0x20A7
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	91 50       	subi	r25, 0x01	; 1
    1ea6:	90 93 a7 20 	sts	0x20A7, r25
    1eaa:	88 23       	and	r24, r24
    1eac:	31 f4       	brne	.+12     	; 0x1eba <XModemTick+0x50>
                /* Put out communication request */
                TerminalSendChar(BYTE_NAK);
            } else {
                /* Just shut off after some time. */
                State = STATE_OFF;
    1eae:	10 92 a5 20 	sts	0x20A5, r1
            }

            RetryTimeout = RECV_INIT_TIMEOUT;
    1eb2:	85 e0       	ldi	r24, 0x05	; 5
    1eb4:	80 93 a8 20 	sts	0x20A8, r24
    1eb8:	08 95       	ret
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	90 e2       	ldi	r25, 0x20	; 32
    1ebe:	65 e1       	ldi	r22, 0x15	; 21
    1ec0:	0e 94 81 24 	call	0x4902	; 0x4902 <CDC_Device_SendByte>
    1ec4:	f6 cf       	rjmp	.-20     	; 0x1eb2 <XModemTick+0x48>

00001ec6 <CommandLineProcessByte>:
void CommandLineInit(void)
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
  if (IS_CHARACTER(Byte)){
    1ecc:	98 2f       	mov	r25, r24
    1ece:	91 54       	subi	r25, 0x41	; 65
    1ed0:	9a 31       	cpi	r25, 0x1A	; 26
    1ed2:	20 f0       	brcs	.+8      	; 0x1edc <CommandLineProcessByte+0x16>
    1ed4:	90 52       	subi	r25, 0x20	; 32
    1ed6:	9a 31       	cpi	r25, 0x1A	; 26
    1ed8:	b8 f4       	brcc	.+46     	; 0x1f08 <CommandLineProcessByte+0x42>
    /* Store uppercase character */
    if (IS_LOWERCASE(Byte)) {
      Byte = TO_UPPERCASE(Byte);
    1eda:	80 52       	subi	r24, 0x20	; 32
    }

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
    1edc:	20 91 b3 20 	lds	r18, 0x20B3
    1ee0:	30 91 b4 20 	lds	r19, 0x20B4
    1ee4:	2f 3f       	cpi	r18, 0xFF	; 255
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	50 f4       	brcc	.+20     	; 0x1efe <CommandLineProcessByte+0x38>
      TerminalBuffer[BufferIdx++] = Byte;
    1eea:	f9 01       	movw	r30, r18
    1eec:	e0 5e       	subi	r30, 0xE0	; 224
    1eee:	fe 4d       	sbci	r31, 0xDE	; 222
    1ef0:	80 83       	st	Z, r24
    1ef2:	2f 5f       	subi	r18, 0xFF	; 255
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	20 93 b3 20 	sts	0x20B3, r18
    1efa:	30 93 b4 20 	sts	0x20B4, r19
  } else {
    /* Ignore other chars */
  }

  return true;
}
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	08 95       	ret
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
  if (IS_CHARACTER(Byte)){
    1f08:	9f 5c       	subi	r25, 0xCF	; 207
    1f0a:	9a 30       	cpi	r25, 0x0A	; 10
    1f0c:	38 f3       	brcs	.-50     	; 0x1edc <CommandLineProcessByte+0x16>
    1f0e:	8f 35       	cpi	r24, 0x5F	; 95
    1f10:	29 f3       	breq	.-54     	; 0x1edc <CommandLineProcessByte+0x16>
    1f12:	8f 33       	cpi	r24, 0x3F	; 63
    1f14:	19 f3       	breq	.-58     	; 0x1edc <CommandLineProcessByte+0x16>
    1f16:	8d 33       	cpi	r24, 0x3D	; 61
    1f18:	09 f3       	breq	.-62     	; 0x1edc <CommandLineProcessByte+0x16>

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    1f1a:	8d 30       	cpi	r24, 0x0D	; 13
    1f1c:	a9 f0       	breq	.+42     	; 0x1f48 <CommandLineProcessByte+0x82>
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    1f1e:	88 30       	cpi	r24, 0x08	; 8
    1f20:	39 f0       	breq	.+14     	; 0x1f30 <CommandLineProcessByte+0x6a>
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
      BufferIdx--;
    }
  } else if (Byte == 0x1B){
    1f22:	8b 31       	cpi	r24, 0x1B	; 27
    1f24:	61 f7       	brne	.-40     	; 0x1efe <CommandLineProcessByte+0x38>
    /* Drop buffer on escape */
    BufferIdx = 0;
    1f26:	10 92 b3 20 	sts	0x20B3, r1
    1f2a:	10 92 b4 20 	sts	0x20B4, r1
    1f2e:	e7 cf       	rjmp	.-50     	; 0x1efe <CommandLineProcessByte+0x38>
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
    1f30:	80 91 b3 20 	lds	r24, 0x20B3
    1f34:	90 91 b4 20 	lds	r25, 0x20B4
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	09 f3       	breq	.-62     	; 0x1efe <CommandLineProcessByte+0x38>
      BufferIdx--;
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	80 93 b3 20 	sts	0x20B3, r24
    1f42:	90 93 b4 20 	sts	0x20B4, r25
    1f46:	db cf       	rjmp	.-74     	; 0x1efe <CommandLineProcessByte+0x38>
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    1f48:	e0 91 b3 20 	lds	r30, 0x20B3
    1f4c:	f0 91 b4 20 	lds	r31, 0x20B4
    1f50:	e0 5e       	subi	r30, 0xE0	; 224
    1f52:	fe 4d       	sbci	r31, 0xDE	; 222
    1f54:	10 82       	st	Z, r1
    BufferIdx = 0;
    1f56:	10 92 b3 20 	sts	0x20B3, r1
    1f5a:	10 92 b4 20 	sts	0x20B4, r1
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Do some sanity check first */
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    1f5e:	80 91 20 21 	lds	r24, 0x2120
    1f62:	88 23       	and	r24, r24
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <CommandLineProcessByte+0xa2>
    1f66:	a7 c0       	rjmp	.+334    	; 0x20b6 <CommandLineProcessByte+0x1f0>
    1f68:	8f 33       	cpi	r24, 0x3F	; 63
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <CommandLineProcessByte+0xa8>
    1f6c:	a4 c0       	rjmp	.+328    	; 0x20b6 <CommandLineProcessByte+0x1f0>
    1f6e:	8d 33       	cpi	r24, 0x3D	; 61
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <CommandLineProcessByte+0xae>
    1f72:	a1 c0       	rjmp	.+322    	; 0x20b6 <CommandLineProcessByte+0x1f0>
    1f74:	e1 e2       	ldi	r30, 0x21	; 33
    1f76:	f1 e2       	ldi	r31, 0x21	; 33
    1f78:	ef 01       	movw	r28, r30
    1f7a:	21 97       	sbiw	r28, 0x01	; 1
    1f7c:	06 c0       	rjmp	.+12     	; 0x1f8a <CommandLineProcessByte+0xc4>
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    1f7e:	8f 33       	cpi	r24, 0x3F	; 63
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <CommandLineProcessByte+0xbe>
    1f82:	d3 c0       	rjmp	.+422    	; 0x212a <CommandLineProcessByte+0x264>
    1f84:	8d 33       	cpi	r24, 0x3D	; 61
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <CommandLineProcessByte+0xc4>
    1f88:	ce c0       	rjmp	.+412    	; 0x2126 <CommandLineProcessByte+0x260>
      pCommandDelimiter++;
    1f8a:	21 96       	adiw	r28, 0x01	; 1
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    1f8c:	81 91       	ld	r24, Z+
    1f8e:	88 23       	and	r24, r24
    1f90:	b1 f7       	brne	.-20     	; 0x1f7e <CommandLineProcessByte+0xb8>
    1f92:	10 e0       	ldi	r17, 0x00	; 0
      pCommandDelimiter++;

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';
    1f94:	18 82       	st	Y, r1

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    1f96:	80 e2       	ldi	r24, 0x20	; 32
    1f98:	91 e2       	ldi	r25, 0x21	; 33
    1f9a:	6b e3       	ldi	r22, 0x3B	; 59
    1f9c:	74 e0       	ldi	r23, 0x04	; 4
    1f9e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <CommandLineProcessByte+0xe2>
    1fa6:	20 c1       	rjmp	.+576    	; 0x21e8 <CommandLineProcessByte+0x322>
    1fa8:	80 e2       	ldi	r24, 0x20	; 32
    1faa:	91 e2       	ldi	r25, 0x21	; 33
    1fac:	61 e5       	ldi	r22, 0x51	; 81
    1fae:	74 e0       	ldi	r23, 0x04	; 4
    1fb0:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <CommandLineProcessByte+0xf4>
    1fb8:	15 c1       	rjmp	.+554    	; 0x21e4 <CommandLineProcessByte+0x31e>
    1fba:	80 e2       	ldi	r24, 0x20	; 32
    1fbc:	91 e2       	ldi	r25, 0x21	; 33
    1fbe:	67 e6       	ldi	r22, 0x67	; 103
    1fc0:	74 e0       	ldi	r23, 0x04	; 4
    1fc2:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <CommandLineProcessByte+0x106>
    1fca:	06 c1       	rjmp	.+524    	; 0x21d8 <CommandLineProcessByte+0x312>
    1fcc:	80 e2       	ldi	r24, 0x20	; 32
    1fce:	91 e2       	ldi	r25, 0x21	; 33
    1fd0:	6d e7       	ldi	r22, 0x7D	; 125
    1fd2:	74 e0       	ldi	r23, 0x04	; 4
    1fd4:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	09 f4       	brne	.+2      	; 0x1fde <CommandLineProcessByte+0x118>
    1fdc:	fb c0       	rjmp	.+502    	; 0x21d4 <CommandLineProcessByte+0x30e>
    1fde:	80 e2       	ldi	r24, 0x20	; 32
    1fe0:	91 e2       	ldi	r25, 0x21	; 33
    1fe2:	63 e9       	ldi	r22, 0x93	; 147
    1fe4:	74 e0       	ldi	r23, 0x04	; 4
    1fe6:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <CommandLineProcessByte+0x12a>
    1fee:	f0 c0       	rjmp	.+480    	; 0x21d0 <CommandLineProcessByte+0x30a>
    1ff0:	80 e2       	ldi	r24, 0x20	; 32
    1ff2:	91 e2       	ldi	r25, 0x21	; 33
    1ff4:	69 ea       	ldi	r22, 0xA9	; 169
    1ff6:	74 e0       	ldi	r23, 0x04	; 4
    1ff8:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <CommandLineProcessByte+0x13c>
    2000:	b5 c0       	rjmp	.+362    	; 0x216c <CommandLineProcessByte+0x2a6>
    2002:	80 e2       	ldi	r24, 0x20	; 32
    2004:	91 e2       	ldi	r25, 0x21	; 33
    2006:	6f eb       	ldi	r22, 0xBF	; 191
    2008:	74 e0       	ldi	r23, 0x04	; 4
    200a:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	09 f4       	brne	.+2      	; 0x2014 <CommandLineProcessByte+0x14e>
    2012:	fa c0       	rjmp	.+500    	; 0x2208 <CommandLineProcessByte+0x342>
    2014:	80 e2       	ldi	r24, 0x20	; 32
    2016:	91 e2       	ldi	r25, 0x21	; 33
    2018:	65 ed       	ldi	r22, 0xD5	; 213
    201a:	74 e0       	ldi	r23, 0x04	; 4
    201c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	09 f4       	brne	.+2      	; 0x2026 <CommandLineProcessByte+0x160>
    2024:	ef c0       	rjmp	.+478    	; 0x2204 <CommandLineProcessByte+0x33e>
    2026:	80 e2       	ldi	r24, 0x20	; 32
    2028:	91 e2       	ldi	r25, 0x21	; 33
    202a:	6b ee       	ldi	r22, 0xEB	; 235
    202c:	74 e0       	ldi	r23, 0x04	; 4
    202e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	09 f4       	brne	.+2      	; 0x2038 <CommandLineProcessByte+0x172>
    2036:	e4 c0       	rjmp	.+456    	; 0x2200 <CommandLineProcessByte+0x33a>
    2038:	80 e2       	ldi	r24, 0x20	; 32
    203a:	91 e2       	ldi	r25, 0x21	; 33
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	75 e0       	ldi	r23, 0x05	; 5
    2040:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	09 f4       	brne	.+2      	; 0x204a <CommandLineProcessByte+0x184>
    2048:	d9 c0       	rjmp	.+434    	; 0x21fc <CommandLineProcessByte+0x336>
    204a:	80 e2       	ldi	r24, 0x20	; 32
    204c:	91 e2       	ldi	r25, 0x21	; 33
    204e:	67 e1       	ldi	r22, 0x17	; 23
    2050:	75 e0       	ldi	r23, 0x05	; 5
    2052:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	09 f4       	brne	.+2      	; 0x205c <CommandLineProcessByte+0x196>
    205a:	ce c0       	rjmp	.+412    	; 0x21f8 <CommandLineProcessByte+0x332>
    205c:	80 e2       	ldi	r24, 0x20	; 32
    205e:	91 e2       	ldi	r25, 0x21	; 33
    2060:	6d e2       	ldi	r22, 0x2D	; 45
    2062:	75 e0       	ldi	r23, 0x05	; 5
    2064:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	09 f4       	brne	.+2      	; 0x206e <CommandLineProcessByte+0x1a8>
    206c:	c3 c0       	rjmp	.+390    	; 0x21f4 <CommandLineProcessByte+0x32e>
    206e:	80 e2       	ldi	r24, 0x20	; 32
    2070:	91 e2       	ldi	r25, 0x21	; 33
    2072:	63 e4       	ldi	r22, 0x43	; 67
    2074:	75 e0       	ldi	r23, 0x05	; 5
    2076:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	09 f4       	brne	.+2      	; 0x2080 <CommandLineProcessByte+0x1ba>
    207e:	b8 c0       	rjmp	.+368    	; 0x21f0 <CommandLineProcessByte+0x32a>
    2080:	80 e2       	ldi	r24, 0x20	; 32
    2082:	91 e2       	ldi	r25, 0x21	; 33
    2084:	69 e5       	ldi	r22, 0x59	; 89
    2086:	75 e0       	ldi	r23, 0x05	; 5
    2088:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	09 f4       	brne	.+2      	; 0x2092 <CommandLineProcessByte+0x1cc>
    2090:	ad c0       	rjmp	.+346    	; 0x21ec <CommandLineProcessByte+0x326>
    2092:	80 e2       	ldi	r24, 0x20	; 32
    2094:	91 e2       	ldi	r25, 0x21	; 33
    2096:	6f e6       	ldi	r22, 0x6F	; 111
    2098:	75 e0       	ldi	r23, 0x05	; 5
    209a:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <CommandLineProcessByte+0x1de>
    20a2:	9e c0       	rjmp	.+316    	; 0x21e0 <CommandLineProcessByte+0x31a>
    20a4:	80 e2       	ldi	r24, 0x20	; 32
    20a6:	91 e2       	ldi	r25, 0x21	; 33
    20a8:	65 e8       	ldi	r22, 0x85	; 133
    20aa:	75 e0       	ldi	r23, 0x05	; 5
    20ac:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strcmp_P>
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <CommandLineProcessByte+0x1f0>
    20b4:	93 c0       	rjmp	.+294    	; 0x21dc <CommandLineProcessByte+0x316>

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
}

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
    20b8:	c0 e0       	ldi	r28, 0x00	; 0
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    20ba:	e1 ea       	ldi	r30, 0xA1	; 161
    20bc:	f5 e0       	ldi	r31, 0x05	; 5
    20be:	94 91       	lpm	r25, Z
    20c0:	89 17       	cp	r24, r25
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <CommandLineProcessByte+0x200>
    20c4:	50 c0       	rjmp	.+160    	; 0x2166 <CommandLineProcessByte+0x2a0>
    20c6:	b1 96       	adiw	r30, 0x21	; 33
    20c8:	e4 91       	lpm	r30, Z
    20ca:	8e 17       	cp	r24, r30
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <CommandLineProcessByte+0x20a>
    20ce:	48 c0       	rjmp	.+144    	; 0x2160 <CommandLineProcessByte+0x29a>
    20d0:	e3 ee       	ldi	r30, 0xE3	; 227
    20d2:	f5 e0       	ldi	r31, 0x05	; 5
    20d4:	e4 91       	lpm	r30, Z
    20d6:	8e 17       	cp	r24, r30
    20d8:	09 f4       	brne	.+2      	; 0x20dc <CommandLineProcessByte+0x216>
    20da:	3f c0       	rjmp	.+126    	; 0x215a <CommandLineProcessByte+0x294>
    20dc:	e4 e0       	ldi	r30, 0x04	; 4
    20de:	f6 e0       	ldi	r31, 0x06	; 6
    20e0:	e4 91       	lpm	r30, Z
    20e2:	8e 17       	cp	r24, r30
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <CommandLineProcessByte+0x222>
    20e6:	36 c0       	rjmp	.+108    	; 0x2154 <CommandLineProcessByte+0x28e>
    20e8:	e5 e2       	ldi	r30, 0x25	; 37
    20ea:	f6 e0       	ldi	r31, 0x06	; 6
    20ec:	e4 91       	lpm	r30, Z
    20ee:	8e 17       	cp	r24, r30
    20f0:	71 f1       	breq	.+92     	; 0x214e <CommandLineProcessByte+0x288>
    20f2:	e6 e4       	ldi	r30, 0x46	; 70
    20f4:	f6 e0       	ldi	r31, 0x06	; 6
    20f6:	e4 91       	lpm	r30, Z
    20f8:	8e 17       	cp	r24, r30
    20fa:	c9 f0       	breq	.+50     	; 0x212e <CommandLineProcessByte+0x268>
            return StatusTable[i].Message;
    }

    return (void*) 0;
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }

  /* Send command status message */
  TerminalSendStringP(GetStatusMessageP(StatusId));
    2100:	71 da       	rcall	.-2846   	; 0x15e4 <TerminalSendStringP>
    2102:	8b e9       	ldi	r24, 0x9B	; 155
  TerminalSendStringP(PSTR(STATUS_MESSAGE_TRAILER));
    2104:	95 e0       	ldi	r25, 0x05	; 5
    2106:	6e da       	rcall	.-2852   	; 0x15e4 <TerminalSendStringP>
    2108:	cc 23       	and	r28, r28
    210a:	09 f4       	brne	.+2      	; 0x210e <CommandLineProcessByte+0x248>

  if (CommandFound && (pTerminalBuffer[0] != '\0') ) {
    210c:	f8 ce       	rjmp	.-528    	; 0x1efe <CommandLineProcessByte+0x38>
    210e:	80 91 20 21 	lds	r24, 0x2120
    2112:	88 23       	and	r24, r24
    2114:	09 f4       	brne	.+2      	; 0x2118 <CommandLineProcessByte+0x252>
    2116:	f3 ce       	rjmp	.-538    	; 0x1efe <CommandLineProcessByte+0x38>
    2118:	80 e2       	ldi	r24, 0x20	; 32
    211a:	91 e2       	ldi	r25, 0x21	; 33
    /* Send optional answer */
    TerminalSendString(pTerminalBuffer);
    211c:	5e da       	rcall	.-2884   	; 0x15da <TerminalSendString>
    211e:	8e e9       	ldi	r24, 0x9E	; 158
    2120:	95 e0       	ldi	r25, 0x05	; 5
    2122:	60 da       	rcall	.-2880   	; 0x15e4 <TerminalSendStringP>
    TerminalSendStringP(PSTR(OPTIONAL_ANSWER_TRAILER));
    2124:	ec ce       	rjmp	.-552    	; 0x1efe <CommandLineProcessByte+0x38>
    2126:	1d e3       	ldi	r17, 0x3D	; 61
    2128:	35 cf       	rjmp	.-406    	; 0x1f94 <CommandLineProcessByte+0xce>
    212a:	1f e3       	ldi	r17, 0x3F	; 63
    212c:	33 cf       	rjmp	.-410    	; 0x1f94 <CommandLineProcessByte+0xce>
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    212e:	25 e0       	ldi	r18, 0x05	; 5
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	c9 01       	movw	r24, r18
    2134:	88 0f       	add	r24, r24
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    2136:	99 1f       	adc	r25, r25
    2138:	82 95       	swap	r24
            return StatusTable[i].Message;
    213a:	92 95       	swap	r25
    213c:	90 7f       	andi	r25, 0xF0	; 240
    213e:	98 27       	eor	r25, r24
    2140:	80 7f       	andi	r24, 0xF0	; 240
    2142:	98 27       	eor	r25, r24
    2144:	82 0f       	add	r24, r18
    2146:	93 1f       	adc	r25, r19
    2148:	8e 55       	subi	r24, 0x5E	; 94
    214a:	9a 4f       	sbci	r25, 0xFA	; 250
    214c:	d9 cf       	rjmp	.-78     	; 0x2100 <CommandLineProcessByte+0x23a>
    214e:	24 e0       	ldi	r18, 0x04	; 4
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	ef cf       	rjmp	.-34     	; 0x2132 <CommandLineProcessByte+0x26c>
    2154:	23 e0       	ldi	r18, 0x03	; 3
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	ec cf       	rjmp	.-40     	; 0x2132 <CommandLineProcessByte+0x26c>
    215a:	22 e0       	ldi	r18, 0x02	; 2
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	e9 cf       	rjmp	.-46     	; 0x2132 <CommandLineProcessByte+0x26c>
    2160:	21 e0       	ldi	r18, 0x01	; 1
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	e6 cf       	rjmp	.-52     	; 0x2132 <CommandLineProcessByte+0x26c>
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	e3 cf       	rjmp	.-58     	; 0x2132 <CommandLineProcessByte+0x26c>
    216c:	25 e0       	ldi	r18, 0x05	; 5
    216e:	10 92 20 21 	sts	0x2120, r1
    2172:	30 e0       	ldi	r19, 0x00	; 0

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
    2174:	46 e1       	ldi	r20, 0x16	; 22
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	24 9f       	mul	r18, r20
        CommandFound = true;

        StatusId = CallCommandFunc(&CommandTable[i], CommandDelimiter, pParam);
    217a:	c0 01       	movw	r24, r0
    217c:	25 9f       	mul	r18, r21
    217e:	90 0d       	add	r25, r0
    2180:	34 9f       	mul	r19, r20
    2182:	90 0d       	add	r25, r0
    2184:	11 24       	eor	r1, r1
    2186:	85 5c       	subi	r24, 0xC5	; 197
    2188:	9b 4f       	sbci	r25, 0xFB	; 251
    218a:	1f 33       	cpi	r17, 0x3F	; 63
    218c:	f9 f0       	breq	.+62     	; 0x21cc <CommandLineProcessByte+0x306>
    218e:	1d 33       	cpi	r17, 0x3D	; 61
    2190:	89 f0       	breq	.+34     	; 0x21b4 <CommandLineProcessByte+0x2ee>
static CommandStatusIdType CallCommandFunc(
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    2192:	11 23       	and	r17, r17
    2194:	19 f0       	breq	.+6      	; 0x219c <CommandLineProcessByte+0x2d6>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    2196:	89 ec       	ldi	r24, 0xC9	; 201
    2198:	c1 e0       	ldi	r28, 0x01	; 1
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    219a:	8f cf       	rjmp	.-226    	; 0x20ba <CommandLineProcessByte+0x1f4>
    219c:	40 96       	adiw	r24, 0x10	; 16
  } else {
    /* This should not happen (TM) */
  }

  /* This delimiter has not been registered with this command */
  return COMMAND_ERR_INVALID_USAGE_ID;
    219e:	fc 01       	movw	r30, r24
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    21a0:	85 91       	lpm	r24, Z+
    21a2:	94 91       	lpm	r25, Z
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    CommandExecFuncType ExecFunc = pgm_read_ptr(&CommandEntry->ExecFunc);
    21a4:	fc 01       	movw	r30, r24
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	b1 f3       	breq	.-20     	; 0x2196 <CommandLineProcessByte+0x2d0>
    21aa:	80 e2       	ldi	r24, 0x20	; 32
    21ac:	91 e2       	ldi	r25, 0x21	; 33
    if (ExecFunc != NO_FUNCTION) {
    21ae:	09 95       	icall
    21b0:	c1 e0       	ldi	r28, 0x01	; 1
      return ExecFunc(pTerminalBuffer);
    21b2:	83 cf       	rjmp	.-250    	; 0x20ba <CommandLineProcessByte+0x1f4>
    21b4:	42 96       	adiw	r24, 0x12	; 18
    21b6:	fc 01       	movw	r30, r24
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    21b8:	85 91       	lpm	r24, Z+
    21ba:	94 91       	lpm	r25, Z
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    21bc:	fc 01       	movw	r30, r24
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	51 f3       	breq	.-44     	; 0x2196 <CommandLineProcessByte+0x2d0>
    21c2:	ce 01       	movw	r24, r28
    21c4:	01 96       	adiw	r24, 0x01	; 1
    if (SetFunc != NO_FUNCTION) {
    21c6:	09 95       	icall
    21c8:	c1 e0       	ldi	r28, 0x01	; 1
      return SetFunc(pParam);
    21ca:	77 cf       	rjmp	.-274    	; 0x20ba <CommandLineProcessByte+0x1f4>
    21cc:	44 96       	adiw	r24, 0x14	; 20
    21ce:	e7 cf       	rjmp	.-50     	; 0x219e <CommandLineProcessByte+0x2d8>
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    21d0:	24 e0       	ldi	r18, 0x04	; 4
    21d2:	cd cf       	rjmp	.-102    	; 0x216e <CommandLineProcessByte+0x2a8>
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    21d4:	23 e0       	ldi	r18, 0x03	; 3
    21d6:	cb cf       	rjmp	.-106    	; 0x216e <CommandLineProcessByte+0x2a8>

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
    21d8:	22 e0       	ldi	r18, 0x02	; 2
    21da:	c9 cf       	rjmp	.-110    	; 0x216e <CommandLineProcessByte+0x2a8>
    21dc:	2f e0       	ldi	r18, 0x0F	; 15
    21de:	c7 cf       	rjmp	.-114    	; 0x216e <CommandLineProcessByte+0x2a8>
    21e0:	2e e0       	ldi	r18, 0x0E	; 14
    21e2:	c5 cf       	rjmp	.-118    	; 0x216e <CommandLineProcessByte+0x2a8>
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    21e4:	21 e0       	ldi	r18, 0x01	; 1
    21e6:	c3 cf       	rjmp	.-122    	; 0x216e <CommandLineProcessByte+0x2a8>

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	c1 cf       	rjmp	.-126    	; 0x216e <CommandLineProcessByte+0x2a8>
    21ec:	2d e0       	ldi	r18, 0x0D	; 13
    21ee:	bf cf       	rjmp	.-130    	; 0x216e <CommandLineProcessByte+0x2a8>
    21f0:	2c e0       	ldi	r18, 0x0C	; 12
    21f2:	bd cf       	rjmp	.-134    	; 0x216e <CommandLineProcessByte+0x2a8>
    21f4:	2b e0       	ldi	r18, 0x0B	; 11
    21f6:	bb cf       	rjmp	.-138    	; 0x216e <CommandLineProcessByte+0x2a8>
    21f8:	2a e0       	ldi	r18, 0x0A	; 10
    21fa:	b9 cf       	rjmp	.-142    	; 0x216e <CommandLineProcessByte+0x2a8>
    21fc:	29 e0       	ldi	r18, 0x09	; 9
    21fe:	b7 cf       	rjmp	.-146    	; 0x216e <CommandLineProcessByte+0x2a8>
    2200:	28 e0       	ldi	r18, 0x08	; 8
    2202:	b5 cf       	rjmp	.-150    	; 0x216e <CommandLineProcessByte+0x2a8>
    2204:	27 e0       	ldi	r18, 0x07	; 7
    2206:	b3 cf       	rjmp	.-154    	; 0x216e <CommandLineProcessByte+0x2a8>
    2208:	26 e0       	ldi	r18, 0x06	; 6
    220a:	b1 cf       	rjmp	.-158    	; 0x216e <CommandLineProcessByte+0x2a8>

0000220c <CommandLineTick>:
    220c:	08 95       	ret

0000220e <StartDemod>:
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    220e:	a0 e2       	ldi	r26, 0x20	; 32
    2210:	b6 e0       	ldi	r27, 0x06	; 6
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	11 96       	adiw	r26, 0x01	; 1
    2216:	8c 93       	st	X, r24
    2218:	11 97       	sbiw	r26, 0x01	; 1

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    221a:	15 96       	adiw	r26, 0x05	; 5
    221c:	8c 93       	st	X, r24
    221e:	15 97       	sbiw	r26, 0x05	; 5
static void StartDemod(void) {
    /* Activate Power for demodulator */
    CodecSetDemodPower(true);

    /* Configure sampling-timer free running and sync to first modulation-pause. */
    CODEC_TIMER_SAMPLING.CNT = 0;
    2220:	e0 e4       	ldi	r30, 0x40	; 64
    2222:	f8 e0       	ldi	r31, 0x08	; 8
    2224:	10 a2       	lds	r17, 0x90
    2226:	11 a2       	lds	r17, 0x91
    CODEC_TIMER_SAMPLING.PER = SAMPLE_RATE_SYSTEM_CYCLES - 1;
    2228:	8d e2       	ldi	r24, 0x2D	; 45
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	86 a3       	lds	r24, 0x56
    222e:	97 a3       	lds	r25, 0x57
    CODEC_TIMER_SAMPLING.CCA = 0xFFFF; /* CCA Interrupt is not active! */
    2230:	8f ef       	ldi	r24, 0xFF	; 255
    2232:	9f ef       	ldi	r25, 0xFF	; 255
    2234:	80 a7       	lds	r24, 0x70
    2236:	91 a7       	lds	r25, 0x71
    CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_DIV1_gc;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 83       	st	Z, r24
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    223c:	98 e8       	ldi	r25, 0x88	; 136
    223e:	93 83       	std	Z+3, r25	; 0x03
    CODEC_TIMER_SAMPLING.INTCTRLB = TC_CCAINTLVL_HI_gc;
    2240:	93 e0       	ldi	r25, 0x03	; 3
    2242:	97 83       	std	Z+7, r25	; 0x07

    /* Start looking out for modulation pause via interrupt. */
    CODEC_DEMOD_IN_PORT.INT0MASK = CODEC_DEMOD_IN_MASK0;
    2244:	1a 96       	adiw	r26, 0x0a	; 10
    2246:	8c 93       	st	X, r24
    2248:	1a 97       	sbiw	r26, 0x0a	; 10
}
    224a:	08 95       	ret

0000224c <__vector_34>:

ISR(CODEC_DEMOD_IN_INT0_VECT) {
    224c:	1f 92       	push	r1
    224e:	0f 92       	push	r0
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	0f 92       	push	r0
    2254:	11 24       	eor	r1, r1
    2256:	8f 93       	push	r24
    2258:	9f 93       	push	r25
    225a:	ef 93       	push	r30
    225c:	ff 93       	push	r31
    /* This is the first edge of the first modulation-pause after StartDemod.
     * Now we have time to prepare our timers and variables to start
     * demodulating beginning from one bit-width after this edge. */
    CodecBufferPtr = CodecBuffer;
    225e:	80 e2       	ldi	r24, 0x20	; 32
    2260:	92 e2       	ldi	r25, 0x22	; 34
    2262:	80 93 c1 20 	sts	0x20C1, r24
    2266:	90 93 c2 20 	sts	0x20C2, r25
    ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    226a:	80 ea       	ldi	r24, 0xA0	; 160
    226c:	92 e2       	ldi	r25, 0x22	; 34
    226e:	80 93 c3 20 	sts	0x20C3, r24
    2272:	90 93 c4 20 	sts	0x20C4, r25
    DataRegister = 0;
    2276:	10 92 ba 20 	sts	0x20BA, r1
    SampleRegister = 0;
    227a:	10 92 b9 20 	sts	0x20B9, r1
    SamplePosition = 0;
    227e:	10 92 b5 20 	sts	0x20B5, r1
    BitCount = 0;
    2282:	10 92 bd 20 	sts	0x20BD, r1
    2286:	10 92 be 20 	sts	0x20BE, r1
    IsParityBit = false;
    228a:	10 92 b8 20 	sts	0x20B8, r1
     * XYZBUF mechanism of the xmega to automatically double the sampling rate on the
     * next overflow. For this we have to temporarily deactivate the automatical alignment
     * in order to catch next overflow event for updating the BUF registers.
     * We want to sample the demodulated data stream in the first quarter of the half-bit
     * where the pulsed miller encoded is located. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_OFF_gc;
    228e:	e0 e4       	ldi	r30, 0x40	; 64
    2290:	f8 e0       	ldi	r31, 0x08	; 8
    2292:	13 82       	std	Z+3, r1	; 0x03
    CODEC_TIMER_SAMPLING.PERBUF = SAMPLE_RATE_SYSTEM_CYCLES/2 - 1; /* Half bit width */
    2294:	86 e9       	ldi	r24, 0x96	; 150
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	86 ab       	sts	0x56, r24
    229a:	97 ab       	sts	0x57, r25
    CODEC_TIMER_SAMPLING.CCABUF = SAMPLE_RATE_SYSTEM_CYCLES/8 - 10 - 1; /* Compensate for DIGFILT and ISR prolog */
    229c:	8a e1       	ldi	r24, 0x1A	; 26
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	80 af       	sts	0x70, r24
    22a2:	91 af       	sts	0x71, r25
    /* Setup Frame Delay Timer and wire to EVSYS. Frame delay time is
     * measured from last change in RF field, therefore we use
     * the event channel 1 (end of modulation pause) as the restart event.
     * The preliminary frame delay time chosen here is irrelevant, because
     * the correct FDT gets set automatically after demodulation. */
    CODEC_TIMER_LOADMOD.CNT = 0;
    22a4:	e0 e4       	ldi	r30, 0x40	; 64
    22a6:	f9 e0       	ldi	r31, 0x09	; 9
    22a8:	10 a2       	lds	r17, 0x90
    22aa:	11 a2       	lds	r17, 0x91
    CODEC_TIMER_LOADMOD.PER = 0xFFFF;
    22ac:	8f ef       	ldi	r24, 0xFF	; 255
    22ae:	9f ef       	ldi	r25, 0xFF	; 255
    22b0:	86 a3       	lds	r24, 0x56
    22b2:	97 a3       	lds	r25, 0x57
    CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH1_gc;
    22b4:	89 e8       	ldi	r24, 0x89	; 137
    22b6:	83 83       	std	Z+3, r24	; 0x03
    CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_EVCH6_gc;
    22b8:	8e e0       	ldi	r24, 0x0E	; 14
    22ba:	80 83       	st	Z, r24

    /* Disable this interrupt */
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    22bc:	e0 e2       	ldi	r30, 0x20	; 32
    22be:	f6 e0       	ldi	r31, 0x06	; 6
    22c0:	12 86       	std	Z+10, r1	; 0x0a
}
    22c2:	ff 91       	pop	r31
    22c4:	ef 91       	pop	r30
    22c6:	9f 91       	pop	r25
    22c8:	8f 91       	pop	r24
    22ca:	0f 90       	pop	r0
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	0f 90       	pop	r0
    22d0:	1f 90       	pop	r1
    22d2:	18 95       	reti

000022d4 <__vector_22>:

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    22d4:	1f 92       	push	r1
    22d6:	0f 92       	push	r0
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	0f 92       	push	r0
    22dc:	11 24       	eor	r1, r1
    22de:	2f 93       	push	r18
    22e0:	8f 93       	push	r24
    22e2:	9f 93       	push	r25
    22e4:	ef 93       	push	r30
    22e6:	ff 93       	push	r31
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    22e8:	90 91 28 06 	lds	r25, 0x0628
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    22ec:	80 91 b9 20 	lds	r24, 0x20B9
    22f0:	88 0f       	add	r24, r24
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
}

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    22f2:	95 70       	andi	r25, 0x05	; 5
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    22f4:	21 e0       	ldi	r18, 0x01	; 1
    22f6:	09 f0       	breq	.+2      	; 0x22fa <__vector_22+0x26>
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	82 2b       	or	r24, r18
    SampleRegister = NewSampleRegister;
    22fc:	80 93 b9 20 	sts	0x20B9, r24

    if (SamplePosition) {
    2300:	90 91 b5 20 	lds	r25, 0x20B5
    2304:	99 23       	and	r25, r25
    2306:	a1 f1       	breq	.+104    	; 0x2370 <__vector_22+0x9c>
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
    2308:	98 2f       	mov	r25, r24
    230a:	97 70       	andi	r25, 0x07	; 7
    230c:	97 30       	cpi	r25, 0x07	; 7
    230e:	09 f4       	brne	.+2      	; 0x2312 <__vector_22+0x3e>
    2310:	44 c0       	rjmp	.+136    	; 0x239a <__vector_22+0xc6>

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
        } else {
            /* Otherwise, we check the two sample bits from the bit before. */
            uint8_t BitSample = NewSampleRegister & 0xC;
    2312:	8c 70       	andi	r24, 0x0C	; 12
            uint8_t Bit = 0;

            if (BitSample != (0x0 << 2)) {
    2314:	69 f1       	breq	.+90     	; 0x2370 <__vector_22+0x9c>
                /* We have a valid bit. decode and process it. */
                if (BitSample & (0x1 << 2)) {
                    /* 01 sequence or 11 sequence -> This is a zero bit */
                    Bit = 0;
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	82 fd       	sbrc	r24, 2
    231a:	6e c0       	rjmp	.+220    	; 0x23f8 <__vector_22+0x124>
                } else {
                    /* 10 sequence -> This is a one bit */
                    Bit = 1;
                }

                LastBit = Bit;
    231c:	90 93 b7 20 	sts	0x20B7, r25

                if (!IsParityBit) {
    2320:	80 91 b8 20 	lds	r24, 0x20B8
    2324:	88 23       	and	r24, r24
    2326:	09 f0       	breq	.+2      	; 0x232a <__vector_22+0x56>
    2328:	6f c0       	rjmp	.+222    	; 0x2408 <__vector_22+0x134>
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
    232a:	80 91 ba 20 	lds	r24, 0x20BA
    232e:	86 95       	lsr	r24
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    2330:	99 23       	and	r25, r25
    2332:	09 f4       	brne	.+2      	; 0x2336 <__vector_22+0x62>
    2334:	71 c0       	rjmp	.+226    	; 0x2418 <__vector_22+0x144>
    2336:	20 e8       	ldi	r18, 0x80	; 128
    2338:	28 2b       	or	r18, r24
                    DataRegister = NewDataRegister;
    233a:	20 93 ba 20 	sts	0x20BA, r18

                    /* Update bitcount */
                    uint16_t NewBitCount = ++BitCount;
    233e:	80 91 bd 20 	lds	r24, 0x20BD
    2342:	90 91 be 20 	lds	r25, 0x20BE
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	80 93 bd 20 	sts	0x20BD, r24
    234c:	90 93 be 20 	sts	0x20BE, r25
                    if ((NewBitCount & 0x07) == 0) {
    2350:	87 70       	andi	r24, 0x07	; 7
    2352:	90 70       	andi	r25, 0x00	; 0
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	61 f4       	brne	.+24     	; 0x2370 <__vector_22+0x9c>
                        /* We have reached a byte boundary! Store the data register. */
                        /* TODO: Prevent buffer overflow */
                        *CodecBufferPtr++ = NewDataRegister;
    2358:	e0 91 c1 20 	lds	r30, 0x20C1
    235c:	f0 91 c2 20 	lds	r31, 0x20C2
    2360:	21 93       	st	Z+, r18
    2362:	e0 93 c1 20 	sts	0x20C1, r30
    2366:	f0 93 c2 20 	sts	0x20C2, r31

                        /* Store bit for determining FDT at EOC and enable parity
                         * handling on next bit. */
                        IsParityBit = true;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	80 93 b8 20 	sts	0x20B8, r24
        }
    } else {
        /* On odd sample position just sample. */
    }

    SamplePosition = !SamplePosition;
    2370:	90 91 b5 20 	lds	r25, 0x20B5
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	91 11       	cpse	r25, r1
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	80 93 b5 20 	sts	0x20B5, r24

    /* Make sure the sampling timer gets automatically aligned to the
     * modulation pauses by using the RESTART event.
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    237e:	88 e8       	ldi	r24, 0x88	; 136
    2380:	e0 e4       	ldi	r30, 0x40	; 64
    2382:	f8 e0       	ldi	r31, 0x08	; 8
    2384:	83 83       	std	Z+3, r24	; 0x03
}
    2386:	ff 91       	pop	r31
    2388:	ef 91       	pop	r30
    238a:	9f 91       	pop	r25
    238c:	8f 91       	pop	r24
    238e:	2f 91       	pop	r18
    2390:	0f 90       	pop	r0
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	0f 90       	pop	r0
    2396:	1f 90       	pop	r1
    2398:	18 95       	reti

    if (SamplePosition) {
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
            /* No carrier modulation for 3 sample points. EOC! */
            CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_OFF_gc;
    239a:	10 92 40 08 	sts	0x0840, r1
            CODEC_TIMER_SAMPLING.INTFLAGS = TC0_CCAIF_bm;
    239e:	80 e1       	ldi	r24, 0x10	; 16
    23a0:	e0 e4       	ldi	r30, 0x40	; 64
    23a2:	f8 e0       	ldi	r31, 0x08	; 8
    23a4:	84 87       	std	Z+12, r24	; 0x0c

            /* By this time, the FDT timer is aligned to the last modulation
             * edge of the reader. So we disable the auto-synchronization and
             * let it count the frame delay time in the background, and generate
             * an interrupt once it has reached the FDT. */
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;
    23a6:	e0 e4       	ldi	r30, 0x40	; 64
    23a8:	f9 e0       	ldi	r31, 0x09	; 9
    23aa:	13 82       	std	Z+3, r1	; 0x03

            if (LastBit) {
    23ac:	80 91 b7 20 	lds	r24, 0x20B7
    23b0:	88 23       	and	r24, r24
    23b2:	69 f1       	breq	.+90     	; 0x240e <__vector_22+0x13a>
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
    23b4:	8c eb       	ldi	r24, 0xBC	; 188
    23b6:	94 e0       	ldi	r25, 0x04	; 4
    23b8:	86 a3       	lds	r24, 0x56
    23ba:	97 a3       	lds	r25, 0x57
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
            }

            LoadModState = LOADMOD_FDT;
    23bc:	10 92 b6 20 	sts	0x20B6, r1

            CODEC_TIMER_LOADMOD.INTFLAGS = TC1_OVFIF_bm;
    23c0:	e0 e4       	ldi	r30, 0x40	; 64
    23c2:	f9 e0       	ldi	r31, 0x09	; 9
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	84 87       	std	Z+12, r24	; 0x0c
            CODEC_TIMER_LOADMOD.INTCTRLA = TC_OVFINTLVL_HI_gc;
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	86 83       	std	Z+6, r24	; 0x06

            /* Determine if we did not receive a multiple of 8 bits.
             * If this is the case, right-align the remaining data and
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
    23cc:	80 91 bd 20 	lds	r24, 0x20BD
    23d0:	90 91 be 20 	lds	r25, 0x20BE
    23d4:	87 70       	andi	r24, 0x07	; 7
            if (RemainingBits != 0) {
    23d6:	61 f0       	breq	.+24     	; 0x23f0 <__vector_22+0x11c>
                uint8_t NewDataRegister = DataRegister;
    23d8:	90 91 ba 20 	lds	r25, 0x20BA

                while (RemainingBits++ < 8) {
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    23de:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    23e0:	8f 5f       	subi	r24, 0xFF	; 255
    23e2:	89 30       	cpi	r24, 0x09	; 9
    23e4:	e1 f7       	brne	.-8      	; 0x23de <__vector_22+0x10a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
                }

                /* TODO: Prevent buffer overflow */
                *CodecBufferPtr = NewDataRegister;
    23e6:	e0 91 c1 20 	lds	r30, 0x20C1
    23ea:	f0 91 c2 20 	lds	r31, 0x20C2
    23ee:	90 83       	st	Z, r25
            }

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	80 93 bf 20 	sts	0x20BF, r24
    23f6:	bc cf       	rjmp	.-136    	; 0x2370 <__vector_22+0x9c>

            if (BitSample != (0x0 << 2)) {
                /* We have a valid bit. decode and process it. */
                if (BitSample & (0x1 << 2)) {
                    /* 01 sequence or 11 sequence -> This is a zero bit */
                    Bit = 0;
    23f8:	90 e0       	ldi	r25, 0x00	; 0
                } else {
                    /* 10 sequence -> This is a one bit */
                    Bit = 1;
                }

                LastBit = Bit;
    23fa:	90 93 b7 20 	sts	0x20B7, r25

                if (!IsParityBit) {
    23fe:	80 91 b8 20 	lds	r24, 0x20B8
    2402:	88 23       	and	r24, r24
    2404:	09 f4       	brne	.+2      	; 0x2408 <__vector_22+0x134>
    2406:	91 cf       	rjmp	.-222    	; 0x232a <__vector_22+0x56>

                } else {
                    /* This is a parity bit. Store it */
                    /* TODO: Store parity and prevent overflow */
                    //*ParityBufferPtr++ = Bit;
                    IsParityBit = false;
    2408:	10 92 b8 20 	sts	0x20B8, r1
    240c:	b1 cf       	rjmp	.-158    	; 0x2370 <__vector_22+0x9c>
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;

            if (LastBit) {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
    240e:	8c e7       	ldi	r24, 0x7C	; 124
    2410:	94 e0       	ldi	r25, 0x04	; 4
    2412:	86 a3       	lds	r24, 0x56
    2414:	97 a3       	lds	r25, 0x57
    2416:	d2 cf       	rjmp	.-92     	; 0x23bc <__vector_22+0xe8>

                if (!IsParityBit) {
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	8e cf       	rjmp	.-228    	; 0x2338 <__vector_22+0x64>

0000241c <__vector_83>:
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
}

ISR(CODEC_TIMER_OVF_VECT) {
    241c:	1f 92       	push	r1
    241e:	0f 92       	push	r0
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	0f 92       	push	r0
    2424:	11 24       	eor	r1, r1
    2426:	2f 93       	push	r18
    2428:	3f 93       	push	r19
    242a:	8f 93       	push	r24
    242c:	9f 93       	push	r25
    242e:	af 93       	push	r26
    2430:	bf 93       	push	r27
    2432:	ef 93       	push	r30
    2434:	ff 93       	push	r31
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    2436:	80 91 b6 20 	lds	r24, 0x20B6
    243a:	85 30       	cpi	r24, 0x05	; 5
    243c:	09 f4       	brne	.+2      	; 0x2440 <__vector_83+0x24>
    243e:	55 c0       	rjmp	.+170    	; 0x24ea <__vector_83+0xce>
    2440:	86 30       	cpi	r24, 0x06	; 6
    2442:	c0 f0       	brcs	.+48     	; 0x2474 <__vector_83+0x58>
    2444:	88 30       	cpi	r24, 0x08	; 8
    2446:	09 f4       	brne	.+2      	; 0x244a <__vector_83+0x2e>
    2448:	86 c0       	rjmp	.+268    	; 0x2556 <__vector_83+0x13a>
    244a:	89 30       	cpi	r24, 0x09	; 9
    244c:	40 f5       	brcc	.+80     	; 0x249e <__vector_83+0x82>
    244e:	86 30       	cpi	r24, 0x06	; 6
    2450:	09 f4       	brne	.+2      	; 0x2454 <__vector_83+0x38>
    2452:	c7 c0       	rjmp	.+398    	; 0x25e2 <__vector_83+0x1c6>
    2454:	87 30       	cpi	r24, 0x07	; 7
    2456:	09 f4       	brne	.+2      	; 0x245a <__vector_83+0x3e>
    2458:	95 c0       	rjmp	.+298    	; 0x2584 <__vector_83+0x168>
        break;

    default:
        break;
    }
}
    245a:	ff 91       	pop	r31
    245c:	ef 91       	pop	r30
    245e:	bf 91       	pop	r27
    2460:	af 91       	pop	r26
    2462:	9f 91       	pop	r25
    2464:	8f 91       	pop	r24
    2466:	3f 91       	pop	r19
    2468:	2f 91       	pop	r18
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	0f 90       	pop	r0
    2470:	1f 90       	pop	r1
    2472:	18 95       	reti
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	89 f1       	breq	.+98     	; 0x24da <__vector_83+0xbe>
    2478:	83 30       	cpi	r24, 0x03	; 3
    247a:	08 f1       	brcs	.+66     	; 0x24be <__vector_83+0xa2>
    247c:	83 30       	cpi	r24, 0x03	; 3
    247e:	09 f4       	brne	.+2      	; 0x2482 <__vector_83+0x66>
    2480:	5b c0       	rjmp	.+182    	; 0x2538 <__vector_83+0x11c>
    2482:	84 30       	cpi	r24, 0x04	; 4
    2484:	51 f7       	brne	.-44     	; 0x245a <__vector_83+0x3e>
        /* Fetch first byte */
        DataRegister = *CodecBufferPtr;
        break;

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
    2486:	80 91 ba 20 	lds	r24, 0x20BA
    248a:	80 fd       	sbrc	r24, 0
    248c:	c7 c0       	rjmp	.+398    	; 0x261c <__vector_83+0x200>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    248e:	80 e4       	ldi	r24, 0x40	; 64
    2490:	e0 e4       	ldi	r30, 0x40	; 64
    2492:	f6 e0       	ldi	r31, 0x06	; 6
    2494:	86 83       	std	Z+6, r24	; 0x06
        }

        LoadModState = LOADMOD_DATA1;
    2496:	85 e0       	ldi	r24, 0x05	; 5
    2498:	80 93 b6 20 	sts	0x20B6, r24
        break;
    249c:	de cf       	rjmp	.-68     	; 0x245a <__vector_83+0x3e>
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    249e:	89 30       	cpi	r24, 0x09	; 9
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <__vector_83+0x88>
    24a2:	61 c0       	rjmp	.+194    	; 0x2566 <__vector_83+0x14a>
    24a4:	8a 30       	cpi	r24, 0x0A	; 10
    24a6:	c9 f6       	brne	.-78     	; 0x245a <__vector_83+0x3e>

    case LOADMOD_FINISHED:
        /* We have written all of our bits. Deactivate the loadmod
         * timer. Also disable the bit-rate interrupt again. And
         * stop the subcarrier divider. */
        CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    24a8:	10 92 40 09 	sts	0x0940, r1
        CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    24ac:	e0 e4       	ldi	r30, 0x40	; 64
    24ae:	f9 e0       	ldi	r31, 0x09	; 9
    24b0:	16 82       	std	Z+6, r1	; 0x06
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_OFF_gc;
    24b2:	10 92 00 08 	sts	0x0800, r1

        /* Signal application that we have finished loadmod */
        Flags.LoadmodFinished = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	80 93 c0 20 	sts	0x20C0, r24
        break;
    24bc:	ce cf       	rjmp	.-100    	; 0x245a <__vector_83+0x3e>
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    24be:	88 23       	and	r24, r24
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <__vector_83+0xa8>
    24c2:	59 c0       	rjmp	.+178    	; 0x2576 <__vector_83+0x15a>
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	49 f6       	brne	.-110    	; 0x245a <__vector_83+0x3e>
        break;

    case LOADMOD_START:
        /* Application produced data. With this interrupt we are aligned to the bit-grid.
         * Start subcarrier generation and align to bitrate. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_RATE_CYCLES / 2 - 1;
    24c8:	8f e3       	ldi	r24, 0x3F	; 63
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	e0 e4       	ldi	r30, 0x40	; 64
    24ce:	f9 e0       	ldi	r31, 0x09	; 9
    24d0:	86 a3       	lds	r24, 0x56
    24d2:	97 a3       	lds	r25, 0x57
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_EVCH6_gc;
    24d4:	8e e0       	ldi	r24, 0x0E	; 14
    24d6:	80 93 00 08 	sts	0x0800, r24

        /* Fallthrough to first bit */

    case LOADMOD_START_BIT0:
    	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    24da:	80 e4       	ldi	r24, 0x40	; 64
    24dc:	e0 e4       	ldi	r30, 0x40	; 64
    24de:	f6 e0       	ldi	r31, 0x06	; 6
    24e0:	85 83       	std	Z+5, r24	; 0x05
        LoadModState = LOADMOD_START_BIT1;
    24e2:	83 e0       	ldi	r24, 0x03	; 3
    24e4:	80 93 b6 20 	sts	0x20B6, r24
        break;
    24e8:	b8 cf       	rjmp	.-144    	; 0x245a <__vector_83+0x3e>

        LoadModState = LOADMOD_DATA1;
        break;

    case LOADMOD_DATA1:
        Temp8 = DataRegister;
    24ea:	80 91 ba 20 	lds	r24, 0x20BA

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    24ee:	90 e4       	ldi	r25, 0x40	; 64
    24f0:	e0 e4       	ldi	r30, 0x40	; 64
    24f2:	f6 e0       	ldi	r31, 0x06	; 6
        break;

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
    24f4:	80 fd       	sbrc	r24, 0
    24f6:	90 c0       	rjmp	.+288    	; 0x2618 <__vector_83+0x1fc>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    24f8:	95 83       	std	Z+5, r25	; 0x05
        }

        DataRegister = Temp8 >> 1;
    24fa:	86 95       	lsr	r24
    24fc:	80 93 ba 20 	sts	0x20BA, r24

        Temp16 = BitSent;
    2500:	80 91 bb 20 	lds	r24, 0x20BB
    2504:	90 91 bc 20 	lds	r25, 0x20BC
        BitSent = ++Temp16;
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	80 93 bb 20 	sts	0x20BB, r24
    250e:	90 93 bc 20 	sts	0x20BC, r25

        if ((Temp16 & 0x07) == 0) {
    2512:	9c 01       	movw	r18, r24
    2514:	27 70       	andi	r18, 0x07	; 7
    2516:	30 70       	andi	r19, 0x00	; 0
    2518:	21 15       	cp	r18, r1
    251a:	31 05       	cpc	r19, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <__vector_83+0x104>
    251e:	83 c0       	rjmp	.+262    	; 0x2626 <__vector_83+0x20a>
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
            break;
        }

        if (Temp16 == BitCount) {
    2520:	20 91 bd 20 	lds	r18, 0x20BD
    2524:	30 91 be 20 	lds	r19, 0x20BE
    2528:	82 17       	cp	r24, r18
    252a:	93 07       	cpc	r25, r19
    252c:	09 f0       	breq	.+2      	; 0x2530 <__vector_83+0x114>
    252e:	55 c0       	rjmp	.+170    	; 0x25da <__vector_83+0x1be>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        }

        if (BitSent == BitCount) {
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
    2530:	88 e0       	ldi	r24, 0x08	; 8
    2532:	80 93 b6 20 	sts	0x20B6, r24
    2536:	91 cf       	rjmp	.-222    	; 0x245a <__vector_83+0x3e>
    	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        LoadModState = LOADMOD_START_BIT1;
        break;

    case LOADMOD_START_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2538:	80 e4       	ldi	r24, 0x40	; 64
    253a:	e0 e4       	ldi	r30, 0x40	; 64
    253c:	f6 e0       	ldi	r31, 0x06	; 6
    253e:	86 83       	std	Z+6, r24	; 0x06
        LoadModState = LOADMOD_DATA0;
    2540:	84 e0       	ldi	r24, 0x04	; 4
    2542:	80 93 b6 20 	sts	0x20B6, r24

        /* Fetch first byte */
        DataRegister = *CodecBufferPtr;
    2546:	e0 91 c1 20 	lds	r30, 0x20C1
    254a:	f0 91 c2 20 	lds	r31, 0x20C2
    254e:	80 81       	ld	r24, Z
    2550:	80 93 ba 20 	sts	0x20BA, r24
        break;
    2554:	82 cf       	rjmp	.-252    	; 0x245a <__vector_83+0x3e>
        }

        break;

    case LOADMOD_STOP_BIT0:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2556:	80 e4       	ldi	r24, 0x40	; 64
    2558:	e0 e4       	ldi	r30, 0x40	; 64
    255a:	f6 e0       	ldi	r31, 0x06	; 6
    255c:	86 83       	std	Z+6, r24	; 0x06
        LoadModState = LOADMOD_STOP_BIT1;
    255e:	89 e0       	ldi	r24, 0x09	; 9
    2560:	80 93 b6 20 	sts	0x20B6, r24
        break;
    2564:	7a cf       	rjmp	.-268    	; 0x245a <__vector_83+0x3e>

    case LOADMOD_STOP_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2566:	80 e4       	ldi	r24, 0x40	; 64
    2568:	e0 e4       	ldi	r30, 0x40	; 64
    256a:	f6 e0       	ldi	r31, 0x06	; 6
    256c:	86 83       	std	Z+6, r24	; 0x06
        LoadModState = LOADMOD_FINISHED;
    256e:	8a e0       	ldi	r24, 0x0A	; 10
    2570:	80 93 b6 20 	sts	0x20B6, r24
        break;
    2574:	72 cf       	rjmp	.-284    	; 0x245a <__vector_83+0x3e>
    uint16_t Temp16;

    switch (LoadModState) {
    case LOADMOD_FDT:
        /* No data has been produced, but FDT has ended. Switch over to bit-grid aligning. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_GRID_CYCLES - 1;
    2576:	8f e7       	ldi	r24, 0x7F	; 127
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	e0 e4       	ldi	r30, 0x40	; 64
    257c:	f9 e0       	ldi	r31, 0x09	; 9
    257e:	86 a3       	lds	r24, 0x56
    2580:	97 a3       	lds	r25, 0x57
        break;
    2582:	6b cf       	rjmp	.-298    	; 0x245a <__vector_83+0x3e>

        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
    2584:	e0 91 c3 20 	lds	r30, 0x20C3
    2588:	f0 91 c4 20 	lds	r31, 0x20C4
    258c:	80 81       	ld	r24, Z
    258e:	88 23       	and	r24, r24
    2590:	e1 f5       	brne	.+120    	; 0x260a <__vector_83+0x1ee>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2592:	80 e4       	ldi	r24, 0x40	; 64
    2594:	a0 e4       	ldi	r26, 0x40	; 64
    2596:	b6 e0       	ldi	r27, 0x06	; 6
    2598:	15 96       	adiw	r26, 0x05	; 5
    259a:	8c 93       	st	X, r24
    259c:	15 97       	sbiw	r26, 0x05	; 5
        }

        if (BitSent == BitCount) {
    259e:	20 91 bb 20 	lds	r18, 0x20BB
    25a2:	30 91 bc 20 	lds	r19, 0x20BC
    25a6:	80 91 bd 20 	lds	r24, 0x20BD
    25aa:	90 91 be 20 	lds	r25, 0x20BE
    25ae:	28 17       	cp	r18, r24
    25b0:	39 07       	cpc	r19, r25
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <__vector_83+0x19a>
    25b4:	bd cf       	rjmp	.-134    	; 0x2530 <__vector_83+0x114>
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
        } else {
            /* Fetch next data and continue sending bits. */
            ParityBufferPtr++;
    25b6:	31 96       	adiw	r30, 0x01	; 1
    25b8:	e0 93 c3 20 	sts	0x20C3, r30
    25bc:	f0 93 c4 20 	sts	0x20C4, r31
            DataRegister = *++CodecBufferPtr;
    25c0:	e0 91 c1 20 	lds	r30, 0x20C1
    25c4:	f0 91 c2 20 	lds	r31, 0x20C2
    25c8:	cf 01       	movw	r24, r30
    25ca:	01 96       	adiw	r24, 0x01	; 1
    25cc:	80 93 c1 20 	sts	0x20C1, r24
    25d0:	90 93 c2 20 	sts	0x20C2, r25
    25d4:	81 81       	ldd	r24, Z+1	; 0x01
    25d6:	80 93 ba 20 	sts	0x20BA, r24
            LoadModState = LOADMOD_DATA0;
    25da:	84 e0       	ldi	r24, 0x04	; 4
    25dc:	80 93 b6 20 	sts	0x20B6, r24
    25e0:	3c cf       	rjmp	.-392    	; 0x245a <__vector_83+0x3e>
        LoadModState = LOADMOD_DATA0;

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
    25e2:	e0 91 c3 20 	lds	r30, 0x20C3
    25e6:	f0 91 c4 20 	lds	r31, 0x20C4
    25ea:	80 81       	ld	r24, Z
    25ec:	88 23       	and	r24, r24
    25ee:	41 f4       	brne	.+16     	; 0x2600 <__vector_83+0x1e4>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    25f0:	80 e4       	ldi	r24, 0x40	; 64
    25f2:	e0 e4       	ldi	r30, 0x40	; 64
    25f4:	f6 e0       	ldi	r31, 0x06	; 6
    25f6:	86 83       	std	Z+6, r24	; 0x06
        }

        LoadModState = LOADMOD_PARITY1;
    25f8:	87 e0       	ldi	r24, 0x07	; 7
    25fa:	80 93 b6 20 	sts	0x20B6, r24
        break;
    25fe:	2d cf       	rjmp	.-422    	; 0x245a <__vector_83+0x3e>

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2600:	80 e4       	ldi	r24, 0x40	; 64
    2602:	e0 e4       	ldi	r30, 0x40	; 64
    2604:	f6 e0       	ldi	r31, 0x06	; 6
    2606:	85 83       	std	Z+5, r24	; 0x05
    2608:	f7 cf       	rjmp	.-18     	; 0x25f8 <__vector_83+0x1dc>
        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    260a:	80 e4       	ldi	r24, 0x40	; 64
    260c:	a0 e4       	ldi	r26, 0x40	; 64
    260e:	b6 e0       	ldi	r27, 0x06	; 6
    2610:	16 96       	adiw	r26, 0x06	; 6
    2612:	8c 93       	st	X, r24
    2614:	16 97       	sbiw	r26, 0x06	; 6
    2616:	c3 cf       	rjmp	.-122    	; 0x259e <__vector_83+0x182>

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2618:	96 83       	std	Z+6, r25	; 0x06
    261a:	6f cf       	rjmp	.-290    	; 0x24fa <__vector_83+0xde>
        DataRegister = *CodecBufferPtr;
        break;

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    261c:	80 e4       	ldi	r24, 0x40	; 64
    261e:	e0 e4       	ldi	r30, 0x40	; 64
    2620:	f6 e0       	ldi	r31, 0x06	; 6
    2622:	85 83       	std	Z+5, r24	; 0x05
    2624:	38 cf       	rjmp	.-400    	; 0x2496 <__vector_83+0x7a>
        Temp16 = BitSent;
        BitSent = ++Temp16;

        if ((Temp16 & 0x07) == 0) {
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
    2626:	86 e0       	ldi	r24, 0x06	; 6
    2628:	80 93 b6 20 	sts	0x20B6, r24
            break;
    262c:	16 cf       	rjmp	.-468    	; 0x245a <__vector_83+0x3e>

0000262e <ISO14443ACodecInit>:
    default:
        break;
    }
}

void ISO14443ACodecInit(void) {
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
static volatile LoadModStateType LoadModState;
static volatile bool SamplePosition;

static void Initialize(void) {
    /* Configure CARRIER input pin and route it to EVSYS */
    CODEC_CARRIER_IN_PORT.DIRCLR = CODEC_CARRIER_IN_MASK;
    2632:	e0 e4       	ldi	r30, 0x40	; 64
    2634:	f6 e0       	ldi	r31, 0x06	; 6
    2636:	84 e0       	ldi	r24, 0x04	; 4
    2638:	82 83       	std	Z+2, r24	; 0x02
    CODEC_CARRIER_IN_PORT.CODEC_CARRIER_IN_PINCTRL = PORT_ISC_BOTHEDGES_gc;
    263a:	12 8a       	std	Z+18, r1	; 0x12
    EVSYS.CH6MUX = CODEC_CARRIER_IN_EVMUX;
    263c:	c0 e8       	ldi	r28, 0x80	; 128
    263e:	d1 e0       	ldi	r29, 0x01	; 1
    2640:	82 e6       	ldi	r24, 0x62	; 98
    2642:	8e 83       	std	Y+6, r24	; 0x06

    /* Configure two DEMOD pins for input.
     * Configure event channel 0 for rising edge (begin of modulation pause)
     * Configure event channel 1 for falling edge (end of modulation pause) */
    CODEC_DEMOD_IN_PORT.DIRCLR = CODEC_DEMOD_IN_MASK;
    2644:	a0 e2       	ldi	r26, 0x20	; 32
    2646:	b6 e0       	ldi	r27, 0x06	; 6
    2648:	85 e0       	ldi	r24, 0x05	; 5
    264a:	12 96       	adiw	r26, 0x02	; 2
    264c:	8c 93       	st	X, r24
    264e:	12 97       	sbiw	r26, 0x02	; 2
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL0 = PORT_ISC_RISING_gc;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	50 96       	adiw	r26, 0x10	; 16
    2654:	8c 93       	st	X, r24
    2656:	50 97       	sbiw	r26, 0x10	; 16
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL1 = PORT_ISC_FALLING_gc;
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	52 96       	adiw	r26, 0x12	; 18
    265c:	8c 93       	st	X, r24
    265e:	52 97       	sbiw	r26, 0x12	; 18
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    2660:	1a 96       	adiw	r26, 0x0a	; 10
    2662:	1c 92       	st	X, r1
    2664:	1a 97       	sbiw	r26, 0x0a	; 10
    CODEC_DEMOD_IN_PORT.INTCTRL = PORT_INT0LVL_HI_gc;
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	19 96       	adiw	r26, 0x09	; 9
    266a:	8c 93       	st	X, r24
    EVSYS.CH0MUX = CODEC_DEMOD_IN_EVMUX0;
    266c:	98 e5       	ldi	r25, 0x58	; 88
    266e:	98 83       	st	Y, r25
    EVSYS.CH1MUX = CODEC_DEMOD_IN_EVMUX1;
    2670:	9a e5       	ldi	r25, 0x5A	; 90
    2672:	99 83       	std	Y+1, r25	; 0x01

    /* Configure LOADMOD and SUBCARRIER output pins.
     * Disable PSK modulation by setting pin to low. */
    CODEC_LOADMOD_PORT.DIRSET = CODEC_LOADMOD_MASK;
    2674:	90 e4       	ldi	r25, 0x40	; 64
    2676:	91 83       	std	Z+1, r25	; 0x01
    CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2678:	96 83       	std	Z+6, r25	; 0x06
    CODEC_SUBCARRIER_PORT.DIRSET = CODEC_SUBCARRIER_MASK;
    267a:	81 83       	std	Z+1, r24	; 0x01
    CODEC_SUBCARRIER_PORT.OUTCLR = CODEC_SUBCARRIER_MASK;
    267c:	86 83       	std	Z+6, r24	; 0x06

    /* Configure subcarrier generation with 50% DC output using OOK */
    CODEC_SUBCARRIER_TIMER.PER = ISO14443A_SUBCARRIER_DIVIDER - 1;
    267e:	e0 e0       	ldi	r30, 0x00	; 0
    2680:	f8 e0       	ldi	r31, 0x08	; 8
    2682:	8f e0       	ldi	r24, 0x0F	; 15
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	86 a3       	lds	r24, 0x56
    2688:	97 a3       	lds	r25, 0x57
    CODEC_SUBCARRIER_TIMER.CODEC_SUBCARRIER_CC_OOK = ISO14443A_SUBCARRIER_DIVIDER/2;
    268a:	88 e0       	ldi	r24, 0x08	; 8
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	82 a7       	lds	r24, 0x72
    2690:	93 a7       	lds	r25, 0x73
    CODEC_SUBCARRIER_TIMER.CTRLB = CODEC_SUBCARRIER_CCEN_OOK | TC_WGMODE_SINGLESLOPE_gc;
    2692:	83 e2       	ldi	r24, 0x23	; 35
    2694:	81 83       	std	Z+1, r24	; 0x01

void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
    2696:	bb dd       	rcall	.-1162   	; 0x220e <StartDemod>
    2698:	df 91       	pop	r29
}
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

0000269e <ISO14443ACodecTask>:
    269e:	80 91 bf 20 	lds	r24, 0x20BF

void ISO14443ACodecTask(void) {
    if (Flags.DemodFinished) {
    26a2:	88 23       	and	r24, r24
    26a4:	c9 f0       	breq	.+50     	; 0x26d8 <ISO14443ACodecTask+0x3a>
        Flags.DemodFinished = 0;
    26a6:	10 92 bf 20 	sts	0x20BF, r1
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    26aa:	e0 e2       	ldi	r30, 0x20	; 32
    26ac:	f6 e0       	ldi	r31, 0x06	; 6
    26ae:	82 e0       	ldi	r24, 0x02	; 2
    26b0:	81 83       	std	Z+1, r24	; 0x01

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    } else {
        CODEC_DEMOD_POWER_PORT.OUTCLR = CODEC_DEMOD_POWER_MASK;
    26b2:	86 83       	std	Z+6, r24	; 0x06
        /* Reception finished. Process the received bytes */
        CodecSetDemodPower(false);

        uint16_t DemodBitCount = BitCount;
    26b4:	60 91 bd 20 	lds	r22, 0x20BD
    26b8:	70 91 be 20 	lds	r23, 0x20BE
        uint16_t AnswerBitCount = ISO14443A_APP_NO_RESPONSE;

        if (DemodBitCount > 0) {
    26bc:	61 15       	cp	r22, r1
    26be:	71 05       	cpc	r23, r1
    26c0:	99 f4       	brne	.+38     	; 0x26e8 <ISO14443ACodecTask+0x4a>
INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
}

INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
    26c2:	e0 91 ff 20 	lds	r30, 0x20FF
    26c6:	f0 91 00 21 	lds	r31, 0x2100
    26ca:	09 95       	icall
            CodecBufferPtr = CodecBuffer;
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
            LoadModState = LOADMOD_START;
        } else {
            /* No data to be processed. Disable loadmodding and start listening again */
            CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    26cc:	10 92 40 09 	sts	0x0940, r1
            CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    26d0:	e0 e4       	ldi	r30, 0x40	; 64
    26d2:	f9 e0       	ldi	r31, 0x09	; 9
    26d4:	16 82       	std	Z+6, r1	; 0x06

            StartDemod();
    26d6:	9b dd       	rcall	.-1226   	; 0x220e <StartDemod>
    26d8:	80 91 c0 20 	lds	r24, 0x20C0
        }
    }

    if (Flags.LoadmodFinished) {
    26dc:	88 23       	and	r24, r24
    26de:	09 f4       	brne	.+2      	; 0x26e2 <ISO14443ACodecTask+0x44>
    26e0:	08 95       	ret
    26e2:	10 92 c0 20 	sts	0x20C0, r1
        Flags.LoadmodFinished = 0;
    26e6:	93 cd       	rjmp	.-1242   	; 0x220e <StartDemod>
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    26e8:	e0 91 03 21 	lds	r30, 0x2103
    26ec:	f0 91 04 21 	lds	r31, 0x2104
INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
}

INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
    26f0:	80 e2       	ldi	r24, 0x20	; 32
    26f2:	92 e2       	ldi	r25, 0x22	; 34
    26f4:	09 95       	icall
    26f6:	9c 01       	movw	r18, r24
    26f8:	94 fd       	sbrc	r25, 4
    26fa:	28 c0       	rjmp	.+80     	; 0x274c <ISO14443ACodecTask+0xae>
    26fc:	ac 01       	movw	r20, r24

        if (DemodBitCount > 0) {
            /* Call application if we received data */
            AnswerBitCount = ApplicationProcess(CodecBuffer, DemodBitCount);

            if (AnswerBitCount & ISO14443A_APP_CUSTOM_PARITY) {
    26fe:	56 95       	lsr	r21
    2700:	47 95       	ror	r20
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    2702:	56 95       	lsr	r21
    2704:	47 95       	ror	r20
    2706:	56 95       	lsr	r21
    2708:	47 95       	ror	r20
    270a:	41 15       	cp	r20, r1
    270c:	51 05       	cpc	r21, r1
    270e:	f9 f0       	breq	.+62     	; 0x274e <ISO14443ACodecTask+0xb0>
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	e0 e0       	ldi	r30, 0x00	; 0
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	e0 5e       	subi	r30, 0xE0	; 224
    2718:	fd 4d       	sbci	r31, 0xDD	; 221
    271a:	80 81       	ld	r24, Z
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
                            ODD_PARITY(CodecBuffer[i]);
    271c:	08 2e       	mov	r0, r24
    271e:	82 95       	swap	r24
    2720:	80 25       	eor	r24, r0
    2722:	08 2e       	mov	r0, r24
    2724:	86 95       	lsr	r24
    2726:	86 95       	lsr	r24
    2728:	80 25       	eor	r24, r0
    272a:	e0 58       	subi	r30, 0x80	; 128
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	90 e0       	ldi	r25, 0x00	; 0
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	95 95       	asr	r25
                            ODD_PARITY(CodecBuffer[i]);
    2734:	87 95       	ror	r24
    2736:	91 e0       	ldi	r25, 0x01	; 1
    2738:	80 fd       	sbrc	r24, 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	90 83       	st	Z, r25
    273e:	6f 5f       	subi	r22, 0xFF	; 255
    2740:	e6 2f       	mov	r30, r22
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
    2742:	f0 e0       	ldi	r31, 0x00	; 0
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    2744:	e4 17       	cp	r30, r20
    2746:	f5 07       	cpc	r31, r21
    2748:	30 f3       	brcs	.-52     	; 0x2716 <ISO14443ACodecTask+0x78>
    274a:	01 c0       	rjmp	.+2      	; 0x274e <ISO14443ACodecTask+0xb0>
    274c:	3f 7e       	andi	r19, 0xEF	; 239
    274e:	21 15       	cp	r18, r1
    2750:	31 05       	cpc	r19, r1
            AnswerBitCount = ApplicationProcess(CodecBuffer, DemodBitCount);

            if (AnswerBitCount & ISO14443A_APP_CUSTOM_PARITY) {
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
    2752:	09 f4       	brne	.+2      	; 0x2756 <ISO14443ACodecTask+0xb8>
            }
        } else {
            ApplicationReset();
        }

        if (AnswerBitCount != ISO14443A_APP_NO_RESPONSE) {
    2754:	bb cf       	rjmp	.-138    	; 0x26cc <ISO14443ACodecTask+0x2e>
    2756:	20 93 bd 20 	sts	0x20BD, r18
    275a:	30 93 be 20 	sts	0x20BE, r19
            BitCount = AnswerBitCount;
    275e:	10 92 bb 20 	sts	0x20BB, r1
    2762:	10 92 bc 20 	sts	0x20BC, r1
            BitSent = 0;
    2766:	80 e2       	ldi	r24, 0x20	; 32
    2768:	92 e2       	ldi	r25, 0x22	; 34
    276a:	80 93 c1 20 	sts	0x20C1, r24
            CodecBufferPtr = CodecBuffer;
    276e:	90 93 c2 20 	sts	0x20C2, r25
    2772:	80 ea       	ldi	r24, 0xA0	; 160
    2774:	92 e2       	ldi	r25, 0x22	; 34
    2776:	80 93 c3 20 	sts	0x20C3, r24
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    277a:	90 93 c4 20 	sts	0x20C4, r25
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 b6 20 	sts	0x20B6, r24
            LoadModState = LOADMOD_START;
    2784:	80 91 c0 20 	lds	r24, 0x20C0
    2788:	88 23       	and	r24, r24

            StartDemod();
        }
    }

    if (Flags.LoadmodFinished) {
    278a:	09 f4       	brne	.+2      	; 0x278e <ISO14443ACodecTask+0xf0>
    278c:	a9 cf       	rjmp	.-174    	; 0x26e0 <ISO14443ACodecTask+0x42>
    278e:	a9 cf       	rjmp	.-174    	; 0x26e2 <ISO14443ACodecTask+0x44>

00002790 <MifareClassicAppInit1K>:
    Block[11] = Block[3];
}

void MifareClassicAppInit1K(void)
{
    State = STATE_IDLE;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	80 93 c5 20 	sts	0x20C5, r24
    CardATQAValue = MFCLASSIC_1K_ATQA_VALUE;
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	80 93 c6 20 	sts	0x20C6, r24
    279e:	90 93 c7 20 	sts	0x20C7, r25
    CardSAKValue = MFCLASSIC_1K_SAK_CL1_VALUE;
    27a2:	88 e0       	ldi	r24, 0x08	; 8
    27a4:	80 93 c8 20 	sts	0x20C8, r24
}
    27a8:	08 95       	ret

000027aa <MifareClassicAppInit4K>:

void MifareClassicAppInit4K(void)
{
    State = STATE_IDLE;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	80 93 c5 20 	sts	0x20C5, r24
    CardATQAValue = MFCLASSIC_4K_ATQA_VALUE;
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	80 93 c6 20 	sts	0x20C6, r24
    27b8:	90 93 c7 20 	sts	0x20C7, r25
    CardSAKValue = MFCLASSIC_4K_SAK_CL1_VALUE;
    27bc:	88 e1       	ldi	r24, 0x18	; 24
    27be:	80 93 c8 20 	sts	0x20C8, r24
}
    27c2:	08 95       	ret

000027c4 <MifareClassicAppReset>:

void MifareClassicAppReset(void)
{
    State = STATE_IDLE;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	80 93 c5 20 	sts	0x20C5, r24
}
    27ca:	08 95       	ret

000027cc <MifareClassicAppTask>:

void MifareClassicAppTask(void)
{

}
    27cc:	08 95       	ret

000027ce <MifareClassicAppProcess>:

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    27ce:	8f 92       	push	r8
    27d0:	9f 92       	push	r9
    27d2:	af 92       	push	r10
    27d4:	bf 92       	push	r11
    27d6:	cf 92       	push	r12
    27d8:	df 92       	push	r13
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	2e 97       	sbiw	r28, 0x0e	; 14
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	7c 01       	movw	r14, r24
    switch(State) {
    27f2:	80 91 c5 20 	lds	r24, 0x20C5
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	09 f4       	brne	.+2      	; 0x27fc <MifareClassicAppProcess+0x2e>
    27fa:	f9 c0       	rjmp	.+498    	; 0x29ee <MifareClassicAppProcess+0x220>
    27fc:	85 30       	cpi	r24, 0x05	; 5
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <MifareClassicAppProcess+0x34>
    2800:	3f c0       	rjmp	.+126    	; 0x2880 <MifareClassicAppProcess+0xb2>
    2802:	86 30       	cpi	r24, 0x06	; 6
    2804:	09 f4       	brne	.+2      	; 0x2808 <MifareClassicAppProcess+0x3a>
    2806:	c0 c0       	rjmp	.+384    	; 0x2988 <MifareClassicAppProcess+0x1ba>
    2808:	86 30       	cpi	r24, 0x06	; 6
    280a:	08 f0       	brcs	.+2      	; 0x280e <MifareClassicAppProcess+0x40>
    280c:	64 c0       	rjmp	.+200    	; 0x28d6 <MifareClassicAppProcess+0x108>

    case STATE_AUTHED_IDLE:
        /* In this state, all communication is encrypted. Thus we first have to encrypt
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();
    280e:	f7 01       	movw	r30, r14
    2810:	00 81       	ld	r16, Z
    2812:	0e 94 18 1c 	call	0x3830	; 0x3830 <Crypto1Byte>
    2816:	80 27       	eor	r24, r16
    2818:	d7 01       	movw	r26, r14
    281a:	8c 93       	st	X, r24
    281c:	11 96       	adiw	r26, 0x01	; 1
    281e:	0c 91       	ld	r16, X
    2820:	0e 94 18 1c 	call	0x3830	; 0x3830 <Crypto1Byte>
    2824:	80 27       	eor	r24, r16
    2826:	f7 01       	movw	r30, r14
    2828:	81 83       	std	Z+1, r24	; 0x01
    282a:	02 81       	ldd	r16, Z+2	; 0x02
    282c:	0e 94 18 1c 	call	0x3830	; 0x3830 <Crypto1Byte>
    2830:	80 27       	eor	r24, r16
    2832:	d7 01       	movw	r26, r14
    2834:	12 96       	adiw	r26, 0x02	; 2
    2836:	8c 93       	st	X, r24
    2838:	12 97       	sbiw	r26, 0x02	; 2
    283a:	13 96       	adiw	r26, 0x03	; 3
    283c:	0c 91       	ld	r16, X
    283e:	f8 d7       	rcall	.+4080   	; 0x3830 <Crypto1Byte>
    2840:	80 27       	eor	r24, r16
    2842:	f7 01       	movw	r30, r14
    2844:	83 83       	std	Z+3, r24	; 0x03
    2846:	80 81       	ld	r24, Z

        if (Buffer[0] == CMD_READ) {
    2848:	80 33       	cpi	r24, 0x30	; 48
    284a:	09 f4       	brne	.+2      	; 0x284e <MifareClassicAppProcess+0x80>
    284c:	bd c2       	rjmp	.+1402   	; 0x2dc8 <MifareClassicAppProcess+0x5fa>
    284e:	80 3a       	cpi	r24, 0xA0	; 160
                        * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
    2850:	09 f4       	brne	.+2      	; 0x2854 <MifareClassicAppProcess+0x86>
    2852:	39 c3       	rjmp	.+1650   	; 0x2ec6 <MifareClassicAppProcess+0x6f8>
    2854:	80 3c       	cpi	r24, 0xC0	; 192
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
    2856:	09 f4       	brne	.+2      	; 0x285a <MifareClassicAppProcess+0x8c>
    2858:	53 c3       	rjmp	.+1702   	; 0x2f00 <MifareClassicAppProcess+0x732>
    285a:	81 3c       	cpi	r24, 0xC1	; 193
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
    285c:	09 f4       	brne	.+2      	; 0x2860 <MifareClassicAppProcess+0x92>
    285e:	35 c4       	rjmp	.+2154   	; 0x30ca <__stack+0xcb>
    2860:	82 3c       	cpi	r24, 0xC2	; 194
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
    2862:	09 f4       	brne	.+2      	; 0x2866 <MifareClassicAppProcess+0x98>
    2864:	3f c4       	rjmp	.+2174   	; 0x30e4 <__stack+0xe5>
    2866:	80 3b       	cpi	r24, 0xB0	; 176
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
    2868:	09 f4       	brne	.+2      	; 0x286c <MifareClassicAppProcess+0x9e>
    286a:	4b c4       	rjmp	.+2198   	; 0x3102 <__stack+0x103>
    286c:	80 56       	subi	r24, 0x60	; 96
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
    286e:	82 30       	cpi	r24, 0x02	; 2
    2870:	08 f4       	brcc	.+2      	; 0x2874 <MifareClassicAppProcess+0xa6>
    2872:	96 c1       	rjmp	.+812    	; 0x2ba0 <MifareClassicAppProcess+0x3d2>
    2874:	81 e0       	ldi	r24, 0x01	; 1
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
    2876:	80 93 c5 20 	sts	0x20C5, r24
    287a:	80 e0       	ldi	r24, 0x00	; 0
        /* Unknown state? Should never happen. */
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	65 c0       	rjmp	.+202    	; 0x294a <MifareClassicAppProcess+0x17c>
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
        }

        break;
    2880:	82 30       	cpi	r24, 0x02	; 2

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    2882:	09 f4       	brne	.+2      	; 0x2886 <MifareClassicAppProcess+0xb8>
    2884:	a0 c0       	rjmp	.+320    	; 0x29c6 <MifareClassicAppProcess+0x1f8>
    2886:	83 30       	cpi	r24, 0x03	; 3
    2888:	08 f4       	brcc	.+2      	; 0x288c <MifareClassicAppProcess+0xbe>
    288a:	6f c0       	rjmp	.+222    	; 0x296a <MifareClassicAppProcess+0x19c>
    288c:	f7 01       	movw	r30, r14
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    288e:	80 81       	ld	r24, Z
    2890:	86 32       	cpi	r24, 0x26	; 38
    2892:	09 f4       	brne	.+2      	; 0x2896 <MifareClassicAppProcess+0xc8>
    2894:	6f c1       	rjmp	.+734    	; 0x2b74 <MifareClassicAppProcess+0x3a6>
    2896:	82 35       	cpi	r24, 0x52	; 82
    2898:	09 f4       	brne	.+2      	; 0x289c <MifareClassicAppProcess+0xce>
    289a:	6c c1       	rjmp	.+728    	; 0x2b74 <MifareClassicAppProcess+0x3a6>
    289c:	80 35       	cpi	r24, 0x50	; 80

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, MFCLASSIC_1K_ATQA_VALUE)) {
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
    289e:	09 f4       	brne	.+2      	; 0x28a2 <MifareClassicAppProcess+0xd4>
    28a0:	75 c1       	rjmp	.+746    	; 0x2b8c <MifareClassicAppProcess+0x3be>
    28a2:	98 2f       	mov	r25, r24
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
    28a4:	90 56       	subi	r25, 0x60	; 96
    28a6:	92 30       	cpi	r25, 0x02	; 2
    28a8:	08 f4       	brcc	.+2      	; 0x28ac <MifareClassicAppProcess+0xde>
    28aa:	e7 c1       	rjmp	.+974    	; 0x2c7a <MifareClassicAppProcess+0x4ac>
    28ac:	80 33       	cpi	r24, 0x30	; 48
                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (  (Buffer[0] == CMD_READ) || (Buffer[0] == CMD_WRITE) || (Buffer[0] == CMD_DECREMENT)
    28ae:	51 f0       	breq	.+20     	; 0x28c4 <MifareClassicAppProcess+0xf6>
    28b0:	80 3a       	cpi	r24, 0xA0	; 160
    28b2:	41 f0       	breq	.+16     	; 0x28c4 <MifareClassicAppProcess+0xf6>
    28b4:	80 3c       	cpi	r24, 0xC0	; 192
    28b6:	31 f0       	breq	.+12     	; 0x28c4 <MifareClassicAppProcess+0xf6>
    28b8:	81 3c       	cpi	r24, 0xC1	; 193
                  || (Buffer[0] == CMD_INCREMENT) || (Buffer[0] == CMD_RESTORE) || (Buffer[0] == CMD_TRANSFER) ) {
    28ba:	21 f0       	breq	.+8      	; 0x28c4 <MifareClassicAppProcess+0xf6>
    28bc:	82 3c       	cpi	r24, 0xC2	; 194
    28be:	11 f0       	breq	.+4      	; 0x28c4 <MifareClassicAppProcess+0xf6>
    28c0:	80 3b       	cpi	r24, 0xB0	; 176
    28c2:	c1 f6       	brne	.-80     	; 0x2874 <MifareClassicAppProcess+0xa6>
    28c4:	81 e0       	ldi	r24, 0x01	; 1
            State = STATE_IDLE;
    28c6:	80 93 c5 20 	sts	0x20C5, r24
    28ca:	84 e0       	ldi	r24, 0x04	; 4
            Buffer[0] = NAK_NOT_AUTHED;
    28cc:	f7 01       	movw	r30, r14
    28ce:	80 83       	st	Z, r24
    28d0:	84 e0       	ldi	r24, 0x04	; 4
            return ACK_NAK_FRAME_SIZE;
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	3a c0       	rjmp	.+116    	; 0x294a <MifareClassicAppProcess+0x17c>
    28d6:	8a 30       	cpi	r24, 0x0A	; 10

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    28d8:	08 f0       	brcs	.+2      	; 0x28dc <MifareClassicAppProcess+0x10e>
    28da:	53 c0       	rjmp	.+166    	; 0x2982 <MifareClassicAppProcess+0x1b4>
    28dc:	f7 01       	movw	r30, r14
         * decrypt the data and check CRC. Read data from the requested block
         * address into the global block buffer and check for integrity. Then
         * add or subtract according to issued command if necessary and store
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    28de:	00 81       	ld	r16, Z
    28e0:	a7 d7       	rcall	.+3918   	; 0x3830 <Crypto1Byte>
    28e2:	80 27       	eor	r24, r16
    28e4:	d7 01       	movw	r26, r14
    28e6:	8c 93       	st	X, r24
    28e8:	11 96       	adiw	r26, 0x01	; 1
    28ea:	0c 91       	ld	r16, X
    28ec:	a1 d7       	rcall	.+3906   	; 0x3830 <Crypto1Byte>
    28ee:	80 27       	eor	r24, r16
    28f0:	f7 01       	movw	r30, r14
    28f2:	81 83       	std	Z+1, r24	; 0x01
    28f4:	02 81       	ldd	r16, Z+2	; 0x02
    28f6:	9c d7       	rcall	.+3896   	; 0x3830 <Crypto1Byte>
    28f8:	80 27       	eor	r24, r16
    28fa:	d7 01       	movw	r26, r14
    28fc:	12 96       	adiw	r26, 0x02	; 2
    28fe:	8c 93       	st	X, r24
    2900:	12 97       	sbiw	r26, 0x02	; 2
    2902:	13 96       	adiw	r26, 0x03	; 3
    2904:	0c 91       	ld	r16, X
    2906:	94 d7       	rcall	.+3880   	; 0x3830 <Crypto1Byte>
    2908:	80 27       	eor	r24, r16
    290a:	f7 01       	movw	r30, r14
    290c:	83 83       	std	Z+3, r24	; 0x03
    290e:	04 81       	ldd	r16, Z+4	; 0x04
    2910:	8f d7       	rcall	.+3870   	; 0x3830 <Crypto1Byte>
    2912:	80 27       	eor	r24, r16
    2914:	d7 01       	movw	r26, r14
    2916:	14 96       	adiw	r26, 0x04	; 4
    2918:	8c 93       	st	X, r24
    291a:	14 97       	sbiw	r26, 0x04	; 4
    291c:	15 96       	adiw	r26, 0x05	; 5
    291e:	0c 91       	ld	r16, X
    2920:	87 d7       	rcall	.+3854   	; 0x3830 <Crypto1Byte>
    2922:	80 27       	eor	r24, r16
    2924:	f7 01       	movw	r30, r14
    2926:	85 83       	std	Z+5, r24	; 0x05
    2928:	c7 01       	movw	r24, r14
    292a:	64 e0       	ldi	r22, 0x04	; 4
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	92 d4       	rcall	.+2340   	; 0x3254 <ISO14443ACheckCRCA>
    2930:	88 23       	and	r24, r24
    2932:	09 f0       	breq	.+2      	; 0x2936 <MifareClassicAppProcess+0x168>
    2934:	0f c2       	rjmp	.+1054   	; 0x2d54 <MifareClassicAppProcess+0x586>

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
    2936:	bd d7       	rcall	.+3962   	; 0x38b2 <Crypto1Nibble>
    2938:	91 e0       	ldi	r25, 0x01	; 1
    293a:	98 27       	eor	r25, r24
    293c:	f7 01       	movw	r30, r14
    293e:	90 83       	st	Z, r25
    2940:	85 e0       	ldi	r24, 0x05	; 5
    2942:	80 93 c5 20 	sts	0x20C5, r24
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
            }
        } else {
            /* CRC Error. */
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	2e 96       	adiw	r28, 0x0e	; 14
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	df 91       	pop	r29
        }

        State = STATE_AUTHED_IDLE;
    2952:	cf 91       	pop	r28
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
        return ACK_NAK_FRAME_SIZE;
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
}
    295c:	df 90       	pop	r13
    295e:	cf 90       	pop	r12
    2960:	bf 90       	pop	r11
    2962:	af 90       	pop	r10
    2964:	9f 90       	pop	r9
    2966:	8f 90       	pop	r8
    2968:	08 95       	ret
    296a:	20 91 c6 20 	lds	r18, 0x20C6
    296e:	90 91 c7 20 	lds	r25, 0x20C7
    2972:	d7 01       	movw	r26, r14
    2974:	8c 91       	ld	r24, X
    2976:	86 32       	cpi	r24, 0x26	; 38
    2978:	09 f4       	brne	.+2      	; 0x297c <MifareClassicAppProcess+0x1ae>
    297a:	f3 c0       	rjmp	.+486    	; 0x2b62 <MifareClassicAppProcess+0x394>
uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    case STATE_IDLE:
    case STATE_HALT:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    297c:	82 35       	cpi	r24, 0x52	; 82
    297e:	09 f4       	brne	.+2      	; 0x2982 <MifareClassicAppProcess+0x1b4>
    2980:	f0 c0       	rjmp	.+480    	; 0x2b62 <MifareClassicAppProcess+0x394>
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	e1 cf       	rjmp	.-62     	; 0x294a <MifareClassicAppProcess+0x17c>
    2988:	87 01       	movw	r16, r14
    298a:	cc 24       	eor	r12, r12
    298c:	f8 01       	movw	r30, r16
    298e:	80 80       	ld	r8, Z
    2990:	4f d7       	rcall	.+3742   	; 0x3830 <Crypto1Byte>
    2992:	88 25       	eor	r24, r8
        /* Unknown state? Should never happen. */
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
    2994:	d8 01       	movw	r26, r16
    2996:	8d 93       	st	X+, r24
    2998:	8d 01       	movw	r16, r26
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
        }

        break;
    299a:	c3 94       	inc	r12

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    299c:	b2 e1       	ldi	r27, 0x12	; 18
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    299e:	cb 16       	cp	r12, r27
    29a0:	a9 f7       	brne	.-22     	; 0x298c <MifareClassicAppProcess+0x1be>
    29a2:	c7 01       	movw	r24, r14
    29a4:	60 e1       	ldi	r22, 0x10	; 16
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	55 d4       	rcall	.+2218   	; 0x3254 <ISO14443ACheckCRCA>
    29aa:	88 23       	and	r24, r24
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <MifareClassicAppProcess+0x1e2>
         * sending the data to be written. Decrypt the data first and
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
    29ae:	ef c1       	rjmp	.+990    	; 0x2d8e <MifareClassicAppProcess+0x5c0>
    29b0:	80 91 0c 21 	lds	r24, 0x210C
    29b4:	88 23       	and	r24, r24
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
    29b6:	09 f4       	brne	.+2      	; 0x29ba <MifareClassicAppProcess+0x1ec>
    29b8:	f0 c1       	rjmp	.+992    	; 0x2d9a <MifareClassicAppProcess+0x5cc>
    29ba:	7b d7       	rcall	.+3830   	; 0x38b2 <Crypto1Nibble>
    29bc:	9a e0       	ldi	r25, 0x0A	; 10
    29be:	98 27       	eor	r25, r24
    29c0:	f7 01       	movw	r30, r14
    29c2:	90 83       	st	Z, r25
    29c4:	bd cf       	rjmp	.-134    	; 0x2940 <MifareClassicAppProcess+0x172>
            if (!ActiveConfiguration.ReadOnly) {
    29c6:	20 91 c6 20 	lds	r18, 0x20C6
    29ca:	90 91 c7 20 	lds	r25, 0x20C7
    29ce:	d7 01       	movw	r26, r14
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
            } else {
                /* Silently ignore in ReadOnly mode */
            }

            Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    29d0:	8c 91       	ld	r24, X
    29d2:	86 32       	cpi	r24, 0x26	; 38
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <MifareClassicAppProcess+0x20a>
    29d6:	c5 c0       	rjmp	.+394    	; 0x2b62 <MifareClassicAppProcess+0x394>
    29d8:	82 35       	cpi	r24, 0x52	; 82
    29da:	09 f4       	brne	.+2      	; 0x29de <MifareClassicAppProcess+0x210>
    29dc:	c2 c0       	rjmp	.+388    	; 0x2b62 <MifareClassicAppProcess+0x394>
            return BitCount;
        }
        break;

    case STATE_READY:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    29de:	83 39       	cpi	r24, 0x93	; 147
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <MifareClassicAppProcess+0x216>
    29e2:	35 c2       	rjmp	.+1130   	; 0x2e4e <MifareClassicAppProcess+0x680>
    29e4:	10 92 c5 20 	sts	0x20C5, r1
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	ae cf       	rjmp	.-164    	; 0x294a <MifareClassicAppProcess+0x17c>
    29ee:	c7 01       	movw	r24, r14
    29f0:	e0 d6       	rcall	.+3520   	; 0x37b2 <Crypto1Auth>
    29f2:	d7 01       	movw	r26, r14
    29f4:	14 96       	adiw	r26, 0x04	; 4
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
    29f6:	0c 91       	ld	r16, X
    29f8:	1b d7       	rcall	.+3638   	; 0x3830 <Crypto1Byte>
    29fa:	80 27       	eor	r24, r16
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
    29fc:	f7 01       	movw	r30, r14
    29fe:	84 83       	std	Z+4, r24	; 0x04
                    return ISO14443A_APP_NO_RESPONSE;
    2a00:	05 81       	ldd	r16, Z+5	; 0x05
    2a02:	16 d7       	rcall	.+3628   	; 0x3830 <Crypto1Byte>
    2a04:	80 27       	eor	r24, r16

    case STATE_AUTHING:
        /* Reader delivers an encrypted nonce. We use it
        * to setup the crypto1 LFSR in nonlinear feedback mode.
        * Furthermore it delivers an encrypted answer. Decrypt and check it */
        Crypto1Auth(&Buffer[0]);
    2a06:	d7 01       	movw	r26, r14
    2a08:	15 96       	adiw	r26, 0x05	; 5
    2a0a:	8c 93       	st	X, r24

        for (uint8_t i=0; i<4; i++)
            Buffer[i+4] ^= Crypto1Byte();
    2a0c:	15 97       	sbiw	r26, 0x05	; 5
    2a0e:	16 96       	adiw	r26, 0x06	; 6
    2a10:	0c 91       	ld	r16, X
    2a12:	0e d7       	rcall	.+3612   	; 0x3830 <Crypto1Byte>
    2a14:	80 27       	eor	r24, r16
    2a16:	f7 01       	movw	r30, r14
    2a18:	86 83       	std	Z+6, r24	; 0x06
    2a1a:	07 81       	ldd	r16, Z+7	; 0x07
    2a1c:	09 d7       	rcall	.+3602   	; 0x3830 <Crypto1Byte>
    2a1e:	80 27       	eor	r24, r16
    2a20:	d7 01       	movw	r26, r14
    2a22:	17 96       	adiw	r26, 0x07	; 7
    2a24:	8c 93       	st	X, r24
    2a26:	17 97       	sbiw	r26, 0x07	; 7
    2a28:	14 96       	adiw	r26, 0x04	; 4
    2a2a:	2c 91       	ld	r18, X
    2a2c:	14 97       	sbiw	r26, 0x04	; 4
    2a2e:	90 91 c9 20 	lds	r25, 0x20C9
    2a32:	29 17       	cp	r18, r25
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <MifareClassicAppProcess+0x26a>
    2a36:	1e cf       	rjmp	.-452    	; 0x2874 <MifareClassicAppProcess+0xa6>
    2a38:	15 96       	adiw	r26, 0x05	; 5
    2a3a:	2c 91       	ld	r18, X
    2a3c:	15 97       	sbiw	r26, 0x05	; 5
    2a3e:	90 91 ca 20 	lds	r25, 0x20CA
    2a42:	29 17       	cp	r18, r25
    2a44:	09 f0       	breq	.+2      	; 0x2a48 <MifareClassicAppProcess+0x27a>
    2a46:	16 cf       	rjmp	.-468    	; 0x2874 <MifareClassicAppProcess+0xa6>
    2a48:	16 96       	adiw	r26, 0x06	; 6

        if ((Buffer[4] == ReaderResponse[0]) &&
    2a4a:	2c 91       	ld	r18, X
    2a4c:	16 97       	sbiw	r26, 0x06	; 6
    2a4e:	90 91 cb 20 	lds	r25, 0x20CB
    2a52:	29 17       	cp	r18, r25
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <MifareClassicAppProcess+0x28a>
    2a56:	0e cf       	rjmp	.-484    	; 0x2874 <MifareClassicAppProcess+0xa6>
    2a58:	90 91 cc 20 	lds	r25, 0x20CC
    2a5c:	89 17       	cp	r24, r25
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <MifareClassicAppProcess+0x294>
    2a60:	09 cf       	rjmp	.-494    	; 0x2874 <MifareClassicAppProcess+0xa6>
    2a62:	00 91 cd 20 	lds	r16, 0x20CD
    2a66:	e4 d6       	rcall	.+3528   	; 0x3830 <Crypto1Byte>
    2a68:	80 27       	eor	r24, r16
            (Buffer[5] == ReaderResponse[1]) &&
    2a6a:	f7 01       	movw	r30, r14
    2a6c:	80 83       	st	Z, r24
    2a6e:	00 91 cd 20 	lds	r16, 0x20CD
    2a72:	00 2e       	mov	r0, r16
    2a74:	02 95       	swap	r16
    2a76:	00 25       	eor	r16, r0
    2a78:	00 2e       	mov	r0, r16
            (Buffer[6] == ReaderResponse[2]) &&
    2a7a:	06 95       	lsr	r16
    2a7c:	06 95       	lsr	r16
    2a7e:	00 25       	eor	r16, r0
    2a80:	9e d4       	rcall	.+2364   	; 0x33be <Crypto1FilterOutput>
    2a82:	f7 01       	movw	r30, r14
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2a84:	e0 58       	subi	r30, 0x80	; 128
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	20 2f       	mov	r18, r16
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	2f 5f       	subi	r18, 0xFF	; 255
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	35 95       	asr	r19
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2a92:	27 95       	ror	r18
    2a94:	91 e0       	ldi	r25, 0x01	; 1
    2a96:	20 fd       	sbrc	r18, 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	98 27       	eor	r25, r24
    2a9c:	90 83       	st	Z, r25
    2a9e:	00 91 ce 20 	lds	r16, 0x20CE
    2aa2:	c6 d6       	rcall	.+3468   	; 0x3830 <Crypto1Byte>
    2aa4:	80 27       	eor	r24, r16
    2aa6:	d7 01       	movw	r26, r14
    2aa8:	11 96       	adiw	r26, 0x01	; 1
    2aaa:	8c 93       	st	X, r24
    2aac:	00 91 ce 20 	lds	r16, 0x20CE
    2ab0:	00 2e       	mov	r0, r16
    2ab2:	02 95       	swap	r16
    2ab4:	00 25       	eor	r16, r0
    2ab6:	00 2e       	mov	r0, r16
    2ab8:	06 95       	lsr	r16
    2aba:	06 95       	lsr	r16
    2abc:	00 25       	eor	r16, r0
    2abe:	7f d4       	rcall	.+2302   	; 0x33be <Crypto1FilterOutput>
    2ac0:	f7 01       	movw	r30, r14
    2ac2:	ef 57       	subi	r30, 0x7F	; 127
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	20 2f       	mov	r18, r16
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	2f 5f       	subi	r18, 0xFF	; 255
    2acc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ace:	35 95       	asr	r19
    2ad0:	27 95       	ror	r18
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2ad4:	20 fd       	sbrc	r18, 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	98 27       	eor	r25, r24
    2ada:	90 83       	st	Z, r25
    2adc:	00 91 cf 20 	lds	r16, 0x20CF
    2ae0:	a7 d6       	rcall	.+3406   	; 0x3830 <Crypto1Byte>
    2ae2:	80 27       	eor	r24, r16
    2ae4:	f7 01       	movw	r30, r14
    2ae6:	82 83       	std	Z+2, r24	; 0x02
    2ae8:	00 91 cf 20 	lds	r16, 0x20CF
    2aec:	00 2e       	mov	r0, r16
    2aee:	02 95       	swap	r16
    2af0:	00 25       	eor	r16, r0
    2af2:	00 2e       	mov	r0, r16
    2af4:	06 95       	lsr	r16
    2af6:	06 95       	lsr	r16
    2af8:	00 25       	eor	r16, r0
    2afa:	61 d4       	rcall	.+2242   	; 0x33be <Crypto1FilterOutput>
    2afc:	f7 01       	movw	r30, r14
    2afe:	ee 57       	subi	r30, 0x7E	; 126
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	20 2f       	mov	r18, r16
    2b04:	30 e0       	ldi	r19, 0x00	; 0
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2b06:	2f 5f       	subi	r18, 0xFF	; 255
    2b08:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0a:	35 95       	asr	r19
    2b0c:	27 95       	ror	r18
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	20 fd       	sbrc	r18, 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2b14:	98 27       	eor	r25, r24
    2b16:	90 83       	st	Z, r25
    2b18:	00 91 d0 20 	lds	r16, 0x20D0
    2b1c:	89 d6       	rcall	.+3346   	; 0x3830 <Crypto1Byte>
    2b1e:	80 27       	eor	r24, r16
    2b20:	d7 01       	movw	r26, r14
    2b22:	13 96       	adiw	r26, 0x03	; 3
    2b24:	8c 93       	st	X, r24
    2b26:	00 91 d0 20 	lds	r16, 0x20D0
    2b2a:	00 2e       	mov	r0, r16
    2b2c:	02 95       	swap	r16
    2b2e:	00 25       	eor	r16, r0
    2b30:	00 2e       	mov	r0, r16
    2b32:	06 95       	lsr	r16
    2b34:	06 95       	lsr	r16
    2b36:	00 25       	eor	r16, r0
    2b38:	42 d4       	rcall	.+2180   	; 0x33be <Crypto1FilterOutput>
    2b3a:	f7 01       	movw	r30, r14
    2b3c:	ed 57       	subi	r30, 0x7D	; 125
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	20 2f       	mov	r18, r16
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	2f 5f       	subi	r18, 0xFF	; 255
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2b46:	3f 4f       	sbci	r19, 0xFF	; 255
    2b48:	35 95       	asr	r19
    2b4a:	27 95       	ror	r18
    2b4c:	91 e0       	ldi	r25, 0x01	; 1
    2b4e:	20 fd       	sbrc	r18, 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	98 27       	eor	r25, r24
    2b54:	90 83       	st	Z, r25
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2b56:	85 e0       	ldi	r24, 0x05	; 5
    2b58:	80 93 c5 20 	sts	0x20C5, r24
    2b5c:	80 e2       	ldi	r24, 0x20	; 32
    2b5e:	90 e1       	ldi	r25, 0x10	; 16
    2b60:	f4 ce       	rjmp	.-536    	; 0x294a <MifareClassicAppProcess+0x17c>
    2b62:	f7 01       	movw	r30, r14
    2b64:	20 83       	st	Z, r18
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	80 93 c5 20 	sts	0x20C5, r24
    2b6e:	80 e1       	ldi	r24, 0x10	; 16
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	eb ce       	rjmp	.-554    	; 0x294a <MifareClassicAppProcess+0x17c>
    2b74:	84 e0       	ldi	r24, 0x04	; 4
    2b76:	d7 01       	movw	r26, r14
    2b78:	8c 93       	st	X, r24
    2b7a:	11 96       	adiw	r26, 0x01	; 1
    2b7c:	1c 92       	st	X, r1
    2b7e:	11 97       	sbiw	r26, 0x01	; 1
    2b80:	82 e0       	ldi	r24, 0x02	; 2
    2b82:	80 93 c5 20 	sts	0x20C5, r24
    2b86:	80 e1       	ldi	r24, 0x10	; 16
            }

            State = STATE_AUTHED_IDLE;
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	df ce       	rjmp	.-578    	; 0x294a <MifareClassicAppProcess+0x17c>
    2b8c:	f7 01       	movw	r30, r14

            return (CMD_AUTH_BA_FRAME_SIZE * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
    2b8e:	81 81       	ldd	r24, Z+1	; 0x01
    2b90:	88 23       	and	r24, r24
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <MifareClassicAppProcess+0x3c8>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    2b94:	d7 c2       	rjmp	.+1454   	; 0x3144 <__stack+0x145>
    2b96:	f7 01       	movw	r30, r14
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    2b98:	10 82       	st	Z, r1
        }
        break;

    case STATE_READY:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
            State = STATE_READY;
    2b9a:	84 e0       	ldi	r24, 0x04	; 4
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	d5 ce       	rjmp	.-598    	; 0x294a <MifareClassicAppProcess+0x17c>

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    2ba0:	c7 01       	movw	r24, r14
    2ba2:	62 e0       	ldi	r22, 0x02	; 2
            return BitCount;
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    2ba6:	56 d3       	rcall	.+1708   	; 0x3254 <ISO14443ACheckCRCA>
    2ba8:	88 23       	and	r24, r24
    2baa:	09 f4       	brne	.+2      	; 0x2bae <MifareClassicAppProcess+0x3e0>
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    2bac:	05 c1       	rjmp	.+522    	; 0x2db8 <MifareClassicAppProcess+0x5ea>
    2bae:	d7 01       	movw	r26, r14
    2bb0:	11 96       	adiw	r26, 0x01	; 1
        }
        break;

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, MFCLASSIC_1K_ATQA_VALUE)) {
            State = STATE_READY;
    2bb2:	0c 91       	ld	r16, X
    2bb4:	11 97       	sbiw	r26, 0x01	; 1
    2bb6:	0c 73       	andi	r16, 0x3C	; 60

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    2bb8:	8c 91       	ld	r24, X
    2bba:	80 36       	cpi	r24, 0x60	; 96
            return BitCount;
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <MifareClassicAppProcess+0x3f2>
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
    2bbe:	df c2       	rjmp	.+1470   	; 0x317e <__stack+0x17f>
    2bc0:	8a e3       	ldi	r24, 0x3A	; 58
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	10 e0       	ldi	r17, 0x00	; 0
    2bc6:	02 95       	swap	r16
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
                    return ACK_NAK_FRAME_SIZE;
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
    2bc8:	12 95       	swap	r17
    2bca:	10 7f       	andi	r17, 0xF0	; 240
                return ACK_NAK_FRAME_SIZE;
    2bcc:	10 27       	eor	r17, r16
    2bce:	00 7f       	andi	r16, 0xF0	; 240
    2bd0:	10 27       	eor	r17, r16
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    2bd2:	08 0f       	add	r16, r24
    2bd4:	19 1f       	adc	r17, r25
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	05 96       	adiw	r24, 0x05	; 5
    2bda:	64 e0       	ldi	r22, 0x04	; 4
    2bdc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <RandomGetBuffer>
    2be0:	ce 01       	movw	r24, r28
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    2be2:	01 96       	adiw	r24, 0x01	; 1
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	44 e0       	ldi	r20, 0x04	; 4
    2bea:	50 e0       	ldi	r21, 0x00	; 0
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    2bec:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MemoryReadBlock>
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	09 96       	adiw	r24, 0x09	; 9
    2bf4:	b8 01       	movw	r22, r16
    2bf6:	46 e0       	ldi	r20, 0x06	; 6
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MemoryReadBlock>
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	80 93 c9 20 	sts	0x20C9, r24
    2c04:	8e 81       	ldd	r24, Y+6	; 0x06
    2c06:	80 93 ca 20 	sts	0x20CA, r24
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    2c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c0c:	80 93 cb 20 	sts	0x20CB, r24
    2c10:	88 85       	ldd	r24, Y+8	; 0x08
    2c12:	80 93 cc 20 	sts	0x20CC, r24
                MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2c16:	89 ec       	ldi	r24, 0xC9	; 201
    2c18:	90 e2       	ldi	r25, 0x20	; 32
    2c1a:	60 e4       	ldi	r22, 0x40	; 64
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	6d d6       	rcall	.+3290   	; 0x38fa <Crypto1PRNG>
    2c20:	80 91 c9 20 	lds	r24, 0x20C9
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    2c24:	80 93 cd 20 	sts	0x20CD, r24
    2c28:	80 91 ca 20 	lds	r24, 0x20CA
    2c2c:	80 93 ce 20 	sts	0x20CE, r24
    2c30:	80 91 cb 20 	lds	r24, 0x20CB

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];
    2c34:	80 93 cf 20 	sts	0x20CF, r24
    2c38:	80 91 cc 20 	lds	r24, 0x20CC
    2c3c:	80 93 d0 20 	sts	0x20D0, r24
    2c40:	8d ec       	ldi	r24, 0xCD	; 205
    2c42:	90 e2       	ldi	r25, 0x20	; 32
    2c44:	60 e2       	ldi	r22, 0x20	; 32
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	58 d6       	rcall	.+3248   	; 0x38fa <Crypto1PRNG>

                Crypto1PRNG(ReaderResponse, 64);
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	09 96       	adiw	r24, 0x09	; 9
    2c4e:	be 01       	movw	r22, r28
    2c50:	6f 5f       	subi	r22, 0xFF	; 255
    2c52:	7f 4f       	sbci	r23, 0xFF	; 255
    2c54:	ae 01       	movw	r20, r28

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];
    2c56:	4b 5f       	subi	r20, 0xFB	; 251
    2c58:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5a:	e5 d3       	rcall	.+1994   	; 0x3426 <Crypto1Setup>
    2c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5e:	f7 01       	movw	r30, r14
    2c60:	80 83       	st	Z, r24
    2c62:	8e 81       	ldd	r24, Y+6	; 0x06
    2c64:	81 83       	std	Z+1, r24	; 0x01
    2c66:	8f 81       	ldd	r24, Y+7	; 0x07
    2c68:	82 83       	std	Z+2, r24	; 0x02
    2c6a:	88 85       	ldd	r24, Y+8	; 0x08
    2c6c:	83 83       	std	Z+3, r24	; 0x03
    2c6e:	84 e0       	ldi	r24, 0x04	; 4
    2c70:	80 93 c5 20 	sts	0x20C5, r24
    2c74:	80 e2       	ldi	r24, 0x20	; 32

                Crypto1PRNG(CardResponse, 32);
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	68 ce       	rjmp	.-816    	; 0x294a <MifareClassicAppProcess+0x17c>
    2c7a:	c7 01       	movw	r24, r14
    2c7c:	62 e0       	ldi	r22, 0x02	; 2
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	e9 d2       	rcall	.+1490   	; 0x3254 <ISO14443ACheckCRCA>

                /* Setup crypto1 cipher. */
                Crypto1Setup(Key, Uid, CardNonce);
    2c82:	88 23       	and	r24, r24
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <MifareClassicAppProcess+0x4ba>
    2c86:	65 c2       	rjmp	.+1226   	; 0x3152 <__stack+0x153>
    2c88:	d7 01       	movw	r26, r14
    2c8a:	11 96       	adiw	r26, 0x01	; 1
    2c8c:	0c 91       	ld	r16, X
    2c8e:	11 97       	sbiw	r26, 0x01	; 1
    2c90:	0c 73       	andi	r16, 0x3C	; 60
    2c92:	8c 91       	ld	r24, X
    2c94:	80 36       	cpi	r24, 0x60	; 96

                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <MifareClassicAppProcess+0x4cc>
    2c98:	75 c2       	rjmp	.+1258   	; 0x3184 <__stack+0x185>
    2c9a:	8a e3       	ldi	r24, 0x3A	; 58
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
    2ca0:	02 95       	swap	r16
    2ca2:	12 95       	swap	r17
    2ca4:	10 7f       	andi	r17, 0xF0	; 240
    2ca6:	10 27       	eor	r17, r16

                /* Respond with the encrypted random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    2ca8:	00 7f       	andi	r16, 0xF0	; 240
    2caa:	10 27       	eor	r17, r16
    2cac:	08 0f       	add	r16, r24

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    2cae:	19 1f       	adc	r17, r25
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	01 96       	adiw	r24, 0x01	; 1
            } else {
                Buffer[0] = NAK_INVALID_ARG;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    2cb4:	64 e0       	ldi	r22, 0x04	; 4
    2cb6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <RandomGetBuffer>
    2cba:	ce 01       	movw	r24, r28
    2cbc:	05 96       	adiw	r24, 0x05	; 5
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	44 e0       	ldi	r20, 0x04	; 4
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MemoryReadBlock>
    2cca:	ce 01       	movw	r24, r28
    2ccc:	09 96       	adiw	r24, 0x09	; 9
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    2cce:	b8 01       	movw	r22, r16
    2cd0:	46 e0       	ldi	r20, 0x06	; 6
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MemoryReadBlock>
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    2cda:	80 93 c9 20 	sts	0x20C9, r24
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	80 93 ca 20 	sts	0x20CA, r24
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	80 93 cb 20 	sts	0x20CB, r24
    2cea:	8c 81       	ldd	r24, Y+4	; 0x04
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    2cec:	80 93 cc 20 	sts	0x20CC, r24
    2cf0:	89 ec       	ldi	r24, 0xC9	; 201
    2cf2:	90 e2       	ldi	r25, 0x20	; 32
    2cf4:	60 e4       	ldi	r22, 0x40	; 64
                MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2cf6:	70 e0       	ldi	r23, 0x00	; 0
    2cf8:	00 d6       	rcall	.+3072   	; 0x38fa <Crypto1PRNG>
    2cfa:	80 91 c9 20 	lds	r24, 0x20C9
    2cfe:	80 93 cd 20 	sts	0x20CD, r24
    2d02:	80 91 ca 20 	lds	r24, 0x20CA
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    2d06:	80 93 ce 20 	sts	0x20CE, r24
    2d0a:	80 91 cb 20 	lds	r24, 0x20CB
    2d0e:	80 93 cf 20 	sts	0x20CF, r24
    2d12:	80 91 cc 20 	lds	r24, 0x20CC

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];
    2d16:	80 93 d0 20 	sts	0x20D0, r24
    2d1a:	8d ec       	ldi	r24, 0xCD	; 205
    2d1c:	90 e2       	ldi	r25, 0x20	; 32
    2d1e:	60 e2       	ldi	r22, 0x20	; 32
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	eb d5       	rcall	.+3030   	; 0x38fa <Crypto1PRNG>
    2d24:	84 e0       	ldi	r24, 0x04	; 4
    2d26:	80 93 c5 20 	sts	0x20C5, r24
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01

                Crypto1PRNG(ReaderResponse, 64);
    2d2c:	f7 01       	movw	r30, r14
    2d2e:	80 83       	st	Z, r24
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	81 83       	std	Z+1, r24	; 0x01
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	82 83       	std	Z+2, r24	; 0x02

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];
    2d38:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3a:	83 83       	std	Z+3, r24	; 0x03
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	09 96       	adiw	r24, 0x09	; 9
    2d40:	be 01       	movw	r22, r28
    2d42:	6b 5f       	subi	r22, 0xFB	; 251
    2d44:	7f 4f       	sbci	r23, 0xFF	; 255
    2d46:	ae 01       	movw	r20, r28
    2d48:	4f 5f       	subi	r20, 0xFF	; 255
    2d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d4c:	6c d3       	rcall	.+1752   	; 0x3426 <Crypto1Setup>
    2d4e:	80 e2       	ldi	r24, 0x20	; 32
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	fb cd       	rjmp	.-1034   	; 0x294a <MifareClassicAppProcess+0x17c>
    2d54:	60 91 d1 20 	lds	r22, 0x20D1

                Crypto1PRNG(CardResponse, 32);
    2d58:	70 e0       	ldi	r23, 0x00	; 0
    2d5a:	62 95       	swap	r22
    2d5c:	72 95       	swap	r23
    2d5e:	70 7f       	andi	r23, 0xF0	; 240
    2d60:	76 27       	eor	r23, r22
    2d62:	60 7f       	andi	r22, 0xF0	; 240

                /* Respond with the random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    2d64:	76 27       	eor	r23, r22
    2d66:	82 ed       	ldi	r24, 0xD2	; 210
    2d68:	90 e2       	ldi	r25, 0x20	; 32

                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];
    2d6a:	40 e1       	ldi	r20, 0x10	; 16
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MemoryReadBlock>
    2d72:	20 91 d2 20 	lds	r18, 0x20D2
    2d76:	80 91 d6 20 	lds	r24, 0x20D6
    2d7a:	80 95       	com	r24

                /* Setup crypto1 cipher. Discard in-place encrypted CardNonce. */
                Crypto1Setup(Key, Uid, CardNonce);
    2d7c:	28 17       	cp	r18, r24
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2d80:	d6 c0       	rjmp	.+428    	; 0x2f2e <MifareClassicAppProcess+0x760>
    2d82:	97 d5       	rcall	.+2862   	; 0x38b2 <Crypto1Nibble>
    2d84:	96 e0       	ldi	r25, 0x06	; 6
    2d86:	98 27       	eor	r25, r24
    2d88:	d7 01       	movw	r26, r14
    2d8a:	9c 93       	st	X, r25
    2d8c:	d9 cd       	rjmp	.-1102   	; 0x2940 <MifareClassicAppProcess+0x172>
    2d8e:	91 d5       	rcall	.+2850   	; 0x38b2 <Crypto1Nibble>

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    2d90:	91 e0       	ldi	r25, 0x01	; 1
    2d92:	98 27       	eor	r25, r24
    2d94:	d7 01       	movw	r26, r14
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
            MemoryReadBlock(BlockBuffer, (uint16_t) CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2d96:	9c 93       	st	X, r25
    2d98:	d3 cd       	rjmp	.-1114   	; 0x2940 <MifareClassicAppProcess+0x172>
    2d9a:	60 91 d1 20 	lds	r22, 0x20D1
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	62 95       	swap	r22
    2da2:	72 95       	swap	r23
    2da4:	70 7f       	andi	r23, 0xF0	; 240
    2da6:	76 27       	eor	r23, r22
    2da8:	60 7f       	andi	r22, 0xF0	; 240
    2daa:	76 27       	eor	r23, r22
    2dac:	c7 01       	movw	r24, r14
    2dae:	40 e1       	ldi	r20, 0x10	; 16
    2db0:	50 e0       	ldi	r21, 0x00	; 0
    2db2:	0e 94 b8 06 	call	0xd70	; 0xd70 <MemoryWriteBlock>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    2db6:	01 ce       	rjmp	.-1022   	; 0x29ba <MifareClassicAppProcess+0x1ec>
    2db8:	7c d5       	rcall	.+2808   	; 0x38b2 <Crypto1Nibble>
    2dba:	91 e0       	ldi	r25, 0x01	; 1
    2dbc:	98 27       	eor	r25, r24
    2dbe:	d7 01       	movw	r26, r14
    2dc0:	9c 93       	st	X, r25
    2dc2:	84 e0       	ldi	r24, 0x04	; 4
                State = STATE_AUTHED_IDLE;
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
            } else {
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	c1 cd       	rjmp	.-1150   	; 0x294a <MifareClassicAppProcess+0x17c>
    2dc8:	c7 01       	movw	r24, r14
    2dca:	62 e0       	ldi	r22, 0x02	; 2
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	42 d2       	rcall	.+1156   	; 0x3254 <ISO14443ACheckCRCA>
    2dd0:	88 23       	and	r24, r24
                /* Silently ignore in ReadOnly mode */
            }

            Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
        } else {
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2dd2:	91 f3       	breq	.-28     	; 0x2db8 <MifareClassicAppProcess+0x5ea>
    2dd4:	d7 01       	movw	r26, r14
    2dd6:	11 96       	adiw	r26, 0x01	; 1
    2dd8:	6c 91       	ld	r22, X
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	62 95       	swap	r22
    2dde:	72 95       	swap	r23
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
            if (!ActiveConfiguration.ReadOnly) {
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2de0:	70 7f       	andi	r23, 0xF0	; 240
    2de2:	76 27       	eor	r23, r22
    2de4:	60 7f       	andi	r22, 0xF0	; 240
    2de6:	76 27       	eor	r23, r22
    2de8:	c7 01       	movw	r24, r14
    2dea:	40 e1       	ldi	r20, 0x10	; 16
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MemoryReadBlock>
    2df2:	c7 01       	movw	r24, r14
    2df4:	60 e1       	ldi	r22, 0x10	; 16
    2df6:	70 e0       	ldi	r23, 0x00	; 0
    2df8:	ef d1       	rcall	.+990    	; 0x31d8 <ISO14443AAppendCRCA>
    2dfa:	87 01       	movw	r16, r14
    2dfc:	30 e8       	ldi	r19, 0x80	; 128
                * form the reader in the next frame. */
                State = STATE_AUTHING;

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2dfe:	e3 2e       	mov	r14, r19
    2e00:	f1 2c       	mov	r15, r1
    2e02:	e0 0e       	add	r14, r16
    2e04:	f1 1e       	adc	r15, r17
    2e06:	88 24       	eor	r8, r8
    2e08:	f8 01       	movw	r30, r16
                return ACK_NAK_FRAME_SIZE;
    2e0a:	c0 80       	ld	r12, Z
    2e0c:	11 d5       	rcall	.+2594   	; 0x3830 <Crypto1Byte>
    2e0e:	8c 25       	eor	r24, r12
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
    2e10:	d8 01       	movw	r26, r16
    2e12:	8d 93       	st	X+, r24
    2e14:	8d 01       	movw	r16, r26
    2e16:	0c 2c       	mov	r0, r12
    2e18:	c2 94       	swap	r12
    2e1a:	c0 24       	eor	r12, r0
    2e1c:	0c 2c       	mov	r0, r12
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2e1e:	c6 94       	lsr	r12
    2e20:	c6 94       	lsr	r12
    2e22:	c0 24       	eor	r12, r0
    2e24:	cc d2       	rcall	.+1432   	; 0x33be <Crypto1FilterOutput>
    2e26:	2c 2d       	mov	r18, r12
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	2f 5f       	subi	r18, 0xFF	; 255
    2e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2e:	35 95       	asr	r19
    2e30:	27 95       	ror	r18
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	20 fd       	sbrc	r18, 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	98 27       	eor	r25, r24
    2e3a:	f7 01       	movw	r30, r14
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);
    2e3c:	91 93       	st	Z+, r25
    2e3e:	7f 01       	movw	r14, r30
    2e40:	83 94       	inc	r8
    2e42:	f2 e1       	ldi	r31, 0x12	; 18
    2e44:	8f 16       	cp	r8, r31
    2e46:	01 f7       	brne	.-64     	; 0x2e08 <MifareClassicAppProcess+0x63a>
void MifareClassicAppTask(void)
{

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
    2e48:	80 e9       	ldi	r24, 0x90	; 144
    2e4a:	90 e1       	ldi	r25, 0x10	; 16
    2e4c:	7e cd       	rjmp	.-1284   	; 0x294a <MifareClassicAppProcess+0x17c>
    2e4e:	ce 01       	movw	r24, r28
    2e50:	05 96       	adiw	r24, 0x05	; 5
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
    2e52:	60 e0       	ldi	r22, 0x00	; 0
                    uint8_t Plain = Buffer[i];
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	44 e0       	ldi	r20, 0x04	; 4
                    Buffer[i] = Plain ^ Crypto1Byte();
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <MemoryReadBlock>
    2e5e:	90 91 c8 20 	lds	r25, 0x20C8
    2e62:	d7 01       	movw	r26, r14
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
    2e64:	11 96       	adiw	r26, 0x01	; 1
    2e66:	8c 91       	ld	r24, X
    2e68:	11 97       	sbiw	r26, 0x01	; 1
    2e6a:	80 32       	cpi	r24, 0x20	; 32
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <MifareClassicAppProcess+0x6a2>
    2e6e:	77 c1       	rjmp	.+750    	; 0x315e <__stack+0x15f>
    2e70:	80 37       	cpi	r24, 0x70	; 112
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <MifareClassicAppProcess+0x6a8>
    2e74:	86 cd       	rjmp	.-1268   	; 0x2982 <MifareClassicAppProcess+0x1b4>
    2e76:	d7 01       	movw	r26, r14
    2e78:	12 96       	adiw	r26, 0x02	; 2
    2e7a:	2c 91       	ld	r18, X
    2e7c:	12 97       	sbiw	r26, 0x02	; 2
    2e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e80:	28 17       	cp	r18, r24
    2e82:	09 f0       	breq	.+2      	; 0x2e86 <MifareClassicAppProcess+0x6b8>
    2e84:	7e cd       	rjmp	.-1284   	; 0x2982 <MifareClassicAppProcess+0x1b4>
    2e86:	13 96       	adiw	r26, 0x03	; 3
    2e88:	2c 91       	ld	r18, X
    2e8a:	13 97       	sbiw	r26, 0x03	; 3
    2e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e8e:	28 17       	cp	r18, r24
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
    2e90:	09 f0       	breq	.+2      	; 0x2e94 <MifareClassicAppProcess+0x6c6>
    2e92:	77 cd       	rjmp	.-1298   	; 0x2982 <MifareClassicAppProcess+0x1b4>
    2e94:	14 96       	adiw	r26, 0x04	; 4
    2e96:	2c 91       	ld	r18, X
                    uint8_t Plain = Buffer[i];
                    Buffer[i] = Plain ^ Crypto1Byte();
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
                }

                return ( (CMD_READ_RESPONSE_FRAME_SIZE + ISO14443A_CRCA_SIZE )
    2e98:	14 97       	sbiw	r26, 0x04	; 4
    2e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e9c:	28 17       	cp	r18, r24
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
            /* Load UID CL1 and perform anticollision */
            uint8_t UidCL1[4];
            MemoryReadBlock(UidCL1, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <MifareClassicAppProcess+0x6d4>
    2ea0:	70 cd       	rjmp	.-1312   	; 0x2982 <MifareClassicAppProcess+0x1b4>
    2ea2:	15 96       	adiw	r26, 0x05	; 5
    2ea4:	2c 91       	ld	r18, X
    2ea6:	15 97       	sbiw	r26, 0x05	; 5
    2ea8:	88 85       	ldd	r24, Y+8	; 0x08
    2eaa:	28 17       	cp	r18, r24
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <MifareClassicAppProcess+0x6e2>

            if (ISO14443ASelect(Buffer, &BitCount, UidCL1, CardSAKValue)) {
    2eae:	69 cd       	rjmp	.-1326   	; 0x2982 <MifareClassicAppProcess+0x1b4>
    2eb0:	9c 93       	st	X, r25
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    2eb2:	c7 01       	movw	r24, r14
    2eb4:	61 e0       	ldi	r22, 0x01	; 1
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	8f d1       	rcall	.+798    	; 0x31d8 <ISO14443AAppendCRCA>
    2eba:	83 e0       	ldi	r24, 0x03	; 3
    2ebc:	80 93 c5 20 	sts	0x20C5, r24
    2ec0:	88 e1       	ldi	r24, 0x18	; 24
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	42 cd       	rjmp	.-1404   	; 0x294a <MifareClassicAppProcess+0x17c>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    2ec6:	c7 01       	movw	r24, r14
    2ec8:	62 e0       	ldi	r22, 0x02	; 2
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	c3 d1       	rcall	.+902    	; 0x3254 <ISO14443ACheckCRCA>
    2ece:	88 23       	and	r24, r24
    2ed0:	79 f0       	breq	.+30     	; 0x2ef0 <MifareClassicAppProcess+0x722>
    2ed2:	f7 01       	movw	r30, r14
    2ed4:	81 81       	ldd	r24, Z+1	; 0x01
    2ed6:	80 93 d1 20 	sts	0x20D1, r24
    2eda:	86 e0       	ldi	r24, 0x06	; 6
    2edc:	80 93 c5 20 	sts	0x20C5, r24
    2ee0:	e8 d4       	rcall	.+2512   	; 0x38b2 <Crypto1Nibble>
    2ee2:	9a e0       	ldi	r25, 0x0A	; 10
                (DataPtr[3] == UidCL[1]) &&
    2ee4:	98 27       	eor	r25, r24
    2ee6:	d7 01       	movw	r26, r14
    2ee8:	9c 93       	st	X, r25
    2eea:	84 e0       	ldi	r24, 0x04	; 4
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	2d cd       	rjmp	.-1446   	; 0x294a <MifareClassicAppProcess+0x17c>
    2ef0:	e0 d4       	rcall	.+2496   	; 0x38b2 <Crypto1Nibble>
                (DataPtr[4] == UidCL[2]) &&
    2ef2:	91 e0       	ldi	r25, 0x01	; 1
    2ef4:	98 27       	eor	r25, r24
    2ef6:	f7 01       	movw	r30, r14
    2ef8:	90 83       	st	Z, r25
    2efa:	84 e0       	ldi	r24, 0x04	; 4
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	25 cd       	rjmp	.-1462   	; 0x294a <MifareClassicAppProcess+0x17c>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    2f00:	c7 01       	movw	r24, r14
            ISO14443AAppendCRCA(Buffer, 1);
    2f02:	62 e0       	ldi	r22, 0x02	; 2
    2f04:	70 e0       	ldi	r23, 0x00	; 0
    2f06:	a6 d1       	rcall	.+844    	; 0x3254 <ISO14443ACheckCRCA>
    2f08:	88 23       	and	r24, r24
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <MifareClassicAppProcess+0x740>
                State = STATE_ACTIVE;
    2f0c:	55 cf       	rjmp	.-342    	; 0x2db8 <MifareClassicAppProcess+0x5ea>
    2f0e:	d7 01       	movw	r26, r14
    2f10:	11 96       	adiw	r26, 0x01	; 1

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
    2f12:	8c 91       	ld	r24, X
    2f14:	80 93 d1 20 	sts	0x20D1, r24
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
    2f18:	88 e0       	ldi	r24, 0x08	; 8
    2f1a:	80 93 c5 20 	sts	0x20C5, r24
    2f1e:	c9 d4       	rcall	.+2450   	; 0x38b2 <Crypto1Nibble>
    2f20:	9a e0       	ldi	r25, 0x0A	; 10
    2f22:	98 27       	eor	r25, r24
    2f24:	f7 01       	movw	r30, r14
                /* Write command. Store the address and prepare for the upcoming data.
                * Respond with ACK. */
                CurrentAddress = Buffer[1];
    2f26:	90 83       	st	Z, r25
    2f28:	84 e0       	ldi	r24, 0x04	; 4
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	0e cd       	rjmp	.-1508   	; 0x294a <MifareClassicAppProcess+0x17c>
                State = STATE_WRITE;
    2f2e:	80 91 da 20 	lds	r24, 0x20DA
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
                CurrentAddress = Buffer[1];
                State = STATE_INCREMENT;
    2f32:	28 17       	cp	r18, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2f34:	09 f0       	breq	.+2      	; 0x2f38 <MifareClassicAppProcess+0x76a>
    2f36:	25 cf       	rjmp	.-438    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2f38:	30 91 d3 20 	lds	r19, 0x20D3
    2f3c:	80 91 d7 20 	lds	r24, 0x20D7
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
    2f40:	80 95       	com	r24
    2f42:	38 17       	cp	r19, r24
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <MifareClassicAppProcess+0x77a>
                    /* In read only mode, silently ignore the write */
                }

                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2f46:	1d cf       	rjmp	.-454    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2f48:	80 91 db 20 	lds	r24, 0x20DB
    2f4c:	38 17       	cp	r19, r24
    2f4e:	09 f0       	breq	.+2      	; 0x2f52 <MifareClassicAppProcess+0x784>
    2f50:	18 cf       	rjmp	.-464    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
            }

            return ACK_NAK_FRAME_SIZE;
    2f52:	40 91 d4 20 	lds	r20, 0x20D4
    2f56:	80 91 d8 20 	lds	r24, 0x20D8
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    2f5a:	80 95       	com	r24
    2f5c:	48 17       	cp	r20, r24
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <MifareClassicAppProcess+0x794>
    2f60:	10 cf       	rjmp	.-480    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2f62:	80 91 dc 20 	lds	r24, 0x20DC
    2f66:	48 17       	cp	r20, r24
                CurrentAddress = Buffer[1];
    2f68:	09 f0       	breq	.+2      	; 0x2f6c <MifareClassicAppProcess+0x79e>
    2f6a:	0b cf       	rjmp	.-490    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2f6c:	e0 91 d5 20 	lds	r30, 0x20D5
    2f70:	80 91 d9 20 	lds	r24, 0x20D9
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
                CurrentAddress = Buffer[1];
                State = STATE_RESTORE;
    2f74:	80 95       	com	r24
    2f76:	e8 17       	cp	r30, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <MifareClassicAppProcess+0x7ae>
    2f7a:	03 cf       	rjmp	.-506    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2f7c:	80 91 dd 20 	lds	r24, 0x20DD
    2f80:	e8 17       	cp	r30, r24
    2f82:	09 f0       	breq	.+2      	; 0x2f86 <MifareClassicAppProcess+0x7b8>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
    2f84:	fe ce       	rjmp	.-516    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2f86:	90 91 de 20 	lds	r25, 0x20DE

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    2f8a:	80 91 df 20 	lds	r24, 0x20DF
    2f8e:	80 95       	com	r24
    2f90:	98 17       	cp	r25, r24
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <MifareClassicAppProcess+0x7c8>
         && (Block[1] == (uint8_t) ~Block[5]) && (Block[1] == Block[9])
    2f94:	f6 ce       	rjmp	.-532    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2f96:	80 91 e0 20 	lds	r24, 0x20E0
    2f9a:	98 17       	cp	r25, r24
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <MifareClassicAppProcess+0x7d2>
    2f9e:	f1 ce       	rjmp	.-542    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2fa0:	80 91 e1 20 	lds	r24, 0x20E1
    2fa4:	80 95       	com	r24
    2fa6:	98 17       	cp	r25, r24
    2fa8:	09 f0       	breq	.+2      	; 0x2fac <MifareClassicAppProcess+0x7de>
    2faa:	eb ce       	rjmp	.-554    	; 0x2d82 <MifareClassicAppProcess+0x5b4>
    2fac:	d7 01       	movw	r26, r14
         && (Block[2] == (uint8_t) ~Block[6]) && (Block[2] == Block[10])
    2fae:	11 96       	adiw	r26, 0x01	; 1
    2fb0:	8c 90       	ld	r8, X
    2fb2:	11 97       	sbiw	r26, 0x01	; 1
    2fb4:	99 24       	eor	r9, r9
    2fb6:	aa 24       	eor	r10, r10
    2fb8:	bb 24       	eor	r11, r11
    2fba:	ba 2c       	mov	r11, r10
    2fbc:	a9 2c       	mov	r10, r9
    2fbe:	98 2c       	mov	r9, r8
    2fc0:	88 24       	eor	r8, r8
    2fc2:	12 96       	adiw	r26, 0x02	; 2
    2fc4:	8c 91       	ld	r24, X
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
         && (Block[3] == (uint8_t) ~Block[7]) && (Block[3] == Block[11])
    2fc8:	a0 e0       	ldi	r26, 0x00	; 0
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	dc 01       	movw	r26, r24
    2fce:	99 27       	eor	r25, r25
    2fd0:	88 27       	eor	r24, r24
    2fd2:	88 2a       	or	r8, r24
    2fd4:	99 2a       	or	r9, r25
    2fd6:	aa 2a       	or	r10, r26
    2fd8:	bb 2a       	or	r11, r27
    2fda:	d7 01       	movw	r26, r14
    2fdc:	8c 91       	ld	r24, X
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	a0 e0       	ldi	r26, 0x00	; 0
         && (Block[12] == (uint8_t) ~Block[13])
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	88 2a       	or	r8, r24
    2fe6:	99 2a       	or	r9, r25
    2fe8:	aa 2a       	or	r10, r26
    2fea:	bb 2a       	or	r11, r27
    2fec:	d7 01       	movw	r26, r14
    2fee:	13 96       	adiw	r26, 0x03	; 3
    2ff0:	cc 90       	ld	r12, X
         && (Block[12] == Block[14])
    2ff2:	dd 24       	eor	r13, r13
    2ff4:	ee 24       	eor	r14, r14
    2ff6:	ff 24       	eor	r15, r15
    2ff8:	fc 2c       	mov	r15, r12
    2ffa:	ee 24       	eor	r14, r14
         && (Block[14] == (uint8_t) ~Block[15])) {
    2ffc:	dd 24       	eor	r13, r13
    2ffe:	cc 24       	eor	r12, r12
    3000:	8c 28       	or	r8, r12
    3002:	9d 28       	or	r9, r13
    3004:	ae 28       	or	r10, r14
    3006:	bf 28       	or	r11, r15

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    3008:	83 2f       	mov	r24, r19
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	a0 e0       	ldi	r26, 0x00	; 0
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	ba 2f       	mov	r27, r26
    3012:	a9 2f       	mov	r26, r25
    3014:	98 2f       	mov	r25, r24
    3016:	88 27       	eor	r24, r24
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	70 e0       	ldi	r23, 0x00	; 0
    *Value |= ((uint32_t) Block[2] << 16);
    301e:	ba 01       	movw	r22, r20
    3020:	55 27       	eor	r21, r21
    3022:	44 27       	eor	r20, r20
    3024:	84 2b       	or	r24, r20
    3026:	95 2b       	or	r25, r21
    3028:	a6 2b       	or	r26, r22
    302a:	b7 2b       	or	r27, r23
    302c:	30 e0       	ldi	r19, 0x00	; 0

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	82 2b       	or	r24, r18
    3034:	93 2b       	or	r25, r19
}

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    3036:	a4 2b       	or	r26, r20
    3038:	b5 2b       	or	r27, r21
    303a:	4e 2f       	mov	r20, r30
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	60 e0       	ldi	r22, 0x00	; 0
    *Value |= ((uint32_t) Block[1] << 8);
    *Value |= ((uint32_t) Block[2] << 16);
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	74 2f       	mov	r23, r20
    3044:	66 27       	eor	r22, r22
    3046:	55 27       	eor	r21, r21
    *Value |= ((uint32_t) Block[3] << 24);
    3048:	44 27       	eor	r20, r20
    304a:	84 2b       	or	r24, r20
    304c:	95 2b       	or	r25, r21
    304e:	a6 2b       	or	r26, r22
    3050:	b7 2b       	or	r27, r23
    3052:	20 91 c5 20 	lds	r18, 0x20C5
    3056:	28 30       	cpi	r18, 0x08	; 8
    3058:	09 f4       	brne	.+2      	; 0x305c <__stack+0x5d>
    305a:	6f c0       	rjmp	.+222    	; 0x313a <__stack+0x13b>
    305c:	27 30       	cpi	r18, 0x07	; 7
    305e:	21 f4       	brne	.+8      	; 0x3068 <__stack+0x69>
    3060:	88 0d       	add	r24, r8
    3062:	99 1d       	adc	r25, r9

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    3064:	aa 1d       	adc	r26, r10
    3066:	bb 1d       	adc	r27, r11
    3068:	80 93 d2 20 	sts	0x20D2, r24
    306c:	09 2f       	mov	r16, r25
    306e:	1a 2f       	mov	r17, r26
    3070:	2b 2f       	mov	r18, r27
    3072:	33 27       	eor	r19, r19
    *Value |= ((uint32_t) Block[2] << 16);
    3074:	00 93 d3 20 	sts	0x20D3, r16
    3078:	ad 01       	movw	r20, r26
    307a:	66 27       	eor	r22, r22
    307c:	77 27       	eor	r23, r23
    307e:	40 93 d4 20 	sts	0x20D4, r20

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    3082:	cb 2e       	mov	r12, r27
    3084:	dd 24       	eor	r13, r13
    3086:	ee 24       	eor	r14, r14
}

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    3088:	ff 24       	eor	r15, r15
    308a:	c0 92 d5 20 	sts	0x20D5, r12
    *Value |= ((uint32_t) Block[1] << 8);
    *Value |= ((uint32_t) Block[2] << 16);
    308e:	e8 2f       	mov	r30, r24
    3090:	e0 95       	com	r30
    3092:	e0 93 d6 20 	sts	0x20D6, r30
    *Value |= ((uint32_t) Block[3] << 24);
    3096:	e0 2f       	mov	r30, r16
    3098:	e0 95       	com	r30
    309a:	e0 93 d7 20 	sts	0x20D7, r30
    309e:	e4 2f       	mov	r30, r20
    30a0:	e0 95       	com	r30
    30a2:	e0 93 d8 20 	sts	0x20D8, r30
    30a6:	ec 2d       	mov	r30, r12
    30a8:	e0 95       	com	r30
    30aa:	e0 93 d9 20 	sts	0x20D9, r30
                uint32_t BlockValue;

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
    30ae:	80 93 da 20 	sts	0x20DA, r24
    30b2:	00 93 db 20 	sts	0x20DB, r16
    30b6:	40 93 dc 20 	sts	0x20DC, r20
                    BlockValue -= ParamValue;
                } else if (State == STATE_INCREMENT) {
    30ba:	c0 92 dd 20 	sts	0x20DD, r12
                    BlockValue += ParamValue;
    30be:	85 e0       	ldi	r24, 0x05	; 5
    30c0:	80 93 c5 20 	sts	0x20C5, r24
    *Value |= ((uint32_t) Block[3] << 24);
}

INLINE void ValueToBlock(uint8_t* Block, uint32_t Value)
{
    Block[0] = (uint8_t) (Value >> 0);
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    Block[1] = (uint8_t) (Value >> 8);
    30c8:	40 cc       	rjmp	.-1920   	; 0x294a <MifareClassicAppProcess+0x17c>
    30ca:	c7 01       	movw	r24, r14
    30cc:	62 e0       	ldi	r22, 0x02	; 2
    30ce:	70 e0       	ldi	r23, 0x00	; 0
    30d0:	c1 d0       	rcall	.+386    	; 0x3254 <ISO14443ACheckCRCA>
    30d2:	88 23       	and	r24, r24
    Block[2] = (uint8_t) (Value >> 16);
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <__stack+0xd9>
    30d6:	0c cf       	rjmp	.-488    	; 0x2ef0 <MifareClassicAppProcess+0x722>
    30d8:	f7 01       	movw	r30, r14
    30da:	81 81       	ldd	r24, Z+1	; 0x01
    30dc:	80 93 d1 20 	sts	0x20D1, r24
    Block[3] = (uint8_t) (Value >> 24);
    30e0:	87 e0       	ldi	r24, 0x07	; 7
    30e2:	fc ce       	rjmp	.-520    	; 0x2edc <MifareClassicAppProcess+0x70e>
    30e4:	c7 01       	movw	r24, r14
    30e6:	62 e0       	ldi	r22, 0x02	; 2
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    Block[4] = ~Block[0];
    30ea:	b4 d0       	rcall	.+360    	; 0x3254 <ISO14443ACheckCRCA>
    30ec:	88 23       	and	r24, r24
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <__stack+0xf3>
    30f0:	63 ce       	rjmp	.-826    	; 0x2db8 <MifareClassicAppProcess+0x5ea>
    Block[5] = ~Block[1];
    30f2:	d7 01       	movw	r26, r14
    30f4:	11 96       	adiw	r26, 0x01	; 1
    30f6:	8c 91       	ld	r24, X
    30f8:	11 97       	sbiw	r26, 0x01	; 1
    Block[6] = ~Block[2];
    30fa:	80 93 d1 20 	sts	0x20D1, r24
    30fe:	89 e0       	ldi	r24, 0x09	; 9
    3100:	0c cf       	rjmp	.-488    	; 0x2f1a <MifareClassicAppProcess+0x74c>
    Block[7] = ~Block[3];
    3102:	c7 01       	movw	r24, r14
    3104:	62 e0       	ldi	r22, 0x02	; 2
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	a5 d0       	rcall	.+330    	; 0x3254 <ISO14443ACheckCRCA>
    Block[8] = Block[0];
    310a:	88 23       	and	r24, r24
    310c:	09 f4       	brne	.+2      	; 0x3110 <__stack+0x111>
    Block[9] = Block[1];
    310e:	f0 ce       	rjmp	.-544    	; 0x2ef0 <MifareClassicAppProcess+0x722>
    3110:	80 91 0c 21 	lds	r24, 0x210C
    Block[10] = Block[2];
    3114:	88 23       	and	r24, r24
    Block[11] = Block[3];
    3116:	09 f0       	breq	.+2      	; 0x311a <__stack+0x11b>
    3118:	e3 ce       	rjmp	.-570    	; 0x2ee0 <MifareClassicAppProcess+0x712>
                    /* Do nothing */
                }

                ValueToBlock(BlockBuffer, BlockValue);

                State = STATE_AUTHED_IDLE;
    311a:	f7 01       	movw	r30, r14
    311c:	61 81       	ldd	r22, Z+1	; 0x01
    311e:	70 e0       	ldi	r23, 0x00	; 0
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
    3120:	62 95       	swap	r22
    3122:	72 95       	swap	r23
    3124:	70 7f       	andi	r23, 0xF0	; 240
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    3126:	76 27       	eor	r23, r22
    3128:	60 7f       	andi	r22, 0xF0	; 240
    312a:	76 27       	eor	r23, r22
    312c:	82 ed       	ldi	r24, 0xD2	; 210
    312e:	90 e2       	ldi	r25, 0x20	; 32
    3130:	40 e1       	ldi	r20, 0x10	; 16
    3132:	50 e0       	ldi	r21, 0x00	; 0
    3134:	0e 94 b8 06 	call	0xd70	; 0xd70 <MemoryWriteBlock>
                CurrentAddress = Buffer[1];
    3138:	d3 ce       	rjmp	.-602    	; 0x2ee0 <MifareClassicAppProcess+0x712>
    313a:	88 19       	sub	r24, r8
    313c:	99 09       	sbc	r25, r9
                State = STATE_INCREMENT;
    313e:	aa 09       	sbc	r26, r10
    3140:	bb 09       	sbc	r27, r11
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    3142:	92 cf       	rjmp	.-220    	; 0x3068 <__stack+0x69>
    3144:	c7 01       	movw	r24, r14
    3146:	62 e0       	ldi	r22, 0x02	; 2
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	84 d0       	rcall	.+264    	; 0x3254 <ISO14443ACheckCRCA>
    314c:	88 23       	and	r24, r24
    314e:	09 f0       	breq	.+2      	; 0x3152 <__stack+0x153>
    3150:	49 cc       	rjmp	.-1902   	; 0x29e4 <MifareClassicAppProcess+0x216>
                CurrentAddress = Buffer[1];
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	d7 01       	movw	r26, r14
    3156:	8c 93       	st	X, r24
    3158:	84 e0       	ldi	r24, 0x04	; 4
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	f6 cb       	rjmp	.-2068   	; 0x294a <MifareClassicAppProcess+0x17c>
                State = STATE_RESTORE;
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	f7 01       	movw	r30, r14
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
            /* Write back the global block buffer to the desired block address */
            if (ISO14443ACheckCRCA(Buffer, CMD_TRANSFER_FRAME_SIZE)) {
    3162:	80 83       	st	Z, r24
    3164:	3e 81       	ldd	r19, Y+6	; 0x06
    3166:	31 83       	std	Z+1, r19	; 0x01
    3168:	2f 81       	ldd	r18, Y+7	; 0x07
    316a:	22 83       	std	Z+2, r18	; 0x02
    316c:	98 85       	ldd	r25, Y+8	; 0x08
    316e:	93 83       	std	Z+3, r25	; 0x03
    3170:	83 27       	eor	r24, r19
                if (!ActiveConfiguration.ReadOnly) {
    3172:	82 27       	eor	r24, r18
    3174:	89 27       	eor	r24, r25
    3176:	84 83       	std	Z+4, r24	; 0x04
    3178:	88 e2       	ldi	r24, 0x28	; 40
    317a:	90 e0       	ldi	r25, 0x00	; 0
                    MemoryWriteBlock(BlockBuffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK );
    317c:	e6 cb       	rjmp	.-2100   	; 0x294a <MifareClassicAppProcess+0x17c>
    317e:	80 e3       	ldi	r24, 0x30	; 48
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	20 cd       	rjmp	.-1472   	; 0x2bc4 <MifareClassicAppProcess+0x3f6>
    3184:	80 e3       	ldi	r24, 0x30	; 48
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	8a cd       	rjmp	.-1260   	; 0x2c9e <MifareClassicAppProcess+0x4d0>

0000318a <MifareClassicGetUid>:
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	44 e0       	ldi	r20, 0x04	; 4
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <MemoryReadBlock>

00003196 <MifareClassicSetUid>:
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	0f 92       	push	r0

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
                    BlockValue -= ParamValue;
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	fc 01       	movw	r30, r24
    31a2:	81 81       	ldd	r24, Z+1	; 0x01
    31a4:	90 81       	ld	r25, Z
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
    31a6:	89 27       	eor	r24, r25
    31a8:	92 81       	ldd	r25, Z+2	; 0x02
    31aa:	89 27       	eor	r24, r25
    31ac:	93 81       	ldd	r25, Z+3	; 0x03
    31ae:	89 27       	eor	r24, r25
    31b0:	89 83       	std	Y+1, r24	; 0x01
    31b2:	cf 01       	movw	r24, r30
    31b4:	60 e0       	ldi	r22, 0x00	; 0
                /* Setup crypto1 cipher. Discard in-place encrypted CardNonce. */
                Crypto1Setup(Key, Uid, CardNonce);

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
    31b6:	70 e0       	ldi	r23, 0x00	; 0
    31b8:	44 e0       	ldi	r20, 0x04	; 4
    31ba:	50 e0       	ldi	r21, 0x00	; 0
                return ACK_NAK_FRAME_SIZE;
    31bc:	0e 94 b8 06 	call	0xd70	; 0xd70 <MemoryWriteBlock>
    31c0:	ce 01       	movw	r24, r28

    switch (NVB) {
    case ISO14443A_NVB_AC_START:
        /* Start of anticollision procedure.
        * Send whole UID CLn + BCC */
        DataPtr[0] = UidCL[0];
    31c2:	01 96       	adiw	r24, 0x01	; 1
    31c4:	64 e0       	ldi	r22, 0x04	; 4
    31c6:	70 e0       	ldi	r23, 0x00	; 0
        DataPtr[1] = UidCL[1];
    31c8:	41 e0       	ldi	r20, 0x01	; 1
    31ca:	50 e0       	ldi	r21, 0x00	; 0
        DataPtr[2] = UidCL[2];
    31cc:	0e 94 b8 06 	call	0xd70	; 0xd70 <MemoryWriteBlock>
        DataPtr[3] = UidCL[3];
    31d0:	0f 90       	pop	r0
    31d2:	df 91       	pop	r29
        DataPtr[4] = ISO14443A_CALC_BCC(DataPtr);
    31d4:	cf 91       	pop	r28
    31d6:	08 95       	ret

000031d8 <ISO14443AAppendCRCA>:
 * policies, either expressed or implied, of the ORIGINAL AUTHORS.
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    31d8:	ef 92       	push	r14
    31da:	ff 92       	push	r15
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	cf 93       	push	r28
    31e2:	7c 01       	movw	r14, r24
    31e4:	8b 01       	movw	r16, r22
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    31e6:	61 15       	cp	r22, r1
    31e8:	71 05       	cpc	r23, r1
    31ea:	81 f1       	breq	.+96     	; 0x324c <ISO14443AAppendCRCA+0x74>
    31ec:	fb 01       	movw	r30, r22

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    31ee:	dc 01       	movw	r26, r24
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    31f0:	43 e6       	ldi	r20, 0x63	; 99
    31f2:	53 e6       	ldi	r21, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    31f4:	8d 91       	ld	r24, X+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    31f6:	84 27       	eor	r24, r20
        Byte ^= Byte << 4;
    31f8:	c8 2f       	mov	r28, r24
    31fa:	c2 95       	swap	r28
    31fc:	c0 7f       	andi	r28, 0xF0	; 240
    31fe:	c8 27       	eor	r28, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    3200:	8c 2f       	mov	r24, r28
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	78 2f       	mov	r23, r24
    3206:	66 27       	eor	r22, r22
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    3208:	9c 01       	movw	r18, r24
    320a:	22 0f       	add	r18, r18
    320c:	33 1f       	adc	r19, r19
    320e:	22 0f       	add	r18, r18
    3210:	33 1f       	adc	r19, r19
    3212:	22 0f       	add	r18, r18
    3214:	33 1f       	adc	r19, r19
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    3216:	62 27       	eor	r22, r18
    3218:	73 27       	eor	r23, r19
    321a:	45 2f       	mov	r20, r21
    321c:	55 27       	eor	r21, r21
    321e:	46 27       	eor	r20, r22
    3220:	57 27       	eor	r21, r23
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    3222:	c2 95       	swap	r28
    3224:	cf 70       	andi	r28, 0x0F	; 15
    3226:	8c 2f       	mov	r24, r28
    3228:	90 e0       	ldi	r25, 0x00	; 0
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    322a:	48 27       	eor	r20, r24
    322c:	59 27       	eor	r21, r25
    322e:	31 97       	sbiw	r30, 0x01	; 1

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    3230:	09 f7       	brne	.-62     	; 0x31f4 <ISO14443AAppendCRCA+0x1c>
    3232:	f7 01       	movw	r30, r14
    3234:	e0 0f       	add	r30, r16
    3236:	f1 1f       	adc	r31, r17
    3238:	94 2f       	mov	r25, r20
    323a:	85 2f       	mov	r24, r21

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    323c:	90 83       	st	Z, r25
    *DataPtr = (Checksum >> 8) & 0x00FF;
    323e:	81 83       	std	Z+1, r24	; 0x01
}
    3240:	cf 91       	pop	r28
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	ff 90       	pop	r15
    3248:	ef 90       	pop	r14
    324a:	08 95       	ret

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    324c:	fc 01       	movw	r30, r24

    while(ByteCount--) {
    324e:	83 e6       	ldi	r24, 0x63	; 99
    3250:	93 e6       	ldi	r25, 0x63	; 99
    3252:	f4 cf       	rjmp	.-24     	; 0x323c <ISO14443AAppendCRCA+0x64>

00003254 <ISO14443ACheckCRCA>:
    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    3254:	ef 92       	push	r14
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	7c 01       	movw	r14, r24
    3260:	8b 01       	movw	r16, r22
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    3262:	61 15       	cp	r22, r1
    3264:	71 05       	cpc	r23, r1
    3266:	09 f4       	brne	.+2      	; 0x326a <ISO14443ACheckCRCA+0x16>
    3268:	3d c0       	rjmp	.+122    	; 0x32e4 <ISO14443ACheckCRCA+0x90>
    326a:	fb 01       	movw	r30, r22
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    326c:	dc 01       	movw	r26, r24
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    326e:	43 e6       	ldi	r20, 0x63	; 99
    3270:	53 e6       	ldi	r21, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    3272:	8d 91       	ld	r24, X+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    3274:	84 27       	eor	r24, r20
        Byte ^= Byte << 4;
    3276:	c8 2f       	mov	r28, r24
    3278:	c2 95       	swap	r28
    327a:	c0 7f       	andi	r28, 0xF0	; 240
    327c:	c8 27       	eor	r28, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    327e:	8c 2f       	mov	r24, r28
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	78 2f       	mov	r23, r24
    3284:	66 27       	eor	r22, r22
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    3286:	9c 01       	movw	r18, r24
    3288:	22 0f       	add	r18, r18
    328a:	33 1f       	adc	r19, r19
    328c:	22 0f       	add	r18, r18
    328e:	33 1f       	adc	r19, r19
    3290:	22 0f       	add	r18, r18
    3292:	33 1f       	adc	r19, r19
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    3294:	62 27       	eor	r22, r18
    3296:	73 27       	eor	r23, r19
    3298:	45 2f       	mov	r20, r21
    329a:	55 27       	eor	r21, r21
    329c:	46 27       	eor	r20, r22
    329e:	57 27       	eor	r21, r23
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    32a0:	c2 95       	swap	r28
    32a2:	cf 70       	andi	r28, 0x0F	; 15
    32a4:	8c 2f       	mov	r24, r28
    32a6:	90 e0       	ldi	r25, 0x00	; 0
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    32a8:	48 27       	eor	r20, r24
    32aa:	59 27       	eor	r21, r25
    32ac:	31 97       	sbiw	r30, 0x01	; 1
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    32ae:	09 f7       	brne	.-62     	; 0x3272 <ISO14443ACheckCRCA+0x1e>
    32b0:	f7 01       	movw	r30, r14
    32b2:	e0 0f       	add	r30, r16
    32b4:	f1 1f       	adc	r31, r17
    32b6:	9a 01       	movw	r18, r20
    32b8:	30 70       	andi	r19, 0x00	; 0

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    32ba:	80 81       	ld	r24, Z
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	82 17       	cp	r24, r18
    32c0:	93 07       	cpc	r25, r19
    32c2:	39 f0       	breq	.+14     	; 0x32d2 <ISO14443ACheckCRCA+0x7e>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
}
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	ff 90       	pop	r15
    32ce:	ef 90       	pop	r14
    32d0:	08 95       	ret

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    32d2:	21 81       	ldd	r18, Z+1	; 0x01
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	45 2f       	mov	r20, r21
    32d8:	55 27       	eor	r21, r21

    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	24 17       	cp	r18, r20
    32de:	35 07       	cpc	r19, r21
    32e0:	89 f7       	brne	.-30     	; 0x32c4 <ISO14443ACheckCRCA+0x70>
    32e2:	f1 cf       	rjmp	.-30     	; 0x32c6 <ISO14443ACheckCRCA+0x72>
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    32e4:	fc 01       	movw	r30, r24

    while(ByteCount--) {
    32e6:	23 e6       	ldi	r18, 0x63	; 99
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    32ea:	43 e6       	ldi	r20, 0x63	; 99
    32ec:	53 e6       	ldi	r21, 0x63	; 99
    32ee:	e5 cf       	rjmp	.-54     	; 0x32ba <ISO14443ACheckCRCA+0x66>

000032f0 <Crypto1LFSR>:
/* Split Crypto1 state into even and odd bits to speed up the output filter network */
static uint8_t StateEven[LFSR_SIZE/2] = {0};
static uint8_t StateOdd[LFSR_SIZE/2] = {0};

/* Proceed LFSR by one clock cycle */
static void Crypto1LFSR(uint8_t In) {
    32f0:	cf 92       	push	r12
    32f2:	df 92       	push	r13
    32f4:	ef 92       	push	r14
    32f6:	ff 92       	push	r15
    32f8:	0f 93       	push	r16
    32fa:	1f 93       	push	r17
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    32fc:	00 91 e5 20 	lds	r16, 0x20E5
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    3300:	40 91 e6 20 	lds	r20, 0x20E6
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    3304:	30 91 e7 20 	lds	r19, 0x20E7

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    3308:	a0 91 e2 20 	lds	r26, 0x20E2
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    330c:	f0 91 e3 20 	lds	r31, 0x20E3
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    3310:	e0 91 e4 20 	lds	r30, 0x20E4
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    3314:	94 2f       	mov	r25, r20
    3316:	90 71       	andi	r25, 0x10	; 16
static void Crypto1LFSR(uint8_t In) {
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    3318:	20 2f       	mov	r18, r16
    331a:	21 7e       	andi	r18, 0xE1	; 225
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    331c:	92 27       	eor	r25, r18
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    331e:	23 2f       	mov	r18, r19
    3320:	20 72       	andi	r18, 0x20	; 32
    3322:	92 27       	eor	r25, r18

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    3324:	2a 2f       	mov	r18, r26
    3326:	24 79       	andi	r18, 0x94	; 148
    3328:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    332a:	2f 2f       	mov	r18, r31
    332c:	23 77       	andi	r18, 0x73	; 115
    332e:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    3330:	2e 2f       	mov	r18, r30
    3332:	2a 73       	andi	r18, 0x3A	; 58
    3334:	92 27       	eor	r25, r18

    Feedback ^= Feedback >> 4;
    3336:	29 2f       	mov	r18, r25
    3338:	22 95       	swap	r18
    333a:	2f 70       	andi	r18, 0x0F	; 15
    333c:	29 27       	eor	r18, r25
    Feedback ^= Feedback >> 2;
    333e:	92 2f       	mov	r25, r18
    3340:	96 95       	lsr	r25
    3342:	96 95       	lsr	r25
    3344:	92 27       	eor	r25, r18
    Feedback ^= Feedback >> 1;
    3346:	b9 2f       	mov	r27, r25
    3348:	b6 95       	lsr	r27
    * - the new even state becomes the old odd state
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	60 e0       	ldi	r22, 0x00	; 0
    334e:	70 e0       	ldi	r23, 0x00	; 0
    3350:	76 2f       	mov	r23, r22
    3352:	65 2f       	mov	r22, r21
    3354:	54 2f       	mov	r21, r20
    3356:	44 27       	eor	r20, r20
    Temp |= ((uint32_t) StateEven[2] << 16);
    3358:	c3 2e       	mov	r12, r19
    335a:	dd 24       	eor	r13, r13
    335c:	ee 24       	eor	r14, r14
    335e:	ff 24       	eor	r15, r15
    3360:	76 01       	movw	r14, r12
    3362:	dd 24       	eor	r13, r13
    3364:	cc 24       	eor	r12, r12
    * - the new even state becomes the old odd state
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    3366:	4c 29       	or	r20, r12
    3368:	5d 29       	or	r21, r13
    336a:	6e 29       	or	r22, r14
    336c:	7f 29       	or	r23, r15
    * see that after one LFSR clock cycle
    * - the new even state becomes the old odd state
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    336e:	10 e0       	ldi	r17, 0x00	; 0
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    Temp |= ((uint32_t) StateEven[1] << 8);
    Temp |= ((uint32_t) StateEven[2] << 16);
    3374:	40 2b       	or	r20, r16
    3376:	51 2b       	or	r21, r17
    3378:	62 2b       	or	r22, r18
    337a:	73 2b       	or	r23, r19

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;
    337c:	76 95       	lsr	r23
    337e:	67 95       	ror	r22
    3380:	57 95       	ror	r21
    3382:	47 95       	ror	r20
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);

    Feedback ^= Feedback >> 4;
    Feedback ^= Feedback >> 2;
    Feedback ^= Feedback >> 1;
    3384:	b9 27       	eor	r27, r25

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;

    /* Calculate MSBit of even state as input bit to LFSR */
    if ( (Feedback & 0x01) ^ In ) {
    3386:	2b 2f       	mov	r18, r27
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	21 70       	andi	r18, 0x01	; 1
    338c:	30 70       	andi	r19, 0x00	; 0
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	28 17       	cp	r18, r24
    3392:	39 07       	cpc	r19, r25
    3394:	09 f0       	breq	.+2      	; 0x3398 <Crypto1LFSR+0xa8>
        Temp |= (uint32_t) 1 << (8 * LFSR_SIZE/2 - 1);
    3396:	60 68       	ori	r22, 0x80	; 128
    }

    /* Convert even state back into byte array and swap odd/even state
    * as explained above. */
    StateEven[0] = StateOdd[0];
    3398:	a0 93 e5 20 	sts	0x20E5, r26
    StateEven[1] = StateOdd[1];
    339c:	f0 93 e6 20 	sts	0x20E6, r31
    StateEven[2] = StateOdd[2];
    33a0:	e0 93 e7 20 	sts	0x20E7, r30

    StateOdd[0] = (uint8_t) (Temp >> 0);
    33a4:	40 93 e2 20 	sts	0x20E2, r20
    StateOdd[1] = (uint8_t) (Temp >> 8);
    33a8:	50 93 e3 20 	sts	0x20E3, r21
    StateOdd[2] = (uint8_t) (Temp >> 16);
    33ac:	60 93 e4 20 	sts	0x20E4, r22
}
    33b0:	1f 91       	pop	r17
    33b2:	0f 91       	pop	r16
    33b4:	ff 90       	pop	r15
    33b6:	ef 90       	pop	r14
    33b8:	df 90       	pop	r13
    33ba:	cf 90       	pop	r12
    33bc:	08 95       	ret

000033be <Crypto1FilterOutput>:
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    33be:	50 91 e3 20 	lds	r21, 0x20E3
    Sum |= TableAB[2][(StateOdd[1] >> 4) & 0x0F];
    Sum |= TableAB[3][(StateOdd[2] >> 0) & 0x0F];
    33c2:	40 91 e4 20 	lds	r20, 0x20E4
    33c6:	24 2f       	mov	r18, r20
    33c8:	2f 70       	andi	r18, 0x0F	; 15
    33ca:	8d e1       	ldi	r24, 0x1D	; 29
    33cc:	90 e2       	ldi	r25, 0x20	; 32
    33ce:	dc 01       	movw	r26, r24
    33d0:	a2 0f       	add	r26, r18
    33d2:	b1 1d       	adc	r27, r1
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    33d4:	25 2f       	mov	r18, r21
    33d6:	2f 70       	andi	r18, 0x0F	; 15
    33d8:	fc 01       	movw	r30, r24
    33da:	e2 0f       	add	r30, r18
    33dc:	f1 1d       	adc	r31, r1
    33de:	d0 96       	adiw	r26, 0x30	; 48
    33e0:	2c 91       	ld	r18, X
    33e2:	d0 97       	sbiw	r26, 0x30	; 48
    33e4:	30 89       	ldd	r19, Z+16	; 0x10
    33e6:	23 2b       	or	r18, r19
    * can simply be ORed together to produce the resulting
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    33e8:	30 91 e2 20 	lds	r19, 0x20E2
    33ec:	32 95       	swap	r19
    33ee:	3f 70       	andi	r19, 0x0F	; 15
    33f0:	fc 01       	movw	r30, r24
    33f2:	e3 0f       	add	r30, r19
    33f4:	f1 1d       	adc	r31, r1
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    Sum |= TableAB[2][(StateOdd[1] >> 4) & 0x0F];
    33f6:	30 81       	ld	r19, Z
    33f8:	23 2b       	or	r18, r19
    33fa:	52 95       	swap	r21
    33fc:	5f 70       	andi	r21, 0x0F	; 15
    33fe:	fc 01       	movw	r30, r24
    3400:	e5 0f       	add	r30, r21
    3402:	f1 1d       	adc	r31, r1
    Sum |= TableAB[3][(StateOdd[2] >> 0) & 0x0F];
    3404:	30 a1       	lds	r19, 0x40
    3406:	23 2b       	or	r18, r19
    Sum |= TableAB[4][(StateOdd[2] >> 4) & 0x0F];
    3408:	42 95       	swap	r20
    340a:	4f 70       	andi	r20, 0x0F	; 15
    340c:	84 0f       	add	r24, r20
    340e:	91 1d       	adc	r25, r1
    3410:	80 5c       	subi	r24, 0xC0	; 192
    3412:	9f 4f       	sbci	r25, 0xFF	; 255
    3414:	fc 01       	movw	r30, r24
    3416:	80 81       	ld	r24, Z
    3418:	28 2b       	or	r18, r24

    return TableC[Sum];
    341a:	ed e6       	ldi	r30, 0x6D	; 109
    341c:	f0 e2       	ldi	r31, 0x20	; 32
    341e:	e2 0f       	add	r30, r18
    3420:	f1 1d       	adc	r31, r1
}
    3422:	80 81       	ld	r24, Z
    3424:	08 95       	ret

00003426 <Crypto1Setup>:

void Crypto1Setup(uint8_t Key[6], uint8_t Uid[4], uint8_t CardNonce[4])
{
    3426:	cf 92       	push	r12
    3428:	df 92       	push	r13
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	fc 01       	movw	r30, r24
    3438:	ea 01       	movw	r28, r20
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    343a:	31 81       	ldd	r19, Z+1	; 0x01
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	82 2b       	or	r24, r18
    3444:	93 2b       	or	r25, r19
    3446:	80 fd       	sbrc	r24, 0
    3448:	b2 c1       	rjmp	.+868    	; 0x37ae <Crypto1Setup+0x388>
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	81 fd       	sbrc	r24, 1
    344e:	ad c1       	rjmp	.+858    	; 0x37aa <Crypto1Setup+0x384>
    3450:	20 e0       	ldi	r18, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    3452:	96 95       	lsr	r25
    3454:	87 95       	ror	r24
    3456:	96 95       	lsr	r25
    3458:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    345a:	43 2f       	mov	r20, r19
    345c:	40 68       	ori	r20, 0x80	; 128
    345e:	80 fd       	sbrc	r24, 0
    3460:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3462:	42 2f       	mov	r20, r18
    3464:	40 68       	ori	r20, 0x80	; 128
    3466:	81 fd       	sbrc	r24, 1
    3468:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    346a:	96 95       	lsr	r25
    346c:	87 95       	ror	r24
    346e:	96 95       	lsr	r25
    3470:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3472:	36 95       	lsr	r19
            OddByte >>= 1;
    3474:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3476:	43 2f       	mov	r20, r19
    3478:	40 68       	ori	r20, 0x80	; 128
    347a:	80 fd       	sbrc	r24, 0
    347c:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    347e:	42 2f       	mov	r20, r18
    3480:	40 68       	ori	r20, 0x80	; 128
    3482:	81 fd       	sbrc	r24, 1
    3484:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3486:	96 95       	lsr	r25
    3488:	87 95       	ror	r24
    348a:	96 95       	lsr	r25
    348c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    348e:	36 95       	lsr	r19
            OddByte >>= 1;
    3490:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3492:	43 2f       	mov	r20, r19
    3494:	40 68       	ori	r20, 0x80	; 128
    3496:	80 fd       	sbrc	r24, 0
    3498:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    349a:	42 2f       	mov	r20, r18
    349c:	40 68       	ori	r20, 0x80	; 128
    349e:	81 fd       	sbrc	r24, 1
    34a0:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    34a2:	96 95       	lsr	r25
    34a4:	87 95       	ror	r24
    34a6:	96 95       	lsr	r25
    34a8:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    34aa:	36 95       	lsr	r19
            OddByte >>= 1;
    34ac:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    34ae:	43 2f       	mov	r20, r19
    34b0:	40 68       	ori	r20, 0x80	; 128
    34b2:	80 fd       	sbrc	r24, 0
    34b4:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    34b6:	42 2f       	mov	r20, r18
    34b8:	40 68       	ori	r20, 0x80	; 128
    34ba:	81 fd       	sbrc	r24, 1
    34bc:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    34be:	96 95       	lsr	r25
    34c0:	87 95       	ror	r24
    34c2:	96 95       	lsr	r25
    34c4:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    34c6:	36 95       	lsr	r19
            OddByte >>= 1;
    34c8:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    34ca:	43 2f       	mov	r20, r19
    34cc:	40 68       	ori	r20, 0x80	; 128
    34ce:	80 fd       	sbrc	r24, 0
    34d0:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    34d2:	42 2f       	mov	r20, r18
    34d4:	40 68       	ori	r20, 0x80	; 128
    34d6:	81 fd       	sbrc	r24, 1
    34d8:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    34da:	96 95       	lsr	r25
    34dc:	87 95       	ror	r24
    34de:	96 95       	lsr	r25
    34e0:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    34e2:	36 95       	lsr	r19
            OddByte >>= 1;
    34e4:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    34e6:	43 2f       	mov	r20, r19
    34e8:	40 68       	ori	r20, 0x80	; 128
    34ea:	80 fd       	sbrc	r24, 0
    34ec:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    34ee:	42 2f       	mov	r20, r18
    34f0:	40 68       	ori	r20, 0x80	; 128
    34f2:	81 fd       	sbrc	r24, 1
    34f4:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    34f6:	96 95       	lsr	r25
    34f8:	87 95       	ror	r24
    34fa:	96 95       	lsr	r25
    34fc:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    34fe:	36 95       	lsr	r19
            OddByte >>= 1;
    3500:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3502:	53 2f       	mov	r21, r19
    3504:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3506:	42 2f       	mov	r20, r18
    3508:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    350a:	80 fd       	sbrc	r24, 0
    350c:	35 2f       	mov	r19, r21
    350e:	30 93 e5 20 	sts	0x20E5, r19
        StateOdd[i] = OddByte;
    3512:	81 fd       	sbrc	r24, 1
    3514:	24 2f       	mov	r18, r20
    3516:	20 93 e2 20 	sts	0x20E2, r18
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    351a:	33 81       	ldd	r19, Z+3	; 0x03
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	82 2b       	or	r24, r18
    3524:	93 2b       	or	r25, r19
    3526:	80 fd       	sbrc	r24, 0
    3528:	3e c1       	rjmp	.+636    	; 0x37a6 <Crypto1Setup+0x380>
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	81 fd       	sbrc	r24, 1
    352e:	39 c1       	rjmp	.+626    	; 0x37a2 <Crypto1Setup+0x37c>
    3530:	20 e0       	ldi	r18, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    3532:	96 95       	lsr	r25
    3534:	87 95       	ror	r24
    3536:	96 95       	lsr	r25
    3538:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    353a:	43 2f       	mov	r20, r19
    353c:	40 68       	ori	r20, 0x80	; 128
    353e:	80 fd       	sbrc	r24, 0
    3540:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3542:	42 2f       	mov	r20, r18
    3544:	40 68       	ori	r20, 0x80	; 128
    3546:	81 fd       	sbrc	r24, 1
    3548:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    354a:	96 95       	lsr	r25
    354c:	87 95       	ror	r24
    354e:	96 95       	lsr	r25
    3550:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3552:	36 95       	lsr	r19
            OddByte >>= 1;
    3554:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3556:	43 2f       	mov	r20, r19
    3558:	40 68       	ori	r20, 0x80	; 128
    355a:	80 fd       	sbrc	r24, 0
    355c:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    355e:	42 2f       	mov	r20, r18
    3560:	40 68       	ori	r20, 0x80	; 128
    3562:	81 fd       	sbrc	r24, 1
    3564:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3566:	96 95       	lsr	r25
    3568:	87 95       	ror	r24
    356a:	96 95       	lsr	r25
    356c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    356e:	36 95       	lsr	r19
            OddByte >>= 1;
    3570:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3572:	43 2f       	mov	r20, r19
    3574:	40 68       	ori	r20, 0x80	; 128
    3576:	80 fd       	sbrc	r24, 0
    3578:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    357a:	42 2f       	mov	r20, r18
    357c:	40 68       	ori	r20, 0x80	; 128
    357e:	81 fd       	sbrc	r24, 1
    3580:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3582:	96 95       	lsr	r25
    3584:	87 95       	ror	r24
    3586:	96 95       	lsr	r25
    3588:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    358a:	36 95       	lsr	r19
            OddByte >>= 1;
    358c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    358e:	43 2f       	mov	r20, r19
    3590:	40 68       	ori	r20, 0x80	; 128
    3592:	80 fd       	sbrc	r24, 0
    3594:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3596:	42 2f       	mov	r20, r18
    3598:	40 68       	ori	r20, 0x80	; 128
    359a:	81 fd       	sbrc	r24, 1
    359c:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    359e:	96 95       	lsr	r25
    35a0:	87 95       	ror	r24
    35a2:	96 95       	lsr	r25
    35a4:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    35a6:	36 95       	lsr	r19
            OddByte >>= 1;
    35a8:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    35aa:	43 2f       	mov	r20, r19
    35ac:	40 68       	ori	r20, 0x80	; 128
    35ae:	80 fd       	sbrc	r24, 0
    35b0:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    35b2:	42 2f       	mov	r20, r18
    35b4:	40 68       	ori	r20, 0x80	; 128
    35b6:	81 fd       	sbrc	r24, 1
    35b8:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    35ba:	96 95       	lsr	r25
    35bc:	87 95       	ror	r24
    35be:	96 95       	lsr	r25
    35c0:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    35c2:	36 95       	lsr	r19
            OddByte >>= 1;
    35c4:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    35c6:	43 2f       	mov	r20, r19
    35c8:	40 68       	ori	r20, 0x80	; 128
    35ca:	80 fd       	sbrc	r24, 0
    35cc:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    35ce:	42 2f       	mov	r20, r18
    35d0:	40 68       	ori	r20, 0x80	; 128
    35d2:	81 fd       	sbrc	r24, 1
    35d4:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    35d6:	96 95       	lsr	r25
    35d8:	87 95       	ror	r24
    35da:	96 95       	lsr	r25
    35dc:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    35de:	36 95       	lsr	r19
            OddByte >>= 1;
    35e0:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    35e2:	53 2f       	mov	r21, r19
    35e4:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    35e6:	42 2f       	mov	r20, r18
    35e8:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    35ea:	80 fd       	sbrc	r24, 0
    35ec:	35 2f       	mov	r19, r21
    35ee:	30 93 e6 20 	sts	0x20E6, r19
        StateOdd[i] = OddByte;
    35f2:	81 fd       	sbrc	r24, 1
    35f4:	24 2f       	mov	r18, r20
    35f6:	20 93 e3 20 	sts	0x20E3, r18
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    35fa:	95 81       	ldd	r25, Z+5	; 0x05
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	24 81       	ldd	r18, Z+4	; 0x04
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	28 2b       	or	r18, r24
    3604:	39 2b       	or	r19, r25
    3606:	20 fd       	sbrc	r18, 0
    3608:	ca c0       	rjmp	.+404    	; 0x379e <Crypto1Setup+0x378>
    360a:	50 e0       	ldi	r21, 0x00	; 0
    360c:	21 fd       	sbrc	r18, 1
    360e:	c5 c0       	rjmp	.+394    	; 0x379a <Crypto1Setup+0x374>
    3610:	40 e0       	ldi	r20, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    3612:	c9 01       	movw	r24, r18
    3614:	96 95       	lsr	r25
    3616:	87 95       	ror	r24
    3618:	96 95       	lsr	r25
    361a:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    361c:	35 2f       	mov	r19, r21
    361e:	30 68       	ori	r19, 0x80	; 128
    3620:	80 ff       	sbrs	r24, 0
    3622:	35 2f       	mov	r19, r21
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3624:	24 2f       	mov	r18, r20
    3626:	20 68       	ori	r18, 0x80	; 128
    3628:	81 ff       	sbrs	r24, 1
    362a:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    362c:	96 95       	lsr	r25
    362e:	87 95       	ror	r24
    3630:	96 95       	lsr	r25
    3632:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3634:	36 95       	lsr	r19
            OddByte >>= 1;
    3636:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3638:	43 2f       	mov	r20, r19
    363a:	40 68       	ori	r20, 0x80	; 128
    363c:	80 fd       	sbrc	r24, 0
    363e:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3640:	42 2f       	mov	r20, r18
    3642:	40 68       	ori	r20, 0x80	; 128
    3644:	81 fd       	sbrc	r24, 1
    3646:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3648:	96 95       	lsr	r25
    364a:	87 95       	ror	r24
    364c:	96 95       	lsr	r25
    364e:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3650:	36 95       	lsr	r19
            OddByte >>= 1;
    3652:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3654:	43 2f       	mov	r20, r19
    3656:	40 68       	ori	r20, 0x80	; 128
    3658:	80 fd       	sbrc	r24, 0
    365a:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    365c:	42 2f       	mov	r20, r18
    365e:	40 68       	ori	r20, 0x80	; 128
    3660:	81 fd       	sbrc	r24, 1
    3662:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3664:	96 95       	lsr	r25
    3666:	87 95       	ror	r24
    3668:	96 95       	lsr	r25
    366a:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    366c:	36 95       	lsr	r19
            OddByte >>= 1;
    366e:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3670:	43 2f       	mov	r20, r19
    3672:	40 68       	ori	r20, 0x80	; 128
    3674:	80 fd       	sbrc	r24, 0
    3676:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3678:	42 2f       	mov	r20, r18
    367a:	40 68       	ori	r20, 0x80	; 128
    367c:	81 fd       	sbrc	r24, 1
    367e:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    3680:	96 95       	lsr	r25
    3682:	87 95       	ror	r24
    3684:	96 95       	lsr	r25
    3686:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3688:	36 95       	lsr	r19
            OddByte >>= 1;
    368a:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    368c:	43 2f       	mov	r20, r19
    368e:	40 68       	ori	r20, 0x80	; 128
    3690:	80 fd       	sbrc	r24, 0
    3692:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3694:	42 2f       	mov	r20, r18
    3696:	40 68       	ori	r20, 0x80	; 128
    3698:	81 fd       	sbrc	r24, 1
    369a:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    369c:	96 95       	lsr	r25
    369e:	87 95       	ror	r24
    36a0:	96 95       	lsr	r25
    36a2:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    36a4:	36 95       	lsr	r19
            OddByte >>= 1;
    36a6:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    36a8:	43 2f       	mov	r20, r19
    36aa:	40 68       	ori	r20, 0x80	; 128
    36ac:	80 fd       	sbrc	r24, 0
    36ae:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    36b0:	42 2f       	mov	r20, r18
    36b2:	40 68       	ori	r20, 0x80	; 128
    36b4:	81 fd       	sbrc	r24, 1
    36b6:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    36b8:	96 95       	lsr	r25
    36ba:	87 95       	ror	r24
    36bc:	96 95       	lsr	r25
    36be:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    36c0:	36 95       	lsr	r19
            OddByte >>= 1;
    36c2:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    36c4:	53 2f       	mov	r21, r19
    36c6:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    36c8:	42 2f       	mov	r20, r18
    36ca:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    36cc:	80 fd       	sbrc	r24, 0
    36ce:	35 2f       	mov	r19, r21
    36d0:	30 93 e7 20 	sts	0x20E7, r19
        StateOdd[i] = OddByte;
    36d4:	81 fd       	sbrc	r24, 1
    36d6:	24 2f       	mov	r18, r20
    36d8:	20 93 e4 20 	sts	0x20E4, r18
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    36dc:	c9 80       	ldd	r12, Y+1	; 0x01
    36de:	db 01       	movw	r26, r22
    36e0:	11 96       	adiw	r26, 0x01	; 1
    36e2:	8c 91       	ld	r24, X
    36e4:	11 97       	sbiw	r26, 0x01	; 1
    36e6:	c8 26       	eor	r12, r24
    36e8:	dd 24       	eor	r13, r13
    36ea:	ee 24       	eor	r14, r14
    36ec:	ff 24       	eor	r15, r15
    36ee:	fe 2c       	mov	r15, r14
    36f0:	ed 2c       	mov	r14, r13
    36f2:	dc 2c       	mov	r13, r12
    36f4:	cc 24       	eor	r12, r12
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	12 96       	adiw	r26, 0x02	; 2
    36fa:	9c 91       	ld	r25, X
    36fc:	89 27       	eor	r24, r25
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	a0 e0       	ldi	r26, 0x00	; 0
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	dc 01       	movw	r26, r24
    3706:	99 27       	eor	r25, r25
    3708:	88 27       	eor	r24, r24
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    370a:	c8 2a       	or	r12, r24
    370c:	d9 2a       	or	r13, r25
    370e:	ea 2a       	or	r14, r26
    3710:	fb 2a       	or	r15, r27

    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    3712:	88 81       	ld	r24, Y
    3714:	fb 01       	movw	r30, r22
    3716:	90 81       	ld	r25, Z
    3718:	89 27       	eor	r24, r25
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	a0 e0       	ldi	r26, 0x00	; 0
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    3720:	c8 2a       	or	r12, r24
    3722:	d9 2a       	or	r13, r25
    3724:	ea 2a       	or	r14, r26
    3726:	fb 2a       	or	r15, r27
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	93 81       	ldd	r25, Z+3	; 0x03
    372c:	89 27       	eor	r24, r25
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	a0 e0       	ldi	r26, 0x00	; 0
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	b8 2f       	mov	r27, r24
    3736:	aa 27       	eor	r26, r26
    3738:	99 27       	eor	r25, r25
    373a:	88 27       	eor	r24, r24
    373c:	c8 2a       	or	r12, r24
    373e:	d9 2a       	or	r13, r25
    3740:	ea 2a       	or	r14, r26
    3742:	fb 2a       	or	r15, r27
    3744:	10 e2       	ldi	r17, 0x20	; 32

    for (i=0; i<32; i++) {
        uint8_t Out = Crypto1FilterOutput();
    3746:	3b de       	rcall	.-906    	; 0x33be <Crypto1FilterOutput>
    3748:	08 2f       	mov	r16, r24
    374a:	8c 2d       	mov	r24, r12

        Crypto1LFSR(Temp & 0x01);
    374c:	81 70       	andi	r24, 0x01	; 1
    374e:	d0 dd       	rcall	.-1120   	; 0x32f0 <Crypto1LFSR>
    3750:	f6 94       	lsr	r15
    3752:	e7 94       	ror	r14
        Temp >>= 1;
    3754:	d7 94       	ror	r13
    3756:	c7 94       	ror	r12
    3758:	00 23       	and	r16, r16
    375a:	41 f0       	breq	.+16     	; 0x376c <Crypto1Setup+0x346>

        /* Store the keystream for later use */
        if (Out) {
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	90 e0       	ldi	r25, 0x00	; 0
            Temp |= (uint32_t) 1 << 31;
    3760:	a0 e0       	ldi	r26, 0x00	; 0
    3762:	b0 e8       	ldi	r27, 0x80	; 128
    3764:	c8 2a       	or	r12, r24
    3766:	d9 2a       	or	r13, r25
    3768:	ea 2a       	or	r14, r26
    376a:	fb 2a       	or	r15, r27
    376c:	11 50       	subi	r17, 0x01	; 1
    376e:	59 f7       	brne	.-42     	; 0x3746 <Crypto1Setup+0x320>
    3770:	88 81       	ld	r24, Y
    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;

    for (i=0; i<32; i++) {
    3772:	8c 25       	eor	r24, r12
    }

    /* Crypto1 state register is now set up to be used for authentication.
    * In case of nested authentication, we need to use the produced keystream
    * to encrypt the CardNonce. For this case we do the encryption in-place. */
    CardNonce[0] ^= (uint8_t) (Temp >> 0);
    3774:	88 83       	st	Y, r24
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	8d 25       	eor	r24, r13
    CardNonce[1] ^= (uint8_t) (Temp >> 8);
    377a:	89 83       	std	Y+1, r24	; 0x01
    377c:	8a 81       	ldd	r24, Y+2	; 0x02
    377e:	8e 25       	eor	r24, r14
    CardNonce[2] ^= (uint8_t) (Temp >> 16);
    3780:	8a 83       	std	Y+2, r24	; 0x02
    3782:	8b 81       	ldd	r24, Y+3	; 0x03
    3784:	8f 25       	eor	r24, r15
    CardNonce[3] ^= (uint8_t) (Temp >> 24);
    3786:	8b 83       	std	Y+3, r24	; 0x03
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
}
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	ff 90       	pop	r15
    3792:	ef 90       	pop	r14
    3794:	df 90       	pop	r13
    3796:	cf 90       	pop	r12
    3798:	08 95       	ret
    379a:	40 e4       	ldi	r20, 0x40	; 64
    379c:	3a cf       	rjmp	.-396    	; 0x3612 <Crypto1Setup+0x1ec>
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    379e:	50 e4       	ldi	r21, 0x40	; 64
    37a0:	35 cf       	rjmp	.-406    	; 0x360c <Crypto1Setup+0x1e6>
    37a2:	20 e4       	ldi	r18, 0x40	; 64
    37a4:	c6 ce       	rjmp	.-628    	; 0x3532 <Crypto1Setup+0x10c>
    37a6:	30 e4       	ldi	r19, 0x40	; 64
    37a8:	c1 ce       	rjmp	.-638    	; 0x352c <Crypto1Setup+0x106>
    37aa:	20 e4       	ldi	r18, 0x40	; 64
    37ac:	52 ce       	rjmp	.-860    	; 0x3452 <Crypto1Setup+0x2c>
    37ae:	30 e4       	ldi	r19, 0x40	; 64
    37b0:	4d ce       	rjmp	.-870    	; 0x344c <Crypto1Setup+0x26>

000037b2 <Crypto1Auth>:
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    CardNonce[2] ^= (uint8_t) (Temp >> 16);
    CardNonce[3] ^= (uint8_t) (Temp >> 24);
}

void Crypto1Auth(uint8_t EncryptedReaderNonce[4])
{
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	cf 93       	push	r28
    37bc:	fc 01       	movw	r30, r24
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    37be:	c1 80       	ldd	r12, Z+1	; 0x01
    37c0:	dd 24       	eor	r13, r13
    37c2:	ee 24       	eor	r14, r14
    37c4:	ff 24       	eor	r15, r15
    37c6:	fe 2c       	mov	r15, r14
    37c8:	ed 2c       	mov	r14, r13
    37ca:	dc 2c       	mov	r13, r12
    37cc:	cc 24       	eor	r12, r12
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	a0 e0       	ldi	r26, 0x00	; 0
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	dc 01       	movw	r26, r24
    37d8:	99 27       	eor	r25, r25
    37da:	88 27       	eor	r24, r24
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    37dc:	c8 2a       	or	r12, r24
    37de:	d9 2a       	or	r13, r25
    37e0:	ea 2a       	or	r14, r26
    37e2:	fb 2a       	or	r15, r27
{
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    37e4:	80 81       	ld	r24, Z
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a0 e0       	ldi	r26, 0x00	; 0
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    37ec:	c8 2a       	or	r12, r24
    37ee:	d9 2a       	or	r13, r25
    37f0:	ea 2a       	or	r14, r26
    37f2:	fb 2a       	or	r15, r27
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;
    37f4:	83 81       	ldd	r24, Z+3	; 0x03
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	a0 e0       	ldi	r26, 0x00	; 0
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	b8 2f       	mov	r27, r24
    37fe:	aa 27       	eor	r26, r26
    3800:	99 27       	eor	r25, r25
    3802:	88 27       	eor	r24, r24
    3804:	c8 2a       	or	r12, r24
    3806:	d9 2a       	or	r13, r25
    3808:	ea 2a       	or	r14, r26
    380a:	fb 2a       	or	r15, r27
    380c:	c0 e2       	ldi	r28, 0x20	; 32
    uint8_t i;

    for (i=0; i<32; i++) {
        /* Decrypt one output bit of the given encrypted nonce using the
        * filter output as keystream. */
        uint8_t Out = Crypto1FilterOutput();
    380e:	d7 dd       	rcall	.-1106   	; 0x33be <Crypto1FilterOutput>
    3810:	9c 2d       	mov	r25, r12
        uint8_t Bit = Out ^ (Temp & 0x01);
    3812:	91 70       	andi	r25, 0x01	; 1
    3814:	89 27       	eor	r24, r25

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
    3816:	6c dd       	rcall	.-1320   	; 0x32f0 <Crypto1LFSR>
    3818:	f6 94       	lsr	r15
    381a:	e7 94       	ror	r14
        Temp >>= 1;
    381c:	d7 94       	ror	r13
    381e:	c7 94       	ror	r12
    3820:	c1 50       	subi	r28, 0x01	; 1
    3822:	a9 f7       	brne	.-22     	; 0x380e <Crypto1Auth+0x5c>
    3824:	cf 91       	pop	r28
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;

    uint8_t i;

    for (i=0; i<32; i++) {
    3826:	ff 90       	pop	r15

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
        Temp >>= 1;
    }
}
    3828:	ef 90       	pop	r14
    382a:	df 90       	pop	r13
    382c:	cf 90       	pop	r12
    382e:	08 95       	ret

00003830 <Crypto1Byte>:
    3830:	cf 93       	push	r28
    3832:	df 93       	push	r29
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    3834:	c4 dd       	rcall	.-1144   	; 0x33be <Crypto1FilterOutput>
    3836:	c8 2f       	mov	r28, r24
    3838:	80 e0       	ldi	r24, 0x00	; 0
        Crypto1LFSR(0);
    383a:	5a dd       	rcall	.-1356   	; 0x32f0 <Crypto1LFSR>
    383c:	cc 23       	and	r28, r28
    383e:	09 f4       	brne	.+2      	; 0x3842 <Crypto1Byte+0x12>

        /* Store keystream bit */
        KeyStream >>= 1;

        if (Out) {
    3840:	36 c0       	rjmp	.+108    	; 0x38ae <Crypto1Byte+0x7e>
    3842:	c0 e8       	ldi	r28, 0x80	; 128
    3844:	bc dd       	rcall	.-1160   	; 0x33be <Crypto1FilterOutput>
            KeyStream |= (1<<7);
    3846:	d8 2f       	mov	r29, r24
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	52 dd       	rcall	.-1372   	; 0x32f0 <Crypto1LFSR>
    384c:	c6 95       	lsr	r28
        Crypto1LFSR(0);
    384e:	d1 11       	cpse	r29, r1
    3850:	c0 68       	ori	r28, 0x80	; 128
    3852:	b5 dd       	rcall	.-1174   	; 0x33be <Crypto1FilterOutput>

        /* Store keystream bit */
        KeyStream >>= 1;
    3854:	d8 2f       	mov	r29, r24

        if (Out) {
    3856:	80 e0       	ldi	r24, 0x00	; 0
            KeyStream |= (1<<7);
    3858:	4b dd       	rcall	.-1386   	; 0x32f0 <Crypto1LFSR>
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    385a:	c6 95       	lsr	r28
    385c:	d1 11       	cpse	r29, r1
    385e:	c0 68       	ori	r28, 0x80	; 128
        Crypto1LFSR(0);
    3860:	ae dd       	rcall	.-1188   	; 0x33be <Crypto1FilterOutput>
    3862:	d8 2f       	mov	r29, r24
    3864:	80 e0       	ldi	r24, 0x00	; 0

        /* Store keystream bit */
        KeyStream >>= 1;
    3866:	44 dd       	rcall	.-1400   	; 0x32f0 <Crypto1LFSR>

        if (Out) {
    3868:	c6 95       	lsr	r28
            KeyStream |= (1<<7);
    386a:	d1 11       	cpse	r29, r1
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    386c:	c0 68       	ori	r28, 0x80	; 128
    386e:	a7 dd       	rcall	.-1202   	; 0x33be <Crypto1FilterOutput>
    3870:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	3d dd       	rcall	.-1414   	; 0x32f0 <Crypto1LFSR>
    3876:	c6 95       	lsr	r28

        /* Store keystream bit */
        KeyStream >>= 1;
    3878:	d1 11       	cpse	r29, r1

        if (Out) {
    387a:	c0 68       	ori	r28, 0x80	; 128
            KeyStream |= (1<<7);
    387c:	a0 dd       	rcall	.-1216   	; 0x33be <Crypto1FilterOutput>
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    387e:	d8 2f       	mov	r29, r24
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	36 dd       	rcall	.-1428   	; 0x32f0 <Crypto1LFSR>
        Crypto1LFSR(0);
    3884:	c6 95       	lsr	r28
    3886:	d1 11       	cpse	r29, r1
    3888:	c0 68       	ori	r28, 0x80	; 128

        /* Store keystream bit */
        KeyStream >>= 1;
    388a:	99 dd       	rcall	.-1230   	; 0x33be <Crypto1FilterOutput>

        if (Out) {
    388c:	d8 2f       	mov	r29, r24
            KeyStream |= (1<<7);
    388e:	80 e0       	ldi	r24, 0x00	; 0
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    3890:	2f dd       	rcall	.-1442   	; 0x32f0 <Crypto1LFSR>
    3892:	c6 95       	lsr	r28
    3894:	d1 11       	cpse	r29, r1
        Crypto1LFSR(0);
    3896:	c0 68       	ori	r28, 0x80	; 128
    3898:	92 dd       	rcall	.-1244   	; 0x33be <Crypto1FilterOutput>
    389a:	d8 2f       	mov	r29, r24

        /* Store keystream bit */
        KeyStream >>= 1;
    389c:	80 e0       	ldi	r24, 0x00	; 0

        if (Out) {
    389e:	28 dd       	rcall	.-1456   	; 0x32f0 <Crypto1LFSR>
            KeyStream |= (1<<7);
    38a0:	8c 2f       	mov	r24, r28
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38a2:	86 95       	lsr	r24
    38a4:	d1 11       	cpse	r29, r1
    38a6:	80 68       	ori	r24, 0x80	; 128
        Crypto1LFSR(0);
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	08 95       	ret

        /* Store keystream bit */
        KeyStream >>= 1;
    38ae:	c0 e0       	ldi	r28, 0x00	; 0

        if (Out) {
    38b0:	c9 cf       	rjmp	.-110    	; 0x3844 <Crypto1Byte+0x14>

000038b2 <Crypto1Nibble>:
            KeyStream |= (1<<7);
    38b2:	cf 93       	push	r28
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38b4:	df 93       	push	r29
    38b6:	83 dd       	rcall	.-1274   	; 0x33be <Crypto1FilterOutput>
    38b8:	c8 2f       	mov	r28, r24
        Crypto1LFSR(0);
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	19 dd       	rcall	.-1486   	; 0x32f0 <Crypto1LFSR>
    38be:	cc 23       	and	r28, r28

        /* Store keystream bit */
        KeyStream >>= 1;
    38c0:	d1 f0       	breq	.+52     	; 0x38f6 <Crypto1Nibble+0x44>
    38c2:	c8 e0       	ldi	r28, 0x08	; 8

        if (Out) {
    38c4:	7c dd       	rcall	.-1288   	; 0x33be <Crypto1FilterOutput>
            KeyStream |= (1<<7);
    38c6:	d8 2f       	mov	r29, r24
        }
    }

    return KeyStream;
}
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	12 dd       	rcall	.-1500   	; 0x32f0 <Crypto1LFSR>
    38cc:	c6 95       	lsr	r28
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
        Crypto1LFSR(0);

        /* Store keystream bit */
        KeyStream >>= 1;
    38ce:	d1 11       	cpse	r29, r1
    38d0:	c8 60       	ori	r28, 0x08	; 8
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
        Crypto1LFSR(0);
    38d2:	75 dd       	rcall	.-1302   	; 0x33be <Crypto1FilterOutput>

        /* Store keystream bit */
        KeyStream >>= 1;
    38d4:	d8 2f       	mov	r29, r24

        if (Out) {
    38d6:	80 e0       	ldi	r24, 0x00	; 0
            KeyStream |= (1<<3);
    38d8:	0b dd       	rcall	.-1514   	; 0x32f0 <Crypto1LFSR>
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38da:	c6 95       	lsr	r28
    38dc:	d1 11       	cpse	r29, r1
    38de:	c8 60       	ori	r28, 0x08	; 8
        Crypto1LFSR(0);
    38e0:	6e dd       	rcall	.-1316   	; 0x33be <Crypto1FilterOutput>
    38e2:	d8 2f       	mov	r29, r24
    38e4:	80 e0       	ldi	r24, 0x00	; 0

        /* Store keystream bit */
        KeyStream >>= 1;
    38e6:	04 dd       	rcall	.-1528   	; 0x32f0 <Crypto1LFSR>

        if (Out) {
    38e8:	8c 2f       	mov	r24, r28
            KeyStream |= (1<<3);
    38ea:	86 95       	lsr	r24
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    38ec:	d1 11       	cpse	r29, r1
    38ee:	88 60       	ori	r24, 0x08	; 8
    38f0:	df 91       	pop	r29
        Crypto1LFSR(0);
    38f2:	cf 91       	pop	r28
    38f4:	08 95       	ret
    38f6:	c0 e0       	ldi	r28, 0x00	; 0

        /* Store keystream bit */
        KeyStream >>= 1;
    38f8:	e5 cf       	rjmp	.-54     	; 0x38c4 <Crypto1Nibble+0x12>

000038fa <Crypto1PRNG>:
    38fa:	8f 92       	push	r8

        if (Out) {
    38fc:	9f 92       	push	r9
            KeyStream |= (1<<3);
    38fe:	af 92       	push	r10
        }
    }

    return KeyStream;
}
    3900:	bf 92       	push	r11
    3902:	cf 92       	push	r12
    3904:	df 92       	push	r13
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
        Crypto1LFSR(0);

        /* Store keystream bit */
        KeyStream >>= 1;
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15

    return KeyStream;
}

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	4c 01       	movw	r8, r24
    3914:	5b 01       	movw	r10, r22
    while(ClockCount--) {
    3916:	61 15       	cp	r22, r1
    3918:	71 05       	cpc	r23, r1
    391a:	09 f4       	brne	.+2      	; 0x391e <Crypto1PRNG+0x24>
    391c:	5f c0       	rjmp	.+190    	; 0x39dc <Crypto1PRNG+0xe2>
    391e:	dc 01       	movw	r26, r24
    3920:	12 96       	adiw	r26, 0x02	; 2
    3922:	cc 91       	ld	r28, X
    3924:	12 97       	sbiw	r26, 0x02	; 2
    3926:	ec 91       	ld	r30, X
    3928:	11 96       	adiw	r26, 0x01	; 1
    392a:	dc 91       	ld	r29, X
    392c:	11 97       	sbiw	r26, 0x01	; 1
    392e:	13 96       	adiw	r26, 0x03	; 3
    3930:	fc 91       	ld	r31, X
        * XOR all tapped bits to a single feedback bit. */
        uint8_t Feedback = 0;

        Feedback ^= State[0] & (uint8_t) (PRNG_MASK >> 0);
        Feedback ^= State[1] & (uint8_t) (PRNG_MASK >> 8);
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
    3932:	9c 2f       	mov	r25, r28
    3934:	9d 72       	andi	r25, 0x2D	; 45
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
    3936:	89 2f       	mov	r24, r25
    3938:	82 95       	swap	r24
    393a:	8f 70       	andi	r24, 0x0F	; 15
    393c:	89 27       	eor	r24, r25
        Feedback ^= Feedback >> 2;
    393e:	28 2f       	mov	r18, r24
    3940:	26 95       	lsr	r18
    3942:	26 95       	lsr	r18
    3944:	28 27       	eor	r18, r24
        Feedback ^= Feedback >> 1;
    3946:	32 2f       	mov	r19, r18
    3948:	36 95       	lsr	r19

        /* For ease of processing convert the state into a 32 bit integer first */
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
    394a:	8d 2f       	mov	r24, r29
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	a0 e0       	ldi	r26, 0x00	; 0
    3950:	b0 e0       	ldi	r27, 0x00	; 0
    3952:	ba 2f       	mov	r27, r26
    3954:	a9 2f       	mov	r26, r25
    3956:	98 2f       	mov	r25, r24
    3958:	88 27       	eor	r24, r24
        Temp |= (uint32_t) State[2] << 16;
    395a:	4c 2f       	mov	r20, r28
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	60 e0       	ldi	r22, 0x00	; 0
    3960:	70 e0       	ldi	r23, 0x00	; 0
    3962:	ba 01       	movw	r22, r20
    3964:	55 27       	eor	r21, r21
    3966:	44 27       	eor	r20, r20

        /* For ease of processing convert the state into a 32 bit integer first */
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
    3968:	84 2b       	or	r24, r20
    396a:	95 2b       	or	r25, r21
    396c:	a6 2b       	or	r26, r22
    396e:	b7 2b       	or	r27, r23
        Feedback ^= Feedback >> 1;

        /* For ease of processing convert the state into a 32 bit integer first */
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
    3970:	4e 2f       	mov	r20, r30
    3972:	50 e0       	ldi	r21, 0x00	; 0
    3974:	60 e0       	ldi	r22, 0x00	; 0
    3976:	70 e0       	ldi	r23, 0x00	; 0
        Temp |= (uint32_t) State[1] << 8;
        Temp |= (uint32_t) State[2] << 16;
    3978:	84 2b       	or	r24, r20
    397a:	95 2b       	or	r25, r21
    397c:	a6 2b       	or	r26, r22
    397e:	b7 2b       	or	r27, r23
        Temp |= (uint32_t) State[3] << 24;
    3980:	4f 2f       	mov	r20, r31
    3982:	50 e0       	ldi	r21, 0x00	; 0
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	74 2f       	mov	r23, r20
    398a:	66 27       	eor	r22, r22
    398c:	55 27       	eor	r21, r21
    398e:	44 27       	eor	r20, r20
    3990:	84 2b       	or	r24, r20
    3992:	95 2b       	or	r25, r21
    3994:	a6 2b       	or	r26, r22
    3996:	b7 2b       	or	r27, r23

        /* Cycle LFSR and feed back. */
        Temp >>= 1;
    3998:	b6 95       	lsr	r27
    399a:	a7 95       	ror	r26
    399c:	97 95       	ror	r25
    399e:	87 95       	ror	r24
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
        Feedback ^= Feedback >> 2;
        Feedback ^= Feedback >> 1;
    39a0:	32 27       	eor	r19, r18
        Temp |= (uint32_t) State[3] << 24;

        /* Cycle LFSR and feed back. */
        Temp >>= 1;

        if (Feedback & 0x01) {
    39a2:	30 fd       	sbrc	r19, 0
            Temp |= (uint32_t) 1 << (8 * PRNG_SIZE - 1);
    39a4:	b0 68       	ori	r27, 0x80	; 128
        }

        /* Store back state */
        State[0] = (uint8_t) (Temp >> 0);
    39a6:	e8 2f       	mov	r30, r24
        State[1] = (uint8_t) (Temp >> 8);
    39a8:	49 2f       	mov	r20, r25
    39aa:	5a 2f       	mov	r21, r26
    39ac:	6b 2f       	mov	r22, r27
    39ae:	77 27       	eor	r23, r23
    39b0:	d4 2f       	mov	r29, r20
        State[2] = (uint8_t) (Temp >> 16);
    39b2:	8d 01       	movw	r16, r26
    39b4:	22 27       	eor	r18, r18
    39b6:	33 27       	eor	r19, r19
    39b8:	c0 2f       	mov	r28, r16
        State[3] = (uint8_t) (Temp >> 24);
    39ba:	cb 2e       	mov	r12, r27
    39bc:	dd 24       	eor	r13, r13
    39be:	ee 24       	eor	r14, r14
    39c0:	ff 24       	eor	r15, r15
    39c2:	fc 2d       	mov	r31, r12
    39c4:	08 94       	sec
    39c6:	a1 08       	sbc	r10, r1
    39c8:	b1 08       	sbc	r11, r1
    return KeyStream;
}

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    while(ClockCount--) {
    39ca:	a1 14       	cp	r10, r1
    39cc:	b1 04       	cpc	r11, r1
    39ce:	09 f0       	breq	.+2      	; 0x39d2 <Crypto1PRNG+0xd8>
    39d0:	b0 cf       	rjmp	.-160    	; 0x3932 <Crypto1PRNG+0x38>
    39d2:	f4 01       	movw	r30, r8
    39d4:	80 83       	st	Z, r24
    39d6:	41 83       	std	Z+1, r20	; 0x01
    39d8:	02 83       	std	Z+2, r16	; 0x02
    39da:	c3 82       	std	Z+3, r12	; 0x03
        State[2] = (uint8_t) (Temp >> 16);
        State[3] = (uint8_t) (Temp >> 24);
    }


}
    39dc:	df 91       	pop	r29
    39de:	cf 91       	pop	r28
    39e0:	1f 91       	pop	r17
    39e2:	0f 91       	pop	r16
    39e4:	ff 90       	pop	r15
    39e6:	ef 90       	pop	r14
    39e8:	df 90       	pop	r13
    39ea:	cf 90       	pop	r12
    39ec:	bf 90       	pop	r11
    39ee:	af 90       	pop	r10
    39f0:	9f 90       	pop	r9
    39f2:	8f 90       	pop	r8
    39f4:	08 95       	ret

000039f6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    39f6:	1f 93       	push	r17
    39f8:	cf 93       	push	r28
    39fa:	df 93       	push	r29
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	ee 97       	sbiw	r28, 0x3e	; 62
    3a02:	cd bf       	out	0x3d, r28	; 61
    3a04:	de bf       	out	0x3e, r29	; 62
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3a06:	4d d3       	rcall	.+1690   	; 0x40a2 <Endpoint_Read_8>
    3a08:	80 93 25 23 	sts	0x2325, r24
    3a0c:	4a d3       	rcall	.+1684   	; 0x40a2 <Endpoint_Read_8>
    3a0e:	80 93 26 23 	sts	0x2326, r24
    3a12:	47 d3       	rcall	.+1678   	; 0x40a2 <Endpoint_Read_8>
    3a14:	80 93 27 23 	sts	0x2327, r24
    3a18:	44 d3       	rcall	.+1672   	; 0x40a2 <Endpoint_Read_8>
    3a1a:	80 93 28 23 	sts	0x2328, r24
    3a1e:	41 d3       	rcall	.+1666   	; 0x40a2 <Endpoint_Read_8>
    3a20:	80 93 29 23 	sts	0x2329, r24
    3a24:	3e d3       	rcall	.+1660   	; 0x40a2 <Endpoint_Read_8>
    3a26:	80 93 2a 23 	sts	0x232A, r24
    3a2a:	3b d3       	rcall	.+1654   	; 0x40a2 <Endpoint_Read_8>
    3a2c:	80 93 2b 23 	sts	0x232B, r24
    3a30:	38 d3       	rcall	.+1648   	; 0x40a2 <Endpoint_Read_8>
    3a32:	80 93 2c 23 	sts	0x232C, r24
    3a36:	0e 94 80 0b 	call	0x1700	; 0x1700 <EVENT_USB_Device_ControlRequest>
    3a3a:	d5 d3       	rcall	.+1962   	; 0x41e6 <Endpoint_IsSETUPReceived>
    3a3c:	88 23       	and	r24, r24
    3a3e:	91 f0       	breq	.+36     	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3a40:	90 91 25 23 	lds	r25, 0x2325
    3a44:	80 91 26 23 	lds	r24, 0x2326
	#endif

	EVENT_USB_Device_ControlRequest();
    3a48:	85 30       	cpi	r24, 0x05	; 5

	if (Endpoint_IsSETUPReceived())
    3a4a:	09 f4       	brne	.+2      	; 0x3a4e <USB_Device_ProcessControlRequest+0x58>
    3a4c:	53 c0       	rjmp	.+166    	; 0x3af4 <USB_Device_ProcessControlRequest+0xfe>
    3a4e:	86 30       	cpi	r24, 0x06	; 6
    3a50:	a8 f0       	brcs	.+42     	; 0x3a7c <USB_Device_ProcessControlRequest+0x86>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3a52:	88 30       	cpi	r24, 0x08	; 8
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <USB_Device_ProcessControlRequest+0x62>

		switch (USB_ControlRequest.bRequest)
    3a56:	ba c0       	rjmp	.+372    	; 0x3bcc <USB_Device_ProcessControlRequest+0x1d6>
    3a58:	89 30       	cpi	r24, 0x09	; 9
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <USB_Device_ProcessControlRequest+0x68>
    3a5c:	9e c0       	rjmp	.+316    	; 0x3b9a <USB_Device_ProcessControlRequest+0x1a4>
    3a5e:	86 30       	cpi	r24, 0x06	; 6
    3a60:	09 f4       	brne	.+2      	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3a62:	5d c0       	rjmp	.+186    	; 0x3b1e <USB_Device_ProcessControlRequest+0x128>
    3a64:	c0 d3       	rcall	.+1920   	; 0x41e6 <Endpoint_IsSETUPReceived>
    3a66:	88 23       	and	r24, r24
    3a68:	11 f0       	breq	.+4      	; 0x3a6e <USB_Device_ProcessControlRequest+0x78>
    3a6a:	91 d3       	rcall	.+1826   	; 0x418e <Endpoint_ClearSETUP>
    3a6c:	74 d3       	rcall	.+1768   	; 0x4156 <Endpoint_StallTransaction>
    3a6e:	ee 96       	adiw	r28, 0x3e	; 62
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	de bf       	out	0x3e, r29	; 62
    3a74:	df 91       	pop	r29
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3a76:	cf 91       	pop	r28
    3a78:	1f 91       	pop	r17
    3a7a:	08 95       	ret
    3a7c:	81 30       	cpi	r24, 0x01	; 1
	{
		Endpoint_ClearSETUP();
    3a7e:	29 f0       	breq	.+10     	; 0x3a8a <USB_Device_ProcessControlRequest+0x94>
    3a80:	81 30       	cpi	r24, 0x01	; 1
		Endpoint_StallTransaction();
    3a82:	08 f4       	brcc	.+2      	; 0x3a86 <USB_Device_ProcessControlRequest+0x90>
    3a84:	6e c0       	rjmp	.+220    	; 0x3b62 <USB_Device_ProcessControlRequest+0x16c>
	}
}
    3a86:	83 30       	cpi	r24, 0x03	; 3
    3a88:	69 f7       	brne	.-38     	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3a8a:	99 23       	and	r25, r25
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <USB_Device_ProcessControlRequest+0x9a>
    3a8e:	a8 c0       	rjmp	.+336    	; 0x3be0 <USB_Device_ProcessControlRequest+0x1ea>
    3a90:	92 30       	cpi	r25, 0x02	; 2
    3a92:	41 f7       	brne	.-48     	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
    3a94:	80 91 27 23 	lds	r24, 0x2327
    3a98:	88 23       	and	r24, r24
    3a9a:	39 f5       	brne	.+78     	; 0x3aea <USB_Device_ProcessControlRequest+0xf4>
    3a9c:	10 91 29 23 	lds	r17, 0x2329
    3aa0:	1f 70       	andi	r17, 0x0F	; 15
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3aa2:	01 f3       	breq	.-64     	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3aa4:	81 2f       	mov	r24, r17
    3aa6:	1b d3       	rcall	.+1590   	; 0x40de <Endpoint_SelectEndpoint>
    3aa8:	80 91 26 23 	lds	r24, 0x2326

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3aac:	83 30       	cpi	r24, 0x03	; 3
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <USB_Device_ProcessControlRequest+0xbc>
    3ab0:	f8 c0       	rjmp	.+496    	; 0x3ca2 <USB_Device_ProcessControlRequest+0x2ac>
    3ab2:	e0 91 2f 23 	lds	r30, 0x232F
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3ab6:	f0 91 30 23 	lds	r31, 0x2330

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3aba:	81 81       	ldd	r24, Z+1	; 0x01
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    3abc:	8b 7f       	andi	r24, 0xFB	; 251
    3abe:	81 83       	std	Z+1, r24	; 0x01
    3ac0:	21 2f       	mov	r18, r17

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	84 e8       	ldi	r24, 0x84	; 132
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	28 9f       	mul	r18, r24
    3aca:	f0 01       	movw	r30, r0
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    3acc:	29 9f       	mul	r18, r25
    3ace:	f0 0d       	add	r31, r0
    3ad0:	38 9f       	mul	r19, r24
    3ad2:	f0 0d       	add	r31, r0
    3ad4:	11 24       	eor	r1, r1
    3ad6:	ed 58       	subi	r30, 0x8D	; 141
    3ad8:	fc 4d       	sbci	r31, 0xDC	; 220
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    3ada:	10 82       	st	Z, r1
    3adc:	e0 91 2f 23 	lds	r30, 0x232F
    3ae0:	f0 91 30 23 	lds	r31, 0x2330
    3ae4:	80 81       	ld	r24, Z
    3ae6:	8e 7f       	andi	r24, 0xFE	; 254
    3ae8:	80 83       	st	Z, r24
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	f8 d2       	rcall	.+1520   	; 0x40de <Endpoint_SelectEndpoint>
    3aee:	4f d3       	rcall	.+1694   	; 0x418e <Endpoint_ClearSETUP>
    3af0:	a8 d4       	rcall	.+2384   	; 0x4442 <Endpoint_ClearStatusStage>
    3af2:	b8 cf       	rjmp	.-144    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3af4:	99 23       	and	r25, r25

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    3af6:	09 f0       	breq	.+2      	; 0x3afa <USB_Device_ProcessControlRequest+0x104>
    3af8:	b5 cf       	rjmp	.-150    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3afa:	10 91 27 23 	lds	r17, 0x2327
    3afe:	1f 77       	andi	r17, 0x7F	; 127
    3b00:	46 d3       	rcall	.+1676   	; 0x418e <Endpoint_ClearSETUP>
    3b02:	9f d4       	rcall	.+2366   	; 0x4442 <Endpoint_ClearStatusStage>
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3b04:	a0 d3       	rcall	.+1856   	; 0x4246 <Endpoint_IsINReady>
    3b06:	88 23       	and	r24, r24
    3b08:	e9 f3       	breq	.-6      	; 0x3b04 <USB_Device_ProcessControlRequest+0x10e>

	Endpoint_ClearSETUP();
    3b0a:	e0 ec       	ldi	r30, 0xC0	; 192
    3b0c:	f4 e0       	ldi	r31, 0x04	; 4

	Endpoint_ClearStatusStage();
    3b0e:	13 83       	std	Z+3, r17	; 0x03
    3b10:	11 23       	and	r17, r17
    3b12:	09 f0       	breq	.+2      	; 0x3b16 <USB_Device_ProcessControlRequest+0x120>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3b14:	7a c0       	rjmp	.+244    	; 0x3c0a <USB_Device_ProcessControlRequest+0x214>
    3b16:	82 e0       	ldi	r24, 0x02	; 2
    3b18:	80 93 24 23 	sts	0x2324, r24
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3b1c:	a3 cf       	rjmp	.-186    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3b1e:	90 58       	subi	r25, 0x80	; 128

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    3b20:	92 30       	cpi	r25, 0x02	; 2
    3b22:	08 f0       	brcs	.+2      	; 0x3b26 <USB_Device_ProcessControlRequest+0x130>

	Endpoint_ClearStatusStage();
    3b24:	9f cf       	rjmp	.-194    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3b26:	80 91 27 23 	lds	r24, 0x2327

	while (!(Endpoint_IsINReady()));
    3b2a:	90 91 28 23 	lds	r25, 0x2328
    3b2e:	23 e0       	ldi	r18, 0x03	; 3
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    3b30:	8c 3d       	cpi	r24, 0xDC	; 220
    3b32:	92 07       	cpc	r25, r18
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <USB_Device_ProcessControlRequest+0x142>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3b36:	6b c0       	rjmp	.+214    	; 0x3c0e <USB_Device_ProcessControlRequest+0x218>
    3b38:	60 91 29 23 	lds	r22, 0x2329
    3b3c:	ae 01       	movw	r20, r28
    3b3e:	4f 5f       	subi	r20, 0xFF	; 255
    3b40:	5f 4f       	sbci	r21, 0xFF	; 255
    3b42:	0e 94 8a 03 	call	0x714	; 0x714 <CALLBACK_USB_GetDescriptor>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3b46:	bc 01       	movw	r22, r24
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <USB_Device_ProcessControlRequest+0x158>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3b4c:	8b cf       	rjmp	.-234    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3b4e:	8d af       	sts	0x7d, r24
    3b50:	7e af       	sts	0x7e, r23
    3b52:	1d d3       	rcall	.+1594   	; 0x418e <Endpoint_ClearSETUP>
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	9a 81       	ldd	r25, Y+2	; 0x02
    3b58:	6d ad       	sts	0x6d, r22
    3b5a:	7e ad       	sts	0x6e, r23
    3b5c:	ca d1       	rcall	.+916    	; 0x3ef2 <Endpoint_Write_Control_PStream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3b5e:	92 d2       	rcall	.+1316   	; 0x4084 <Endpoint_ClearOUT>
    3b60:	81 cf       	rjmp	.-254    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3b62:	90 38       	cpi	r25, 0x80	; 128
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <USB_Device_ProcessControlRequest+0x172>
    3b66:	48 c0       	rjmp	.+144    	; 0x3bf8 <USB_Device_ProcessControlRequest+0x202>
    3b68:	92 38       	cpi	r25, 0x82	; 130
    3b6a:	09 f0       	breq	.+2      	; 0x3b6e <USB_Device_ProcessControlRequest+0x178>
    3b6c:	7b cf       	rjmp	.-266    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3b6e:	80 91 29 23 	lds	r24, 0x2329
    3b72:	8f 70       	andi	r24, 0x0F	; 15
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    3b74:	b4 d2       	rcall	.+1384   	; 0x40de <Endpoint_SelectEndpoint>
    3b76:	e0 91 2f 23 	lds	r30, 0x232F
    3b7a:	f0 91 30 23 	lds	r31, 0x2330
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3b7e:	81 81       	ldd	r24, Z+1	; 0x01
    3b80:	11 e0       	ldi	r17, 0x01	; 1
    3b82:	82 ff       	sbrs	r24, 2
    3b84:	10 e0       	ldi	r17, 0x00	; 0
    3b86:	80 e0       	ldi	r24, 0x00	; 0
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    3b88:	aa d2       	rcall	.+1364   	; 0x40de <Endpoint_SelectEndpoint>
    3b8a:	01 d3       	rcall	.+1538   	; 0x418e <Endpoint_ClearSETUP>
    3b8c:	81 2f       	mov	r24, r17
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3b8e:	98 d2       	rcall	.+1328   	; 0x40c0 <Endpoint_Write_8>
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	96 d2       	rcall	.+1324   	; 0x40c0 <Endpoint_Write_8>
    3b94:	5e d2       	rcall	.+1212   	; 0x4052 <Endpoint_ClearIN>
    3b96:	55 d4       	rcall	.+2218   	; 0x4442 <Endpoint_ClearStatusStage>
    3b98:	65 cf       	rjmp	.-310    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3b9a:	99 23       	and	r25, r25
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <USB_Device_ProcessControlRequest+0x1aa>
    3b9e:	62 cf       	rjmp	.-316    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3ba0:	80 91 27 23 	lds	r24, 0x2327
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    3ba4:	82 30       	cpi	r24, 0x02	; 2
    3ba6:	08 f0       	brcs	.+2      	; 0x3baa <USB_Device_ProcessControlRequest+0x1b4>
    3ba8:	5d cf       	rjmp	.-326    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3baa:	f1 d2       	rcall	.+1506   	; 0x418e <Endpoint_ClearSETUP>
    3bac:	80 91 27 23 	lds	r24, 0x2327

			CurrentStatus = Endpoint_IsStalled();
    3bb0:	80 93 20 23 	sts	0x2320, r24

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3bb4:	46 d4       	rcall	.+2188   	; 0x4442 <Endpoint_ClearStatusStage>
    3bb6:	80 91 20 23 	lds	r24, 0x2320
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    3bba:	88 23       	and	r24, r24
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <USB_Device_ProcessControlRequest+0x1ca>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    3bbe:	67 c0       	rjmp	.+206    	; 0x3c8e <USB_Device_ProcessControlRequest+0x298>
    3bc0:	84 e0       	ldi	r24, 0x04	; 4
    3bc2:	80 93 24 23 	sts	0x2324, r24
				Endpoint_Write_8(Data >> 8);
    3bc6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <EVENT_USB_Device_ConfigurationChanged>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    3bca:	4c cf       	rjmp	.-360    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3bcc:	90 38       	cpi	r25, 0x80	; 128

	Endpoint_ClearStatusStage();
    3bce:	09 f0       	breq	.+2      	; 0x3bd2 <USB_Device_ProcessControlRequest+0x1dc>
    3bd0:	49 cf       	rjmp	.-366    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3bd2:	dd d2       	rcall	.+1466   	; 0x418e <Endpoint_ClearSETUP>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3bd4:	80 91 20 23 	lds	r24, 0x2320
    3bd8:	73 d2       	rcall	.+1254   	; 0x40c0 <Endpoint_Write_8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3bda:	3b d2       	rcall	.+1142   	; 0x4052 <Endpoint_ClearIN>
    3bdc:	32 d4       	rcall	.+2148   	; 0x4442 <Endpoint_ClearStatusStage>
    3bde:	42 cf       	rjmp	.-380    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3be0:	90 91 27 23 	lds	r25, 0x2327
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    3be4:	91 30       	cpi	r25, 0x01	; 1
    3be6:	09 f0       	breq	.+2      	; 0x3bea <USB_Device_ProcessControlRequest+0x1f4>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3be8:	3d cf       	rjmp	.-390    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3bea:	91 e0       	ldi	r25, 0x01	; 1
    3bec:	83 30       	cpi	r24, 0x03	; 3
    3bee:	09 f0       	breq	.+2      	; 0x3bf2 <USB_Device_ProcessControlRequest+0x1fc>

	Endpoint_ClearStatusStage();
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	90 93 22 23 	sts	0x2322, r25

	if (USB_Device_ConfigurationNumber)
    3bf6:	79 cf       	rjmp	.-270    	; 0x3aea <USB_Device_ProcessControlRequest+0xf4>
    3bf8:	10 91 21 23 	lds	r17, 0x2321
    3bfc:	80 91 22 23 	lds	r24, 0x2322
	  USB_DeviceState = DEVICE_STATE_Configured;
    3c00:	88 23       	and	r24, r24
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <USB_Device_ProcessControlRequest+0x210>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;

	EVENT_USB_Device_ConfigurationChanged();
    3c04:	c2 cf       	rjmp	.-124    	; 0x3b8a <USB_Device_ProcessControlRequest+0x194>
    3c06:	12 60       	ori	r17, 0x02	; 2
    3c08:	c0 cf       	rjmp	.-128    	; 0x3b8a <USB_Device_ProcessControlRequest+0x194>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3c0a:	83 e0       	ldi	r24, 0x03	; 3
    3c0c:	85 cf       	rjmp	.-246    	; 0x3b18 <USB_Device_ProcessControlRequest+0x122>
    3c0e:	83 e0       	ldi	r24, 0x03	; 3
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    3c10:	8c 83       	std	Y+4, r24	; 0x04
    3c12:	8a e3       	ldi	r24, 0x3A	; 58

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3c14:	8b 83       	std	Y+3, r24	; 0x03
    3c16:	6f b7       	in	r22, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	a0 ec       	ldi	r26, 0xC0	; 192
	Endpoint_ClearIN();
    3c1c:	b1 e0       	ldi	r27, 0x01	; 1
    3c1e:	82 e0       	ldi	r24, 0x02	; 2

	Endpoint_ClearStatusStage();
    3c20:	1a 96       	adiw	r26, 0x0a	; 10
    3c22:	8c 93       	st	X, r24
    3c24:	1a 97       	sbiw	r26, 0x0a	; 10
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3c26:	e8 e0       	ldi	r30, 0x08	; 8
    3c28:	f0 e0       	ldi	r31, 0x00	; 0
    3c2a:	24 91       	lpm	r18, Z
    3c2c:	1a 96       	adiw	r26, 0x0a	; 10
    3c2e:	1c 92       	st	X, r1
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3c30:	de 01       	movw	r26, r28
    3c32:	15 96       	adiw	r26, 0x05	; 5
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	78 e0       	ldi	r23, 0x08	; 8
    3c3a:	40 ec       	ldi	r20, 0xC0	; 192
    3c3c:	51 e0       	ldi	r21, 0x01	; 1
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3c3e:	12 e0       	ldi	r17, 0x02	; 2
    3c40:	e2 2f       	mov	r30, r18
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3c42:	ef 70       	andi	r30, 0x0F	; 15
    3c44:	2e 2f       	mov	r18, r30
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	ea 30       	cpi	r30, 0x0A	; 10
    3c4a:	a8 f0       	brcs	.+42     	; 0x3c76 <USB_Device_ProcessControlRequest+0x280>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3c4c:	29 5c       	subi	r18, 0xC9	; 201
    3c4e:	3f 4f       	sbci	r19, 0xFF	; 255

	while (!(Endpoint_IsINReady()));

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3c50:	2d 93       	st	X+, r18
    3c52:	3d 93       	st	X+, r19
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3c54:	8c 31       	cpi	r24, 0x1C	; 28
    3c56:	91 05       	cpc	r25, r1
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3c58:	89 f0       	breq	.+34     	; 0x3c7c <USB_Device_ProcessControlRequest+0x286>
    3c5a:	fa 01       	movw	r30, r20
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    3c5c:	12 87       	std	Z+10, r17	; 0x0a
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    3c5e:	e7 2f       	mov	r30, r23

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    3c60:	f0 e0       	ldi	r31, 0x00	; 0
    3c62:	24 91       	lpm	r18, Z
    3c64:	fa 01       	movw	r30, r20
    3c66:	12 86       	std	Z+10, r1	; 0x0a
    3c68:	80 ff       	sbrs	r24, 0
    3c6a:	03 c0       	rjmp	.+6      	; 0x3c72 <USB_Device_ProcessControlRequest+0x27c>
					SerialByte = pgm_read_byte(SigReadAddress);
    3c6c:	22 95       	swap	r18
    3c6e:	2f 70       	andi	r18, 0x0F	; 15
    3c70:	7f 5f       	subi	r23, 0xFF	; 255
					NVM.CMD    = 0;
    3c72:	01 96       	adiw	r24, 0x01	; 1
    3c74:	e5 cf       	rjmp	.-54     	; 0x3c40 <USB_Device_ProcessControlRequest+0x24a>

#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
    3c76:	20 5d       	subi	r18, 0xD0	; 208
    3c78:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7a:	ea cf       	rjmp	.-44     	; 0x3c50 <USB_Device_ProcessControlRequest+0x25a>
    3c7c:	6f bf       	out	0x3f, r22	; 63
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3c7e:	87 d2       	rcall	.+1294   	; 0x418e <Endpoint_ClearSETUP>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    3c80:	ce 01       	movw	r24, r28
    3c82:	03 96       	adiw	r24, 0x03	; 3
    3c84:	6a e3       	ldi	r22, 0x3A	; 58
					{
						SerialByte >>= 4;
						SigReadAddress++;
					}

					SerialByte &= 0x0F;
    3c86:	70 e0       	ldi	r23, 0x00	; 0
    3c88:	8f d0       	rcall	.+286    	; 0x3da8 <Endpoint_Write_Control_Stream_LE>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3c8a:	fc d1       	rcall	.+1016   	; 0x4084 <Endpoint_ClearOUT>
    3c8c:	eb ce       	rjmp	.-554    	; 0x3a64 <USB_Device_ProcessControlRequest+0x6e>
    3c8e:	80 91 c3 04 	lds	r24, 0x04C3
    3c92:	88 23       	and	r24, r24
    3c94:	21 f0       	breq	.+8      	; 0x3c9e <USB_Device_ProcessControlRequest+0x2a8>
    3c96:	84 e0       	ldi	r24, 0x04	; 4
    3c98:	80 93 24 23 	sts	0x2324, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3c9c:	94 cf       	rjmp	.-216    	; 0x3bc6 <USB_Device_ProcessControlRequest+0x1d0>
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    3ca0:	fb cf       	rjmp	.-10     	; 0x3c98 <USB_Device_ProcessControlRequest+0x2a2>
    3ca2:	59 d2       	rcall	.+1202   	; 0x4156 <Endpoint_StallTransaction>
					SerialByte = pgm_read_byte(SigReadAddress);
    3ca4:	22 cf       	rjmp	.-444    	; 0x3aea <USB_Device_ProcessControlRequest+0xf4>

00003ca6 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    3ca6:	08 95       	ret

00003ca8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3ca8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3caa:	80 91 24 23 	lds	r24, 0x2324
    3cae:	88 23       	and	r24, r24
    3cb0:	11 f4       	brne	.+4      	; 0x3cb6 <USB_USBTask+0xe>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3cb2:	cf 91       	pop	r28
    3cb4:	08 95       	ret
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    3cb6:	c0 91 31 23 	lds	r28, 0x2331
	if (USB_DeviceState == DEVICE_STATE_Unattached)
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	10 d2       	rcall	.+1056   	; 0x40de <Endpoint_SelectEndpoint>
    3cbe:	93 d2       	rcall	.+1318   	; 0x41e6 <Endpoint_IsSETUPReceived>

	if (Endpoint_IsSETUPReceived())
    3cc0:	88 23       	and	r24, r24
    3cc2:	21 f4       	brne	.+8      	; 0x3ccc <USB_USBTask+0x24>
    3cc4:	8c 2f       	mov	r24, r28
    3cc6:	0b d2       	rcall	.+1046   	; 0x40de <Endpoint_SelectEndpoint>
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    3cc8:	cf 91       	pop	r28
    3cca:	08 95       	ret
    3ccc:	94 de       	rcall	.-728    	; 0x39f6 <USB_Device_ProcessControlRequest>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3cce:	fa cf       	rjmp	.-12     	; 0x3cc4 <USB_USBTask+0x1c>

00003cd0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3cd0:	af 92       	push	r10
    3cd2:	bf 92       	push	r11
    3cd4:	cf 92       	push	r12
    3cd6:	df 92       	push	r13
    3cd8:	ff 92       	push	r15
    3cda:	0f 93       	push	r16
    3cdc:	1f 93       	push	r17
    3cde:	cf 93       	push	r28
    3ce0:	df 93       	push	r29
    3ce2:	ec 01       	movw	r28, r24
    3ce4:	8b 01       	movw	r16, r22
    3ce6:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3ce8:	c2 d3       	rcall	.+1924   	; 0x446e <Endpoint_WaitUntilReady>
    3cea:	f8 2e       	mov	r15, r24
    3cec:	88 23       	and	r24, r24
    3cee:	61 f5       	brne	.+88     	; 0x3d48 <Endpoint_Write_Stream_LE+0x78>
    3cf0:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3cf2:	d1 04       	cpc	r13, r1
    3cf4:	39 f0       	breq	.+14     	; 0x3d04 <Endpoint_Write_Stream_LE+0x34>
    3cf6:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
    3cf8:	80 81       	ld	r24, Z
    3cfa:	91 81       	ldd	r25, Z+1	; 0x01
    3cfc:	08 1b       	sub	r16, r24
    3cfe:	19 0b       	sbc	r17, r25
    3d00:	c8 0f       	add	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3d02:	d9 1f       	adc	r29, r25
    3d04:	01 15       	cp	r16, r1
	}

	while (Length)
    3d06:	11 05       	cpc	r17, r1
    3d08:	f9 f0       	breq	.+62     	; 0x3d48 <Endpoint_Write_Stream_LE+0x78>
    3d0a:	c1 14       	cp	r12, r1
    3d0c:	d1 04       	cpc	r13, r1
    3d0e:	41 f0       	breq	.+16     	; 0x3d20 <Endpoint_Write_Stream_LE+0x50>
    3d10:	26 c0       	rjmp	.+76     	; 0x3d5e <Endpoint_Write_Stream_LE+0x8e>
    3d12:	89 91       	ld	r24, Y+
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3d14:	d5 d1       	rcall	.+938    	; 0x40c0 <Endpoint_Write_8>
    3d16:	01 50       	subi	r16, 0x01	; 1
    3d18:	10 40       	sbci	r17, 0x00	; 0
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3d1a:	01 15       	cp	r16, r1
    3d1c:	11 05       	cpc	r17, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3d1e:	a1 f0       	breq	.+40     	; 0x3d48 <Endpoint_Write_Stream_LE+0x78>
    3d20:	80 91 2d 23 	lds	r24, 0x232D
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    3d24:	90 91 2e 23 	lds	r25, 0x232E
    3d28:	fc 01       	movw	r30, r24
    3d2a:	ef 5b       	subi	r30, 0xBF	; 191
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	20 81       	ld	r18, Z
    3d30:	80 5c       	subi	r24, 0xC0	; 192
    3d32:	9f 4f       	sbci	r25, 0xFF	; 255
    3d34:	fc 01       	movw	r30, r24
    3d36:	80 81       	ld	r24, Z
    3d38:	28 17       	cp	r18, r24
    3d3a:	58 f3       	brcs	.-42     	; 0x3d12 <Endpoint_Write_Stream_LE+0x42>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3d3c:	8a d1       	rcall	.+788    	; 0x4052 <Endpoint_ClearIN>
    3d3e:	b4 df       	rcall	.-152    	; 0x3ca8 <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();
    3d40:	96 d3       	rcall	.+1836   	; 0x446e <Endpoint_WaitUntilReady>
    3d42:	88 23       	and	r24, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    3d44:	51 f3       	breq	.-44     	; 0x3d1a <Endpoint_Write_Stream_LE+0x4a>
    3d46:	f8 2e       	mov	r15, r24
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3d48:	8f 2d       	mov	r24, r15
    3d4a:	df 91       	pop	r29
    3d4c:	cf 91       	pop	r28
    3d4e:	1f 91       	pop	r17
    3d50:	0f 91       	pop	r16
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3d52:	ff 90       	pop	r15
    3d54:	df 90       	pop	r13
    3d56:	cf 90       	pop	r12
    3d58:	bf 90       	pop	r11
    3d5a:	af 90       	pop	r10
    3d5c:	08 95       	ret
    3d5e:	aa 24       	eor	r10, r10
    3d60:	bb 24       	eor	r11, r11
    3d62:	80 91 2d 23 	lds	r24, 0x232D
    3d66:	90 91 2e 23 	lds	r25, 0x232E
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	ef 5b       	subi	r30, 0xBF	; 191
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	20 81       	ld	r18, Z
    3d72:	fc 01       	movw	r30, r24
    3d74:	e0 5c       	subi	r30, 0xC0	; 192
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	28 17       	cp	r18, r24
    3d7c:	60 f0       	brcs	.+24     	; 0x3d96 <Endpoint_Write_Stream_LE+0xc6>
    3d7e:	69 d1       	rcall	.+722    	; 0x4052 <Endpoint_ClearIN>
    3d80:	93 df       	rcall	.-218    	; 0x3ca8 <USB_USBTask>
    3d82:	f6 01       	movw	r30, r12
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3d84:	80 81       	ld	r24, Z
    3d86:	91 81       	ldd	r25, Z+1	; 0x01
		{
			TEMPLATE_CLEAR_ENDPOINT();
    3d88:	8a 0d       	add	r24, r10
    3d8a:	9b 1d       	adc	r25, r11

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    3d8c:	80 83       	st	Z, r24
    3d8e:	91 83       	std	Z+1, r25	; 0x01
			#endif

			if (BytesProcessed != NULL)
			{
				*BytesProcessed += BytesInTransfer;
    3d90:	25 e0       	ldi	r18, 0x05	; 5
    3d92:	f2 2e       	mov	r15, r18
    3d94:	d9 cf       	rjmp	.-78     	; 0x3d48 <Endpoint_Write_Stream_LE+0x78>
    3d96:	89 91       	ld	r24, Y+
    3d98:	93 d1       	rcall	.+806    	; 0x40c0 <Endpoint_Write_8>
    3d9a:	08 94       	sec
    3d9c:	a1 1c       	adc	r10, r1
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    3d9e:	b1 1c       	adc	r11, r1
    3da0:	0a 15       	cp	r16, r10
    3da2:	1b 05       	cpc	r17, r11
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3da4:	f1 f6       	brne	.-68     	; 0x3d62 <Endpoint_Write_Stream_LE+0x92>
    3da6:	d0 cf       	rjmp	.-96     	; 0x3d48 <Endpoint_Write_Stream_LE+0x78>

00003da8 <Endpoint_Write_Control_Stream_LE>:
    3da8:	cf 92       	push	r12
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
			BytesInTransfer++;
    3daa:	df 92       	push	r13
    3dac:	ef 92       	push	r14
    3dae:	ff 92       	push	r15
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3db0:	0f 93       	push	r16
    3db2:	1f 93       	push	r17
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3db8:	d8 2e       	mov	r13, r24
    3dba:	c9 2e       	mov	r12, r25
    3dbc:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    3dbe:	80 91 31 23 	lds	r24, 0x2331
    3dc2:	80 68       	ori	r24, 0x80	; 128
    3dc4:	8c d1       	rcall	.+792    	; 0x40de <Endpoint_SelectEndpoint>
    3dc6:	e0 90 2b 23 	lds	r14, 0x232B

	if (Length > USB_ControlRequest.wLength)
    3dca:	f0 90 2c 23 	lds	r15, 0x232C
    3dce:	ec 16       	cp	r14, r28
    3dd0:	fd 06       	cpc	r15, r29
    3dd2:	20 f0       	brcs	.+8      	; 0x3ddc <Endpoint_Write_Control_Stream_LE+0x34>
    3dd4:	20 97       	sbiw	r28, 0x00	; 0
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3dd6:	09 f4       	brne	.+2      	; 0x3dda <Endpoint_Write_Control_Stream_LE+0x32>
    3dd8:	86 c0       	rjmp	.+268    	; 0x3ee6 <Endpoint_Write_Control_Stream_LE+0x13e>
    3dda:	7e 01       	movw	r14, r28
    3ddc:	00 e0       	ldi	r16, 0x00	; 0
    3dde:	e1 14       	cp	r14, r1
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
    3de0:	f1 04       	cpc	r15, r1
    3de2:	09 f0       	breq	.+2      	; 0x3de6 <Endpoint_Write_Control_Stream_LE+0x3e>
    3de4:	4c c0       	rjmp	.+152    	; 0x3e7e <Endpoint_Write_Control_Stream_LE+0xd6>
    3de6:	00 23       	and	r16, r16
    3de8:	09 f4       	brne	.+2      	; 0x3dec <Endpoint_Write_Control_Stream_LE+0x44>
    3dea:	5f c0       	rjmp	.+190    	; 0x3eaa <Endpoint_Write_Control_Stream_LE+0x102>
    3dec:	80 91 24 23 	lds	r24, 0x2324
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3df0:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <Endpoint_Write_Control_Stream_LE+0x4e>
    3df4:	58 c0       	rjmp	.+176    	; 0x3ea6 <Endpoint_Write_Control_Stream_LE+0xfe>
    3df6:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3df8:	09 f4       	brne	.+2      	; 0x3dfc <Endpoint_Write_Control_Stream_LE+0x54>
    3dfa:	60 c0       	rjmp	.+192    	; 0x3ebc <Endpoint_Write_Control_Stream_LE+0x114>
    3dfc:	f4 d1       	rcall	.+1000   	; 0x41e6 <Endpoint_IsSETUPReceived>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3dfe:	88 23       	and	r24, r24
    3e00:	09 f0       	breq	.+2      	; 0x3e04 <Endpoint_Write_Control_Stream_LE+0x5c>
    3e02:	6f c0       	rjmp	.+222    	; 0x3ee2 <Endpoint_Write_Control_Stream_LE+0x13a>
    3e04:	08 d2       	rcall	.+1040   	; 0x4216 <Endpoint_IsOUTReceived>
    3e06:	88 23       	and	r24, r24
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3e08:	09 f0       	breq	.+2      	; 0x3e0c <Endpoint_Write_Control_Stream_LE+0x64>
    3e0a:	4f c0       	rjmp	.+158    	; 0x3eaa <Endpoint_Write_Control_Stream_LE+0x102>
    3e0c:	1c d2       	rcall	.+1080   	; 0x4246 <Endpoint_IsINReady>
    3e0e:	88 23       	and	r24, r24
    3e10:	69 f3       	breq	.-38     	; 0x3dec <Endpoint_Write_Control_Stream_LE+0x44>
		  break;

		if (Endpoint_IsINReady())
    3e12:	80 91 31 23 	lds	r24, 0x2331
    3e16:	87 fd       	sbrc	r24, 7
    3e18:	5b c0       	rjmp	.+182    	; 0x3ed0 <Endpoint_Write_Control_Stream_LE+0x128>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    3e1a:	80 91 2d 23 	lds	r24, 0x232D
    3e1e:	90 91 2e 23 	lds	r25, 0x232E
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    3e22:	fc 01       	movw	r30, r24
    3e24:	e0 5c       	subi	r30, 0xC0	; 192
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	c0 81       	ld	r28, Z
    3e2a:	8f 5b       	subi	r24, 0xBF	; 191
    3e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2e:	fc 01       	movw	r30, r24
    3e30:	80 81       	ld	r24, Z
    3e32:	d0 e0       	ldi	r29, 0x00	; 0
    3e34:	c8 1b       	sub	r28, r24
    3e36:	d1 09       	sbc	r29, r1
    3e38:	e1 14       	cp	r14, r1
    3e3a:	f1 04       	cpc	r15, r1
    3e3c:	b1 f0       	breq	.+44     	; 0x3e6a <Endpoint_Write_Control_Stream_LE+0xc2>
    3e3e:	c8 30       	cpi	r28, 0x08	; 8
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3e40:	d1 05       	cpc	r29, r1
    3e42:	98 f4       	brcc	.+38     	; 0x3e6a <Endpoint_Write_Control_Stream_LE+0xc2>
    3e44:	0d 2d       	mov	r16, r13
    3e46:	1c 2d       	mov	r17, r12
    3e48:	03 c0       	rjmp	.+6      	; 0x3e50 <Endpoint_Write_Control_Stream_LE+0xa8>
    3e4a:	c8 30       	cpi	r28, 0x08	; 8
    3e4c:	d1 05       	cpc	r29, r1
    3e4e:	69 f0       	breq	.+26     	; 0x3e6a <Endpoint_Write_Control_Stream_LE+0xc2>
    3e50:	f8 01       	movw	r30, r16
    3e52:	81 91       	ld	r24, Z+
    3e54:	8f 01       	movw	r16, r30
    3e56:	34 d1       	rcall	.+616    	; 0x40c0 <Endpoint_Write_8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3e58:	d0 2e       	mov	r13, r16
    3e5a:	c1 2e       	mov	r12, r17
    3e5c:	08 94       	sec
    3e5e:	e1 08       	sbc	r14, r1
    3e60:	f1 08       	sbc	r15, r1
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3e62:	21 96       	adiw	r28, 0x01	; 1
    3e64:	e1 14       	cp	r14, r1
				Length--;
    3e66:	f1 04       	cpc	r15, r1
    3e68:	81 f7       	brne	.-32     	; 0x3e4a <Endpoint_Write_Control_Stream_LE+0xa2>
    3e6a:	01 e0       	ldi	r16, 0x01	; 1
				BytesInEndpoint++;
    3e6c:	c8 30       	cpi	r28, 0x08	; 8

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3e6e:	d1 05       	cpc	r29, r1
    3e70:	09 f0       	breq	.+2      	; 0x3e74 <Endpoint_Write_Control_Stream_LE+0xcc>
    3e72:	00 e0       	ldi	r16, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3e74:	ee d0       	rcall	.+476    	; 0x4052 <Endpoint_ClearIN>
    3e76:	e1 14       	cp	r14, r1
    3e78:	f1 04       	cpc	r15, r1
    3e7a:	09 f4       	brne	.+2      	; 0x3e7e <Endpoint_Write_Control_Stream_LE+0xd6>
    3e7c:	b4 cf       	rjmp	.-152    	; 0x3de6 <Endpoint_Write_Control_Stream_LE+0x3e>
			Endpoint_ClearIN();
    3e7e:	80 91 24 23 	lds	r24, 0x2324
    3e82:	88 23       	and	r24, r24
    3e84:	81 f0       	breq	.+32     	; 0x3ea6 <Endpoint_Write_Control_Stream_LE+0xfe>
    3e86:	85 30       	cpi	r24, 0x05	; 5
    3e88:	c9 f0       	breq	.+50     	; 0x3ebc <Endpoint_Write_Control_Stream_LE+0x114>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3e8a:	ad d1       	rcall	.+858    	; 0x41e6 <Endpoint_IsSETUPReceived>
    3e8c:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3e8e:	49 f5       	brne	.+82     	; 0x3ee2 <Endpoint_Write_Control_Stream_LE+0x13a>
    3e90:	c2 d1       	rcall	.+900    	; 0x4216 <Endpoint_IsOUTReceived>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3e92:	88 23       	and	r24, r24
    3e94:	51 f4       	brne	.+20     	; 0x3eaa <Endpoint_Write_Control_Stream_LE+0x102>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3e96:	d7 d1       	rcall	.+942    	; 0x4246 <Endpoint_IsINReady>
    3e98:	88 23       	and	r24, r24
    3e9a:	09 f0       	breq	.+2      	; 0x3e9e <Endpoint_Write_Control_Stream_LE+0xf6>
    3e9c:	ba cf       	rjmp	.-140    	; 0x3e12 <Endpoint_Write_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3e9e:	80 91 24 23 	lds	r24, 0x2324
    3ea2:	88 23       	and	r24, r24
    3ea4:	81 f7       	brne	.-32     	; 0x3e86 <Endpoint_Write_Control_Stream_LE+0xde>
		  break;

		if (Endpoint_IsINReady())
    3ea6:	82 e0       	ldi	r24, 0x02	; 2
    3ea8:	0a c0       	rjmp	.+20     	; 0x3ebe <Endpoint_Write_Control_Stream_LE+0x116>
    3eaa:	b5 d1       	rcall	.+874    	; 0x4216 <Endpoint_IsOUTReceived>
    3eac:	88 23       	and	r24, r24
    3eae:	f9 f4       	brne	.+62     	; 0x3eee <Endpoint_Write_Control_Stream_LE+0x146>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3eb0:	80 91 24 23 	lds	r24, 0x2324

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3eb4:	88 23       	and	r24, r24
    3eb6:	b9 f3       	breq	.-18     	; 0x3ea6 <Endpoint_Write_Control_Stream_LE+0xfe>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3eb8:	85 30       	cpi	r24, 0x05	; 5
    3eba:	b9 f7       	brne	.-18     	; 0x3eaa <Endpoint_Write_Control_Stream_LE+0x102>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3ebc:	83 e0       	ldi	r24, 0x03	; 3
    3ebe:	df 91       	pop	r29
    3ec0:	cf 91       	pop	r28
    3ec2:	1f 91       	pop	r17
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3ec4:	0f 91       	pop	r16
    3ec6:	ff 90       	pop	r15

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3ec8:	ef 90       	pop	r14
    3eca:	df 90       	pop	r13
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3ecc:	cf 90       	pop	r12
    3ece:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3ed0:	e0 91 2d 23 	lds	r30, 0x232D
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3ed4:	f0 91 2e 23 	lds	r31, 0x232E
    3ed8:	ef 5b       	subi	r30, 0xBF	; 191
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	c0 81       	ld	r28, Z
    3ede:	d0 e0       	ldi	r29, 0x00	; 0
    3ee0:	ab cf       	rjmp	.-170    	; 0x3e38 <Endpoint_Write_Control_Stream_LE+0x90>
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    3ee4:	ec cf       	rjmp	.-40     	; 0x3ebe <Endpoint_Write_Control_Stream_LE+0x116>
    3ee6:	b5 d0       	rcall	.+362    	; 0x4052 <Endpoint_ClearIN>
    3ee8:	ee 24       	eor	r14, r14
    3eea:	ff 24       	eor	r15, r15
    3eec:	77 cf       	rjmp	.-274    	; 0x3ddc <Endpoint_Write_Control_Stream_LE+0x34>
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	e6 cf       	rjmp	.-52     	; 0x3ebe <Endpoint_Write_Control_Stream_LE+0x116>

00003ef2 <Endpoint_Write_Control_PStream_LE>:
    3ef2:	cf 92       	push	r12
    3ef4:	df 92       	push	r13
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3ef6:	ef 92       	push	r14
    3ef8:	ff 92       	push	r15
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();
    3efa:	0f 93       	push	r16
    3efc:	1f 93       	push	r17
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	0f 92       	push	r0
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3f04:	cd b7       	in	r28, 0x3d	; 61
    3f06:	de b7       	in	r29, 0x3e	; 62

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3f08:	d8 2e       	mov	r13, r24
    3f0a:	c9 2e       	mov	r12, r25
    3f0c:	7b 01       	movw	r14, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    3f0e:	80 91 31 23 	lds	r24, 0x2331
    3f12:	80 68       	ori	r24, 0x80	; 128
    3f14:	e4 d0       	rcall	.+456    	; 0x40de <Endpoint_SelectEndpoint>
    3f16:	00 91 2b 23 	lds	r16, 0x232B

	if (Length > USB_ControlRequest.wLength)
    3f1a:	10 91 2c 23 	lds	r17, 0x232C
    3f1e:	0e 15       	cp	r16, r14
    3f20:	1f 05       	cpc	r17, r15
    3f22:	28 f0       	brcs	.+10     	; 0x3f2e <Endpoint_Write_Control_PStream_LE+0x3c>
    3f24:	e1 14       	cp	r14, r1
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3f26:	f1 04       	cpc	r15, r1
    3f28:	09 f4       	brne	.+2      	; 0x3f2c <Endpoint_Write_Control_PStream_LE+0x3a>
    3f2a:	8d c0       	rjmp	.+282    	; 0x4046 <Endpoint_Write_Control_PStream_LE+0x154>
    3f2c:	87 01       	movw	r16, r14
    3f2e:	ed 2c       	mov	r14, r13
    3f30:	fc 2c       	mov	r15, r12
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	01 15       	cp	r16, r1
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
    3f36:	11 05       	cpc	r17, r1
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <Endpoint_Write_Control_PStream_LE+0x4a>
    3f3a:	50 c0       	rjmp	.+160    	; 0x3fdc <Endpoint_Write_Control_PStream_LE+0xea>
    3f3c:	88 23       	and	r24, r24
    3f3e:	09 f4       	brne	.+2      	; 0x3f42 <Endpoint_Write_Control_PStream_LE+0x50>
    3f40:	63 c0       	rjmp	.+198    	; 0x4008 <Endpoint_Write_Control_PStream_LE+0x116>
    3f42:	80 91 24 23 	lds	r24, 0x2324
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3f46:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3f48:	09 f4       	brne	.+2      	; 0x3f4c <Endpoint_Write_Control_PStream_LE+0x5a>
    3f4a:	5c c0       	rjmp	.+184    	; 0x4004 <Endpoint_Write_Control_PStream_LE+0x112>
    3f4c:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <Endpoint_Write_Control_PStream_LE+0x60>
    3f50:	64 c0       	rjmp	.+200    	; 0x401a <Endpoint_Write_Control_PStream_LE+0x128>
    3f52:	49 d1       	rcall	.+658    	; 0x41e6 <Endpoint_IsSETUPReceived>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3f54:	88 23       	and	r24, r24
    3f56:	09 f0       	breq	.+2      	; 0x3f5a <Endpoint_Write_Control_PStream_LE+0x68>
    3f58:	74 c0       	rjmp	.+232    	; 0x4042 <Endpoint_Write_Control_PStream_LE+0x150>
    3f5a:	5d d1       	rcall	.+698    	; 0x4216 <Endpoint_IsOUTReceived>
    3f5c:	88 23       	and	r24, r24
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3f5e:	09 f0       	breq	.+2      	; 0x3f62 <Endpoint_Write_Control_PStream_LE+0x70>
    3f60:	53 c0       	rjmp	.+166    	; 0x4008 <Endpoint_Write_Control_PStream_LE+0x116>
    3f62:	71 d1       	rcall	.+738    	; 0x4246 <Endpoint_IsINReady>
    3f64:	88 23       	and	r24, r24
    3f66:	69 f3       	breq	.-38     	; 0x3f42 <Endpoint_Write_Control_PStream_LE+0x50>
		  break;

		if (Endpoint_IsINReady())
    3f68:	80 91 31 23 	lds	r24, 0x2331
    3f6c:	87 fd       	sbrc	r24, 7
    3f6e:	60 c0       	rjmp	.+192    	; 0x4030 <Endpoint_Write_Control_PStream_LE+0x13e>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    3f70:	80 91 2d 23 	lds	r24, 0x232D
    3f74:	90 91 2e 23 	lds	r25, 0x232E
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    3f78:	fc 01       	movw	r30, r24
    3f7a:	e0 5c       	subi	r30, 0xC0	; 192
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	c0 80       	ld	r12, Z
    3f80:	8f 5b       	subi	r24, 0xBF	; 191
    3f82:	9f 4f       	sbci	r25, 0xFF	; 255
    3f84:	fc 01       	movw	r30, r24
    3f86:	80 81       	ld	r24, Z
    3f88:	dd 24       	eor	r13, r13
    3f8a:	c8 1a       	sub	r12, r24
    3f8c:	d1 08       	sbc	r13, r1
    3f8e:	01 15       	cp	r16, r1
    3f90:	11 05       	cpc	r17, r1
    3f92:	b9 f0       	breq	.+46     	; 0x3fc2 <Endpoint_Write_Control_PStream_LE+0xd0>
    3f94:	88 e0       	ldi	r24, 0x08	; 8
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3f96:	c8 16       	cp	r12, r24
    3f98:	d1 04       	cpc	r13, r1
    3f9a:	28 f0       	brcs	.+10     	; 0x3fa6 <Endpoint_Write_Control_PStream_LE+0xb4>
    3f9c:	12 c0       	rjmp	.+36     	; 0x3fc2 <Endpoint_Write_Control_PStream_LE+0xd0>
    3f9e:	f8 e0       	ldi	r31, 0x08	; 8
    3fa0:	cf 16       	cp	r12, r31
    3fa2:	d1 04       	cpc	r13, r1
    3fa4:	71 f0       	breq	.+28     	; 0x3fc2 <Endpoint_Write_Control_PStream_LE+0xd0>
    3fa6:	f7 01       	movw	r30, r14
    3fa8:	84 91       	lpm	r24, Z
    3faa:	8a d0       	rcall	.+276    	; 0x40c0 <Endpoint_Write_8>
    3fac:	08 94       	sec
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3fae:	e1 1c       	adc	r14, r1
    3fb0:	f1 1c       	adc	r15, r1
    3fb2:	01 50       	subi	r16, 0x01	; 1
    3fb4:	10 40       	sbci	r17, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3fb6:	08 94       	sec
    3fb8:	c1 1c       	adc	r12, r1
    3fba:	d1 1c       	adc	r13, r1
				Length--;
    3fbc:	01 15       	cp	r16, r1
    3fbe:	11 05       	cpc	r17, r1
				BytesInEndpoint++;
    3fc0:	71 f7       	brne	.-36     	; 0x3f9e <Endpoint_Write_Control_PStream_LE+0xac>
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	98 e0       	ldi	r25, 0x08	; 8

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3fc6:	c9 16       	cp	r12, r25
    3fc8:	d1 04       	cpc	r13, r1
    3fca:	09 f0       	breq	.+2      	; 0x3fce <Endpoint_Write_Control_PStream_LE+0xdc>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	89 83       	std	Y+1, r24	; 0x01
    3fd0:	40 d0       	rcall	.+128    	; 0x4052 <Endpoint_ClearIN>
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	01 15       	cp	r16, r1
    3fd6:	11 05       	cpc	r17, r1
			Endpoint_ClearIN();
    3fd8:	09 f4       	brne	.+2      	; 0x3fdc <Endpoint_Write_Control_PStream_LE+0xea>
    3fda:	b0 cf       	rjmp	.-160    	; 0x3f3c <Endpoint_Write_Control_PStream_LE+0x4a>
    3fdc:	80 91 24 23 	lds	r24, 0x2324
    3fe0:	88 23       	and	r24, r24
    3fe2:	81 f0       	breq	.+32     	; 0x4004 <Endpoint_Write_Control_PStream_LE+0x112>
    3fe4:	85 30       	cpi	r24, 0x05	; 5
    3fe6:	c9 f0       	breq	.+50     	; 0x401a <Endpoint_Write_Control_PStream_LE+0x128>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3fe8:	fe d0       	rcall	.+508    	; 0x41e6 <Endpoint_IsSETUPReceived>
    3fea:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3fec:	51 f5       	brne	.+84     	; 0x4042 <Endpoint_Write_Control_PStream_LE+0x150>
    3fee:	13 d1       	rcall	.+550    	; 0x4216 <Endpoint_IsOUTReceived>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3ff0:	88 23       	and	r24, r24
    3ff2:	51 f4       	brne	.+20     	; 0x4008 <Endpoint_Write_Control_PStream_LE+0x116>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3ff4:	28 d1       	rcall	.+592    	; 0x4246 <Endpoint_IsINReady>
    3ff6:	88 23       	and	r24, r24
    3ff8:	09 f0       	breq	.+2      	; 0x3ffc <Endpoint_Write_Control_PStream_LE+0x10a>
    3ffa:	b6 cf       	rjmp	.-148    	; 0x3f68 <Endpoint_Write_Control_PStream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3ffc:	80 91 24 23 	lds	r24, 0x2324
    4000:	88 23       	and	r24, r24
    4002:	81 f7       	brne	.-32     	; 0x3fe4 <Endpoint_Write_Control_PStream_LE+0xf2>
		  break;

		if (Endpoint_IsINReady())
    4004:	82 e0       	ldi	r24, 0x02	; 2
    4006:	0a c0       	rjmp	.+20     	; 0x401c <Endpoint_Write_Control_PStream_LE+0x12a>
    4008:	06 d1       	rcall	.+524    	; 0x4216 <Endpoint_IsOUTReceived>
    400a:	88 23       	and	r24, r24
    400c:	01 f5       	brne	.+64     	; 0x404e <Endpoint_Write_Control_PStream_LE+0x15c>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    400e:	80 91 24 23 	lds	r24, 0x2324

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4012:	88 23       	and	r24, r24
    4014:	b9 f3       	breq	.-18     	; 0x4004 <Endpoint_Write_Control_PStream_LE+0x112>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4016:	85 30       	cpi	r24, 0x05	; 5
    4018:	b9 f7       	brne	.-18     	; 0x4008 <Endpoint_Write_Control_PStream_LE+0x116>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    401a:	83 e0       	ldi	r24, 0x03	; 3
    401c:	0f 90       	pop	r0
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4022:	1f 91       	pop	r17
    4024:	0f 91       	pop	r16

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4026:	ff 90       	pop	r15
    4028:	ef 90       	pop	r14
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    402a:	df 90       	pop	r13
    402c:	cf 90       	pop	r12
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    402e:	08 95       	ret
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    4030:	e0 91 2d 23 	lds	r30, 0x232D
    4034:	f0 91 2e 23 	lds	r31, 0x232E
    4038:	ef 5b       	subi	r30, 0xBF	; 191
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	c0 80       	ld	r12, Z
    403e:	dd 24       	eor	r13, r13
    4040:	a6 cf       	rjmp	.-180    	; 0x3f8e <Endpoint_Write_Control_PStream_LE+0x9c>
    4042:	81 e0       	ldi	r24, 0x01	; 1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    4044:	eb cf       	rjmp	.-42     	; 0x401c <Endpoint_Write_Control_PStream_LE+0x12a>
    4046:	05 d0       	rcall	.+10     	; 0x4052 <Endpoint_ClearIN>
    4048:	00 e0       	ldi	r16, 0x00	; 0
    404a:	10 e0       	ldi	r17, 0x00	; 0
    404c:	70 cf       	rjmp	.-288    	; 0x3f2e <Endpoint_Write_Control_PStream_LE+0x3c>
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	e5 cf       	rjmp	.-54     	; 0x401c <Endpoint_Write_Control_PStream_LE+0x12a>

00004052 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    4052:	e0 91 2f 23 	lds	r30, 0x232F
    4056:	f0 91 30 23 	lds	r31, 0x2330
    405a:	a0 91 2d 23 	lds	r26, 0x232D
    405e:	b0 91 2e 23 	lds	r27, 0x232E
    4062:	af 5b       	subi	r26, 0xBF	; 191
    4064:	bf 4f       	sbci	r27, 0xFF	; 255
    4066:	8c 91       	ld	r24, X
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	82 83       	std	Z+2, r24	; 0x02
    406c:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    406e:	80 81       	ld	r24, Z
    4070:	8d 79       	andi	r24, 0x9D	; 157
    4072:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    4074:	e0 91 2d 23 	lds	r30, 0x232D
    4078:	f0 91 2e 23 	lds	r31, 0x232E
    407c:	ef 5b       	subi	r30, 0xBF	; 191
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	10 82       	st	Z, r1
}
    4082:	08 95       	ret

00004084 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    4084:	e0 91 2f 23 	lds	r30, 0x232F
    4088:	f0 91 30 23 	lds	r31, 0x2330
    408c:	80 81       	ld	r24, Z
    408e:	8d 79       	andi	r24, 0x9D	; 157
    4090:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    4092:	e0 91 2d 23 	lds	r30, 0x232D
    4096:	f0 91 2e 23 	lds	r31, 0x232E
    409a:	ef 5b       	subi	r30, 0xBF	; 191
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	10 82       	st	Z, r1
}
    40a0:	08 95       	ret

000040a2 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    40a2:	80 91 2d 23 	lds	r24, 0x232D
    40a6:	90 91 2e 23 	lds	r25, 0x232E
    40aa:	fc 01       	movw	r30, r24
    40ac:	ef 5b       	subi	r30, 0xBF	; 191
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	20 81       	ld	r18, Z
    40b2:	82 0f       	add	r24, r18
    40b4:	91 1d       	adc	r25, r1
    40b6:	dc 01       	movw	r26, r24
    40b8:	8c 91       	ld	r24, X
    40ba:	2f 5f       	subi	r18, 0xFF	; 255
    40bc:	20 83       	st	Z, r18
}
    40be:	08 95       	ret

000040c0 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    40c0:	20 91 2d 23 	lds	r18, 0x232D
    40c4:	30 91 2e 23 	lds	r19, 0x232E
    40c8:	f9 01       	movw	r30, r18
    40ca:	ef 5b       	subi	r30, 0xBF	; 191
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	90 81       	ld	r25, Z
    40d0:	29 0f       	add	r18, r25
    40d2:	31 1d       	adc	r19, r1
    40d4:	d9 01       	movw	r26, r18
    40d6:	8c 93       	st	X, r24
    40d8:	9f 5f       	subi	r25, 0xFF	; 255
    40da:	90 83       	st	Z, r25
}
    40dc:	08 95       	ret

000040de <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    40de:	28 2f       	mov	r18, r24
    40e0:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;
    40e2:	80 93 31 23 	sts	0x2331, r24

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	64 e8       	ldi	r22, 0x84	; 132
    40ea:	70 e0       	ldi	r23, 0x00	; 0
    40ec:	26 9f       	mul	r18, r22
    40ee:	a0 01       	movw	r20, r0
    40f0:	27 9f       	mul	r18, r23
    40f2:	50 0d       	add	r21, r0
    40f4:	36 9f       	mul	r19, r22
    40f6:	50 0d       	add	r21, r0
    40f8:	11 24       	eor	r1, r1
    40fa:	4e 5c       	subi	r20, 0xCE	; 206
    40fc:	5c 4d       	sbci	r21, 0xDC	; 220
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    40fe:	60 91 c6 04 	lds	r22, 0x04C6
    4102:	70 91 c7 04 	lds	r23, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    4106:	87 fd       	sbrc	r24, 7
    4108:	11 c0       	rjmp	.+34     	; 0x412c <Endpoint_SelectEndpoint+0x4e>
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    410a:	40 93 2d 23 	sts	0x232D, r20
    410e:	50 93 2e 23 	sts	0x232E, r21
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    4112:	22 95       	swap	r18
    4114:	32 95       	swap	r19
    4116:	30 7f       	andi	r19, 0xF0	; 240
    4118:	32 27       	eor	r19, r18
    411a:	20 7f       	andi	r18, 0xF0	; 240
    411c:	32 27       	eor	r19, r18
    411e:	26 0f       	add	r18, r22
    4120:	37 1f       	adc	r19, r23
    4122:	20 93 2f 23 	sts	0x232F, r18
    4126:	30 93 30 23 	sts	0x2330, r19
    412a:	08 95       	ret
	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;

	if (Address & ENDPOINT_DIR_IN)
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    412c:	4e 5b       	subi	r20, 0xBE	; 190
    412e:	5f 4f       	sbci	r21, 0xFF	; 255
    4130:	40 93 2d 23 	sts	0x232D, r20
    4134:	50 93 2e 23 	sts	0x232E, r21
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    4138:	22 95       	swap	r18
    413a:	32 95       	swap	r19
    413c:	30 7f       	andi	r19, 0xF0	; 240
    413e:	32 27       	eor	r19, r18
    4140:	20 7f       	andi	r18, 0xF0	; 240
    4142:	32 27       	eor	r19, r18
    4144:	28 5f       	subi	r18, 0xF8	; 248
    4146:	3f 4f       	sbci	r19, 0xFF	; 255
    4148:	26 0f       	add	r18, r22
    414a:	37 1f       	adc	r19, r23
    414c:	20 93 2f 23 	sts	0x232F, r18
    4150:	30 93 30 23 	sts	0x2330, r19
    4154:	08 95       	ret

00004156 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    4156:	e0 91 2f 23 	lds	r30, 0x232F
    415a:	f0 91 30 23 	lds	r31, 0x2330
    415e:	81 81       	ldd	r24, Z+1	; 0x01
    4160:	84 60       	ori	r24, 0x04	; 4
    4162:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    4164:	e0 91 2f 23 	lds	r30, 0x232F
    4168:	f0 91 30 23 	lds	r31, 0x2330
    416c:	81 81       	ldd	r24, Z+1	; 0x01
    416e:	80 7c       	andi	r24, 0xC0	; 192
    4170:	80 34       	cpi	r24, 0x40	; 64
    4172:	09 f0       	breq	.+2      	; 0x4176 <Endpoint_StallTransaction+0x20>
    4174:	08 95       	ret
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    4176:	80 91 31 23 	lds	r24, 0x2331
    417a:	80 58       	subi	r24, 0x80	; 128
    417c:	b0 df       	rcall	.-160    	; 0x40de <Endpoint_SelectEndpoint>
    417e:	e0 91 2f 23 	lds	r30, 0x232F
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    4182:	f0 91 30 23 	lds	r31, 0x2330
    4186:	81 81       	ldd	r24, Z+1	; 0x01
    4188:	84 60       	ori	r24, 0x04	; 4
    418a:	81 83       	std	Z+1, r24	; 0x01
    418c:	08 95       	ret

0000418e <Endpoint_ClearSETUP>:
    418e:	80 91 31 23 	lds	r24, 0x2331
	return false;
}

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    4192:	8f 77       	andi	r24, 0x7F	; 127
    4194:	a4 df       	rcall	.-184    	; 0x40de <Endpoint_SelectEndpoint>
    4196:	e0 91 2f 23 	lds	r30, 0x232F
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    419a:	f0 91 30 23 	lds	r31, 0x2330
    419e:	80 81       	ld	r24, Z
    41a0:	8d 78       	andi	r24, 0x8D	; 141
    41a2:	80 83       	st	Z, r24
    41a4:	e0 91 2f 23 	lds	r30, 0x232F
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    41a8:	f0 91 30 23 	lds	r31, 0x2330
    41ac:	80 81       	ld	r24, Z
    41ae:	81 60       	ori	r24, 0x01	; 1
    41b0:	80 83       	st	Z, r24
    41b2:	e0 91 2d 23 	lds	r30, 0x232D
	USB_Endpoint_SelectedFIFO->Position  = 0;
    41b6:	f0 91 2e 23 	lds	r31, 0x232E
    41ba:	ef 5b       	subi	r30, 0xBF	; 191
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	10 82       	st	Z, r1
    41c0:	80 91 31 23 	lds	r24, 0x2331

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    41c4:	80 68       	ori	r24, 0x80	; 128
    41c6:	8b df       	rcall	.-234    	; 0x40de <Endpoint_SelectEndpoint>
    41c8:	e0 91 2f 23 	lds	r30, 0x232F
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    41cc:	f0 91 30 23 	lds	r31, 0x2330
    41d0:	80 81       	ld	r24, Z
    41d2:	81 60       	ori	r24, 0x01	; 1
    41d4:	80 83       	st	Z, r24
    41d6:	e0 91 2d 23 	lds	r30, 0x232D
	USB_Endpoint_SelectedFIFO->Position  = 0;
    41da:	f0 91 2e 23 	lds	r31, 0x232E
    41de:	ef 5b       	subi	r30, 0xBF	; 191
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	10 82       	st	Z, r1
    41e4:	08 95       	ret

000041e6 <Endpoint_IsSETUPReceived>:
    41e6:	80 91 31 23 	lds	r24, 0x2331
	return false;
}

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    41ea:	8f 77       	andi	r24, 0x7F	; 127
    41ec:	78 df       	rcall	.-272    	; 0x40de <Endpoint_SelectEndpoint>
    41ee:	e0 91 2f 23 	lds	r30, 0x232F

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    41f2:	f0 91 30 23 	lds	r31, 0x2330
    41f6:	80 81       	ld	r24, Z
    41f8:	84 ff       	sbrs	r24, 4
    41fa:	0b c0       	rjmp	.+22     	; 0x4212 <Endpoint_IsSETUPReceived+0x2c>
    41fc:	a0 91 2d 23 	lds	r26, 0x232D
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    4200:	b0 91 2e 23 	lds	r27, 0x232E
    4204:	82 81       	ldd	r24, Z+2	; 0x02
    4206:	93 81       	ldd	r25, Z+3	; 0x03
    4208:	a0 5c       	subi	r26, 0xC0	; 192
    420a:	bf 4f       	sbci	r27, 0xFF	; 255
    420c:	8c 93       	st	X, r24
    420e:	81 e0       	ldi	r24, 0x01	; 1
		return true;
    4210:	08 95       	ret
    4212:	80 e0       	ldi	r24, 0x00	; 0
	}

	return false;
    4214:	08 95       	ret

00004216 <Endpoint_IsOUTReceived>:
}
    4216:	80 91 31 23 	lds	r24, 0x2331
	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
}

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    421a:	8f 77       	andi	r24, 0x7F	; 127
    421c:	60 df       	rcall	.-320    	; 0x40de <Endpoint_SelectEndpoint>
    421e:	e0 91 2f 23 	lds	r30, 0x232F

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    4222:	f0 91 30 23 	lds	r31, 0x2330
    4226:	80 81       	ld	r24, Z
    4228:	85 ff       	sbrs	r24, 5
    422a:	0b c0       	rjmp	.+22     	; 0x4242 <Endpoint_IsOUTReceived+0x2c>
    422c:	a0 91 2d 23 	lds	r26, 0x232D
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    4230:	b0 91 2e 23 	lds	r27, 0x232E
    4234:	82 81       	ldd	r24, Z+2	; 0x02
    4236:	93 81       	ldd	r25, Z+3	; 0x03
    4238:	a0 5c       	subi	r26, 0xC0	; 192
    423a:	bf 4f       	sbci	r27, 0xFF	; 255
    423c:	8c 93       	st	X, r24
    423e:	81 e0       	ldi	r24, 0x01	; 1
		return true;
    4240:	08 95       	ret
    4242:	80 e0       	ldi	r24, 0x00	; 0
	}

	return false;
    4244:	08 95       	ret

00004246 <Endpoint_IsINReady>:
}
    4246:	80 91 31 23 	lds	r24, 0x2331
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    424a:	80 68       	ori	r24, 0x80	; 128
    424c:	48 df       	rcall	.-368    	; 0x40de <Endpoint_SelectEndpoint>
    424e:	e0 91 2f 23 	lds	r30, 0x232F

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    4252:	f0 91 30 23 	lds	r31, 0x2330
    4256:	90 81       	ld	r25, Z
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	91 ff       	sbrs	r25, 1
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	08 95       	ret

00004260 <Endpoint_ConfigureEndpoint_PRV>:
}
    4260:	1f 93       	push	r17
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	00 d0       	rcall	.+0      	; 0x4268 <Endpoint_ConfigureEndpoint_PRV+0x8>
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	18 2f       	mov	r17, r24
	Endpoint_SelectEndpoint(Address);
    426e:	4a 83       	std	Y+2, r20	; 0x02
    4270:	69 83       	std	Y+1, r22	; 0x01
    4272:	35 df       	rcall	.-406    	; 0x40de <Endpoint_SelectEndpoint>
    4274:	e0 91 2f 23 	lds	r30, 0x232F

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    4278:	f0 91 30 23 	lds	r31, 0x2330
    427c:	11 82       	std	Z+1, r1	; 0x01
    427e:	e0 91 2f 23 	lds	r30, 0x232F
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    4282:	f0 91 30 23 	lds	r31, 0x2330
    4286:	4a 81       	ldd	r20, Y+2	; 0x02
    4288:	69 81       	ldd	r22, Y+1	; 0x01
    428a:	17 fd       	sbrc	r17, 7
    428c:	22 c0       	rjmp	.+68     	; 0x42d2 <Endpoint_ConfigureEndpoint_PRV+0x72>
    428e:	10 82       	st	Z, r1
    4290:	e0 91 2f 23 	lds	r30, 0x232F
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    4294:	f0 91 30 23 	lds	r31, 0x2330
    4298:	61 83       	std	Z+1, r22	; 0x01
    429a:	e0 91 2f 23 	lds	r30, 0x232F
	USB_Endpoint_SelectedHandle->CNT     = 0;
    429e:	f0 91 30 23 	lds	r31, 0x2330
    42a2:	12 82       	std	Z+2, r1	; 0x02
    42a4:	13 82       	std	Z+3, r1	; 0x03
    42a6:	80 91 2d 23 	lds	r24, 0x232D
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    42aa:	90 91 2e 23 	lds	r25, 0x232E
    42ae:	84 83       	std	Z+4, r24	; 0x04
    42b0:	95 83       	std	Z+5, r25	; 0x05
    42b2:	40 e0       	ldi	r20, 0x00	; 0

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    42b4:	fc 01       	movw	r30, r24
    42b6:	e0 5c       	subi	r30, 0xC0	; 192
    42b8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ba:	40 83       	st	Z, r20
    42bc:	8f 5b       	subi	r24, 0xBF	; 191
	USB_Endpoint_SelectedFIFO->Position  = 0;
    42be:	9f 4f       	sbci	r25, 0xFF	; 255
    42c0:	dc 01       	movw	r26, r24
    42c2:	1c 92       	st	X, r1
    42c4:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    42c6:	0f 90       	pop	r0
    42c8:	0f 90       	pop	r0
    42ca:	df 91       	pop	r29
    42cc:	cf 91       	pop	r28
    42ce:	1f 91       	pop	r17
    42d0:	08 95       	ret
    42d2:	82 e0       	ldi	r24, 0x02	; 2
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    42d4:	80 83       	st	Z, r24
    42d6:	e0 91 2f 23 	lds	r30, 0x232F
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    42da:	f0 91 30 23 	lds	r31, 0x2330
    42de:	61 83       	std	Z+1, r22	; 0x01
    42e0:	e0 91 2f 23 	lds	r30, 0x232F
	USB_Endpoint_SelectedHandle->CNT     = 0;
    42e4:	f0 91 30 23 	lds	r31, 0x2330
    42e8:	12 82       	std	Z+2, r1	; 0x02
    42ea:	13 82       	std	Z+3, r1	; 0x03
    42ec:	80 91 2d 23 	lds	r24, 0x232D
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    42f0:	90 91 2e 23 	lds	r25, 0x232E
    42f4:	84 83       	std	Z+4, r24	; 0x04
    42f6:	95 83       	std	Z+5, r25	; 0x05
    42f8:	dd cf       	rjmp	.-70     	; 0x42b4 <Endpoint_ConfigureEndpoint_PRV+0x54>

000042fa <Endpoint_ConfigureEndpointTable>:
    42fa:	cf 92       	push	r12
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    42fc:	df 92       	push	r13
    42fe:	ef 92       	push	r14
    4300:	ff 92       	push	r15
    4302:	0f 93       	push	r16
    4304:	1f 93       	push	r17
    4306:	cf 93       	push	r28
    4308:	df 93       	push	r29
    430a:	0f 92       	push	r0
    430c:	cd b7       	in	r28, 0x3d	; 61
    430e:	de b7       	in	r29, 0x3e	; 62
    4310:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < Entries; i++)
    4312:	66 23       	and	r22, r22
    4314:	09 f4       	brne	.+2      	; 0x4318 <Endpoint_ConfigureEndpointTable+0x1e>
    4316:	41 c0       	rjmp	.+130    	; 0x439a <Endpoint_ConfigureEndpointTable+0xa0>
    4318:	6c 01       	movw	r12, r24
    431a:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (!(Table[i].Address))
    431c:	f6 01       	movw	r30, r12
    431e:	00 81       	ld	r16, Z
    4320:	00 23       	and	r16, r16
    4322:	99 f1       	breq	.+102    	; 0x438a <Endpoint_ConfigureEndpointTable+0x90>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    4324:	63 81       	ldd	r22, Z+3	; 0x03
    4326:	21 81       	ldd	r18, Z+1	; 0x01
    4328:	32 81       	ldd	r19, Z+2	; 0x02
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    432a:	84 81       	ldd	r24, Z+4	; 0x04
    432c:	82 30       	cpi	r24, 0x02	; 2
    432e:	08 f4       	brcc	.+2      	; 0x4332 <Endpoint_ConfigureEndpointTable+0x38>
    4330:	41 c0       	rjmp	.+130    	; 0x43b4 <Endpoint_ConfigureEndpointTable+0xba>
    4332:	48 e1       	ldi	r20, 0x18	; 24
    4334:	58 e1       	ldi	r21, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    4336:	29 30       	cpi	r18, 0x09	; 9
    4338:	31 05       	cpc	r19, r1
    433a:	50 f0       	brcs	.+20     	; 0x4350 <Endpoint_ConfigureEndpointTable+0x56>
    433c:	88 e0       	ldi	r24, 0x08	; 8
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	40 e0       	ldi	r20, 0x00	; 0
				{
					MaskVal++;
    4342:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    4344:	88 0f       	add	r24, r24
    4346:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    4348:	82 17       	cp	r24, r18
    434a:	93 07       	cpc	r25, r19
    434c:	d0 f3       	brcs	.-12     	; 0x4342 <Endpoint_ConfigureEndpointTable+0x48>
    434e:	45 2b       	or	r20, r21
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    4350:	80 2f       	mov	r24, r16
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	8f 70       	andi	r24, 0x0F	; 15
    4356:	90 70       	andi	r25, 0x00	; 0
    4358:	86 30       	cpi	r24, 0x06	; 6
    435a:	91 05       	cpc	r25, r1
    435c:	4c f5       	brge	.+82     	; 0x43b0 <Endpoint_ConfigureEndpointTable+0xb6>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
				if (Size > 64)
    435e:	21 34       	cpi	r18, 0x41	; 65
    4360:	31 05       	cpc	r19, r1
    4362:	30 f5       	brcc	.+76     	; 0x43b0 <Endpoint_ConfigureEndpointTable+0xb6>

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    4364:	4f 7e       	andi	r20, 0xEF	; 239
				if (Size > 64)
				  return false;

				switch (Type)
    4366:	66 23       	and	r22, r22
    4368:	41 f5       	brne	.+80     	; 0x43ba <Endpoint_ConfigureEndpointTable+0xc0>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    436a:	94 2f       	mov	r25, r20
    436c:	90 64       	ori	r25, 0x40	; 64
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    436e:	e2 2e       	mov	r14, r18
    4370:	80 2f       	mov	r24, r16
    4372:	80 58       	subi	r24, 0x80	; 128
    4374:	69 2f       	mov	r22, r25
    4376:	42 2f       	mov	r20, r18
    4378:	99 83       	std	Y+1, r25	; 0x01
    437a:	72 df       	rcall	.-284    	; 0x4260 <Endpoint_ConfigureEndpoint_PRV>
    437c:	99 81       	ldd	r25, Y+1	; 0x01
    437e:	80 2f       	mov	r24, r16

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    4380:	69 2f       	mov	r22, r25
    4382:	4e 2d       	mov	r20, r14
    4384:	6d df       	rcall	.-294    	; 0x4260 <Endpoint_ConfigureEndpoint_PRV>
    4386:	88 23       	and	r24, r24
    4388:	99 f0       	breq	.+38     	; 0x43b0 <Endpoint_ConfigureEndpointTable+0xb6>
    438a:	1f 5f       	subi	r17, 0xFF	; 255
    438c:	85 e0       	ldi	r24, 0x05	; 5
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	c8 0e       	add	r12, r24
    4392:	d9 1e       	adc	r13, r25
    4394:	1f 15       	cp	r17, r15
    4396:	09 f0       	breq	.+2      	; 0x439a <Endpoint_ConfigureEndpointTable+0xa0>
    4398:	c1 cf       	rjmp	.-126    	; 0x431c <Endpoint_ConfigureEndpointTable+0x22>
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	0f 90       	pop	r0
		{
			return false;
		}
	}

	return true;
    439e:	df 91       	pop	r29
}
    43a0:	cf 91       	pop	r28
    43a2:	1f 91       	pop	r17
    43a4:	0f 91       	pop	r16
    43a6:	ff 90       	pop	r15
    43a8:	ef 90       	pop	r14
    43aa:	df 90       	pop	r13
    43ac:	cf 90       	pop	r12
    43ae:	08 95       	ret
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	f4 cf       	rjmp	.-24     	; 0x439c <Endpoint_ConfigureEndpointTable+0xa2>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    43b4:	48 e0       	ldi	r20, 0x08	; 8
    43b6:	58 e0       	ldi	r21, 0x08	; 8
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    43b8:	be cf       	rjmp	.-132    	; 0x4336 <Endpoint_ConfigureEndpointTable+0x3c>
    43ba:	61 30       	cpi	r22, 0x01	; 1
    43bc:	31 f0       	breq	.+12     	; 0x43ca <Endpoint_ConfigureEndpointTable+0xd0>
				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
				if (Size > 64)
				  return false;

				switch (Type)
    43be:	94 2f       	mov	r25, r20
    43c0:	90 68       	ori	r25, 0x80	; 128
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    43c2:	66 23       	and	r22, r22
    43c4:	a1 f2       	breq	.-88     	; 0x436e <Endpoint_ConfigureEndpointTable+0x74>
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    43c6:	e2 2e       	mov	r14, r18
    43c8:	da cf       	rjmp	.-76     	; 0x437e <Endpoint_ConfigureEndpointTable+0x84>
    43ca:	94 2f       	mov	r25, r20
    43cc:	90 6c       	ori	r25, 0xC0	; 192
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    43ce:	e2 2e       	mov	r14, r18
    43d0:	d6 cf       	rjmp	.-84     	; 0x437e <Endpoint_ConfigureEndpointTable+0x84>

000043d2 <Endpoint_ClearEndpoints>:
    43d2:	e0 ec       	ldi	r30, 0xC0	; 192
    43d4:	f4 e0       	ldi	r31, 0x04	; 4

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43d6:	a6 81       	ldd	r26, Z+6	; 0x06
    43d8:	b7 81       	ldd	r27, Z+7	; 0x07
    43da:	19 96       	adiw	r26, 0x09	; 9
    43dc:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    43de:	a6 81       	ldd	r26, Z+6	; 0x06
    43e0:	b7 81       	ldd	r27, Z+7	; 0x07
    43e2:	11 96       	adiw	r26, 0x01	; 1
    43e4:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43e6:	a6 81       	ldd	r26, Z+6	; 0x06
    43e8:	b7 81       	ldd	r27, Z+7	; 0x07
    43ea:	59 96       	adiw	r26, 0x19	; 25
    43ec:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    43ee:	a6 81       	ldd	r26, Z+6	; 0x06
    43f0:	b7 81       	ldd	r27, Z+7	; 0x07
    43f2:	51 96       	adiw	r26, 0x11	; 17
    43f4:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    43f6:	a6 81       	ldd	r26, Z+6	; 0x06
    43f8:	b7 81       	ldd	r27, Z+7	; 0x07
    43fa:	99 96       	adiw	r26, 0x29	; 41
    43fc:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    43fe:	a6 81       	ldd	r26, Z+6	; 0x06
    4400:	b7 81       	ldd	r27, Z+7	; 0x07
    4402:	91 96       	adiw	r26, 0x21	; 33
    4404:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    4406:	a6 81       	ldd	r26, Z+6	; 0x06
    4408:	b7 81       	ldd	r27, Z+7	; 0x07
    440a:	d9 96       	adiw	r26, 0x39	; 57
    440c:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    440e:	a6 81       	ldd	r26, Z+6	; 0x06
    4410:	b7 81       	ldd	r27, Z+7	; 0x07
    4412:	d1 96       	adiw	r26, 0x31	; 49
    4414:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    4416:	a6 81       	ldd	r26, Z+6	; 0x06
    4418:	b7 81       	ldd	r27, Z+7	; 0x07
    441a:	a7 5b       	subi	r26, 0xB7	; 183
    441c:	bf 4f       	sbci	r27, 0xFF	; 255
    441e:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    4420:	a6 81       	ldd	r26, Z+6	; 0x06
    4422:	b7 81       	ldd	r27, Z+7	; 0x07
    4424:	af 5b       	subi	r26, 0xBF	; 191
    4426:	bf 4f       	sbci	r27, 0xFF	; 255
    4428:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    442a:	a6 81       	ldd	r26, Z+6	; 0x06
    442c:	b7 81       	ldd	r27, Z+7	; 0x07
    442e:	a7 5a       	subi	r26, 0xA7	; 167
    4430:	bf 4f       	sbci	r27, 0xFF	; 255
    4432:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    4434:	06 80       	ldd	r0, Z+6	; 0x06
    4436:	f7 81       	ldd	r31, Z+7	; 0x07
    4438:	e0 2d       	mov	r30, r0
    443a:	ef 5a       	subi	r30, 0xAF	; 175
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	10 82       	st	Z, r1
	}
}
    4440:	08 95       	ret

00004442 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    4442:	80 91 25 23 	lds	r24, 0x2325
    4446:	87 fd       	sbrc	r24, 7
    4448:	08 c0       	rjmp	.+16     	; 0x445a <Endpoint_ClearStatusStage+0x18>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    444a:	fd de       	rcall	.-518    	; 0x4246 <Endpoint_IsINReady>
    444c:	88 23       	and	r24, r24
    444e:	69 f4       	brne	.+26     	; 0x446a <Endpoint_ClearStatusStage+0x28>
    4450:	80 91 24 23 	lds	r24, 0x2324
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    4454:	88 23       	and	r24, r24
    4456:	c9 f7       	brne	.-14     	; 0x444a <Endpoint_ClearStatusStage+0x8>
    4458:	08 95       	ret
    445a:	dd de       	rcall	.-582    	; 0x4216 <Endpoint_IsOUTReceived>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    445c:	88 23       	and	r24, r24
    445e:	31 f4       	brne	.+12     	; 0x446c <Endpoint_ClearStatusStage+0x2a>
    4460:	80 91 24 23 	lds	r24, 0x2324
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    4464:	88 23       	and	r24, r24
    4466:	c9 f7       	brne	.-14     	; 0x445a <Endpoint_ClearStatusStage+0x18>
    4468:	08 95       	ret
    446a:	f3 cd       	rjmp	.-1050   	; 0x4052 <Endpoint_ClearIN>
    446c:	0b ce       	rjmp	.-1002   	; 0x4084 <Endpoint_ClearOUT>

0000446e <Endpoint_WaitUntilReady>:
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    446e:	1f 93       	push	r17
    4470:	cf 93       	push	r28
    4472:	df 93       	push	r29
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    4474:	e0 91 c6 04 	lds	r30, 0x04C6
    4478:	f0 91 c7 04 	lds	r31, 0x04C7
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    447c:	e0 5a       	subi	r30, 0xA0	; 160
    447e:	ff 4f       	sbci	r31, 0xFF	; 255
    4480:	c0 81       	ld	r28, Z
    4482:	d1 81       	ldd	r29, Z+1	; 0x01

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    4484:	14 e6       	ldi	r17, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    4486:	80 91 31 23 	lds	r24, 0x2331
    448a:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    448c:	80 38       	cpi	r24, 0x80	; 128
    448e:	21 f1       	breq	.+72     	; 0x44d8 <Endpoint_WaitUntilReady+0x6a>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    4490:	c2 de       	rcall	.-636    	; 0x4216 <Endpoint_IsOUTReceived>
    4492:	88 23       	and	r24, r24
    4494:	21 f5       	brne	.+72     	; 0x44de <Endpoint_WaitUntilReady+0x70>
    4496:	80 91 24 23 	lds	r24, 0x2324
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    449a:	88 23       	and	r24, r24

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    449c:	29 f1       	breq	.+74     	; 0x44e8 <Endpoint_WaitUntilReady+0x7a>
    449e:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    44a0:	41 f1       	breq	.+80     	; 0x44f2 <Endpoint_WaitUntilReady+0x84>
    44a2:	e0 91 2f 23 	lds	r30, 0x232F
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    44a6:	f0 91 30 23 	lds	r31, 0x2330
    44aa:	81 81       	ldd	r24, Z+1	; 0x01
    44ac:	82 fd       	sbrc	r24, 2
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    44ae:	26 c0       	rjmp	.+76     	; 0x44fc <Endpoint_WaitUntilReady+0x8e>
    44b0:	e0 91 c6 04 	lds	r30, 0x04C6
    44b4:	f0 91 c7 04 	lds	r31, 0x04C7
    44b8:	e0 5a       	subi	r30, 0xA0	; 160
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	91 81       	ldd	r25, Z+1	; 0x01
    44c0:	c8 17       	cp	r28, r24
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    44c2:	d9 07       	cpc	r29, r25
    44c4:	01 f3       	breq	.-64     	; 0x4486 <Endpoint_WaitUntilReady+0x18>
    44c6:	11 23       	and	r17, r17
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    44c8:	f1 f0       	breq	.+60     	; 0x4506 <Endpoint_WaitUntilReady+0x98>
    44ca:	11 50       	subi	r17, 0x01	; 1
    44cc:	ec 01       	movw	r28, r24
    44ce:	80 91 31 23 	lds	r24, 0x2331
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    44d2:	80 78       	andi	r24, 0x80	; 128
    44d4:	80 38       	cpi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    44d6:	e1 f6       	brne	.-72     	; 0x4490 <Endpoint_WaitUntilReady+0x22>
    44d8:	b6 de       	rcall	.-660    	; 0x4246 <Endpoint_IsINReady>
		{
			if (Endpoint_IsINReady())
    44da:	88 23       	and	r24, r24
    44dc:	e1 f2       	breq	.-72     	; 0x4496 <Endpoint_WaitUntilReady+0x28>
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	df 91       	pop	r29
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    44e2:	cf 91       	pop	r28

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    44e4:	1f 91       	pop	r17
    44e6:	08 95       	ret
    44e8:	82 e0       	ldi	r24, 0x02	; 2
    44ea:	df 91       	pop	r29
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    44ec:	cf 91       	pop	r28

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    44ee:	1f 91       	pop	r17
    44f0:	08 95       	ret
    44f2:	83 e0       	ldi	r24, 0x03	; 3
    44f4:	df 91       	pop	r29
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    44f6:	cf 91       	pop	r28

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    44f8:	1f 91       	pop	r17
    44fa:	08 95       	ret
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	df 91       	pop	r29
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    4500:	cf 91       	pop	r28

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    4502:	1f 91       	pop	r17
    4504:	08 95       	ret
    4506:	84 e0       	ldi	r24, 0x04	; 4
    4508:	df 91       	pop	r29
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    450a:	cf 91       	pop	r28
		}
	}
}
    450c:	1f 91       	pop	r17
    450e:	08 95       	ret

00004510 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    4510:	64 d0       	rcall	.+200    	; 0x45da <USB_INT_DisableAllInterrupts>
    4512:	6a d0       	rcall	.+212    	; 0x45e8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    4514:	e0 ec       	ldi	r30, 0xC0	; 192
    4516:	f4 e0       	ldi	r31, 0x04	; 4
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    4518:	81 81       	ldd	r24, Z+1	; 0x01
    451a:	8e 7f       	andi	r24, 0xFE	; 254
    451c:	81 83       	std	Z+1, r24	; 0x01
    451e:	80 81       	ld	r24, Z
    4520:	8f 77       	andi	r24, 0x7F	; 127
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    4522:	80 83       	st	Z, r24
    4524:	10 92 23 23 	sts	0x2323, r1

	USB_Detach();
	USB_Controller_Disable();

	USB_IsInitialized = false;
    4528:	08 95       	ret

0000452a <USB_ResetInterface>:
    452a:	cf 93       	push	r28
}
    452c:	df 93       	push	r29
{
	#if defined(USB_DEVICE_OPT_FULLSPEED)
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	else
	  CLK.USBCTRL = (((F_USB / 48000000) - 1) << CLK_USBPSDIV_gp);
    452e:	e0 e4       	ldi	r30, 0x40	; 64
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	14 82       	std	Z+4, r1	; 0x04
	#else
	CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	#endif

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
    4534:	84 81       	ldd	r24, Z+4	; 0x04
    4536:	81 60       	ori	r24, 0x01	; 1
    4538:	84 83       	std	Z+4, r24	; 0x04
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    453a:	4f d0       	rcall	.+158    	; 0x45da <USB_INT_DisableAllInterrupts>
    453c:	55 d0       	rcall	.+170    	; 0x45e8 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    453e:	c0 ec       	ldi	r28, 0xC0	; 192
    4540:	d4 e0       	ldi	r29, 0x04	; 4
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    4542:	88 81       	ld	r24, Y
    4544:	8f 77       	andi	r24, 0x7F	; 127
    4546:	88 83       	st	Y, r24
    4548:	88 81       	ld	r24, Y
    454a:	80 68       	ori	r24, 0x80	; 128
				USB.CTRLA |=  USB_ENABLE_bm;
    454c:	88 83       	st	Y, r24
    454e:	10 92 24 23 	sts	0x2324, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    4552:	10 92 20 23 	sts	0x2320, r1
	USB_Device_ConfigurationNumber  = 0;
    4556:	10 92 22 23 	sts	0x2322, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    455a:	10 92 21 23 	sts	0x2321, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    455e:	88 81       	ld	r24, Y
    4560:	80 64       	ori	r24, 0x40	; 64
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    4562:	88 83       	st	Y, r24
    4564:	80 e8       	ldi	r24, 0x80	; 128
    4566:	68 e4       	ldi	r22, 0x48	; 72
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    4568:	48 e0       	ldi	r20, 0x08	; 8
    456a:	7a de       	rcall	.-780    	; 0x4260 <Endpoint_ConfigureEndpoint_PRV>
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	68 e4       	ldi	r22, 0x48	; 72
    4570:	48 e0       	ldi	r20, 0x08	; 8

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    4572:	76 de       	rcall	.-788    	; 0x4260 <Endpoint_ConfigureEndpoint_PRV>
    4574:	88 85       	ldd	r24, Y+8	; 0x08
    4576:	80 64       	ori	r24, 0x40	; 64
    4578:	88 87       	std	Y+8, r24	; 0x08
    457a:	89 81       	ldd	r24, Y+1	; 0x01
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    457c:	81 60       	ori	r24, 0x01	; 1
    457e:	89 83       	std	Y+1, r24	; 0x01
    4580:	df 91       	pop	r29
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    4582:	cf 91       	pop	r28
    4584:	08 95       	ret

00004586 <USB_Init>:
    4586:	cf 93       	push	r28
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    4588:	df 93       	push	r29
    458a:	3f b7       	in	r19, 0x3f	; 63
    458c:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    458e:	c0 ec       	ldi	r28, 0xC0	; 192
    4590:	d1 e0       	ldi	r29, 0x01	; 1
    4592:	22 e0       	ldi	r18, 0x02	; 2
    4594:	2a 87       	std	Y+10, r18	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    4596:	ea e1       	ldi	r30, 0x1A	; 26
    4598:	f0 e0       	ldi	r31, 0x00	; 0
    459a:	e4 91       	lpm	r30, Z
    459c:	a0 ec       	ldi	r26, 0xC0	; 192
    459e:	b4 e0       	ldi	r27, 0x04	; 4
    45a0:	da 96       	adiw	r26, 0x3a	; 58
    45a2:	ec 93       	st	X, r30
    45a4:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    45a6:	eb e1       	ldi	r30, 0x1B	; 27
    45a8:	f0 e0       	ldi	r31, 0x00	; 0
    45aa:	e4 91       	lpm	r30, Z
    45ac:	db 96       	adiw	r26, 0x3b	; 59
    45ae:	ec 93       	st	X, r30
    45b0:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    45b2:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    45b4:	8b e4       	ldi	r24, 0x4B	; 75
    45b6:	96 e2       	ldi	r25, 0x26	; 38
    45b8:	8e 7f       	andi	r24, 0xFE	; 254
    45ba:	16 96       	adiw	r26, 0x06	; 6
    45bc:	8d 93       	st	X+, r24
    45be:	9c 93       	st	X, r25
    45c0:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    45c2:	85 e1       	ldi	r24, 0x15	; 21
    45c4:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
	else if ((USB_Options & USB_OPT_BUSEVENT_PRIMED) == USB_OPT_BUSEVENT_PRIMED)
	  USB.INTCTRLA = (2 << USB_INTLVL_gp);
    45c6:	18 96       	adiw	r26, 0x08	; 8
    45c8:	2c 93       	st	X, r18
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    45ca:	3f bf       	out	0x3f, r19	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	80 93 23 23 	sts	0x2323, r24

	USB_ResetInterface();
    45d2:	ab df       	rcall	.-170    	; 0x452a <USB_ResetInterface>
    45d4:	df 91       	pop	r29
}
    45d6:	cf 91       	pop	r28
    45d8:	08 95       	ret

000045da <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    45da:	e0 ec       	ldi	r30, 0xC0	; 192
    45dc:	f4 e0       	ldi	r31, 0x04	; 4
    45de:	80 85       	ldd	r24, Z+8	; 0x08
    45e0:	83 70       	andi	r24, 0x03	; 3
    45e2:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    45e4:	11 86       	std	Z+9, r1	; 0x09
}
    45e6:	08 95       	ret

000045e8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    45e8:	e0 ec       	ldi	r30, 0xC0	; 192
    45ea:	f4 e0       	ldi	r31, 0x04	; 4
    45ec:	8f ef       	ldi	r24, 0xFF	; 255
    45ee:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    45f0:	84 87       	std	Z+12, r24	; 0x0c
}
    45f2:	08 95       	ret

000045f4 <__vector_125>:

ISR(USB_BUSEVENT_vect)
{
    45f4:	1f 92       	push	r1
    45f6:	0f 92       	push	r0
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	0f 92       	push	r0
    45fc:	11 24       	eor	r1, r1
    45fe:	2f 93       	push	r18
    4600:	3f 93       	push	r19
    4602:	4f 93       	push	r20
    4604:	5f 93       	push	r21
    4606:	6f 93       	push	r22
    4608:	7f 93       	push	r23
    460a:	8f 93       	push	r24
    460c:	9f 93       	push	r25
    460e:	af 93       	push	r26
    4610:	bf 93       	push	r27
    4612:	ef 93       	push	r30
    4614:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    4616:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    461a:	87 fd       	sbrc	r24, 7
    461c:	4f c0       	rjmp	.+158    	; 0x46bc <__vector_125+0xc8>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    461e:	80 91 ca 04 	lds	r24, 0x04CA

		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    4622:	86 fd       	sbrc	r24, 6
    4624:	42 c0       	rjmp	.+132    	; 0x46aa <__vector_125+0xb6>
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    4626:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    462a:	85 ff       	sbrs	r24, 5
    462c:	0d c0       	rjmp	.+26     	; 0x4648 <__vector_125+0x54>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    462e:	80 e2       	ldi	r24, 0x20	; 32
    4630:	e0 ec       	ldi	r30, 0xC0	; 192
    4632:	f4 e0       	ldi	r31, 0x04	; 4
    4634:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    4636:	80 91 20 23 	lds	r24, 0x2320
    463a:	88 23       	and	r24, r24
    463c:	71 f1       	breq	.+92     	; 0x469a <__vector_125+0xa6>
		  USB_DeviceState = DEVICE_STATE_Configured;
    463e:	84 e0       	ldi	r24, 0x04	; 4
    4640:	80 93 24 23 	sts	0x2324, r24
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    4644:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    4648:	e0 ec       	ldi	r30, 0xC0	; 192
    464a:	f4 e0       	ldi	r31, 0x04	; 4
    464c:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    4650:	84 ff       	sbrs	r24, 4
    4652:	12 c0       	rjmp	.+36     	; 0x4678 <__vector_125+0x84>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    4654:	80 e1       	ldi	r24, 0x10	; 16
    4656:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    4658:	82 e0       	ldi	r24, 0x02	; 2
    465a:	80 93 24 23 	sts	0x2324, r24
		USB_Device_ConfigurationNumber = 0;
    465e:	10 92 20 23 	sts	0x2320, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    4662:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    4664:	b6 de       	rcall	.-660    	; 0x43d2 <Endpoint_ClearEndpoints>
    4666:	80 e8       	ldi	r24, 0x80	; 128
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    4668:	68 e4       	ldi	r22, 0x48	; 72
    466a:	48 e0       	ldi	r20, 0x08	; 8
    466c:	f9 dd       	rcall	.-1038   	; 0x4260 <Endpoint_ConfigureEndpoint_PRV>
    466e:	80 e0       	ldi	r24, 0x00	; 0
    4670:	68 e4       	ldi	r22, 0x48	; 72

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    4672:	48 e0       	ldi	r20, 0x08	; 8
    4674:	f5 dd       	rcall	.-1046   	; 0x4260 <Endpoint_ConfigureEndpoint_PRV>
    4676:	17 db       	rcall	.-2514   	; 0x3ca6 <USB_Event_Stub>
    4678:	ff 91       	pop	r31
    467a:	ef 91       	pop	r30
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    467c:	bf 91       	pop	r27
    467e:	af 91       	pop	r26
	}
}
    4680:	9f 91       	pop	r25
    4682:	8f 91       	pop	r24
    4684:	7f 91       	pop	r23
    4686:	6f 91       	pop	r22
    4688:	5f 91       	pop	r21
    468a:	4f 91       	pop	r20
    468c:	3f 91       	pop	r19
    468e:	2f 91       	pop	r18
    4690:	0f 90       	pop	r0
    4692:	0f be       	out	0x3f, r0	; 63
    4694:	0f 90       	pop	r0
    4696:	1f 90       	pop	r1
    4698:	18 95       	reti
    469a:	80 91 c3 04 	lds	r24, 0x04C3
    469e:	88 23       	and	r24, r24
    46a0:	b9 f4       	brne	.+46     	; 0x46d0 <__vector_125+0xdc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	80 93 24 23 	sts	0x2324, r24
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    46a8:	cd cf       	rjmp	.-102    	; 0x4644 <__vector_125+0x50>
    46aa:	80 e4       	ldi	r24, 0x40	; 64
    46ac:	e0 ec       	ldi	r30, 0xC0	; 192
    46ae:	f4 e0       	ldi	r31, 0x04	; 4
    46b0:	82 87       	std	Z+10, r24	; 0x0a
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    46b2:	10 92 24 23 	sts	0x2324, r1
    46b6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <EVENT_USB_Device_Disconnect>
	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    46ba:	b5 cf       	rjmp	.-150    	; 0x4626 <__vector_125+0x32>
    46bc:	80 91 c8 04 	lds	r24, 0x04C8
		EVENT_USB_Device_Disconnect();
    46c0:	87 ff       	sbrs	r24, 7
    46c2:	ad cf       	rjmp	.-166    	; 0x461e <__vector_125+0x2a>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    46c4:	80 e8       	ldi	r24, 0x80	; 128
    46c6:	e0 ec       	ldi	r30, 0xC0	; 192
}

ISR(USB_BUSEVENT_vect)
{
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    46c8:	f4 e0       	ldi	r31, 0x04	; 4
    46ca:	82 87       	std	Z+10, r24	; 0x0a
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    46cc:	ec da       	rcall	.-2600   	; 0x3ca6 <USB_Event_Stub>
    46ce:	a7 cf       	rjmp	.-178    	; 0x461e <__vector_125+0x2a>
    46d0:	83 e0       	ldi	r24, 0x03	; 3
    46d2:	e8 cf       	rjmp	.-48     	; 0x46a4 <__vector_125+0xb0>

000046d4 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    46d4:	ef 92       	push	r14
    46d6:	ff 92       	push	r15
    46d8:	0f 93       	push	r16
    46da:	1f 93       	push	r17
    46dc:	cf 93       	push	r28
    46de:	df 93       	push	r29
    46e0:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    46e2:	81 dd       	rcall	.-1278   	; 0x41e6 <Endpoint_IsSETUPReceived>
    46e4:	88 23       	and	r24, r24
    46e6:	49 f0       	breq	.+18     	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    46e8:	88 81       	ld	r24, Y
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	20 91 29 23 	lds	r18, 0x2329
    46f0:	30 91 2a 23 	lds	r19, 0x232A
    46f4:	28 17       	cp	r18, r24
    46f6:	39 07       	cpc	r19, r25
    46f8:	39 f0       	breq	.+14     	; 0x4708 <CDC_Device_ProcessControlRequest+0x34>
    46fa:	df 91       	pop	r29
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    46fc:	cf 91       	pop	r28
    46fe:	1f 91       	pop	r17
    4700:	0f 91       	pop	r16
    4702:	ff 90       	pop	r15
    4704:	ef 90       	pop	r14
    4706:	08 95       	ret
    4708:	80 91 26 23 	lds	r24, 0x2326
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    470c:	81 32       	cpi	r24, 0x21	; 33
    470e:	09 f4       	brne	.+2      	; 0x4712 <CDC_Device_ProcessControlRequest+0x3e>
    4710:	5f c0       	rjmp	.+190    	; 0x47d0 <CDC_Device_ProcessControlRequest+0xfc>
    4712:	82 32       	cpi	r24, 0x22	; 34
    4714:	08 f0       	brcs	.+2      	; 0x4718 <CDC_Device_ProcessControlRequest+0x44>
    4716:	4b c0       	rjmp	.+150    	; 0x47ae <CDC_Device_ProcessControlRequest+0xda>
    4718:	80 32       	cpi	r24, 0x20	; 32
    471a:	79 f7       	brne	.-34     	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    471c:	80 91 25 23 	lds	r24, 0x2325
				Endpoint_ClearStatusStage();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4720:	81 32       	cpi	r24, 0x21	; 33
    4722:	59 f7       	brne	.-42     	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    4724:	34 dd       	rcall	.-1432   	; 0x418e <Endpoint_ClearSETUP>
			{
				Endpoint_ClearSETUP();
    4726:	04 c0       	rjmp	.+8      	; 0x4730 <CDC_Device_ProcessControlRequest+0x5c>
    4728:	80 91 24 23 	lds	r24, 0x2324

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    472c:	88 23       	and	r24, r24
    472e:	29 f3       	breq	.-54     	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    4730:	72 dd       	rcall	.-1308   	; 0x4216 <Endpoint_IsOUTReceived>
    4732:	88 23       	and	r24, r24
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    4734:	c9 f3       	breq	.-14     	; 0x4728 <CDC_Device_ProcessControlRequest+0x54>
    4736:	b5 dc       	rcall	.-1686   	; 0x40a2 <Endpoint_Read_8>
    4738:	e8 2e       	mov	r14, r24
    473a:	b3 dc       	rcall	.-1690   	; 0x40a2 <Endpoint_Read_8>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    473c:	f8 2e       	mov	r15, r24
    473e:	b1 dc       	rcall	.-1694   	; 0x40a2 <Endpoint_Read_8>
    4740:	08 2f       	mov	r16, r24
				uint32_t Byte1 = Endpoint_Read_8();
    4742:	af dc       	rcall	.-1698   	; 0x40a2 <Endpoint_Read_8>
    4744:	48 2f       	mov	r20, r24
    4746:	50 e0       	ldi	r21, 0x00	; 0
				uint32_t Byte2 = Endpoint_Read_8();
    4748:	60 e0       	ldi	r22, 0x00	; 0
    474a:	70 e0       	ldi	r23, 0x00	; 0
    474c:	74 2f       	mov	r23, r20
				uint32_t Byte3 = Endpoint_Read_8();
    474e:	66 27       	eor	r22, r22
    4750:	55 27       	eor	r21, r21
    4752:	44 27       	eor	r20, r20
    4754:	10 e0       	ldi	r17, 0x00	; 0
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	30 e0       	ldi	r19, 0x00	; 0

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    475a:	98 01       	movw	r18, r16
    475c:	11 27       	eor	r17, r17
    475e:	00 27       	eor	r16, r16
    4760:	40 2b       	or	r20, r16
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    4762:	51 2b       	or	r21, r17
    4764:	62 2b       	or	r22, r18
    4766:	73 2b       	or	r23, r19
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    4768:	8e 2d       	mov	r24, r14
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	a0 e0       	ldi	r26, 0x00	; 0
    476e:	b0 e0       	ldi	r27, 0x00	; 0
    4770:	48 2b       	or	r20, r24
    4772:	59 2b       	or	r21, r25
    4774:	6a 2b       	or	r22, r26
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    4776:	7b 2b       	or	r23, r27
    4778:	8f 2d       	mov	r24, r15
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	a0 e0       	ldi	r26, 0x00	; 0
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    477e:	b0 e0       	ldi	r27, 0x00	; 0
    4780:	ba 2f       	mov	r27, r26
    4782:	a9 2f       	mov	r26, r25
    4784:	98 2f       	mov	r25, r24
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
    4786:	88 27       	eor	r24, r24
    4788:	48 2b       	or	r20, r24
    478a:	59 2b       	or	r21, r25
    478c:	6a 2b       	or	r22, r26
				uint32_t Byte2 = Endpoint_Read_8();
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    478e:	7b 2b       	or	r23, r27
    4790:	4c 8b       	std	Y+20, r20	; 0x14
    4792:	5d 8b       	std	Y+21, r21	; 0x15
    4794:	6e 8b       	std	Y+22, r22	; 0x16
    4796:	7f 8b       	std	Y+23, r23	; 0x17
    4798:	84 dc       	rcall	.-1784   	; 0x40a2 <Endpoint_Read_8>
    479a:	88 8f       	std	Y+24, r24	; 0x18
    479c:	82 dc       	rcall	.-1788   	; 0x40a2 <Endpoint_Read_8>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    479e:	89 8f       	std	Y+25, r24	; 0x19
    47a0:	80 dc       	rcall	.-1792   	; 0x40a2 <Endpoint_Read_8>
    47a2:	8a 8f       	std	Y+26, r24	; 0x1a
    47a4:	6f dc       	rcall	.-1826   	; 0x4084 <Endpoint_ClearOUT>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    47a6:	4d de       	rcall	.-870    	; 0x4442 <Endpoint_ClearStatusStage>
    47a8:	ce 01       	movw	r24, r28
    47aa:	9e d1       	rcall	.+828    	; 0x4ae8 <CDC_Device_Event_Stub>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    47ac:	a6 cf       	rjmp	.-180    	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    47ae:	82 32       	cpi	r24, 0x22	; 34
    47b0:	61 f1       	breq	.+88     	; 0x480a <CDC_Device_ProcessControlRequest+0x136>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    47b2:	83 32       	cpi	r24, 0x23	; 35
    47b4:	09 f0       	breq	.+2      	; 0x47b8 <CDC_Device_ProcessControlRequest+0xe4>
    47b6:	a1 cf       	rjmp	.-190    	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>

				Endpoint_ClearOUT();
    47b8:	80 91 25 23 	lds	r24, 0x2325
				Endpoint_ClearStatusStage();
    47bc:	81 32       	cpi	r24, 0x21	; 33
    47be:	09 f0       	breq	.+2      	; 0x47c2 <CDC_Device_ProcessControlRequest+0xee>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    47c0:	9c cf       	rjmp	.-200    	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    47c2:	e5 dc       	rcall	.-1590   	; 0x418e <Endpoint_ClearSETUP>
    47c4:	3e de       	rcall	.-900    	; 0x4442 <Endpoint_ClearStatusStage>
    47c6:	ce 01       	movw	r24, r28
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    47c8:	60 91 27 23 	lds	r22, 0x2327
    47cc:	8d d1       	rcall	.+794    	; 0x4ae8 <CDC_Device_Event_Stub>
    47ce:	95 cf       	rjmp	.-214    	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    47d0:	80 91 25 23 	lds	r24, 0x2325
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    47d4:	81 3a       	cpi	r24, 0xA1	; 161
    47d6:	09 f0       	breq	.+2      	; 0x47da <CDC_Device_ProcessControlRequest+0x106>
    47d8:	90 cf       	rjmp	.-224    	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    47da:	d9 dc       	rcall	.-1614   	; 0x418e <Endpoint_ClearSETUP>
			{
				Endpoint_ClearSETUP();
    47dc:	34 dd       	rcall	.-1432   	; 0x4246 <Endpoint_IsINReady>
    47de:	88 23       	and	r24, r24
				Endpoint_ClearStatusStage();
    47e0:	e9 f3       	breq	.-6      	; 0x47dc <CDC_Device_ProcessControlRequest+0x108>
    47e2:	8c 89       	ldd	r24, Y+20	; 0x14

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    47e4:	ed 88       	ldd	r14, Y+21	; 0x15
    47e6:	fe 88       	ldd	r15, Y+22	; 0x16
    47e8:	0f 89       	ldd	r16, Y+23	; 0x17
    47ea:	6a dc       	rcall	.-1836   	; 0x40c0 <Endpoint_Write_8>
    47ec:	8e 2d       	mov	r24, r14
    47ee:	68 dc       	rcall	.-1840   	; 0x40c0 <Endpoint_Write_8>
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    47f0:	8f 2d       	mov	r24, r15
    47f2:	66 dc       	rcall	.-1844   	; 0x40c0 <Endpoint_Write_8>
    47f4:	80 2f       	mov	r24, r16
    47f6:	64 dc       	rcall	.-1848   	; 0x40c0 <Endpoint_Write_8>
    47f8:	88 8d       	ldd	r24, Y+24	; 0x18
			{
				Endpoint_ClearSETUP();
    47fa:	62 dc       	rcall	.-1852   	; 0x40c0 <Endpoint_Write_8>
    47fc:	89 8d       	ldd	r24, Y+25	; 0x19

				while (!(Endpoint_IsINReady()));
    47fe:	60 dc       	rcall	.-1856   	; 0x40c0 <Endpoint_Write_8>
    4800:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4802:	5e dc       	rcall	.-1860   	; 0x40c0 <Endpoint_Write_8>
    4804:	26 dc       	rcall	.-1972   	; 0x4052 <Endpoint_ClearIN>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    4806:	1d de       	rcall	.-966    	; 0x4442 <Endpoint_ClearStatusStage>
    4808:	78 cf       	rjmp	.-272    	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    480a:	80 91 25 23 	lds	r24, 0x2325
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    480e:	81 32       	cpi	r24, 0x21	; 33
    4810:	09 f0       	breq	.+2      	; 0x4814 <CDC_Device_ProcessControlRequest+0x140>
				Endpoint_Write_8(Data >> 8);
    4812:	73 cf       	rjmp	.-282    	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>
    4814:	bc dc       	rcall	.-1672   	; 0x418e <Endpoint_ClearSETUP>
    4816:	15 de       	rcall	.-982    	; 0x4442 <Endpoint_ClearStatusStage>
				Endpoint_Write_8(Data >> 16);
    4818:	80 91 27 23 	lds	r24, 0x2327
    481c:	90 91 28 23 	lds	r25, 0x2328
				Endpoint_Write_8(Data >> 24);
    4820:	88 8b       	std	Y+16, r24	; 0x10
    4822:	99 8b       	std	Y+17, r25	; 0x11
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    4824:	ce 01       	movw	r24, r28
    4826:	60 d1       	rcall	.+704    	; 0x4ae8 <CDC_Device_Event_Stub>
    4828:	68 cf       	rjmp	.-304    	; 0x46fa <CDC_Device_ProcessControlRequest+0x26>

0000482a <CDC_Device_ConfigureEndpoints>:
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    482a:	cf 93       	push	r28
    482c:	df 93       	push	r29
    482e:	ec 01       	movw	r28, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    4830:	40 96       	adiw	r24, 0x10	; 16
    4832:	fc 01       	movw	r30, r24
    4834:	8b e0       	ldi	r24, 0x0B	; 11

				Endpoint_ClearIN();
    4836:	df 01       	movw	r26, r30
    4838:	1d 92       	st	X+, r1
				Endpoint_ClearStatusStage();
    483a:	8a 95       	dec	r24
    483c:	e9 f7       	brne	.-6      	; 0x4838 <CDC_Device_ConfigureEndpoints+0xe>
    483e:	82 e0       	ldi	r24, 0x02	; 2
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4840:	8c 83       	std	Y+4, r24	; 0x04
    4842:	89 87       	std	Y+9, r24	; 0x09
    4844:	83 e0       	ldi	r24, 0x03	; 3
    4846:	8e 87       	std	Y+14, r24	; 0x0e
    4848:	ce 01       	movw	r24, r28
			{
				Endpoint_ClearSETUP();
    484a:	01 96       	adiw	r24, 0x01	; 1
    484c:	61 e0       	ldi	r22, 0x01	; 1
				Endpoint_ClearStatusStage();
    484e:	55 dd       	rcall	.-1366   	; 0x42fa <Endpoint_ConfigureEndpointTable>
    4850:	88 23       	and	r24, r24

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    4852:	21 f4       	brne	.+8      	; 0x485c <CDC_Device_ConfigureEndpoints+0x32>
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	08 95       	ret
    485c:	ce 01       	movw	r24, r28

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    485e:	06 96       	adiw	r24, 0x06	; 6
    4860:	61 e0       	ldi	r22, 0x01	; 1
    4862:	4b dd       	rcall	.-1386   	; 0x42fa <Endpoint_ConfigureEndpointTable>
    4864:	88 23       	and	r24, r24
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    4866:	b1 f3       	breq	.-20     	; 0x4854 <CDC_Device_ConfigureEndpoints+0x2a>
    4868:	ce 01       	movw	r24, r28
    486a:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    486c:	61 e0       	ldi	r22, 0x01	; 1
    486e:	45 dd       	rcall	.-1398   	; 0x42fa <Endpoint_ConfigureEndpointTable>
    4870:	df 91       	pop	r29
    4872:	cf 91       	pop	r28
    4874:	08 95       	ret

00004876 <CDC_Device_SendString>:
	  return false;

	return true;
}
    4876:	cf 93       	push	r28
    4878:	df 93       	push	r29
    487a:	eb 01       	movw	r28, r22
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    487c:	20 91 24 23 	lds	r18, 0x2324
    4880:	24 30       	cpi	r18, 0x04	; 4
    4882:	21 f0       	breq	.+8      	; 0x488c <CDC_Device_SendString+0x16>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    4884:	82 e0       	ldi	r24, 0x02	; 2

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
    4886:	df 91       	pop	r29
    4888:	cf 91       	pop	r28
    488a:	08 95       	ret
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    488c:	fc 01       	movw	r30, r24
    488e:	44 89       	ldd	r20, Z+20	; 0x14
    4890:	55 89       	ldd	r21, Z+21	; 0x15
    4892:	66 89       	ldd	r22, Z+22	; 0x16
    4894:	77 89       	ldd	r23, Z+23	; 0x17
    4896:	41 15       	cp	r20, r1
    4898:	51 05       	cpc	r21, r1
    489a:	61 05       	cpc	r22, r1
    489c:	71 05       	cpc	r23, r1
    489e:	91 f3       	breq	.-28     	; 0x4884 <CDC_Device_SendString+0xe>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    48a0:	81 81       	ldd	r24, Z+1	; 0x01
    48a2:	1d dc       	rcall	.-1990   	; 0x40de <Endpoint_SelectEndpoint>
    48a4:	fe 01       	movw	r30, r28
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    48a6:	01 90       	ld	r0, Z+
    48a8:	00 20       	and	r0, r0
    48aa:	e9 f7       	brne	.-6      	; 0x48a6 <CDC_Device_SendString+0x30>
    48ac:	31 97       	sbiw	r30, 0x01	; 1
    48ae:	ec 1b       	sub	r30, r28
    48b0:	fd 0b       	sbc	r31, r29
    48b2:	ce 01       	movw	r24, r28
    48b4:	bf 01       	movw	r22, r30
    48b6:	40 e0       	ldi	r20, 0x00	; 0
    48b8:	50 e0       	ldi	r21, 0x00	; 0
    48ba:	0a da       	rcall	.-3052   	; 0x3cd0 <Endpoint_Write_Stream_LE>
    48bc:	e4 cf       	rjmp	.-56     	; 0x4886 <CDC_Device_SendString+0x10>

000048be <CDC_Device_SendData>:
    48be:	0f 93       	push	r16
    48c0:	1f 93       	push	r17
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	8b 01       	movw	r16, r22
    48c8:	ea 01       	movw	r28, r20
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    48ca:	20 91 24 23 	lds	r18, 0x2324
    48ce:	24 30       	cpi	r18, 0x04	; 4
    48d0:	31 f0       	breq	.+12     	; 0x48de <CDC_Device_SendData+0x20>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    48d2:	82 e0       	ldi	r24, 0x02	; 2

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}
    48d4:	df 91       	pop	r29
    48d6:	cf 91       	pop	r28
    48d8:	1f 91       	pop	r17
    48da:	0f 91       	pop	r16
    48dc:	08 95       	ret

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    48de:	fc 01       	movw	r30, r24
    48e0:	44 89       	ldd	r20, Z+20	; 0x14
    48e2:	55 89       	ldd	r21, Z+21	; 0x15
    48e4:	66 89       	ldd	r22, Z+22	; 0x16
    48e6:	77 89       	ldd	r23, Z+23	; 0x17
    48e8:	41 15       	cp	r20, r1
    48ea:	51 05       	cpc	r21, r1
    48ec:	61 05       	cpc	r22, r1
    48ee:	71 05       	cpc	r23, r1
    48f0:	81 f3       	breq	.-32     	; 0x48d2 <CDC_Device_SendData+0x14>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    48f2:	81 81       	ldd	r24, Z+1	; 0x01
    48f4:	f4 db       	rcall	.-2072   	; 0x40de <Endpoint_SelectEndpoint>
    48f6:	c8 01       	movw	r24, r16
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    48f8:	be 01       	movw	r22, r28
    48fa:	40 e0       	ldi	r20, 0x00	; 0
    48fc:	50 e0       	ldi	r21, 0x00	; 0
    48fe:	e8 d9       	rcall	.-3120   	; 0x3cd0 <Endpoint_Write_Stream_LE>
    4900:	e9 cf       	rjmp	.-46     	; 0x48d4 <CDC_Device_SendData+0x16>

00004902 <CDC_Device_SendByte>:
    4902:	cf 93       	push	r28
    4904:	c6 2f       	mov	r28, r22
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    4906:	20 91 24 23 	lds	r18, 0x2324
    490a:	24 30       	cpi	r18, 0x04	; 4
    490c:	19 f0       	breq	.+6      	; 0x4914 <CDC_Device_SendByte+0x12>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    490e:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    4910:	cf 91       	pop	r28
    4912:	08 95       	ret
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    4914:	fc 01       	movw	r30, r24
    4916:	44 89       	ldd	r20, Z+20	; 0x14
    4918:	55 89       	ldd	r21, Z+21	; 0x15
    491a:	66 89       	ldd	r22, Z+22	; 0x16
    491c:	77 89       	ldd	r23, Z+23	; 0x17
    491e:	41 15       	cp	r20, r1
    4920:	51 05       	cpc	r21, r1
    4922:	61 05       	cpc	r22, r1
    4924:	71 05       	cpc	r23, r1
    4926:	99 f3       	breq	.-26     	; 0x490e <CDC_Device_SendByte+0xc>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    4928:	81 81       	ldd	r24, Z+1	; 0x01
    492a:	d9 db       	rcall	.-2126   	; 0x40de <Endpoint_SelectEndpoint>
    492c:	20 91 2d 23 	lds	r18, 0x232D
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    4930:	30 91 2e 23 	lds	r19, 0x232E
    4934:	f9 01       	movw	r30, r18
    4936:	ef 5b       	subi	r30, 0xBF	; 191
    4938:	ff 4f       	sbci	r31, 0xFF	; 255
    493a:	90 81       	ld	r25, Z
    493c:	20 5c       	subi	r18, 0xC0	; 192
    493e:	3f 4f       	sbci	r19, 0xFF	; 255
    4940:	f9 01       	movw	r30, r18
    4942:	80 81       	ld	r24, Z
    4944:	98 17       	cp	r25, r24

	if (!(Endpoint_IsReadWriteAllowed()))
    4946:	20 f0       	brcs	.+8      	; 0x4950 <CDC_Device_SendByte+0x4e>
    4948:	84 db       	rcall	.-2296   	; 0x4052 <Endpoint_ClearIN>
	{
		Endpoint_ClearIN();
    494a:	91 dd       	rcall	.-1246   	; 0x446e <Endpoint_WaitUntilReady>
    494c:	88 23       	and	r24, r24

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    494e:	01 f7       	brne	.-64     	; 0x4910 <CDC_Device_SendByte+0xe>
    4950:	8c 2f       	mov	r24, r28
    4952:	b6 db       	rcall	.-2196   	; 0x40c0 <Endpoint_Write_8>
    4954:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
    4956:	dc cf       	rjmp	.-72     	; 0x4910 <CDC_Device_SendByte+0xe>

00004958 <CDC_Device_Flush>:
    4958:	0f 93       	push	r16
    495a:	1f 93       	push	r17
	return ENDPOINT_READYWAIT_NoError;
    495c:	cf 93       	push	r28
    495e:	df 93       	push	r29
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    4960:	0f 92       	push	r0
    4962:	cd b7       	in	r28, 0x3d	; 61
    4964:	de b7       	in	r29, 0x3e	; 62
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    4966:	20 91 24 23 	lds	r18, 0x2324
    496a:	24 30       	cpi	r18, 0x04	; 4
    496c:	39 f0       	breq	.+14     	; 0x497c <CDC_Device_Flush+0x24>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    496e:	82 e0       	ldi	r24, 0x02	; 2

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    4970:	0f 90       	pop	r0
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	08 95       	ret
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    497c:	fc 01       	movw	r30, r24
    497e:	44 89       	ldd	r20, Z+20	; 0x14
    4980:	55 89       	ldd	r21, Z+21	; 0x15
    4982:	66 89       	ldd	r22, Z+22	; 0x16
    4984:	77 89       	ldd	r23, Z+23	; 0x17
    4986:	41 15       	cp	r20, r1
    4988:	51 05       	cpc	r21, r1
    498a:	61 05       	cpc	r22, r1
    498c:	71 05       	cpc	r23, r1
    498e:	79 f3       	breq	.-34     	; 0x496e <CDC_Device_Flush+0x16>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    4990:	81 81       	ldd	r24, Z+1	; 0x01
    4992:	a5 db       	rcall	.-2230   	; 0x40de <Endpoint_SelectEndpoint>
    4994:	80 91 31 23 	lds	r24, 0x2331
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    4998:	20 91 2d 23 	lds	r18, 0x232D
				  return USB_Endpoint_SelectedFIFO->Position;
    499c:	30 91 2e 23 	lds	r19, 0x232E
    49a0:	f9 01       	movw	r30, r18
    49a2:	87 fd       	sbrc	r24, 7
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    49a4:	1d c0       	rjmp	.+58     	; 0x49e0 <CDC_Device_Flush+0x88>
    49a6:	e0 5c       	subi	r30, 0xC0	; 192
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	80 81       	ld	r24, Z
    49ac:	f9 01       	movw	r30, r18
    49ae:	ef 5b       	subi	r30, 0xBF	; 191
    49b0:	ff 4f       	sbci	r31, 0xFF	; 255
    49b2:	40 81       	ld	r20, Z
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	84 1b       	sub	r24, r20
    49b8:	91 09       	sbc	r25, r1
    49ba:	00 97       	sbiw	r24, 0x00	; 0

	if (!(Endpoint_BytesInEndpoint()))
    49bc:	11 f4       	brne	.+4      	; 0x49c2 <CDC_Device_Flush+0x6a>
    49be:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    49c0:	d7 cf       	rjmp	.-82     	; 0x4970 <CDC_Device_Flush+0x18>
    49c2:	00 81       	ld	r16, Z
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    49c4:	20 5c       	subi	r18, 0xC0	; 192
    49c6:	3f 4f       	sbci	r19, 0xFF	; 255
    49c8:	f9 01       	movw	r30, r18
    49ca:	10 81       	ld	r17, Z
    49cc:	42 db       	rcall	.-2428   	; 0x4052 <Endpoint_ClearIN>
	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();
    49ce:	01 17       	cp	r16, r17
    49d0:	b0 f3       	brcs	.-20     	; 0x49be <CDC_Device_Flush+0x66>

	if (BankFull)
    49d2:	4d dd       	rcall	.-1382   	; 0x446e <Endpoint_WaitUntilReady>
    49d4:	88 23       	and	r24, r24
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    49d6:	61 f6       	brne	.-104    	; 0x4970 <CDC_Device_Flush+0x18>
    49d8:	89 83       	std	Y+1, r24	; 0x01
    49da:	3b db       	rcall	.-2442   	; 0x4052 <Endpoint_ClearIN>
    49dc:	89 81       	ldd	r24, Y+1	; 0x01
		  return ErrorCode;

		Endpoint_ClearIN();
    49de:	c8 cf       	rjmp	.-112    	; 0x4970 <CDC_Device_Flush+0x18>
    49e0:	ef 5b       	subi	r30, 0xBF	; 191
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	80 81       	ld	r24, Z
    49e6:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    49e8:	e8 cf       	rjmp	.-48     	; 0x49ba <CDC_Device_Flush+0x62>

000049ea <CDC_Device_USBTask>:
    49ea:	cf 93       	push	r28
    49ec:	df 93       	push	r29
    49ee:	ec 01       	movw	r28, r24
    49f0:	80 91 24 23 	lds	r24, 0x2324
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    49f4:	84 30       	cpi	r24, 0x04	; 4
    49f6:	19 f0       	breq	.+6      	; 0x49fe <CDC_Device_USBTask+0x14>
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
	  CDC_Device_Flush(CDCInterfaceInfo);
	#endif
}
    49f8:	df 91       	pop	r29
    49fa:	cf 91       	pop	r28
    49fc:	08 95       	ret
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    49fe:	8c 89       	ldd	r24, Y+20	; 0x14
    4a00:	9d 89       	ldd	r25, Y+21	; 0x15
    4a02:	ae 89       	ldd	r26, Y+22	; 0x16
    4a04:	bf 89       	ldd	r27, Y+23	; 0x17
    4a06:	00 97       	sbiw	r24, 0x00	; 0
    4a08:	a1 05       	cpc	r26, r1
    4a0a:	b1 05       	cpc	r27, r1
    4a0c:	a9 f3       	breq	.-22     	; 0x49f8 <CDC_Device_USBTask+0xe>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	66 db       	rcall	.-2356   	; 0x40de <Endpoint_SelectEndpoint>
    4a12:	19 dc       	rcall	.-1998   	; 0x4246 <Endpoint_IsINReady>

	if (Endpoint_IsINReady())
    4a14:	88 23       	and	r24, r24
    4a16:	81 f3       	breq	.-32     	; 0x49f8 <CDC_Device_USBTask+0xe>
    4a18:	ce 01       	movw	r24, r28
    4a1a:	9e df       	rcall	.-196    	; 0x4958 <CDC_Device_Flush>
	  CDC_Device_Flush(CDCInterfaceInfo);
    4a1c:	ed cf       	rjmp	.-38     	; 0x49f8 <CDC_Device_USBTask+0xe>

00004a1e <CDC_Device_ReceiveByte>:
    4a1e:	cf 93       	push	r28
    4a20:	df 93       	push	r29
    4a22:	00 d0       	rcall	.+0      	; 0x4a24 <CDC_Device_ReceiveByte+0x6>
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    4a24:	cd b7       	in	r28, 0x3d	; 61
    4a26:	de b7       	in	r29, 0x3e	; 62
    4a28:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    4a2a:	80 91 24 23 	lds	r24, 0x2324
    4a2e:	84 30       	cpi	r24, 0x04	; 4
    4a30:	09 f0       	breq	.+2      	; 0x4a34 <CDC_Device_ReceiveByte+0x16>
    4a32:	3e c0       	rjmp	.+124    	; 0x4ab0 <CDC_Device_ReceiveByte+0x92>
    4a34:	44 89       	ldd	r20, Z+20	; 0x14
    4a36:	55 89       	ldd	r21, Z+21	; 0x15
    4a38:	66 89       	ldd	r22, Z+22	; 0x16
    4a3a:	77 89       	ldd	r23, Z+23	; 0x17
    4a3c:	41 15       	cp	r20, r1
    4a3e:	51 05       	cpc	r21, r1
    4a40:	61 05       	cpc	r22, r1
    4a42:	71 05       	cpc	r23, r1
    4a44:	a9 f1       	breq	.+106    	; 0x4ab0 <CDC_Device_ReceiveByte+0x92>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
    4a46:	86 81       	ldd	r24, Z+6	; 0x06
    4a48:	4a db       	rcall	.-2412   	; 0x40de <Endpoint_SelectEndpoint>
    4a4a:	e5 db       	rcall	.-2102   	; 0x4216 <Endpoint_IsOUTReceived>

	if (Endpoint_IsOUTReceived())
    4a4c:	88 23       	and	r24, r24
    4a4e:	81 f1       	breq	.+96     	; 0x4ab0 <CDC_Device_ReceiveByte+0x92>
    4a50:	80 91 31 23 	lds	r24, 0x2331
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    4a54:	20 91 2d 23 	lds	r18, 0x232D
				  return USB_Endpoint_SelectedFIFO->Position;
    4a58:	30 91 2e 23 	lds	r19, 0x232E
    4a5c:	f9 01       	movw	r30, r18
    4a5e:	87 fd       	sbrc	r24, 7
    4a60:	3e c0       	rjmp	.+124    	; 0x4ade <CDC_Device_ReceiveByte+0xc0>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    4a62:	e0 5c       	subi	r30, 0xC0	; 192
    4a64:	ff 4f       	sbci	r31, 0xFF	; 255
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    4a66:	80 81       	ld	r24, Z
    4a68:	f9 01       	movw	r30, r18
    4a6a:	ef 5b       	subi	r30, 0xBF	; 191
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	40 81       	ld	r20, Z
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	84 1b       	sub	r24, r20
    4a74:	91 09       	sbc	r25, r1
    4a76:	00 97       	sbiw	r24, 0x00	; 0
    4a78:	11 f5       	brne	.+68     	; 0x4abe <CDC_Device_ReceiveByte+0xa0>
	{
		if (Endpoint_BytesInEndpoint())
    4a7a:	8f ef       	ldi	r24, 0xFF	; 255
    4a7c:	9f ef       	ldi	r25, 0xFF	; 255
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    4a7e:	40 91 31 23 	lds	r20, 0x2331
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    4a82:	47 fd       	sbrc	r20, 7
    4a84:	29 c0       	rjmp	.+82     	; 0x4ad8 <CDC_Device_ReceiveByte+0xba>
    4a86:	20 5c       	subi	r18, 0xC0	; 192
    4a88:	3f 4f       	sbci	r19, 0xFF	; 255
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    4a8a:	d9 01       	movw	r26, r18
    4a8c:	2c 91       	ld	r18, X
    4a8e:	40 81       	ld	r20, Z
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	24 1b       	sub	r18, r20
    4a94:	31 09       	sbc	r19, r1
    4a96:	21 15       	cp	r18, r1
    4a98:	31 05       	cpc	r19, r1
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    4a9a:	61 f4       	brne	.+24     	; 0x4ab4 <CDC_Device_ReceiveByte+0x96>
    4a9c:	89 83       	std	Y+1, r24	; 0x01
    4a9e:	9a 83       	std	Y+2, r25	; 0x02
		  Endpoint_ClearOUT();
    4aa0:	f1 da       	rcall	.-2590   	; 0x4084 <Endpoint_ClearOUT>
    4aa2:	89 81       	ldd	r24, Y+1	; 0x01
    4aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	df 91       	pop	r29
	}

	return ReceivedByte;
}
    4aac:	cf 91       	pop	r28
    4aae:	08 95       	ret
    4ab0:	8f ef       	ldi	r24, 0xFF	; 255
    4ab2:	9f ef       	ldi	r25, 0xFF	; 255
    4ab4:	0f 90       	pop	r0
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    4ab6:	0f 90       	pop	r0
    4ab8:	df 91       	pop	r29
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    4aba:	cf 91       	pop	r28
    4abc:	08 95       	ret
    4abe:	f1 da       	rcall	.-2590   	; 0x40a2 <Endpoint_Read_8>
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	20 91 2d 23 	lds	r18, 0x232D
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();
    4ac6:	30 91 2e 23 	lds	r19, 0x232E
    4aca:	f9 01       	movw	r30, r18
    4acc:	ef 5b       	subi	r30, 0xBF	; 191
    4ace:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad0:	40 91 31 23 	lds	r20, 0x2331
    4ad4:	47 ff       	sbrs	r20, 7
    4ad6:	d7 cf       	rjmp	.-82     	; 0x4a86 <CDC_Device_ReceiveByte+0x68>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    4ad8:	20 81       	ld	r18, Z
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	dc cf       	rjmp	.-72     	; 0x4a96 <CDC_Device_ReceiveByte+0x78>
    4ade:	ef 5b       	subi	r30, 0xBF	; 191
				  return USB_Endpoint_SelectedFIFO->Position;
    4ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae2:	80 81       	ld	r24, Z
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	c7 cf       	rjmp	.-114    	; 0x4a76 <CDC_Device_ReceiveByte+0x58>

00004ae8 <CDC_Device_Event_Stub>:
    4ae8:	08 95       	ret

00004aea <__mulsi3>:
    4aea:	62 9f       	mul	r22, r18
    4aec:	d0 01       	movw	r26, r0
    4aee:	73 9f       	mul	r23, r19
    4af0:	f0 01       	movw	r30, r0
    4af2:	82 9f       	mul	r24, r18
    4af4:	e0 0d       	add	r30, r0
    4af6:	f1 1d       	adc	r31, r1
    4af8:	64 9f       	mul	r22, r20
    4afa:	e0 0d       	add	r30, r0
    4afc:	f1 1d       	adc	r31, r1
    4afe:	92 9f       	mul	r25, r18
    4b00:	f0 0d       	add	r31, r0
    4b02:	83 9f       	mul	r24, r19
    4b04:	f0 0d       	add	r31, r0
    4b06:	74 9f       	mul	r23, r20
    4b08:	f0 0d       	add	r31, r0
    4b0a:	65 9f       	mul	r22, r21
    4b0c:	f0 0d       	add	r31, r0
    4b0e:	99 27       	eor	r25, r25
    4b10:	72 9f       	mul	r23, r18
    4b12:	b0 0d       	add	r27, r0
    4b14:	e1 1d       	adc	r30, r1
    4b16:	f9 1f       	adc	r31, r25
    4b18:	63 9f       	mul	r22, r19
    4b1a:	b0 0d       	add	r27, r0
    4b1c:	e1 1d       	adc	r30, r1
    4b1e:	f9 1f       	adc	r31, r25
    4b20:	bd 01       	movw	r22, r26
    4b22:	cf 01       	movw	r24, r30
    4b24:	11 24       	eor	r1, r1
    4b26:	08 95       	ret

00004b28 <do_rand>:
    4b28:	8f 92       	push	r8
    4b2a:	9f 92       	push	r9
    4b2c:	af 92       	push	r10
    4b2e:	bf 92       	push	r11
    4b30:	cf 92       	push	r12
    4b32:	df 92       	push	r13
    4b34:	ef 92       	push	r14
    4b36:	ff 92       	push	r15
    4b38:	cf 93       	push	r28
    4b3a:	df 93       	push	r29
    4b3c:	ec 01       	movw	r28, r24
    4b3e:	88 81       	ld	r24, Y
    4b40:	99 81       	ldd	r25, Y+1	; 0x01
    4b42:	aa 81       	ldd	r26, Y+2	; 0x02
    4b44:	bb 81       	ldd	r27, Y+3	; 0x03
    4b46:	00 97       	sbiw	r24, 0x00	; 0
    4b48:	a1 05       	cpc	r26, r1
    4b4a:	b1 05       	cpc	r27, r1
    4b4c:	21 f4       	brne	.+8      	; 0x4b56 <do_rand+0x2e>
    4b4e:	84 e2       	ldi	r24, 0x24	; 36
    4b50:	99 ed       	ldi	r25, 0xD9	; 217
    4b52:	ab e5       	ldi	r26, 0x5B	; 91
    4b54:	b7 e0       	ldi	r27, 0x07	; 7
    4b56:	bc 01       	movw	r22, r24
    4b58:	cd 01       	movw	r24, r26
    4b5a:	2d e1       	ldi	r18, 0x1D	; 29
    4b5c:	33 ef       	ldi	r19, 0xF3	; 243
    4b5e:	41 e0       	ldi	r20, 0x01	; 1
    4b60:	50 e0       	ldi	r21, 0x00	; 0
    4b62:	3d d3       	rcall	.+1658   	; 0x51de <__divmodsi4>
    4b64:	49 01       	movw	r8, r18
    4b66:	5a 01       	movw	r10, r20
    4b68:	27 ea       	ldi	r18, 0xA7	; 167
    4b6a:	31 e4       	ldi	r19, 0x41	; 65
    4b6c:	40 e0       	ldi	r20, 0x00	; 0
    4b6e:	50 e0       	ldi	r21, 0x00	; 0
    4b70:	bc df       	rcall	.-136    	; 0x4aea <__mulsi3>
    4b72:	6b 01       	movw	r12, r22
    4b74:	7c 01       	movw	r14, r24
    4b76:	c5 01       	movw	r24, r10
    4b78:	b4 01       	movw	r22, r8
    4b7a:	2c ee       	ldi	r18, 0xEC	; 236
    4b7c:	34 ef       	ldi	r19, 0xF4	; 244
    4b7e:	4f ef       	ldi	r20, 0xFF	; 255
    4b80:	5f ef       	ldi	r21, 0xFF	; 255
    4b82:	b3 df       	rcall	.-154    	; 0x4aea <__mulsi3>
    4b84:	dc 01       	movw	r26, r24
    4b86:	cb 01       	movw	r24, r22
    4b88:	c8 0e       	add	r12, r24
    4b8a:	d9 1e       	adc	r13, r25
    4b8c:	ea 1e       	adc	r14, r26
    4b8e:	fb 1e       	adc	r15, r27
    4b90:	f7 fe       	sbrs	r15, 7
    4b92:	08 c0       	rjmp	.+16     	; 0x4ba4 <do_rand+0x7c>
    4b94:	8f ef       	ldi	r24, 0xFF	; 255
    4b96:	9f ef       	ldi	r25, 0xFF	; 255
    4b98:	af ef       	ldi	r26, 0xFF	; 255
    4b9a:	bf e7       	ldi	r27, 0x7F	; 127
    4b9c:	c8 0e       	add	r12, r24
    4b9e:	d9 1e       	adc	r13, r25
    4ba0:	ea 1e       	adc	r14, r26
    4ba2:	fb 1e       	adc	r15, r27
    4ba4:	c8 82       	st	Y, r12
    4ba6:	d9 82       	std	Y+1, r13	; 0x01
    4ba8:	ea 82       	std	Y+2, r14	; 0x02
    4baa:	fb 82       	std	Y+3, r15	; 0x03
    4bac:	c6 01       	movw	r24, r12
    4bae:	9f 77       	andi	r25, 0x7F	; 127
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	ff 90       	pop	r15
    4bb6:	ef 90       	pop	r14
    4bb8:	df 90       	pop	r13
    4bba:	cf 90       	pop	r12
    4bbc:	bf 90       	pop	r11
    4bbe:	af 90       	pop	r10
    4bc0:	9f 90       	pop	r9
    4bc2:	8f 90       	pop	r8
    4bc4:	08 95       	ret

00004bc6 <rand_r>:
    4bc6:	b0 cf       	rjmp	.-160    	; 0x4b28 <do_rand>

00004bc8 <rand>:
    4bc8:	8d e9       	ldi	r24, 0x9D	; 157
    4bca:	90 e2       	ldi	r25, 0x20	; 32
    4bcc:	ad cf       	rjmp	.-166    	; 0x4b28 <do_rand>

00004bce <srand>:
    4bce:	a0 e0       	ldi	r26, 0x00	; 0
    4bd0:	b0 e0       	ldi	r27, 0x00	; 0
    4bd2:	80 93 9d 20 	sts	0x209D, r24
    4bd6:	90 93 9e 20 	sts	0x209E, r25
    4bda:	a0 93 9f 20 	sts	0x209F, r26
    4bde:	b0 93 a0 20 	sts	0x20A0, r27
    4be2:	08 95       	ret

00004be4 <memcpy_P>:
    4be4:	fb 01       	movw	r30, r22
    4be6:	dc 01       	movw	r26, r24
    4be8:	02 c0       	rjmp	.+4      	; 0x4bee <memcpy_P+0xa>
    4bea:	05 90       	lpm	r0, Z+
    4bec:	0d 92       	st	X+, r0
    4bee:	41 50       	subi	r20, 0x01	; 1
    4bf0:	50 40       	sbci	r21, 0x00	; 0
    4bf2:	d8 f7       	brcc	.-10     	; 0x4bea <memcpy_P+0x6>
    4bf4:	08 95       	ret

00004bf6 <strcmp_P>:
    4bf6:	fb 01       	movw	r30, r22
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	8d 91       	ld	r24, X+
    4bfc:	05 90       	lpm	r0, Z+
    4bfe:	80 19       	sub	r24, r0
    4c00:	01 10       	cpse	r0, r1
    4c02:	d9 f3       	breq	.-10     	; 0x4bfa <strcmp_P+0x4>
    4c04:	99 0b       	sbc	r25, r25
    4c06:	08 95       	ret

00004c08 <strncpy_P>:
    4c08:	fb 01       	movw	r30, r22
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	41 50       	subi	r20, 0x01	; 1
    4c0e:	50 40       	sbci	r21, 0x00	; 0
    4c10:	48 f0       	brcs	.+18     	; 0x4c24 <strncpy_P+0x1c>
    4c12:	05 90       	lpm	r0, Z+
    4c14:	0d 92       	st	X+, r0
    4c16:	00 20       	and	r0, r0
    4c18:	c9 f7       	brne	.-14     	; 0x4c0c <strncpy_P+0x4>
    4c1a:	01 c0       	rjmp	.+2      	; 0x4c1e <strncpy_P+0x16>
    4c1c:	1d 92       	st	X+, r1
    4c1e:	41 50       	subi	r20, 0x01	; 1
    4c20:	50 40       	sbci	r21, 0x00	; 0
    4c22:	e0 f7       	brcc	.-8      	; 0x4c1c <strncpy_P+0x14>
    4c24:	08 95       	ret

00004c26 <memcpy>:
    4c26:	fb 01       	movw	r30, r22
    4c28:	dc 01       	movw	r26, r24
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <memcpy+0xa>
    4c2c:	01 90       	ld	r0, Z+
    4c2e:	0d 92       	st	X+, r0
    4c30:	41 50       	subi	r20, 0x01	; 1
    4c32:	50 40       	sbci	r21, 0x00	; 0
    4c34:	d8 f7       	brcc	.-10     	; 0x4c2c <memcpy+0x6>
    4c36:	08 95       	ret

00004c38 <snprintf_P>:
    4c38:	ae e0       	ldi	r26, 0x0E	; 14
    4c3a:	b0 e0       	ldi	r27, 0x00	; 0
    4c3c:	e1 e2       	ldi	r30, 0x21	; 33
    4c3e:	f6 e2       	ldi	r31, 0x26	; 38
    4c40:	f7 c2       	rjmp	.+1518   	; 0x5230 <__prologue_saves__+0x1c>
    4c42:	0d 89       	ldd	r16, Y+21	; 0x15
    4c44:	1e 89       	ldd	r17, Y+22	; 0x16
    4c46:	8f 89       	ldd	r24, Y+23	; 0x17
    4c48:	98 8d       	ldd	r25, Y+24	; 0x18
    4c4a:	2e e0       	ldi	r18, 0x0E	; 14
    4c4c:	2c 83       	std	Y+4, r18	; 0x04
    4c4e:	09 83       	std	Y+1, r16	; 0x01
    4c50:	1a 83       	std	Y+2, r17	; 0x02
    4c52:	97 ff       	sbrs	r25, 7
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <snprintf_P+0x22>
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e8       	ldi	r25, 0x80	; 128
    4c5a:	01 97       	sbiw	r24, 0x01	; 1
    4c5c:	8d 83       	std	Y+5, r24	; 0x05
    4c5e:	9e 83       	std	Y+6, r25	; 0x06
    4c60:	ae 01       	movw	r20, r28
    4c62:	45 5e       	subi	r20, 0xE5	; 229
    4c64:	5f 4f       	sbci	r21, 0xFF	; 255
    4c66:	ce 01       	movw	r24, r28
    4c68:	01 96       	adiw	r24, 0x01	; 1
    4c6a:	69 8d       	ldd	r22, Y+25	; 0x19
    4c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c6e:	11 d0       	rcall	.+34     	; 0x4c92 <vfprintf>
    4c70:	4d 81       	ldd	r20, Y+5	; 0x05
    4c72:	5e 81       	ldd	r21, Y+6	; 0x06
    4c74:	57 fd       	sbrc	r21, 7
    4c76:	0a c0       	rjmp	.+20     	; 0x4c8c <snprintf_P+0x54>
    4c78:	2f 81       	ldd	r18, Y+7	; 0x07
    4c7a:	38 85       	ldd	r19, Y+8	; 0x08
    4c7c:	42 17       	cp	r20, r18
    4c7e:	53 07       	cpc	r21, r19
    4c80:	0c f4       	brge	.+2      	; 0x4c84 <snprintf_P+0x4c>
    4c82:	9a 01       	movw	r18, r20
    4c84:	02 0f       	add	r16, r18
    4c86:	13 1f       	adc	r17, r19
    4c88:	f8 01       	movw	r30, r16
    4c8a:	10 82       	st	Z, r1
    4c8c:	2e 96       	adiw	r28, 0x0e	; 14
    4c8e:	e4 e0       	ldi	r30, 0x04	; 4
    4c90:	e8 c2       	rjmp	.+1488   	; 0x5262 <__epilogue_restores__+0x1c>

00004c92 <vfprintf>:
    4c92:	ad e0       	ldi	r26, 0x0D	; 13
    4c94:	b0 e0       	ldi	r27, 0x00	; 0
    4c96:	ee e4       	ldi	r30, 0x4E	; 78
    4c98:	f6 e2       	ldi	r31, 0x26	; 38
    4c9a:	bc c2       	rjmp	.+1400   	; 0x5214 <__prologue_saves__>
    4c9c:	3c 01       	movw	r6, r24
    4c9e:	6c 87       	std	Y+12, r22	; 0x0c
    4ca0:	7d 87       	std	Y+13, r23	; 0x0d
    4ca2:	5a 01       	movw	r10, r20
    4ca4:	fc 01       	movw	r30, r24
    4ca6:	16 82       	std	Z+6, r1	; 0x06
    4ca8:	17 82       	std	Z+7, r1	; 0x07
    4caa:	83 81       	ldd	r24, Z+3	; 0x03
    4cac:	81 ff       	sbrs	r24, 1
    4cae:	bb c1       	rjmp	.+886    	; 0x5026 <vfprintf+0x394>
    4cb0:	2e 01       	movw	r4, r28
    4cb2:	08 94       	sec
    4cb4:	41 1c       	adc	r4, r1
    4cb6:	51 1c       	adc	r5, r1
    4cb8:	f3 01       	movw	r30, r6
    4cba:	93 81       	ldd	r25, Z+3	; 0x03
    4cbc:	ec 85       	ldd	r30, Y+12	; 0x0c
    4cbe:	fd 85       	ldd	r31, Y+13	; 0x0d
    4cc0:	93 fd       	sbrc	r25, 3
    4cc2:	85 91       	lpm	r24, Z+
    4cc4:	93 ff       	sbrs	r25, 3
    4cc6:	81 91       	ld	r24, Z+
    4cc8:	ec 87       	std	Y+12, r30	; 0x0c
    4cca:	fd 87       	std	Y+13, r31	; 0x0d
    4ccc:	88 23       	and	r24, r24
    4cce:	09 f4       	brne	.+2      	; 0x4cd2 <vfprintf+0x40>
    4cd0:	a6 c1       	rjmp	.+844    	; 0x501e <vfprintf+0x38c>
    4cd2:	85 32       	cpi	r24, 0x25	; 37
    4cd4:	41 f4       	brne	.+16     	; 0x4ce6 <vfprintf+0x54>
    4cd6:	93 fd       	sbrc	r25, 3
    4cd8:	85 91       	lpm	r24, Z+
    4cda:	93 ff       	sbrs	r25, 3
    4cdc:	81 91       	ld	r24, Z+
    4cde:	ec 87       	std	Y+12, r30	; 0x0c
    4ce0:	fd 87       	std	Y+13, r31	; 0x0d
    4ce2:	85 32       	cpi	r24, 0x25	; 37
    4ce4:	21 f4       	brne	.+8      	; 0x4cee <vfprintf+0x5c>
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	b3 01       	movw	r22, r6
    4cea:	ef d1       	rcall	.+990    	; 0x50ca <fputc>
    4cec:	e5 cf       	rjmp	.-54     	; 0x4cb8 <vfprintf+0x26>
    4cee:	ff 24       	eor	r15, r15
    4cf0:	ee 24       	eor	r14, r14
    4cf2:	10 e0       	ldi	r17, 0x00	; 0
    4cf4:	10 32       	cpi	r17, 0x20	; 32
    4cf6:	b0 f4       	brcc	.+44     	; 0x4d24 <vfprintf+0x92>
    4cf8:	8b 32       	cpi	r24, 0x2B	; 43
    4cfa:	69 f0       	breq	.+26     	; 0x4d16 <vfprintf+0x84>
    4cfc:	8c 32       	cpi	r24, 0x2C	; 44
    4cfe:	28 f4       	brcc	.+10     	; 0x4d0a <vfprintf+0x78>
    4d00:	80 32       	cpi	r24, 0x20	; 32
    4d02:	51 f0       	breq	.+20     	; 0x4d18 <vfprintf+0x86>
    4d04:	83 32       	cpi	r24, 0x23	; 35
    4d06:	71 f4       	brne	.+28     	; 0x4d24 <vfprintf+0x92>
    4d08:	0b c0       	rjmp	.+22     	; 0x4d20 <vfprintf+0x8e>
    4d0a:	8d 32       	cpi	r24, 0x2D	; 45
    4d0c:	39 f0       	breq	.+14     	; 0x4d1c <vfprintf+0x8a>
    4d0e:	80 33       	cpi	r24, 0x30	; 48
    4d10:	49 f4       	brne	.+18     	; 0x4d24 <vfprintf+0x92>
    4d12:	11 60       	ori	r17, 0x01	; 1
    4d14:	2c c0       	rjmp	.+88     	; 0x4d6e <vfprintf+0xdc>
    4d16:	12 60       	ori	r17, 0x02	; 2
    4d18:	14 60       	ori	r17, 0x04	; 4
    4d1a:	29 c0       	rjmp	.+82     	; 0x4d6e <vfprintf+0xdc>
    4d1c:	18 60       	ori	r17, 0x08	; 8
    4d1e:	27 c0       	rjmp	.+78     	; 0x4d6e <vfprintf+0xdc>
    4d20:	10 61       	ori	r17, 0x10	; 16
    4d22:	25 c0       	rjmp	.+74     	; 0x4d6e <vfprintf+0xdc>
    4d24:	17 fd       	sbrc	r17, 7
    4d26:	2e c0       	rjmp	.+92     	; 0x4d84 <vfprintf+0xf2>
    4d28:	28 2f       	mov	r18, r24
    4d2a:	20 53       	subi	r18, 0x30	; 48
    4d2c:	2a 30       	cpi	r18, 0x0A	; 10
    4d2e:	98 f4       	brcc	.+38     	; 0x4d56 <vfprintf+0xc4>
    4d30:	16 ff       	sbrs	r17, 6
    4d32:	08 c0       	rjmp	.+16     	; 0x4d44 <vfprintf+0xb2>
    4d34:	8f 2d       	mov	r24, r15
    4d36:	88 0f       	add	r24, r24
    4d38:	f8 2e       	mov	r15, r24
    4d3a:	ff 0c       	add	r15, r15
    4d3c:	ff 0c       	add	r15, r15
    4d3e:	f8 0e       	add	r15, r24
    4d40:	f2 0e       	add	r15, r18
    4d42:	15 c0       	rjmp	.+42     	; 0x4d6e <vfprintf+0xdc>
    4d44:	8e 2d       	mov	r24, r14
    4d46:	88 0f       	add	r24, r24
    4d48:	e8 2e       	mov	r14, r24
    4d4a:	ee 0c       	add	r14, r14
    4d4c:	ee 0c       	add	r14, r14
    4d4e:	e8 0e       	add	r14, r24
    4d50:	e2 0e       	add	r14, r18
    4d52:	10 62       	ori	r17, 0x20	; 32
    4d54:	0c c0       	rjmp	.+24     	; 0x4d6e <vfprintf+0xdc>
    4d56:	8e 32       	cpi	r24, 0x2E	; 46
    4d58:	21 f4       	brne	.+8      	; 0x4d62 <vfprintf+0xd0>
    4d5a:	16 fd       	sbrc	r17, 6
    4d5c:	60 c1       	rjmp	.+704    	; 0x501e <vfprintf+0x38c>
    4d5e:	10 64       	ori	r17, 0x40	; 64
    4d60:	06 c0       	rjmp	.+12     	; 0x4d6e <vfprintf+0xdc>
    4d62:	8c 36       	cpi	r24, 0x6C	; 108
    4d64:	11 f4       	brne	.+4      	; 0x4d6a <vfprintf+0xd8>
    4d66:	10 68       	ori	r17, 0x80	; 128
    4d68:	02 c0       	rjmp	.+4      	; 0x4d6e <vfprintf+0xdc>
    4d6a:	88 36       	cpi	r24, 0x68	; 104
    4d6c:	59 f4       	brne	.+22     	; 0x4d84 <vfprintf+0xf2>
    4d6e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4d70:	fd 85       	ldd	r31, Y+13	; 0x0d
    4d72:	93 fd       	sbrc	r25, 3
    4d74:	85 91       	lpm	r24, Z+
    4d76:	93 ff       	sbrs	r25, 3
    4d78:	81 91       	ld	r24, Z+
    4d7a:	ec 87       	std	Y+12, r30	; 0x0c
    4d7c:	fd 87       	std	Y+13, r31	; 0x0d
    4d7e:	88 23       	and	r24, r24
    4d80:	09 f0       	breq	.+2      	; 0x4d84 <vfprintf+0xf2>
    4d82:	b8 cf       	rjmp	.-144    	; 0x4cf4 <vfprintf+0x62>
    4d84:	98 2f       	mov	r25, r24
    4d86:	95 54       	subi	r25, 0x45	; 69
    4d88:	93 30       	cpi	r25, 0x03	; 3
    4d8a:	18 f0       	brcs	.+6      	; 0x4d92 <vfprintf+0x100>
    4d8c:	90 52       	subi	r25, 0x20	; 32
    4d8e:	93 30       	cpi	r25, 0x03	; 3
    4d90:	38 f4       	brcc	.+14     	; 0x4da0 <vfprintf+0x10e>
    4d92:	24 e0       	ldi	r18, 0x04	; 4
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	a2 0e       	add	r10, r18
    4d98:	b3 1e       	adc	r11, r19
    4d9a:	3f e3       	ldi	r19, 0x3F	; 63
    4d9c:	39 83       	std	Y+1, r19	; 0x01
    4d9e:	0f c0       	rjmp	.+30     	; 0x4dbe <vfprintf+0x12c>
    4da0:	83 36       	cpi	r24, 0x63	; 99
    4da2:	31 f0       	breq	.+12     	; 0x4db0 <vfprintf+0x11e>
    4da4:	83 37       	cpi	r24, 0x73	; 115
    4da6:	81 f0       	breq	.+32     	; 0x4dc8 <vfprintf+0x136>
    4da8:	83 35       	cpi	r24, 0x53	; 83
    4daa:	09 f0       	breq	.+2      	; 0x4dae <vfprintf+0x11c>
    4dac:	56 c0       	rjmp	.+172    	; 0x4e5a <vfprintf+0x1c8>
    4dae:	21 c0       	rjmp	.+66     	; 0x4df2 <vfprintf+0x160>
    4db0:	f5 01       	movw	r30, r10
    4db2:	80 81       	ld	r24, Z
    4db4:	89 83       	std	Y+1, r24	; 0x01
    4db6:	22 e0       	ldi	r18, 0x02	; 2
    4db8:	30 e0       	ldi	r19, 0x00	; 0
    4dba:	a2 0e       	add	r10, r18
    4dbc:	b3 1e       	adc	r11, r19
    4dbe:	21 e0       	ldi	r18, 0x01	; 1
    4dc0:	c2 2e       	mov	r12, r18
    4dc2:	d1 2c       	mov	r13, r1
    4dc4:	42 01       	movw	r8, r4
    4dc6:	13 c0       	rjmp	.+38     	; 0x4dee <vfprintf+0x15c>
    4dc8:	92 e0       	ldi	r25, 0x02	; 2
    4dca:	29 2e       	mov	r2, r25
    4dcc:	31 2c       	mov	r3, r1
    4dce:	2a 0c       	add	r2, r10
    4dd0:	3b 1c       	adc	r3, r11
    4dd2:	f5 01       	movw	r30, r10
    4dd4:	80 80       	ld	r8, Z
    4dd6:	91 80       	ldd	r9, Z+1	; 0x01
    4dd8:	16 ff       	sbrs	r17, 6
    4dda:	03 c0       	rjmp	.+6      	; 0x4de2 <vfprintf+0x150>
    4ddc:	6f 2d       	mov	r22, r15
    4dde:	70 e0       	ldi	r23, 0x00	; 0
    4de0:	02 c0       	rjmp	.+4      	; 0x4de6 <vfprintf+0x154>
    4de2:	6f ef       	ldi	r22, 0xFF	; 255
    4de4:	7f ef       	ldi	r23, 0xFF	; 255
    4de6:	c4 01       	movw	r24, r8
    4de8:	65 d1       	rcall	.+714    	; 0x50b4 <strnlen>
    4dea:	6c 01       	movw	r12, r24
    4dec:	51 01       	movw	r10, r2
    4dee:	1f 77       	andi	r17, 0x7F	; 127
    4df0:	14 c0       	rjmp	.+40     	; 0x4e1a <vfprintf+0x188>
    4df2:	82 e0       	ldi	r24, 0x02	; 2
    4df4:	28 2e       	mov	r2, r24
    4df6:	31 2c       	mov	r3, r1
    4df8:	2a 0c       	add	r2, r10
    4dfa:	3b 1c       	adc	r3, r11
    4dfc:	f5 01       	movw	r30, r10
    4dfe:	80 80       	ld	r8, Z
    4e00:	91 80       	ldd	r9, Z+1	; 0x01
    4e02:	16 ff       	sbrs	r17, 6
    4e04:	03 c0       	rjmp	.+6      	; 0x4e0c <vfprintf+0x17a>
    4e06:	6f 2d       	mov	r22, r15
    4e08:	70 e0       	ldi	r23, 0x00	; 0
    4e0a:	02 c0       	rjmp	.+4      	; 0x4e10 <vfprintf+0x17e>
    4e0c:	6f ef       	ldi	r22, 0xFF	; 255
    4e0e:	7f ef       	ldi	r23, 0xFF	; 255
    4e10:	c4 01       	movw	r24, r8
    4e12:	45 d1       	rcall	.+650    	; 0x509e <strnlen_P>
    4e14:	6c 01       	movw	r12, r24
    4e16:	10 68       	ori	r17, 0x80	; 128
    4e18:	51 01       	movw	r10, r2
    4e1a:	13 fd       	sbrc	r17, 3
    4e1c:	1a c0       	rjmp	.+52     	; 0x4e52 <vfprintf+0x1c0>
    4e1e:	05 c0       	rjmp	.+10     	; 0x4e2a <vfprintf+0x198>
    4e20:	80 e2       	ldi	r24, 0x20	; 32
    4e22:	90 e0       	ldi	r25, 0x00	; 0
    4e24:	b3 01       	movw	r22, r6
    4e26:	51 d1       	rcall	.+674    	; 0x50ca <fputc>
    4e28:	ea 94       	dec	r14
    4e2a:	8e 2d       	mov	r24, r14
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	c8 16       	cp	r12, r24
    4e30:	d9 06       	cpc	r13, r25
    4e32:	b0 f3       	brcs	.-20     	; 0x4e20 <vfprintf+0x18e>
    4e34:	0e c0       	rjmp	.+28     	; 0x4e52 <vfprintf+0x1c0>
    4e36:	f4 01       	movw	r30, r8
    4e38:	17 fd       	sbrc	r17, 7
    4e3a:	85 91       	lpm	r24, Z+
    4e3c:	17 ff       	sbrs	r17, 7
    4e3e:	81 91       	ld	r24, Z+
    4e40:	4f 01       	movw	r8, r30
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	b3 01       	movw	r22, r6
    4e46:	41 d1       	rcall	.+642    	; 0x50ca <fputc>
    4e48:	e1 10       	cpse	r14, r1
    4e4a:	ea 94       	dec	r14
    4e4c:	08 94       	sec
    4e4e:	c1 08       	sbc	r12, r1
    4e50:	d1 08       	sbc	r13, r1
    4e52:	c1 14       	cp	r12, r1
    4e54:	d1 04       	cpc	r13, r1
    4e56:	79 f7       	brne	.-34     	; 0x4e36 <vfprintf+0x1a4>
    4e58:	df c0       	rjmp	.+446    	; 0x5018 <vfprintf+0x386>
    4e5a:	84 36       	cpi	r24, 0x64	; 100
    4e5c:	11 f0       	breq	.+4      	; 0x4e62 <vfprintf+0x1d0>
    4e5e:	89 36       	cpi	r24, 0x69	; 105
    4e60:	49 f5       	brne	.+82     	; 0x4eb4 <vfprintf+0x222>
    4e62:	f5 01       	movw	r30, r10
    4e64:	17 ff       	sbrs	r17, 7
    4e66:	07 c0       	rjmp	.+14     	; 0x4e76 <vfprintf+0x1e4>
    4e68:	80 81       	ld	r24, Z
    4e6a:	91 81       	ldd	r25, Z+1	; 0x01
    4e6c:	a2 81       	ldd	r26, Z+2	; 0x02
    4e6e:	b3 81       	ldd	r27, Z+3	; 0x03
    4e70:	24 e0       	ldi	r18, 0x04	; 4
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	08 c0       	rjmp	.+16     	; 0x4e86 <vfprintf+0x1f4>
    4e76:	80 81       	ld	r24, Z
    4e78:	91 81       	ldd	r25, Z+1	; 0x01
    4e7a:	aa 27       	eor	r26, r26
    4e7c:	97 fd       	sbrc	r25, 7
    4e7e:	a0 95       	com	r26
    4e80:	ba 2f       	mov	r27, r26
    4e82:	22 e0       	ldi	r18, 0x02	; 2
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	a2 0e       	add	r10, r18
    4e88:	b3 1e       	adc	r11, r19
    4e8a:	01 2f       	mov	r16, r17
    4e8c:	0f 76       	andi	r16, 0x6F	; 111
    4e8e:	b7 ff       	sbrs	r27, 7
    4e90:	08 c0       	rjmp	.+16     	; 0x4ea2 <vfprintf+0x210>
    4e92:	b0 95       	com	r27
    4e94:	a0 95       	com	r26
    4e96:	90 95       	com	r25
    4e98:	81 95       	neg	r24
    4e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e9c:	af 4f       	sbci	r26, 0xFF	; 255
    4e9e:	bf 4f       	sbci	r27, 0xFF	; 255
    4ea0:	00 68       	ori	r16, 0x80	; 128
    4ea2:	bc 01       	movw	r22, r24
    4ea4:	cd 01       	movw	r24, r26
    4ea6:	a2 01       	movw	r20, r4
    4ea8:	2a e0       	ldi	r18, 0x0A	; 10
    4eaa:	30 e0       	ldi	r19, 0x00	; 0
    4eac:	3a d1       	rcall	.+628    	; 0x5122 <__ultoa_invert>
    4eae:	d8 2e       	mov	r13, r24
    4eb0:	d4 18       	sub	r13, r4
    4eb2:	3e c0       	rjmp	.+124    	; 0x4f30 <vfprintf+0x29e>
    4eb4:	85 37       	cpi	r24, 0x75	; 117
    4eb6:	21 f4       	brne	.+8      	; 0x4ec0 <vfprintf+0x22e>
    4eb8:	1f 7e       	andi	r17, 0xEF	; 239
    4eba:	2a e0       	ldi	r18, 0x0A	; 10
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	20 c0       	rjmp	.+64     	; 0x4f00 <vfprintf+0x26e>
    4ec0:	19 7f       	andi	r17, 0xF9	; 249
    4ec2:	8f 36       	cpi	r24, 0x6F	; 111
    4ec4:	a9 f0       	breq	.+42     	; 0x4ef0 <vfprintf+0x25e>
    4ec6:	80 37       	cpi	r24, 0x70	; 112
    4ec8:	20 f4       	brcc	.+8      	; 0x4ed2 <vfprintf+0x240>
    4eca:	88 35       	cpi	r24, 0x58	; 88
    4ecc:	09 f0       	breq	.+2      	; 0x4ed0 <vfprintf+0x23e>
    4ece:	a7 c0       	rjmp	.+334    	; 0x501e <vfprintf+0x38c>
    4ed0:	0b c0       	rjmp	.+22     	; 0x4ee8 <vfprintf+0x256>
    4ed2:	80 37       	cpi	r24, 0x70	; 112
    4ed4:	21 f0       	breq	.+8      	; 0x4ede <vfprintf+0x24c>
    4ed6:	88 37       	cpi	r24, 0x78	; 120
    4ed8:	09 f0       	breq	.+2      	; 0x4edc <vfprintf+0x24a>
    4eda:	a1 c0       	rjmp	.+322    	; 0x501e <vfprintf+0x38c>
    4edc:	01 c0       	rjmp	.+2      	; 0x4ee0 <vfprintf+0x24e>
    4ede:	10 61       	ori	r17, 0x10	; 16
    4ee0:	14 ff       	sbrs	r17, 4
    4ee2:	09 c0       	rjmp	.+18     	; 0x4ef6 <vfprintf+0x264>
    4ee4:	14 60       	ori	r17, 0x04	; 4
    4ee6:	07 c0       	rjmp	.+14     	; 0x4ef6 <vfprintf+0x264>
    4ee8:	14 ff       	sbrs	r17, 4
    4eea:	08 c0       	rjmp	.+16     	; 0x4efc <vfprintf+0x26a>
    4eec:	16 60       	ori	r17, 0x06	; 6
    4eee:	06 c0       	rjmp	.+12     	; 0x4efc <vfprintf+0x26a>
    4ef0:	28 e0       	ldi	r18, 0x08	; 8
    4ef2:	30 e0       	ldi	r19, 0x00	; 0
    4ef4:	05 c0       	rjmp	.+10     	; 0x4f00 <vfprintf+0x26e>
    4ef6:	20 e1       	ldi	r18, 0x10	; 16
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	02 c0       	rjmp	.+4      	; 0x4f00 <vfprintf+0x26e>
    4efc:	20 e1       	ldi	r18, 0x10	; 16
    4efe:	32 e0       	ldi	r19, 0x02	; 2
    4f00:	f5 01       	movw	r30, r10
    4f02:	17 ff       	sbrs	r17, 7
    4f04:	07 c0       	rjmp	.+14     	; 0x4f14 <vfprintf+0x282>
    4f06:	60 81       	ld	r22, Z
    4f08:	71 81       	ldd	r23, Z+1	; 0x01
    4f0a:	82 81       	ldd	r24, Z+2	; 0x02
    4f0c:	93 81       	ldd	r25, Z+3	; 0x03
    4f0e:	44 e0       	ldi	r20, 0x04	; 4
    4f10:	50 e0       	ldi	r21, 0x00	; 0
    4f12:	06 c0       	rjmp	.+12     	; 0x4f20 <vfprintf+0x28e>
    4f14:	60 81       	ld	r22, Z
    4f16:	71 81       	ldd	r23, Z+1	; 0x01
    4f18:	80 e0       	ldi	r24, 0x00	; 0
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	42 e0       	ldi	r20, 0x02	; 2
    4f1e:	50 e0       	ldi	r21, 0x00	; 0
    4f20:	a4 0e       	add	r10, r20
    4f22:	b5 1e       	adc	r11, r21
    4f24:	a2 01       	movw	r20, r4
    4f26:	fd d0       	rcall	.+506    	; 0x5122 <__ultoa_invert>
    4f28:	d8 2e       	mov	r13, r24
    4f2a:	d4 18       	sub	r13, r4
    4f2c:	01 2f       	mov	r16, r17
    4f2e:	0f 77       	andi	r16, 0x7F	; 127
    4f30:	06 ff       	sbrs	r16, 6
    4f32:	09 c0       	rjmp	.+18     	; 0x4f46 <vfprintf+0x2b4>
    4f34:	0e 7f       	andi	r16, 0xFE	; 254
    4f36:	df 14       	cp	r13, r15
    4f38:	30 f4       	brcc	.+12     	; 0x4f46 <vfprintf+0x2b4>
    4f3a:	04 ff       	sbrs	r16, 4
    4f3c:	06 c0       	rjmp	.+12     	; 0x4f4a <vfprintf+0x2b8>
    4f3e:	02 fd       	sbrc	r16, 2
    4f40:	04 c0       	rjmp	.+8      	; 0x4f4a <vfprintf+0x2b8>
    4f42:	0f 7e       	andi	r16, 0xEF	; 239
    4f44:	02 c0       	rjmp	.+4      	; 0x4f4a <vfprintf+0x2b8>
    4f46:	1d 2d       	mov	r17, r13
    4f48:	01 c0       	rjmp	.+2      	; 0x4f4c <vfprintf+0x2ba>
    4f4a:	1f 2d       	mov	r17, r15
    4f4c:	80 2f       	mov	r24, r16
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	04 ff       	sbrs	r16, 4
    4f52:	0c c0       	rjmp	.+24     	; 0x4f6c <vfprintf+0x2da>
    4f54:	fe 01       	movw	r30, r28
    4f56:	ed 0d       	add	r30, r13
    4f58:	f1 1d       	adc	r31, r1
    4f5a:	20 81       	ld	r18, Z
    4f5c:	20 33       	cpi	r18, 0x30	; 48
    4f5e:	11 f4       	brne	.+4      	; 0x4f64 <vfprintf+0x2d2>
    4f60:	09 7e       	andi	r16, 0xE9	; 233
    4f62:	09 c0       	rjmp	.+18     	; 0x4f76 <vfprintf+0x2e4>
    4f64:	02 ff       	sbrs	r16, 2
    4f66:	06 c0       	rjmp	.+12     	; 0x4f74 <vfprintf+0x2e2>
    4f68:	1e 5f       	subi	r17, 0xFE	; 254
    4f6a:	05 c0       	rjmp	.+10     	; 0x4f76 <vfprintf+0x2e4>
    4f6c:	86 78       	andi	r24, 0x86	; 134
    4f6e:	90 70       	andi	r25, 0x00	; 0
    4f70:	00 97       	sbiw	r24, 0x00	; 0
    4f72:	09 f0       	breq	.+2      	; 0x4f76 <vfprintf+0x2e4>
    4f74:	1f 5f       	subi	r17, 0xFF	; 255
    4f76:	80 2e       	mov	r8, r16
    4f78:	99 24       	eor	r9, r9
    4f7a:	03 fd       	sbrc	r16, 3
    4f7c:	11 c0       	rjmp	.+34     	; 0x4fa0 <vfprintf+0x30e>
    4f7e:	00 ff       	sbrs	r16, 0
    4f80:	0c c0       	rjmp	.+24     	; 0x4f9a <vfprintf+0x308>
    4f82:	fd 2c       	mov	r15, r13
    4f84:	1e 15       	cp	r17, r14
    4f86:	48 f4       	brcc	.+18     	; 0x4f9a <vfprintf+0x308>
    4f88:	fe 0c       	add	r15, r14
    4f8a:	f1 1a       	sub	r15, r17
    4f8c:	1e 2d       	mov	r17, r14
    4f8e:	05 c0       	rjmp	.+10     	; 0x4f9a <vfprintf+0x308>
    4f90:	80 e2       	ldi	r24, 0x20	; 32
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	b3 01       	movw	r22, r6
    4f96:	99 d0       	rcall	.+306    	; 0x50ca <fputc>
    4f98:	1f 5f       	subi	r17, 0xFF	; 255
    4f9a:	1e 15       	cp	r17, r14
    4f9c:	c8 f3       	brcs	.-14     	; 0x4f90 <vfprintf+0x2fe>
    4f9e:	04 c0       	rjmp	.+8      	; 0x4fa8 <vfprintf+0x316>
    4fa0:	1e 15       	cp	r17, r14
    4fa2:	10 f4       	brcc	.+4      	; 0x4fa8 <vfprintf+0x316>
    4fa4:	e1 1a       	sub	r14, r17
    4fa6:	01 c0       	rjmp	.+2      	; 0x4faa <vfprintf+0x318>
    4fa8:	ee 24       	eor	r14, r14
    4faa:	84 fe       	sbrs	r8, 4
    4fac:	0e c0       	rjmp	.+28     	; 0x4fca <vfprintf+0x338>
    4fae:	80 e3       	ldi	r24, 0x30	; 48
    4fb0:	90 e0       	ldi	r25, 0x00	; 0
    4fb2:	b3 01       	movw	r22, r6
    4fb4:	8a d0       	rcall	.+276    	; 0x50ca <fputc>
    4fb6:	82 fe       	sbrs	r8, 2
    4fb8:	1d c0       	rjmp	.+58     	; 0x4ff4 <vfprintf+0x362>
    4fba:	81 fe       	sbrs	r8, 1
    4fbc:	03 c0       	rjmp	.+6      	; 0x4fc4 <vfprintf+0x332>
    4fbe:	88 e5       	ldi	r24, 0x58	; 88
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	10 c0       	rjmp	.+32     	; 0x4fe4 <vfprintf+0x352>
    4fc4:	88 e7       	ldi	r24, 0x78	; 120
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	0d c0       	rjmp	.+26     	; 0x4fe4 <vfprintf+0x352>
    4fca:	c4 01       	movw	r24, r8
    4fcc:	86 78       	andi	r24, 0x86	; 134
    4fce:	90 70       	andi	r25, 0x00	; 0
    4fd0:	00 97       	sbiw	r24, 0x00	; 0
    4fd2:	81 f0       	breq	.+32     	; 0x4ff4 <vfprintf+0x362>
    4fd4:	81 fc       	sbrc	r8, 1
    4fd6:	02 c0       	rjmp	.+4      	; 0x4fdc <vfprintf+0x34a>
    4fd8:	80 e2       	ldi	r24, 0x20	; 32
    4fda:	01 c0       	rjmp	.+2      	; 0x4fde <vfprintf+0x34c>
    4fdc:	8b e2       	ldi	r24, 0x2B	; 43
    4fde:	07 fd       	sbrc	r16, 7
    4fe0:	8d e2       	ldi	r24, 0x2D	; 45
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	b3 01       	movw	r22, r6
    4fe6:	71 d0       	rcall	.+226    	; 0x50ca <fputc>
    4fe8:	05 c0       	rjmp	.+10     	; 0x4ff4 <vfprintf+0x362>
    4fea:	80 e3       	ldi	r24, 0x30	; 48
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	b3 01       	movw	r22, r6
    4ff0:	6c d0       	rcall	.+216    	; 0x50ca <fputc>
    4ff2:	fa 94       	dec	r15
    4ff4:	df 14       	cp	r13, r15
    4ff6:	c8 f3       	brcs	.-14     	; 0x4fea <vfprintf+0x358>
    4ff8:	da 94       	dec	r13
    4ffa:	f2 01       	movw	r30, r4
    4ffc:	ed 0d       	add	r30, r13
    4ffe:	f1 1d       	adc	r31, r1
    5000:	80 81       	ld	r24, Z
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	b3 01       	movw	r22, r6
    5006:	61 d0       	rcall	.+194    	; 0x50ca <fputc>
    5008:	dd 20       	and	r13, r13
    500a:	b1 f7       	brne	.-20     	; 0x4ff8 <vfprintf+0x366>
    500c:	05 c0       	rjmp	.+10     	; 0x5018 <vfprintf+0x386>
    500e:	80 e2       	ldi	r24, 0x20	; 32
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	b3 01       	movw	r22, r6
    5014:	5a d0       	rcall	.+180    	; 0x50ca <fputc>
    5016:	ea 94       	dec	r14
    5018:	ee 20       	and	r14, r14
    501a:	c9 f7       	brne	.-14     	; 0x500e <vfprintf+0x37c>
    501c:	4d ce       	rjmp	.-870    	; 0x4cb8 <vfprintf+0x26>
    501e:	f3 01       	movw	r30, r6
    5020:	86 81       	ldd	r24, Z+6	; 0x06
    5022:	97 81       	ldd	r25, Z+7	; 0x07
    5024:	02 c0       	rjmp	.+4      	; 0x502a <vfprintf+0x398>
    5026:	8f ef       	ldi	r24, 0xFF	; 255
    5028:	9f ef       	ldi	r25, 0xFF	; 255
    502a:	2d 96       	adiw	r28, 0x0d	; 13
    502c:	e2 e1       	ldi	r30, 0x12	; 18
    502e:	0b c1       	rjmp	.+534    	; 0x5246 <__epilogue_restores__>

00005030 <__eerd_block_x32a4u>:
    5030:	e0 ec       	ldi	r30, 0xC0	; 192
    5032:	f1 e0       	ldi	r31, 0x01	; 1
    5034:	a7 85       	ldd	r26, Z+15	; 0x0f
    5036:	a7 fd       	sbrc	r26, 7
    5038:	fd cf       	rjmp	.-6      	; 0x5034 <__eerd_block_x32a4u+0x4>
    503a:	a4 85       	ldd	r26, Z+12	; 0x0c
    503c:	a8 60       	ori	r26, 0x08	; 8
    503e:	a4 87       	std	Z+12, r26	; 0x0c
    5040:	60 50       	subi	r22, 0x00	; 0
    5042:	70 4f       	sbci	r23, 0xF0	; 240
    5044:	f0 cd       	rjmp	.-1056   	; 0x4c26 <memcpy>

00005046 <__eewr_block_x32a4u>:
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	02 c0       	rjmp	.+4      	; 0x5050 <__eewr_block_x32a4u+0xa>
    504c:	2d 91       	ld	r18, X+
    504e:	05 d0       	rcall	.+10     	; 0x505a <__eewr_r18_x32a4u>
    5050:	41 50       	subi	r20, 0x01	; 1
    5052:	50 40       	sbci	r21, 0x00	; 0
    5054:	d8 f7       	brcc	.-10     	; 0x504c <__eewr_block_x32a4u+0x6>
    5056:	08 95       	ret

00005058 <__eewr_byte_x32a4u>:
    5058:	26 2f       	mov	r18, r22

0000505a <__eewr_r18_x32a4u>:
    505a:	e0 ec       	ldi	r30, 0xC0	; 192
    505c:	f1 e0       	ldi	r31, 0x01	; 1
    505e:	37 85       	ldd	r19, Z+15	; 0x0f
    5060:	37 fd       	sbrc	r19, 7
    5062:	fd cf       	rjmp	.-6      	; 0x505e <__eewr_r18_x32a4u+0x4>
    5064:	34 85       	ldd	r19, Z+12	; 0x0c
    5066:	37 7f       	andi	r19, 0xF7	; 247
    5068:	34 87       	std	Z+12, r19	; 0x0c
    506a:	37 85       	ldd	r19, Z+15	; 0x0f
    506c:	31 ff       	sbrs	r19, 1
    506e:	09 c0       	rjmp	.+18     	; 0x5082 <__eewr_r18_x32a4u+0x28>
    5070:	36 e3       	ldi	r19, 0x36	; 54
    5072:	32 87       	std	Z+10, r19	; 0x0a
    5074:	38 ed       	ldi	r19, 0xD8	; 216
    5076:	34 bf       	out	0x34, r19	; 52
    5078:	31 e0       	ldi	r19, 0x01	; 1
    507a:	33 87       	std	Z+11, r19	; 0x0b
    507c:	37 85       	ldd	r19, Z+15	; 0x0f
    507e:	37 fd       	sbrc	r19, 7
    5080:	fd cf       	rjmp	.-6      	; 0x507c <__eewr_r18_x32a4u+0x22>
    5082:	33 e3       	ldi	r19, 0x33	; 51
    5084:	32 87       	std	Z+10, r19	; 0x0a
    5086:	80 83       	st	Z, r24
    5088:	91 83       	std	Z+1, r25	; 0x01
    508a:	12 82       	std	Z+2, r1	; 0x02
    508c:	24 83       	std	Z+4, r18	; 0x04
    508e:	25 e3       	ldi	r18, 0x35	; 53
    5090:	22 87       	std	Z+10, r18	; 0x0a
    5092:	28 ed       	ldi	r18, 0xD8	; 216
    5094:	31 e0       	ldi	r19, 0x01	; 1
    5096:	24 bf       	out	0x34, r18	; 52
    5098:	33 87       	std	Z+11, r19	; 0x0b
    509a:	01 96       	adiw	r24, 0x01	; 1
    509c:	08 95       	ret

0000509e <strnlen_P>:
    509e:	fc 01       	movw	r30, r24
    50a0:	05 90       	lpm	r0, Z+
    50a2:	61 50       	subi	r22, 0x01	; 1
    50a4:	70 40       	sbci	r23, 0x00	; 0
    50a6:	01 10       	cpse	r0, r1
    50a8:	d8 f7       	brcc	.-10     	; 0x50a0 <strnlen_P+0x2>
    50aa:	80 95       	com	r24
    50ac:	90 95       	com	r25
    50ae:	8e 0f       	add	r24, r30
    50b0:	9f 1f       	adc	r25, r31
    50b2:	08 95       	ret

000050b4 <strnlen>:
    50b4:	fc 01       	movw	r30, r24
    50b6:	61 50       	subi	r22, 0x01	; 1
    50b8:	70 40       	sbci	r23, 0x00	; 0
    50ba:	01 90       	ld	r0, Z+
    50bc:	01 10       	cpse	r0, r1
    50be:	d8 f7       	brcc	.-10     	; 0x50b6 <strnlen+0x2>
    50c0:	80 95       	com	r24
    50c2:	90 95       	com	r25
    50c4:	8e 0f       	add	r24, r30
    50c6:	9f 1f       	adc	r25, r31
    50c8:	08 95       	ret

000050ca <fputc>:
    50ca:	0f 93       	push	r16
    50cc:	1f 93       	push	r17
    50ce:	cf 93       	push	r28
    50d0:	df 93       	push	r29
    50d2:	8c 01       	movw	r16, r24
    50d4:	eb 01       	movw	r28, r22
    50d6:	8b 81       	ldd	r24, Y+3	; 0x03
    50d8:	81 ff       	sbrs	r24, 1
    50da:	1b c0       	rjmp	.+54     	; 0x5112 <fputc+0x48>
    50dc:	82 ff       	sbrs	r24, 2
    50de:	0d c0       	rjmp	.+26     	; 0x50fa <fputc+0x30>
    50e0:	2e 81       	ldd	r18, Y+6	; 0x06
    50e2:	3f 81       	ldd	r19, Y+7	; 0x07
    50e4:	8c 81       	ldd	r24, Y+4	; 0x04
    50e6:	9d 81       	ldd	r25, Y+5	; 0x05
    50e8:	28 17       	cp	r18, r24
    50ea:	39 07       	cpc	r19, r25
    50ec:	64 f4       	brge	.+24     	; 0x5106 <fputc+0x3c>
    50ee:	e8 81       	ld	r30, Y
    50f0:	f9 81       	ldd	r31, Y+1	; 0x01
    50f2:	01 93       	st	Z+, r16
    50f4:	e8 83       	st	Y, r30
    50f6:	f9 83       	std	Y+1, r31	; 0x01
    50f8:	06 c0       	rjmp	.+12     	; 0x5106 <fputc+0x3c>
    50fa:	e8 85       	ldd	r30, Y+8	; 0x08
    50fc:	f9 85       	ldd	r31, Y+9	; 0x09
    50fe:	80 2f       	mov	r24, r16
    5100:	09 95       	icall
    5102:	00 97       	sbiw	r24, 0x00	; 0
    5104:	31 f4       	brne	.+12     	; 0x5112 <fputc+0x48>
    5106:	8e 81       	ldd	r24, Y+6	; 0x06
    5108:	9f 81       	ldd	r25, Y+7	; 0x07
    510a:	01 96       	adiw	r24, 0x01	; 1
    510c:	8e 83       	std	Y+6, r24	; 0x06
    510e:	9f 83       	std	Y+7, r25	; 0x07
    5110:	02 c0       	rjmp	.+4      	; 0x5116 <fputc+0x4c>
    5112:	0f ef       	ldi	r16, 0xFF	; 255
    5114:	1f ef       	ldi	r17, 0xFF	; 255
    5116:	c8 01       	movw	r24, r16
    5118:	df 91       	pop	r29
    511a:	cf 91       	pop	r28
    511c:	1f 91       	pop	r17
    511e:	0f 91       	pop	r16
    5120:	08 95       	ret

00005122 <__ultoa_invert>:
    5122:	fa 01       	movw	r30, r20
    5124:	aa 27       	eor	r26, r26
    5126:	28 30       	cpi	r18, 0x08	; 8
    5128:	51 f1       	breq	.+84     	; 0x517e <__ultoa_invert+0x5c>
    512a:	20 31       	cpi	r18, 0x10	; 16
    512c:	81 f1       	breq	.+96     	; 0x518e <__ultoa_invert+0x6c>
    512e:	e8 94       	clt
    5130:	6f 93       	push	r22
    5132:	6e 7f       	andi	r22, 0xFE	; 254
    5134:	6e 5f       	subi	r22, 0xFE	; 254
    5136:	7f 4f       	sbci	r23, 0xFF	; 255
    5138:	8f 4f       	sbci	r24, 0xFF	; 255
    513a:	9f 4f       	sbci	r25, 0xFF	; 255
    513c:	af 4f       	sbci	r26, 0xFF	; 255
    513e:	b1 e0       	ldi	r27, 0x01	; 1
    5140:	3e d0       	rcall	.+124    	; 0x51be <__ultoa_invert+0x9c>
    5142:	b4 e0       	ldi	r27, 0x04	; 4
    5144:	3c d0       	rcall	.+120    	; 0x51be <__ultoa_invert+0x9c>
    5146:	67 0f       	add	r22, r23
    5148:	78 1f       	adc	r23, r24
    514a:	89 1f       	adc	r24, r25
    514c:	9a 1f       	adc	r25, r26
    514e:	a1 1d       	adc	r26, r1
    5150:	68 0f       	add	r22, r24
    5152:	79 1f       	adc	r23, r25
    5154:	8a 1f       	adc	r24, r26
    5156:	91 1d       	adc	r25, r1
    5158:	a1 1d       	adc	r26, r1
    515a:	6a 0f       	add	r22, r26
    515c:	71 1d       	adc	r23, r1
    515e:	81 1d       	adc	r24, r1
    5160:	91 1d       	adc	r25, r1
    5162:	a1 1d       	adc	r26, r1
    5164:	20 d0       	rcall	.+64     	; 0x51a6 <__ultoa_invert+0x84>
    5166:	09 f4       	brne	.+2      	; 0x516a <__ultoa_invert+0x48>
    5168:	68 94       	set
    516a:	3f 91       	pop	r19
    516c:	2a e0       	ldi	r18, 0x0A	; 10
    516e:	26 9f       	mul	r18, r22
    5170:	11 24       	eor	r1, r1
    5172:	30 19       	sub	r19, r0
    5174:	30 5d       	subi	r19, 0xD0	; 208
    5176:	31 93       	st	Z+, r19
    5178:	de f6       	brtc	.-74     	; 0x5130 <__ultoa_invert+0xe>
    517a:	cf 01       	movw	r24, r30
    517c:	08 95       	ret
    517e:	46 2f       	mov	r20, r22
    5180:	47 70       	andi	r20, 0x07	; 7
    5182:	40 5d       	subi	r20, 0xD0	; 208
    5184:	41 93       	st	Z+, r20
    5186:	b3 e0       	ldi	r27, 0x03	; 3
    5188:	0f d0       	rcall	.+30     	; 0x51a8 <__ultoa_invert+0x86>
    518a:	c9 f7       	brne	.-14     	; 0x517e <__ultoa_invert+0x5c>
    518c:	f6 cf       	rjmp	.-20     	; 0x517a <__ultoa_invert+0x58>
    518e:	46 2f       	mov	r20, r22
    5190:	4f 70       	andi	r20, 0x0F	; 15
    5192:	40 5d       	subi	r20, 0xD0	; 208
    5194:	4a 33       	cpi	r20, 0x3A	; 58
    5196:	18 f0       	brcs	.+6      	; 0x519e <__ultoa_invert+0x7c>
    5198:	49 5d       	subi	r20, 0xD9	; 217
    519a:	31 fd       	sbrc	r19, 1
    519c:	40 52       	subi	r20, 0x20	; 32
    519e:	41 93       	st	Z+, r20
    51a0:	02 d0       	rcall	.+4      	; 0x51a6 <__ultoa_invert+0x84>
    51a2:	a9 f7       	brne	.-22     	; 0x518e <__ultoa_invert+0x6c>
    51a4:	ea cf       	rjmp	.-44     	; 0x517a <__ultoa_invert+0x58>
    51a6:	b4 e0       	ldi	r27, 0x04	; 4
    51a8:	a6 95       	lsr	r26
    51aa:	97 95       	ror	r25
    51ac:	87 95       	ror	r24
    51ae:	77 95       	ror	r23
    51b0:	67 95       	ror	r22
    51b2:	ba 95       	dec	r27
    51b4:	c9 f7       	brne	.-14     	; 0x51a8 <__ultoa_invert+0x86>
    51b6:	00 97       	sbiw	r24, 0x00	; 0
    51b8:	61 05       	cpc	r22, r1
    51ba:	71 05       	cpc	r23, r1
    51bc:	08 95       	ret
    51be:	9b 01       	movw	r18, r22
    51c0:	ac 01       	movw	r20, r24
    51c2:	0a 2e       	mov	r0, r26
    51c4:	06 94       	lsr	r0
    51c6:	57 95       	ror	r21
    51c8:	47 95       	ror	r20
    51ca:	37 95       	ror	r19
    51cc:	27 95       	ror	r18
    51ce:	ba 95       	dec	r27
    51d0:	c9 f7       	brne	.-14     	; 0x51c4 <__ultoa_invert+0xa2>
    51d2:	62 0f       	add	r22, r18
    51d4:	73 1f       	adc	r23, r19
    51d6:	84 1f       	adc	r24, r20
    51d8:	95 1f       	adc	r25, r21
    51da:	a0 1d       	adc	r26, r0
    51dc:	08 95       	ret

000051de <__divmodsi4>:
    51de:	97 fb       	bst	r25, 7
    51e0:	09 2e       	mov	r0, r25
    51e2:	05 26       	eor	r0, r21
    51e4:	0e d0       	rcall	.+28     	; 0x5202 <__divmodsi4_neg1>
    51e6:	57 fd       	sbrc	r21, 7
    51e8:	04 d0       	rcall	.+8      	; 0x51f2 <__divmodsi4_neg2>
    51ea:	45 d0       	rcall	.+138    	; 0x5276 <__udivmodsi4>
    51ec:	0a d0       	rcall	.+20     	; 0x5202 <__divmodsi4_neg1>
    51ee:	00 1c       	adc	r0, r0
    51f0:	38 f4       	brcc	.+14     	; 0x5200 <__divmodsi4_exit>

000051f2 <__divmodsi4_neg2>:
    51f2:	50 95       	com	r21
    51f4:	40 95       	com	r20
    51f6:	30 95       	com	r19
    51f8:	21 95       	neg	r18
    51fa:	3f 4f       	sbci	r19, 0xFF	; 255
    51fc:	4f 4f       	sbci	r20, 0xFF	; 255
    51fe:	5f 4f       	sbci	r21, 0xFF	; 255

00005200 <__divmodsi4_exit>:
    5200:	08 95       	ret

00005202 <__divmodsi4_neg1>:
    5202:	f6 f7       	brtc	.-4      	; 0x5200 <__divmodsi4_exit>
    5204:	90 95       	com	r25
    5206:	80 95       	com	r24
    5208:	70 95       	com	r23
    520a:	61 95       	neg	r22
    520c:	7f 4f       	sbci	r23, 0xFF	; 255
    520e:	8f 4f       	sbci	r24, 0xFF	; 255
    5210:	9f 4f       	sbci	r25, 0xFF	; 255
    5212:	08 95       	ret

00005214 <__prologue_saves__>:
    5214:	2f 92       	push	r2
    5216:	3f 92       	push	r3
    5218:	4f 92       	push	r4
    521a:	5f 92       	push	r5
    521c:	6f 92       	push	r6
    521e:	7f 92       	push	r7
    5220:	8f 92       	push	r8
    5222:	9f 92       	push	r9
    5224:	af 92       	push	r10
    5226:	bf 92       	push	r11
    5228:	cf 92       	push	r12
    522a:	df 92       	push	r13
    522c:	ef 92       	push	r14
    522e:	ff 92       	push	r15
    5230:	0f 93       	push	r16
    5232:	1f 93       	push	r17
    5234:	cf 93       	push	r28
    5236:	df 93       	push	r29
    5238:	cd b7       	in	r28, 0x3d	; 61
    523a:	de b7       	in	r29, 0x3e	; 62
    523c:	ca 1b       	sub	r28, r26
    523e:	db 0b       	sbc	r29, r27
    5240:	cd bf       	out	0x3d, r28	; 61
    5242:	de bf       	out	0x3e, r29	; 62
    5244:	09 94       	ijmp

00005246 <__epilogue_restores__>:
    5246:	2a 88       	ldd	r2, Y+18	; 0x12
    5248:	39 88       	ldd	r3, Y+17	; 0x11
    524a:	48 88       	ldd	r4, Y+16	; 0x10
    524c:	5f 84       	ldd	r5, Y+15	; 0x0f
    524e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5250:	7d 84       	ldd	r7, Y+13	; 0x0d
    5252:	8c 84       	ldd	r8, Y+12	; 0x0c
    5254:	9b 84       	ldd	r9, Y+11	; 0x0b
    5256:	aa 84       	ldd	r10, Y+10	; 0x0a
    5258:	b9 84       	ldd	r11, Y+9	; 0x09
    525a:	c8 84       	ldd	r12, Y+8	; 0x08
    525c:	df 80       	ldd	r13, Y+7	; 0x07
    525e:	ee 80       	ldd	r14, Y+6	; 0x06
    5260:	fd 80       	ldd	r15, Y+5	; 0x05
    5262:	0c 81       	ldd	r16, Y+4	; 0x04
    5264:	1b 81       	ldd	r17, Y+3	; 0x03
    5266:	aa 81       	ldd	r26, Y+2	; 0x02
    5268:	b9 81       	ldd	r27, Y+1	; 0x01
    526a:	ce 0f       	add	r28, r30
    526c:	d1 1d       	adc	r29, r1
    526e:	cd bf       	out	0x3d, r28	; 61
    5270:	de bf       	out	0x3e, r29	; 62
    5272:	ed 01       	movw	r28, r26
    5274:	08 95       	ret

00005276 <__udivmodsi4>:
    5276:	a1 e2       	ldi	r26, 0x21	; 33
    5278:	1a 2e       	mov	r1, r26
    527a:	aa 1b       	sub	r26, r26
    527c:	bb 1b       	sub	r27, r27
    527e:	fd 01       	movw	r30, r26
    5280:	0d c0       	rjmp	.+26     	; 0x529c <__udivmodsi4_ep>

00005282 <__udivmodsi4_loop>:
    5282:	aa 1f       	adc	r26, r26
    5284:	bb 1f       	adc	r27, r27
    5286:	ee 1f       	adc	r30, r30
    5288:	ff 1f       	adc	r31, r31
    528a:	a2 17       	cp	r26, r18
    528c:	b3 07       	cpc	r27, r19
    528e:	e4 07       	cpc	r30, r20
    5290:	f5 07       	cpc	r31, r21
    5292:	20 f0       	brcs	.+8      	; 0x529c <__udivmodsi4_ep>
    5294:	a2 1b       	sub	r26, r18
    5296:	b3 0b       	sbc	r27, r19
    5298:	e4 0b       	sbc	r30, r20
    529a:	f5 0b       	sbc	r31, r21

0000529c <__udivmodsi4_ep>:
    529c:	66 1f       	adc	r22, r22
    529e:	77 1f       	adc	r23, r23
    52a0:	88 1f       	adc	r24, r24
    52a2:	99 1f       	adc	r25, r25
    52a4:	1a 94       	dec	r1
    52a6:	69 f7       	brne	.-38     	; 0x5282 <__udivmodsi4_loop>
    52a8:	60 95       	com	r22
    52aa:	70 95       	com	r23
    52ac:	80 95       	com	r24
    52ae:	90 95       	com	r25
    52b0:	9b 01       	movw	r18, r22
    52b2:	ac 01       	movw	r20, r24
    52b4:	bd 01       	movw	r22, r26
    52b6:	cf 01       	movw	r24, r30
    52b8:	08 95       	ret

000052ba <_exit>:
    52ba:	f8 94       	cli

000052bc <__stop_program>:
    52bc:	ff cf       	rjmp	.-2      	; 0x52bc <__stop_program>
