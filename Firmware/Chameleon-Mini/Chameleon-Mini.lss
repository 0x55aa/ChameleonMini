
Chameleon-Mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000628e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00802000  0000628e  00006342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e37  00802092  00802092  000063d4  2**0
                  ALLOC
  3 .eeprom       00000033  00810000  00810000  000063d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000015a8  00000000  00000000  00006408  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000788  00000000  00000000  000079b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  00008167  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001c598  00000000  00000000  00008ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006309  00000000  00000000  0002547f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d67b  00000000  00000000  0002b788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002304  00000000  00000000  00038e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00007fb5  00000000  00000000  0003b108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000eb2a  00000000  00000000  000430bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001de0  00000000  00000000  00051be7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6d c4       	rjmp	.+2266   	; 0x8dc <__ctors_end>
       2:	00 00       	nop
       4:	87 c4       	rjmp	.+2318   	; 0x914 <__bad_interrupt>
       6:	00 00       	nop
       8:	85 c4       	rjmp	.+2314   	; 0x914 <__bad_interrupt>
       a:	00 00       	nop
       c:	83 c4       	rjmp	.+2310   	; 0x914 <__bad_interrupt>
       e:	00 00       	nop
      10:	81 c4       	rjmp	.+2306   	; 0x914 <__bad_interrupt>
      12:	00 00       	nop
      14:	7f c4       	rjmp	.+2302   	; 0x914 <__bad_interrupt>
      16:	00 00       	nop
      18:	7d c4       	rjmp	.+2298   	; 0x914 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7b c4       	rjmp	.+2294   	; 0x914 <__bad_interrupt>
      1e:	00 00       	nop
      20:	79 c4       	rjmp	.+2290   	; 0x914 <__bad_interrupt>
      22:	00 00       	nop
      24:	77 c4       	rjmp	.+2286   	; 0x914 <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c5       	rjmp	.+2566   	; 0xa30 <__vector_10>
      2a:	00 00       	nop
      2c:	73 c4       	rjmp	.+2278   	; 0x914 <__bad_interrupt>
      2e:	00 00       	nop
      30:	71 c4       	rjmp	.+2274   	; 0x914 <__bad_interrupt>
      32:	00 00       	nop
      34:	6f c4       	rjmp	.+2270   	; 0x914 <__bad_interrupt>
      36:	00 00       	nop
      38:	6d c4       	rjmp	.+2266   	; 0x914 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6b c4       	rjmp	.+2262   	; 0x914 <__bad_interrupt>
      3e:	00 00       	nop
      40:	69 c4       	rjmp	.+2258   	; 0x914 <__bad_interrupt>
      42:	00 00       	nop
      44:	67 c4       	rjmp	.+2254   	; 0x914 <__bad_interrupt>
      46:	00 00       	nop
      48:	65 c4       	rjmp	.+2250   	; 0x914 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	63 c4       	rjmp	.+2246   	; 0x914 <__bad_interrupt>
      4e:	00 00       	nop
      50:	61 c4       	rjmp	.+2242   	; 0x914 <__bad_interrupt>
      52:	00 00       	nop
      54:	5f c4       	rjmp	.+2238   	; 0x914 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__vector_22>
      5c:	5b c4       	rjmp	.+2230   	; 0x914 <__bad_interrupt>
      5e:	00 00       	nop
      60:	59 c4       	rjmp	.+2226   	; 0x914 <__bad_interrupt>
      62:	00 00       	nop
      64:	57 c4       	rjmp	.+2222   	; 0x914 <__bad_interrupt>
      66:	00 00       	nop
      68:	55 c4       	rjmp	.+2218   	; 0x914 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	53 c4       	rjmp	.+2214   	; 0x914 <__bad_interrupt>
      6e:	00 00       	nop
      70:	51 c4       	rjmp	.+2210   	; 0x914 <__bad_interrupt>
      72:	00 00       	nop
      74:	4f c4       	rjmp	.+2206   	; 0x914 <__bad_interrupt>
      76:	00 00       	nop
      78:	4d c4       	rjmp	.+2202   	; 0x914 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4b c4       	rjmp	.+2198   	; 0x914 <__bad_interrupt>
      7e:	00 00       	nop
      80:	49 c4       	rjmp	.+2194   	; 0x914 <__bad_interrupt>
      82:	00 00       	nop
      84:	47 c4       	rjmp	.+2190   	; 0x914 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__vector_34>
      8c:	43 c4       	rjmp	.+2182   	; 0x914 <__bad_interrupt>
      8e:	00 00       	nop
      90:	41 c4       	rjmp	.+2178   	; 0x914 <__bad_interrupt>
      92:	00 00       	nop
      94:	3f c4       	rjmp	.+2174   	; 0x914 <__bad_interrupt>
      96:	00 00       	nop
      98:	3d c4       	rjmp	.+2170   	; 0x914 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3b c4       	rjmp	.+2166   	; 0x914 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	39 c4       	rjmp	.+2162   	; 0x914 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	37 c4       	rjmp	.+2158   	; 0x914 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	35 c4       	rjmp	.+2154   	; 0x914 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	33 c4       	rjmp	.+2150   	; 0x914 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	31 c4       	rjmp	.+2146   	; 0x914 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2f c4       	rjmp	.+2142   	; 0x914 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2d c4       	rjmp	.+2138   	; 0x914 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2b c4       	rjmp	.+2134   	; 0x914 <__bad_interrupt>
      be:	00 00       	nop
      c0:	29 c4       	rjmp	.+2130   	; 0x914 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	27 c4       	rjmp	.+2126   	; 0x914 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	25 c4       	rjmp	.+2122   	; 0x914 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	23 c4       	rjmp	.+2118   	; 0x914 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	21 c4       	rjmp	.+2114   	; 0x914 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	1f c4       	rjmp	.+2110   	; 0x914 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	1d c4       	rjmp	.+2106   	; 0x914 <__bad_interrupt>
      da:	00 00       	nop
      dc:	1b c4       	rjmp	.+2102   	; 0x914 <__bad_interrupt>
      de:	00 00       	nop
      e0:	19 c4       	rjmp	.+2098   	; 0x914 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	17 c4       	rjmp	.+2094   	; 0x914 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	15 c4       	rjmp	.+2090   	; 0x914 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	13 c4       	rjmp	.+2086   	; 0x914 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	11 c4       	rjmp	.+2082   	; 0x914 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0f c4       	rjmp	.+2078   	; 0x914 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	0d c4       	rjmp	.+2074   	; 0x914 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	0b c4       	rjmp	.+2070   	; 0x914 <__bad_interrupt>
      fe:	00 00       	nop
     100:	09 c4       	rjmp	.+2066   	; 0x914 <__bad_interrupt>
     102:	00 00       	nop
     104:	07 c4       	rjmp	.+2062   	; 0x914 <__bad_interrupt>
     106:	00 00       	nop
     108:	05 c4       	rjmp	.+2058   	; 0x914 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	03 c4       	rjmp	.+2054   	; 0x914 <__bad_interrupt>
     10e:	00 00       	nop
     110:	01 c4       	rjmp	.+2050   	; 0x914 <__bad_interrupt>
     112:	00 00       	nop
     114:	ff c3       	rjmp	.+2046   	; 0x914 <__bad_interrupt>
     116:	00 00       	nop
     118:	fd c3       	rjmp	.+2042   	; 0x914 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	fb c3       	rjmp	.+2038   	; 0x914 <__bad_interrupt>
     11e:	00 00       	nop
     120:	f9 c3       	rjmp	.+2034   	; 0x914 <__bad_interrupt>
     122:	00 00       	nop
     124:	f7 c3       	rjmp	.+2030   	; 0x914 <__bad_interrupt>
     126:	00 00       	nop
     128:	f5 c3       	rjmp	.+2026   	; 0x914 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	f3 c3       	rjmp	.+2022   	; 0x914 <__bad_interrupt>
     12e:	00 00       	nop
     130:	f1 c3       	rjmp	.+2018   	; 0x914 <__bad_interrupt>
     132:	00 00       	nop
     134:	ef c3       	rjmp	.+2014   	; 0x914 <__bad_interrupt>
     136:	00 00       	nop
     138:	ed c3       	rjmp	.+2010   	; 0x914 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	eb c3       	rjmp	.+2006   	; 0x914 <__bad_interrupt>
     13e:	00 00       	nop
     140:	e9 c3       	rjmp	.+2002   	; 0x914 <__bad_interrupt>
     142:	00 00       	nop
     144:	e7 c3       	rjmp	.+1998   	; 0x914 <__bad_interrupt>
     146:	00 00       	nop
     148:	e5 c3       	rjmp	.+1994   	; 0x914 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__vector_83>
     150:	e1 c3       	rjmp	.+1986   	; 0x914 <__bad_interrupt>
     152:	00 00       	nop
     154:	df c3       	rjmp	.+1982   	; 0x914 <__bad_interrupt>
     156:	00 00       	nop
     158:	dd c3       	rjmp	.+1978   	; 0x914 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	db c3       	rjmp	.+1974   	; 0x914 <__bad_interrupt>
     15e:	00 00       	nop
     160:	d9 c3       	rjmp	.+1970   	; 0x914 <__bad_interrupt>
     162:	00 00       	nop
     164:	d7 c3       	rjmp	.+1966   	; 0x914 <__bad_interrupt>
     166:	00 00       	nop
     168:	d5 c3       	rjmp	.+1962   	; 0x914 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	d3 c3       	rjmp	.+1958   	; 0x914 <__bad_interrupt>
     16e:	00 00       	nop
     170:	d1 c3       	rjmp	.+1954   	; 0x914 <__bad_interrupt>
     172:	00 00       	nop
     174:	cf c3       	rjmp	.+1950   	; 0x914 <__bad_interrupt>
     176:	00 00       	nop
     178:	cd c3       	rjmp	.+1946   	; 0x914 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	cb c3       	rjmp	.+1942   	; 0x914 <__bad_interrupt>
     17e:	00 00       	nop
     180:	c9 c3       	rjmp	.+1938   	; 0x914 <__bad_interrupt>
     182:	00 00       	nop
     184:	c7 c3       	rjmp	.+1934   	; 0x914 <__bad_interrupt>
     186:	00 00       	nop
     188:	c5 c3       	rjmp	.+1930   	; 0x914 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	c3 c3       	rjmp	.+1926   	; 0x914 <__bad_interrupt>
     18e:	00 00       	nop
     190:	c1 c3       	rjmp	.+1922   	; 0x914 <__bad_interrupt>
     192:	00 00       	nop
     194:	bf c3       	rjmp	.+1918   	; 0x914 <__bad_interrupt>
     196:	00 00       	nop
     198:	bd c3       	rjmp	.+1914   	; 0x914 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	bb c3       	rjmp	.+1910   	; 0x914 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	b9 c3       	rjmp	.+1906   	; 0x914 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	b7 c3       	rjmp	.+1902   	; 0x914 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	b5 c3       	rjmp	.+1898   	; 0x914 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	b3 c3       	rjmp	.+1894   	; 0x914 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	b1 c3       	rjmp	.+1890   	; 0x914 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	af c3       	rjmp	.+1886   	; 0x914 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	ad c3       	rjmp	.+1882   	; 0x914 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	ab c3       	rjmp	.+1878   	; 0x914 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	a9 c3       	rjmp	.+1874   	; 0x914 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	a7 c3       	rjmp	.+1870   	; 0x914 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	a5 c3       	rjmp	.+1866   	; 0x914 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	a3 c3       	rjmp	.+1862   	; 0x914 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	a1 c3       	rjmp	.+1858   	; 0x914 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	9f c3       	rjmp	.+1854   	; 0x914 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	9d c3       	rjmp	.+1850   	; 0x914 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	9b c3       	rjmp	.+1846   	; 0x914 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	99 c3       	rjmp	.+1842   	; 0x914 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	97 c3       	rjmp	.+1838   	; 0x914 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	95 c3       	rjmp	.+1834   	; 0x914 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	93 c3       	rjmp	.+1830   	; 0x914 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	91 c3       	rjmp	.+1826   	; 0x914 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 da 2a 	jmp	0x55b4	; 0x55b4 <__vector_125>
     1f8:	8d c3       	rjmp	.+1818   	; 0x914 <__bad_interrupt>
     1fa:	00 00       	nop

000001fc <ProductString>:
     1fc:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     20c:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000021a <ManufacturerString>:
     21a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     22a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000234 <LanguageString>:
     234:	04 03 09 04                                         ....

00000238 <ConfigurationDescriptor>:
     238:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     248:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     258:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     268:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000276 <DeviceDescriptor>:
     276:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     286:	dc 01                                               ..

00000288 <ConfigurationTable>:
     288:	00 4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00     .NONE...........
     298:	00 a0 05 a1 05 a2 05 a3 05 a4 05 a5 05 a8 05 a9     ................
     2a8:	05 00 00 00 01 01 4d 46 5f 55 4c 54 52 41 4c 49     ......MF_ULTRALI
     2b8:	47 48 54 00 00 00 a1 18 d8 18 89 19 8d 19 91 19     GHT.............
     2c8:	92 19 e4 1a f7 1a 40 00 07 00 02 4d 46 5f 43 4c     ......@....MF_CL
     2d8:	41 53 53 49 43 5f 31 4b 00 00 00 a1 18 d8 18 36     ASSIC_1K.......6
     2e8:	1b 69 1b 6d 1b 6e 1b 32 21 53 21 00 04 04 00 03     .i.m.n.2!S!.....
     2f8:	4d 46 5f 50 4c 55 53 31 4b 5f 37 42 00 00 00 00     MF_PLUS1K_7B....
     308:	a1 18 d8 18 45 1b 69 1b 6d 1b 6e 1b 32 21 53 21     ....E.i.m.n.2!S!
     318:	00 04 07 00 04 4d 46 5f 43 4c 41 53 53 49 43 5f     .....MF_CLASSIC_
     328:	34 4b 00 00 00 a1 18 d8 18 5a 1b 69 1b 6d 1b 6e     4K.......Z.i.m.n
     338:	1b 32 21 53 21 00 10 04 00 05 49 53 4f 31 34 34     .2!S!.....ISO144
     348:	34 33 41 5f 53 4e 49 46 46 00 a1 18 d8 18 a2 05     43A_SNIFF.......
     358:	a3 05 a4 05 a5 05 a8 05 a9 05 00 00 00 01           ..............

00000366 <ButtonActionTable>:
     366:	4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00 00     NONE............
     376:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     386:	55 49 44 5f 52 41 4e 44 4f 4d 00 00 00 00 00 00     UID_RANDOM......
     396:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3a6:	55 49 44 5f 4c 45 46 54 5f 49 4e 43 52 45 4d 45     UID_LEFT_INCREME
     3b6:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     3c6:	55 49 44 5f 52 49 47 48 54 5f 49 4e 43 52 45 4d     UID_RIGHT_INCREM
     3d6:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     3e6:	55 49 44 5f 4c 45 46 54 5f 44 45 43 52 45 4d 45     UID_LEFT_DECREME
     3f6:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     406:	55 49 44 5f 52 49 47 48 54 5f 44 45 43 52 45 4d     UID_RIGHT_DECREM
     416:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     426:	43 59 43 4c 45 5f 53 45 54 54 49 4e 47 53 00 00     CYCLE_SETTINGS..
     436:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     446:	53 54 4f 52 45 5f 4d 45 4d 00 00 00 00 00 00 00     STORE_MEM.......
     456:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     466:	52 45 43 41 4c 4c 5f 4d 45 4d 00 00 00 00 00 00     RECALL_MEM......
     476:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00000486 <LogModeTable>:
     486:	4f 46 46 00 00 00 00 00 00 00 00 00 00 00 00 00     OFF.............
     496:	4d 45 4d 4f 52 59 00 00 00 00 00 00 00 00 00 00     MEMORY..........
     4a6:	54 45 52 4d 49 4e 41 4c 00 00 00 00 00 00 00 00     TERMINAL........

000004b6 <__c.6349>:
     4b6:	2c 00                                               ,.

000004b8 <LEDFuncTable>:
     4b8:	4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00 00     NONE............
     4c8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4d8:	54 45 52 4d 49 4e 41 4c 5f 43 4f 4e 4e 00 00 00     TERMINAL_CONN...
     4e8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4f8:	54 45 52 4d 49 4e 41 4c 5f 52 58 54 58 00 00 00     TERMINAL_RXTX...
     508:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     518:	53 45 54 54 49 4e 47 5f 43 48 41 4e 47 45 00 00     SETTING_CHANGE..
     528:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     538:	4d 45 4d 4f 52 59 5f 53 54 4f 52 45 44 00 00 00     MEMORY_STORED...
     548:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     558:	4d 45 4d 4f 52 59 5f 43 48 41 4e 47 45 44 00 00     MEMORY_CHANGED..
     568:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     578:	43 4f 44 45 43 5f 52 58 00 00 00 00 00 00 00 00     CODEC_RX........
     588:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     598:	43 4f 44 45 43 5f 54 58 00 00 00 00 00 00 00 00     CODEC_TX........
     5a8:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000005b8 <__c.6462>:
     5b8:	43 68 61 6d 65 6c 65 6f 6e 2d 4d 69 6e 69 20 25     Chameleon-Mini %
     5c8:	53 20 75 73 69 6e 67 20 4c 55 46 41 20 25 53 20     S using LUFA %S 
     5d8:	63 6f 6d 70 69 6c 65 64 20 77 69 74 68 20 41 56     compiled with AV
     5e8:	52 2d 47 43 43 20 25 53 00                          R-GCC %S.

000005f1 <__c.6464>:
     5f1:	31 35 30 32 32 33 00                                150223.

000005f8 <__c.6466>:
     5f8:	31 33 30 39 30 31 00                                130901.

000005ff <__c.6468>:
     5ff:	34 2e 37 2e 32 00                                   4.7.2.

00000605 <__c.6473>:
     605:	25 73 00                                            %s.

00000608 <__c.6491>:
     608:	52 41 4e 44 4f 4d 00                                RANDOM.

0000060f <__c.6518>:
     60f:	25 75 00                                            %u.

00000612 <__c.6523>:
     612:	25 75 00                                            %u.

00000615 <__c.6573>:
     615:	25 53 2c 25 53 00                                   %S,%S.

0000061b <__c.6575>:
     61b:	4c 4f 41 44 42 49 4e 00                             LOADBIN.

00000623 <__c.6577>:
     623:	43 4c 45 41 52 00                                   CLEAR.

00000629 <__c.6582>:
     629:	25 75 00                                            %u.

0000062c <__c.6587>:
     62c:	4c 4f 41 44 42 49 4e 00                             LOADBIN.

00000634 <__c.6589>:
     634:	43 4c 45 41 52 00                                   CLEAR.

0000063a <__c.6619>:
     63a:	25 35 75 20 6d 56 00                                %5u mV.

00000641 <CommandTable>:
     641:	56 45 52 53 49 4f 4e 00 00 00 00 00 00 00 00 00     VERSION.........
     651:	00 00 00 00 4f 11 43 4f 4e 46 49 47 00 00 00 00     ....O.CONFIG....
     661:	00 00 00 00 00 00 8c 11 83 11 6d 11 55 49 44 00     ..........m.UID.
     671:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 b9 11     ................
     681:	92 11 52 45 41 44 4f 4e 4c 59 00 00 00 00 00 00     ..READONLY......
     691:	00 00 00 00 24 12 12 12 55 50 4c 4f 41 44 00 00     ....$...UPLOAD..
     6a1:	00 00 00 00 00 00 00 00 38 12 00 00 00 00 44 4f     ........8.....DO
     6b1:	57 4e 4c 4f 41 44 00 00 00 00 00 00 00 00 3d 12     WNLOAD........=.
     6c1:	00 00 00 00 52 45 53 45 54 00 00 00 00 00 00 00     ....RESET.......
     6d1:	00 00 00 00 42 12 00 00 00 00 55 50 47 52 41 44     ....B.....UPGRAD
     6e1:	45 00 00 00 00 00 00 00 00 00 4d 12 00 00 00 00     E.........M.....
     6f1:	4d 45 4d 53 49 5a 45 00 00 00 00 00 00 00 00 00     MEMSIZE.........
     701:	00 00 00 00 58 12 55 49 44 53 49 5a 45 00 00 00     ....X.UIDSIZE...
     711:	00 00 00 00 00 00 00 00 00 00 70 12 42 55 54 54     ..........p.BUTT
     721:	4f 4e 00 00 00 00 00 00 00 00 00 00 86 12 92 12     ON..............
     731:	8b 12 42 55 54 54 4f 4e 5f 4c 4f 4e 47 00 00 00     ..BUTTON_LONG...
     741:	00 00 9c 12 a8 12 a1 12 4c 45 44 47 52 45 45 4e     ........LEDGREEN
     751:	00 00 00 00 00 00 00 00 b2 12 be 12 b7 12 4c 45     ..............LE
     761:	44 52 45 44 00 00 00 00 00 00 00 00 00 00 c8 12     DRED............
     771:	d4 12 cd 12 4c 4f 47 4d 4f 44 45 00 00 00 00 00     ....LOGMODE.....
     781:	00 00 00 00 de 12 e8 12 e3 12 4c 4f 47 4d 45 4d     ..........LOGMEM
     791:	00 00 00 00 00 00 00 00 00 00 f0 12 24 13 0a 13     ............$...
     7a1:	53 45 54 54 49 4e 47 00 00 00 00 00 00 00 00 00     SETTING.........
     7b1:	00 00 49 13 44 13 43 4c 45 41 52 00 00 00 00 00     ..I.D.CLEAR.....
     7c1:	00 00 00 00 00 00 51 13 00 00 00 00 48 45 4c 50     ......Q.....HELP
     7d1:	00 00 00 00 00 00 00 00 00 00 00 00 55 13 00 00     ............U...
     7e1:	00 00 52 53 53 49 00 00 00 00 00 00 00 00 00 00     ..RSSI..........
     7f1:	00 00 00 00 00 00 a1 13 00 00 00 00 00 00 00 00     ................
     801:	00 00 00 00 00 00 00 00 00 00 00 00 00 00           ..............

0000080f <__c.6126>:
     80f:	0d 0a 00                                            ...

00000812 <__c.6128>:
     812:	0d 0a 00                                            ...

00000815 <StatusTable>:
     815:	64 31 30 30 3a 4f 4b 00 00 00 00 00 00 00 00 00     d100:OK.........
     825:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     835:	00 65 31 30 31 3a 4f 4b 20 57 49 54 48 20 54 45     .e101:OK WITH TE
     845:	58 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     XT..............
     855:	00 00 6e 31 31 30 3a 57 41 49 54 49 4e 47 20 46     ..n110:WAITING F
     865:	4f 52 20 58 4d 4f 44 45 4d 00 00 00 00 00 00 00     OR XMODEM.......
     875:	00 00 00 c8 32 30 30 3a 55 4e 4b 4e 4f 57 4e 20     ....200:UNKNOWN 
     885:	43 4f 4d 4d 41 4e 44 00 00 00 00 00 00 00 00 00     COMMAND.........
     895:	00 00 00 00 c9 32 30 31 3a 49 4e 56 41 4c 49 44     .....201:INVALID
     8a5:	20 43 4f 4d 4d 41 4e 44 20 55 53 41 47 45 00 00      COMMAND USAGE..
     8b5:	00 00 00 00 00 ca 32 30 32 3a 49 4e 56 41 4c 49     ......202:INVALI
     8c5:	44 20 50 41 52 41 4d 45 54 45 52 00 00 00 00 00     D PARAMETER.....
     8d5:	00 00 00 00 00 00 00                                .......

000008dc <__ctors_end>:
     8dc:	11 24       	eor	r1, r1
     8de:	1f be       	out	0x3f, r1	; 63
     8e0:	cf ef       	ldi	r28, 0xFF	; 255
     8e2:	df e2       	ldi	r29, 0x2F	; 47
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	cd bf       	out	0x3d, r28	; 61

000008e8 <__do_copy_data>:
     8e8:	10 e2       	ldi	r17, 0x20	; 32
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	b0 e2       	ldi	r27, 0x20	; 32
     8ee:	ee e8       	ldi	r30, 0x8E	; 142
     8f0:	f2 e6       	ldi	r31, 0x62	; 98
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__do_copy_data+0x10>
     8f4:	05 90       	lpm	r0, Z+
     8f6:	0d 92       	st	X+, r0
     8f8:	a2 39       	cpi	r26, 0x92	; 146
     8fa:	b1 07       	cpc	r27, r17
     8fc:	d9 f7       	brne	.-10     	; 0x8f4 <__do_copy_data+0xc>

000008fe <__do_clear_bss>:
     8fe:	2e e2       	ldi	r18, 0x2E	; 46
     900:	a2 e9       	ldi	r26, 0x92	; 146
     902:	b0 e2       	ldi	r27, 0x20	; 32
     904:	01 c0       	rjmp	.+2      	; 0x908 <.do_clear_bss_start>

00000906 <.do_clear_bss_loop>:
     906:	1d 92       	st	X+, r1

00000908 <.do_clear_bss_start>:
     908:	a9 3c       	cpi	r26, 0xC9	; 201
     90a:	b2 07       	cpc	r27, r18
     90c:	e1 f7       	brne	.-8      	; 0x906 <.do_clear_bss_loop>
     90e:	03 d0       	rcall	.+6      	; 0x916 <main>
     910:	0c 94 45 31 	jmp	0x628a	; 0x628a <_exit>

00000914 <__bad_interrupt>:
     914:	87 c0       	rjmp	.+270    	; 0xa24 <__vector_default>

00000916 <main>:
#include "Chameleon-Mini.h"

int main(void)
{
    SystemInit();
     916:	8d d0       	rcall	.+282    	; 0xa32 <SystemInit>
    SettingsLoad();
     918:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <SettingsLoad>
    LogInit();
     91c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <LogInit>
    LEDInit();
     920:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LEDInit>
    MemoryInit();
     924:	fd d2       	rcall	.+1530   	; 0xf20 <MemoryInit>
    ConfigurationInit();
     926:	31 d1       	rcall	.+610    	; 0xb8a <ConfigurationInit>
    TerminalInit();
     928:	0e 94 db 10 	call	0x21b6	; 0x21b6 <TerminalInit>
    RandomInit();
     92c:	a4 d1       	rcall	.+840    	; 0xc76 <RandomInit>
    ButtonInit();
     92e:	95 d7       	rcall	.+3882   	; 0x185a <ButtonInit>
#define ANTENNA_LEVEL_DENOMINATOR (ANTENNA_LEVEL_SCALE)

static inline
void AntennaLevelInit(void)
{
	ADCA.CTRLA = ADC_ENABLE_bm;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 00 02 	sts	0x0200, r24
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc;
     936:	10 92 01 02 	sts	0x0201, r1
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc | ADC_BANDGAP_bm;
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	90 93 02 02 	sts	0x0202, r25
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	90 93 04 02 	sts	0x0204, r25
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     946:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;
     94a:	88 e3       	ldi	r24, 0x38	; 56
     94c:	80 93 21 02 	sts	0x0221, r24
    AntennaLevelInit();

    SystemInterruptInit();
     950:	f1 d0       	rcall	.+482    	; 0xb34 <SystemInterruptInit>
	asm volatile("sleep");
}

INLINE void SystemSleepEnable(void)
{
	SLEEP.CTRL |= SLEEP_SEN_bm;
     952:	80 91 48 00 	lds	r24, 0x0048
     956:	81 60       	ori	r24, 0x01	; 1
     958:	80 93 48 00 	sts	0x0048, r24
{
    if (RTC.INTFLAGS & RTC_COMPIF_bm) {
    	while(RTC.STATUS & RTC_SYNCBUSY_bm)
    		;

    	RTC.INTFLAGS = RTC_COMPIF_bm;
     95c:	c2 e0       	ldi	r28, 0x02	; 2
     95e:	0e c0       	rjmp	.+28     	; 0x97c <main+0x66>
            ButtonTick();
            LogTick();
            LEDTick();
        }

		TerminalTask();
     960:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TerminalTask>
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
}

INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
     964:	e0 91 fb 28 	lds	r30, 0x28FB
     968:	f0 91 fc 28 	lds	r31, 0x28FC
     96c:	09 95       	icall
		ApplicationTask();
		LogTask();
     96e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <LogTask>
INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
}

INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
     972:	e0 91 f5 28 	lds	r30, 0x28F5
     976:	f0 91 f6 28 	lds	r31, 0x28F6
     97a:	09 95       	icall
INLINE void SystemSleepDisable(void);
INLINE void SystemSleepSetMode(uint8_t SleepMode);

INLINE bool SystemTick100ms(void)
{
    if (RTC.INTFLAGS & RTC_COMPIF_bm) {
     97c:	80 91 03 04 	lds	r24, 0x0403
     980:	81 ff       	sbrs	r24, 1
     982:	ee cf       	rjmp	.-36     	; 0x960 <main+0x4a>
    	while(RTC.STATUS & RTC_SYNCBUSY_bm)
     984:	80 91 01 04 	lds	r24, 0x0401
     988:	80 fd       	sbrc	r24, 0
     98a:	fc cf       	rjmp	.-8      	; 0x984 <main+0x6e>
    		;

    	RTC.INTFLAGS = RTC_COMPIF_bm;
     98c:	c0 93 03 04 	sts	0x0403, r28
    SystemInterruptInit();
    SystemSleepEnable();

    while(1) {
        if (SystemTick100ms()) {
            RandomTick();
     990:	85 d1       	rcall	.+778    	; 0xc9c <RandomTick>
            TerminalTick();
     992:	0e 94 01 11 	call	0x2202	; 0x2202 <TerminalTick>
            ButtonTick();
     996:	68 d7       	rcall	.+3792   	; 0x1868 <ButtonTick>
            LogTick();
     998:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <LogTick>
            LEDTick();
     99c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LEDTick>
     9a0:	df cf       	rjmp	.-66     	; 0x960 <main+0x4a>

000009a2 <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     9a2:	29 2f       	mov	r18, r25
     9a4:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     9a6:	22 30       	cpi	r18, 0x02	; 2
     9a8:	31 05       	cpc	r19, r1
     9aa:	39 f1       	breq	.+78     	; 0x9fa <CALLBACK_USB_GetDescriptor+0x58>
     9ac:	23 30       	cpi	r18, 0x03	; 3
     9ae:	31 05       	cpc	r19, r1
     9b0:	a9 f0       	breq	.+42     	; 0x9dc <CALLBACK_USB_GetDescriptor+0x3a>
     9b2:	21 30       	cpi	r18, 0x01	; 1
     9b4:	31 05       	cpc	r19, r1
     9b6:	49 f0       	breq	.+18     	; 0x9ca <CALLBACK_USB_GetDescriptor+0x28>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
     9c0:	fa 01       	movw	r30, r20
     9c2:	80 83       	st	Z, r24
     9c4:	91 83       	std	Z+1, r25	; 0x01
    return Size;
}
     9c6:	c9 01       	movw	r24, r18
     9c8:	08 95       	ret

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     9ca:	22 e1       	ldi	r18, 0x12	; 18
     9cc:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     9ce:	86 e7       	ldi	r24, 0x76	; 118
     9d0:	92 e0       	ldi	r25, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     9d2:	fa 01       	movw	r30, r20
     9d4:	80 83       	st	Z, r24
     9d6:	91 83       	std	Z+1, r25	; 0x01
    return Size;
}
     9d8:	c9 01       	movw	r24, r18
     9da:	08 95       	ret
     9dc:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	91 05       	cpc	r25, r1
     9e2:	a1 f0       	breq	.+40     	; 0xa0c <CALLBACK_USB_GetDescriptor+0x6a>
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	91 05       	cpc	r25, r1
     9e8:	b9 f0       	breq	.+46     	; 0xa18 <CALLBACK_USB_GetDescriptor+0x76>
     9ea:	89 2b       	or	r24, r25
     9ec:	29 f7       	brne	.-54     	; 0x9b8 <CALLBACK_USB_GetDescriptor+0x16>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     9ee:	e4 e3       	ldi	r30, 0x34	; 52
     9f0:	f2 e0       	ldi	r31, 0x02	; 2
     9f2:	24 91       	lpm	r18, Z
     9f4:	30 e0       	ldi	r19, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
            {
                case 0x00:
                    Address = &LanguageString;
     9f6:	cf 01       	movw	r24, r30
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
     9f8:	e3 cf       	rjmp	.-58     	; 0x9c0 <CALLBACK_USB_GetDescriptor+0x1e>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     9fa:	2e e3       	ldi	r18, 0x3E	; 62
     9fc:	30 e0       	ldi	r19, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     9fe:	88 e3       	ldi	r24, 0x38	; 56
     a00:	92 e0       	ldi	r25, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     a02:	fa 01       	movw	r30, r20
     a04:	80 83       	st	Z, r24
     a06:	91 83       	std	Z+1, r25	; 0x01
    return Size;
}
     a08:	c9 01       	movw	r24, r18
     a0a:	08 95       	ret
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     a0c:	ea e1       	ldi	r30, 0x1A	; 26
     a0e:	f2 e0       	ldi	r31, 0x02	; 2
     a10:	24 91       	lpm	r18, Z
     a12:	30 e0       	ldi	r19, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
     a14:	cf 01       	movw	r24, r30
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
     a16:	d4 cf       	rjmp	.-88     	; 0x9c0 <CALLBACK_USB_GetDescriptor+0x1e>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     a18:	ec ef       	ldi	r30, 0xFC	; 252
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	24 91       	lpm	r18, Z
     a1e:	30 e0       	ldi	r19, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     a20:	cf 01       	movw	r24, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     a22:	ce cf       	rjmp	.-100    	; 0x9c0 <CALLBACK_USB_GetDescriptor+0x1e>

00000a24 <__vector_default>:
#include "System.h"
#include "LED.h"
#include <avr/interrupt.h>

ISR(BADISR_vect)
{
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	ff cf       	rjmp	.-2      	; 0xa2e <__vector_default+0xa>

00000a30 <__vector_10>:
    while(1);
}

EMPTY_INTERRUPT(RTC_OVF_vect);
     a30:	18 95       	reti

00000a32 <SystemInit>:

void SystemInit(void)
{
    if (RST.STATUS & RST_WDRF_bm) {
     a32:	80 91 78 00 	lds	r24, 0x0078
     a36:	83 ff       	sbrs	r24, 3
     a38:	0a c0       	rjmp	.+20     	; 0xa4e <SystemInit+0x1c>
        /* On Watchdog reset clear WDRF bit, disable watchdog
        * and jump into bootloader */
        RST.STATUS = RST_WDRF_bm;
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	80 93 78 00 	sts	0x0078, r24

        CCP = CCP_IOREG_gc;
     a40:	88 ed       	ldi	r24, 0xD8	; 216
     a42:	84 bf       	out	0x34, r24	; 52
        WDT.CTRL = WDT_CEN_bm;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 80 00 	sts	0x0080, r24

        asm volatile ("jmp %0"::"i" (BOOT_SECTION_START + 0x1FC));
     a4a:	fd 95 fe c0 	jmp	0x7f81fc	; 0x7f81fc <__data_load_end+0x7f1edc>
    }

    /* 32MHz system clock using internal RC and 32K DFLL*/
    OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;
     a4e:	80 91 50 00 	lds	r24, 0x0050
     a52:	86 60       	ori	r24, 0x06	; 6
     a54:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm))
     a58:	80 91 51 00 	lds	r24, 0x0051
     a5c:	81 ff       	sbrs	r24, 1
     a5e:	fc cf       	rjmp	.-8      	; 0xa58 <SystemInit+0x26>
        ;
    while(!(OSC.STATUS & OSC_RC32KRDY_bm))
     a60:	80 91 51 00 	lds	r24, 0x0051
     a64:	82 ff       	sbrs	r24, 2
     a66:	fc cf       	rjmp	.-8      	; 0xa60 <SystemInit+0x2e>
        ;

    OSC.DFLLCTRL = OSC_RC32MCREF_RC32K_gc;
     a68:	10 92 56 00 	sts	0x0056, r1
    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
     a6c:	21 e0       	ldi	r18, 0x01	; 1
     a6e:	20 93 60 00 	sts	0x0060, r18

    CCP = CCP_IOREG_gc;
     a72:	88 ed       	ldi	r24, 0xD8	; 216
     a74:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     a76:	20 93 40 00 	sts	0x0040, r18

    /* Use TCE0 as system tick */
    TCE0.PER = F_CPU / 256 / SYSTEM_TICK_FREQ - 1;
     a7a:	83 ed       	ldi	r24, 0xD3	; 211
     a7c:	90 e3       	ldi	r25, 0x30	; 48
     a7e:	80 93 26 0a 	sts	0x0A26, r24
     a82:	90 93 27 0a 	sts	0x0A27, r25
    TCE0.CTRLA = TC_CLKSEL_DIV256_gc;
     a86:	86 e0       	ldi	r24, 0x06	; 6
     a88:	80 93 00 0a 	sts	0x0A00, r24

    /* Enable RTC with roughly 1kHz clock for system tick
     * and to wake up while sleeping. */
    CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm;
     a8c:	20 93 43 00 	sts	0x0043, r18
    RTC.PER = 1000 / SYSTEM_TICK_FREQ - 1;
     a90:	83 e6       	ldi	r24, 0x63	; 99
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	80 93 0a 04 	sts	0x040A, r24
     a98:	90 93 0b 04 	sts	0x040B, r25
    RTC.COMP = 1000 / SYSTEM_TICK_FREQ - 1;
     a9c:	80 93 0c 04 	sts	0x040C, r24
     aa0:	90 93 0d 04 	sts	0x040D, r25
    RTC.CTRL = RTC_PRESCALER_DIV1_gc;
     aa4:	20 93 00 04 	sts	0x0400, r18
    RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
     aa8:	20 93 02 04 	sts	0x0402, r18


    /* Enable EEPROM data memory mapping */
    NVM.CTRLB |= NVM_EEMAPEN_bm;
     aac:	80 91 cc 01 	lds	r24, 0x01CC
     ab0:	88 60       	ori	r24, 0x08	; 8
     ab2:	80 93 cc 01 	sts	0x01CC, r24
     ab6:	08 95       	ret

00000ab8 <SystemReset>:
}

void SystemReset(void)
{
    CCP = CCP_IOREG_gc;
     ab8:	88 ed       	ldi	r24, 0xD8	; 216
     aba:	84 bf       	out	0x34, r24	; 52
    RST.CTRL = RST_SWRST_bm;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	e8 e7       	ldi	r30, 0x78	; 120
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	81 83       	std	Z+1, r24	; 0x01
     ac4:	08 95       	ret

00000ac6 <SystemEnterBootloader>:
}

void SystemEnterBootloader(void)
{
    /* Use Watchdog timer to reset into bootloader. */
    CCP = CCP_IOREG_gc;
     ac6:	88 ed       	ldi	r24, 0xD8	; 216
     ac8:	84 bf       	out	0x34, r24	; 52
    WDT.CTRL = WDT_PER_500CLK_gc | WDT_ENABLE_bm | WDT_CEN_bm;
     aca:	8b e1       	ldi	r24, 0x1B	; 27
     acc:	80 93 80 00 	sts	0x0080, r24
     ad0:	08 95       	ret

00000ad2 <SystemStartUSBClock>:
	SLEEP.CTRL |= SLEEP_SEN_bm;
}

INLINE void SystemSleepDisable(void)
{
	SLEEP.CTRL &= ~SLEEP_SEN_bm;
     ad2:	80 91 48 00 	lds	r24, 0x0048
     ad6:	8e 7f       	andi	r24, 0xFE	; 254
     ad8:	80 93 48 00 	sts	0x0048, r24
void SystemStartUSBClock(void)
{
	SystemSleepDisable();

    /* 48MHz USB Clock using 12MHz XTAL */
    OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     adc:	8b ec       	ldi	r24, 0xCB	; 203
     ade:	80 93 52 00 	sts	0x0052, r24
    OSC.CTRL |= OSC_XOSCEN_bm;
     ae2:	80 91 50 00 	lds	r24, 0x0050
     ae6:	88 60       	ori	r24, 0x08	; 8
     ae8:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_XOSCRDY_bm))
     aec:	80 91 51 00 	lds	r24, 0x0051
     af0:	83 ff       	sbrs	r24, 3
     af2:	fc cf       	rjmp	.-8      	; 0xaec <SystemStartUSBClock+0x1a>
        ;

    OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (4 << OSC_PLLFAC_gp);
     af4:	84 ec       	ldi	r24, 0xC4	; 196
     af6:	80 93 55 00 	sts	0x0055, r24

    OSC.CTRL |= OSC_PLLEN_bm;
     afa:	80 91 50 00 	lds	r24, 0x0050
     afe:	80 61       	ori	r24, 0x10	; 16
     b00:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_PLLRDY_bm))
     b04:	80 91 51 00 	lds	r24, 0x0051
     b08:	84 ff       	sbrs	r24, 4
     b0a:	fc cf       	rjmp	.-8      	; 0xb04 <SystemStartUSBClock+0x32>
        ;
}
     b0c:	08 95       	ret

00000b0e <SystemStopUSBClock>:
	asm volatile("sleep");
}

INLINE void SystemSleepEnable(void)
{
	SLEEP.CTRL |= SLEEP_SEN_bm;
     b0e:	e8 e4       	ldi	r30, 0x48	; 72
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	81 60       	ori	r24, 0x01	; 1
     b16:	80 83       	st	Z, r24
void SystemStopUSBClock(void)
{
	SystemSleepEnable();

    /* Disable USB Clock to minimize power consumption */
    CLK.USBCTRL &= ~CLK_USBSEN_bm;
     b18:	e0 e4       	ldi	r30, 0x40	; 64
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	84 81       	ldd	r24, Z+4	; 0x04
     b1e:	8e 7f       	andi	r24, 0xFE	; 254
     b20:	84 83       	std	Z+4, r24	; 0x04
    OSC.CTRL &= ~OSC_PLLEN_bm;
     b22:	e0 e5       	ldi	r30, 0x50	; 80
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	8f 7e       	andi	r24, 0xEF	; 239
     b2a:	80 83       	st	Z, r24
    OSC.CTRL &= ~OSC_XOSCEN_bm;
     b2c:	80 81       	ld	r24, Z
     b2e:	87 7f       	andi	r24, 0xF7	; 247
     b30:	80 83       	st	Z, r24
     b32:	08 95       	ret

00000b34 <SystemInterruptInit>:
}

void SystemInterruptInit(void)
{
    /* Enable all interrupt levels */
    PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     b34:	87 e0       	ldi	r24, 0x07	; 7
     b36:	e0 ea       	ldi	r30, 0xA0	; 160
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	82 83       	std	Z+2, r24	; 0x02
    sei();
     b3c:	78 94       	sei
     b3e:	08 95       	ret

00000b40 <CodecInitDummy>:

/* Include all Codecs and Applications */
#include "Codec/Codec.h"
#include "Application/Application.h"

static void CodecInitDummy(void) { }
     b40:	08 95       	ret

00000b42 <CodecTaskDummy>:
static void CodecTaskDummy(void) { }
     b42:	08 95       	ret

00000b44 <ApplicationInitDummy>:
static void ApplicationInitDummy(void) {}
     b44:	08 95       	ret

00000b46 <ApplicationResetDummy>:
static void ApplicationResetDummy(void) {}
     b46:	08 95       	ret

00000b48 <ApplicationTaskDummy>:
static void ApplicationTaskDummy(void) {}
     b48:	08 95       	ret

00000b4a <ApplicationProcessDummy>:
static uint16_t ApplicationProcessDummy(uint8_t* ByteBuffer, uint16_t ByteCount) { return 0; }
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	08 95       	ret

00000b50 <ApplicationGetUidDummy>:
static void ApplicationGetUidDummy(ConfigurationUidType Uid) { }
     b50:	08 95       	ret

00000b52 <ApplicationSetUidDummy>:
static void ApplicationSetUidDummy(ConfigurationUidType Uid) { }
     b52:	08 95       	ret

00000b54 <ConfigurationSetById>:
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
}

void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;
     b54:	e0 91 0a 29 	lds	r30, 0x290A
     b58:	f0 91 0b 29 	lds	r31, 0x290B
     b5c:	83 83       	std	Z+3, r24	; 0x03

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
            &ConfigurationTable[Configuration], sizeof(ConfigurationType));
     b5e:	95 e2       	ldi	r25, 0x25	; 37
     b60:	89 9f       	mul	r24, r25
     b62:	b0 01       	movw	r22, r0
     b64:	11 24       	eor	r1, r1
     b66:	68 57       	subi	r22, 0x78	; 120
     b68:	7d 4f       	sbci	r23, 0xFD	; 253
void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
     b6a:	45 e2       	ldi	r20, 0x25	; 37
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	82 ee       	ldi	r24, 0xE2	; 226
     b70:	98 e2       	ldi	r25, 0x28	; 40
     b72:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <memcpy_P>
#include "MifareClassic.h"


/* Function wrappers */
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
     b76:	e0 91 f7 28 	lds	r30, 0x28F7
     b7a:	f0 91 f8 28 	lds	r31, 0x28F8
     b7e:	09 95       	icall
#define CODEC_CARRIER_FREQ          13560000

extern uint8_t CodecBuffer[CODEC_BUFFER_SIZE];

INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
     b80:	e0 91 f3 28 	lds	r30, 0x28F3
     b84:	f0 91 f4 28 	lds	r31, 0x28F4
     b88:	09 94       	ijmp

00000b8a <ConfigurationInit>:

ConfigurationType ActiveConfiguration;

void ConfigurationInit(void)
{
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
     b8a:	e0 91 0a 29 	lds	r30, 0x290A
     b8e:	f0 91 0b 29 	lds	r31, 0x290B
     b92:	83 81       	ldd	r24, Z+3	; 0x03
     b94:	df cf       	rjmp	.-66     	; 0xb54 <ConfigurationSetById>

00000b96 <ConfigurationSetByName>:
    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
{
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
     ba2:	15 e2       	ldi	r17, 0x25	; 37

    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
     ba4:	ac 01       	movw	r20, r24
     ba6:	4f 5f       	subi	r20, 0xFF	; 255
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	02 2f       	mov	r16, r18
{
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
     bac:	12 9f       	mul	r17, r18
     bae:	f0 01       	movw	r30, r0
     bb0:	13 9f       	mul	r17, r19
     bb2:	f0 0d       	add	r31, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	e7 57       	subi	r30, 0x77	; 119
     bb8:	fd 4f       	sbci	r31, 0xFD	; 253
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);
     bba:	64 91       	lpm	r22, Z

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     bbc:	61 11       	cpse	r22, r1
     bbe:	0f c0       	rjmp	.+30     	; 0xbde <ConfigurationSetByName+0x48>
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
        const char* pRequestedConfigName = ConfigurationName;
     bc0:	ec 01       	movw	r28, r24
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     bc2:	68 81       	ld	r22, Y
     bc4:	66 23       	and	r22, r22
     bc6:	01 f1       	breq	.+64     	; 0xc08 <ConfigurationSetByName+0x72>
     bc8:	2f 5f       	subi	r18, 0xFF	; 255
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
bool ConfigurationSetByName(const char* ConfigurationName)
{
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
     bcc:	26 30       	cpi	r18, 0x06	; 6
     bce:	31 05       	cpc	r19, r1
     bd0:	61 f7       	brne	.-40     	; 0xbaa <ConfigurationSetByName+0x14>
            ConfigurationSetById(i);
            return true;
        }
    }

    return false;
     bd2:	80 e0       	ldi	r24, 0x00	; 0
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     bde:	dc 01       	movw	r26, r24
     be0:	7c 91       	ld	r23, X
     be2:	77 23       	and	r23, r23
     be4:	89 f3       	breq	.-30     	; 0xbc8 <ConfigurationSetByName+0x32>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     be6:	67 13       	cpse	r22, r23
     be8:	ef cf       	rjmp	.-34     	; 0xbc8 <ConfigurationSetByName+0x32>

    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
     bea:	da 01       	movw	r26, r20
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <ConfigurationSetByName+0x62>
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     bee:	7d 91       	ld	r23, X+
     bf0:	77 23       	and	r23, r23
     bf2:	51 f3       	breq	.-44     	; 0xbc8 <ConfigurationSetByName+0x32>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     bf4:	76 13       	cpse	r23, r22
     bf6:	e8 cf       	rjmp	.-48     	; 0xbc8 <ConfigurationSetByName+0x32>
                StringMismatch = true;
                break;
            }

            /* Proceed to next character */
            pTableConfigName++;
     bf8:	31 96       	adiw	r30, 0x01	; 1
            pRequestedConfigName++;
     bfa:	ed 01       	movw	r28, r26

            c = pgm_read_byte(pTableConfigName);
     bfc:	64 91       	lpm	r22, Z
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     bfe:	61 11       	cpse	r22, r1
     c00:	f6 cf       	rjmp	.-20     	; 0xbee <ConfigurationSetByName+0x58>
     c02:	68 81       	ld	r22, Y
     c04:	61 11       	cpse	r22, r1
     c06:	e0 cf       	rjmp	.-64     	; 0xbc8 <ConfigurationSetByName+0x32>
            c = pgm_read_byte(pTableConfigName);
        }

        if (!StringMismatch) {
            /* Configuration found */
            ConfigurationSetById(i);
     c08:	80 2f       	mov	r24, r16
     c0a:	a4 df       	rcall	.-184    	; 0xb54 <ConfigurationSetById>
            return true;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return false;
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <ConfigurationGetList>:

void ConfigurationGetList(char* ConfigListOut, uint16_t ByteCount)
{
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	ec 01       	movw	r28, r24
    uint8_t i;

    /* Account for '\0' */
    ByteCount--;
     c1e:	61 50       	subi	r22, 0x01	; 1
     c20:	71 09       	sbc	r23, r1
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
     c26:	35 e2       	ldi	r19, 0x25	; 37
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     c28:	4c e2       	ldi	r20, 0x2C	; 44

    /* Account for '\0' */
    ByteCount--;

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
     c2a:	38 9f       	mul	r19, r24
     c2c:	f0 01       	movw	r30, r0
     c2e:	39 9f       	mul	r19, r25
     c30:	f0 0d       	add	r31, r0
     c32:	11 24       	eor	r1, r1
     c34:	e7 57       	subi	r30, 0x77	; 119
     c36:	fd 4f       	sbci	r31, 0xFD	; 253
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     c38:	24 91       	lpm	r18, Z
     c3a:	22 23       	and	r18, r18
     c3c:	81 f0       	breq	.+32     	; 0xc5e <ConfigurationGetList+0x46>
     c3e:	61 31       	cpi	r22, 0x11	; 17
     c40:	71 05       	cpc	r23, r1
     c42:	68 f0       	brcs	.+26     	; 0xc5e <ConfigurationGetList+0x46>
     c44:	de 01       	movw	r26, r28
     c46:	03 c0       	rjmp	.+6      	; 0xc4e <ConfigurationGetList+0x36>
     c48:	60 31       	cpi	r22, 0x10	; 16
     c4a:	71 05       	cpc	r23, r1
     c4c:	41 f0       	breq	.+16     	; 0xc5e <ConfigurationGetList+0x46>
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ConfigListOut++ = c;
     c4e:	2d 93       	st	X+, r18
     c50:	ed 01       	movw	r28, r26
            ConfigName++;
     c52:	31 96       	adiw	r30, 0x01	; 1
            ByteCount--;
     c54:	61 50       	subi	r22, 0x01	; 1
     c56:	71 09       	sbc	r23, r1

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     c58:	24 91       	lpm	r18, Z
     c5a:	21 11       	cpse	r18, r1
     c5c:	f5 cf       	rjmp	.-22     	; 0xc48 <ConfigurationGetList+0x30>
            *ConfigListOut++ = c;
            ConfigName++;
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
     c5e:	85 30       	cpi	r24, 0x05	; 5
     c60:	91 05       	cpc	r25, r1
     c62:	21 f4       	brne	.+8      	; 0xc6c <ConfigurationGetList+0x54>
            *ConfigListOut++ = ',';
            ByteCount--;
        }
    }

    *ConfigListOut = '\0';
     c64:	18 82       	st	Y, r1
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     c6c:	49 93       	st	Y+, r20
            ByteCount--;
     c6e:	61 50       	subi	r22, 0x01	; 1
     c70:	71 09       	sbc	r23, r1
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	da cf       	rjmp	.-76     	; 0xc2a <ConfigurationGetList+0x12>

00000c76 <RandomInit>:
#include "Random.h"

#include <stdlib.h>

void RandomInit(void)
{
     c76:	08 95       	ret

00000c78 <RandomGetByte>:

}

uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
     c78:	0c 94 be 2d 	jmp	0x5b7c	; 0x5b7c <rand>
}
     c7c:	08 95       	ret

00000c7e <RandomGetBuffer>:

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	16 2f       	mov	r17, r22
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     c86:	66 23       	and	r22, r22
     c88:	29 f0       	breq	.+10     	; 0xc94 <RandomGetBuffer+0x16>
     c8a:	ec 01       	movw	r28, r24
        *BufferPtr++ = RandomGetByte();
     c8c:	f5 df       	rcall	.-22     	; 0xc78 <RandomGetByte>
     c8e:	89 93       	st	Y+, r24
     c90:	11 50       	subi	r17, 0x01	; 1

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     c92:	e1 f7       	brne	.-8      	; 0xc8c <RandomGetBuffer+0xe>
        *BufferPtr++ = RandomGetByte();
    }
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <RandomTick>:

void RandomTick(void)
{
    rand();
     c9c:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <rand>
    rand();
     ca0:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <rand>
    rand();
     ca4:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <rand>
    rand();
     ca8:	0c 94 be 2d 	jmp	0x5b7c	; 0x5b7c <rand>

00000cac <BufferToHexString>:
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	dc 01       	movw	r26, r24
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;
     cb2:	61 50       	subi	r22, 0x01	; 1
     cb4:	71 09       	sbc	r23, r1

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	99 f1       	breq	.+102    	; 0xd22 <BufferToHexString+0x76>
     cbc:	62 30       	cpi	r22, 0x02	; 2
     cbe:	71 05       	cpc	r23, r1
     cc0:	80 f1       	brcs	.+96     	; 0xd22 <BufferToHexString+0x76>
     cc2:	fa 01       	movw	r30, r20
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
     cc4:	24 0f       	add	r18, r20
     cc6:	35 1f       	adc	r19, r21
     cc8:	21 50       	subi	r18, 0x01	; 1
     cca:	31 09       	sbc	r19, r1
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	17 c0       	rjmp	.+46     	; 0xd00 <BufferToHexString+0x54>
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
        uint8_t Byte = *ByteBuffer;

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     cd2:	d0 5d       	subi	r29, 0xD0	; 208
     cd4:	dc 93       	st	X, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     cd6:	cf 70       	andi	r28, 0x0F	; 15
     cd8:	8c 2f       	mov	r24, r28
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0a 97       	sbiw	r24, 0x0a	; 10
     cde:	fc f4       	brge	.+62     	; 0xd1e <BufferToHexString+0x72>
     ce0:	c0 5d       	subi	r28, 0xD0	; 208
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	cc 93       	st	X, r28
     ce6:	11 97       	sbiw	r26, 0x01	; 1

        HexOut += 2;
     ce8:	12 96       	adiw	r26, 0x02	; 2
        MaxChars -= 2;
     cea:	62 50       	subi	r22, 0x02	; 2
     cec:	71 09       	sbc	r23, r1
        CharCount += 2;
     cee:	4e 5f       	subi	r20, 0xFE	; 254
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     cf2:	e2 17       	cp	r30, r18
     cf4:	f3 07       	cpc	r31, r19
     cf6:	b9 f0       	breq	.+46     	; 0xd26 <BufferToHexString+0x7a>
     cf8:	31 96       	adiw	r30, 0x01	; 1
     cfa:	62 30       	cpi	r22, 0x02	; 2
     cfc:	71 05       	cpc	r23, r1
     cfe:	98 f0       	brcs	.+38     	; 0xd26 <BufferToHexString+0x7a>
        uint8_t Byte = *ByteBuffer;
     d00:	c0 81       	ld	r28, Z

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     d02:	dc 2f       	mov	r29, r28
     d04:	d2 95       	swap	r29
     d06:	df 70       	andi	r29, 0x0F	; 15
     d08:	8d 2f       	mov	r24, r29
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0a 97       	sbiw	r24, 0x0a	; 10
     d0e:	0c f3       	brlt	.-62     	; 0xcd2 <BufferToHexString+0x26>
     d10:	d9 5c       	subi	r29, 0xC9	; 201
     d12:	dc 93       	st	X, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     d14:	cf 70       	andi	r28, 0x0F	; 15
     d16:	8c 2f       	mov	r24, r28
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0a 97       	sbiw	r24, 0x0a	; 10
     d1c:	0c f3       	brlt	.-62     	; 0xce0 <BufferToHexString+0x34>
     d1e:	c9 5c       	subi	r28, 0xC9	; 201
     d20:	e0 cf       	rjmp	.-64     	; 0xce2 <BufferToHexString+0x36>
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
        CharCount += 2;
        ByteBuffer++;
        ByteCount -= 1;
    }

    *HexOut = '\0';
     d26:	1c 92       	st	X, r1

    return CharCount;
}
     d28:	ca 01       	movw	r24, r20
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <HexStringToBuffer>:

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
     d30:	fa 01       	movw	r30, r20
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     d32:	40 81       	ld	r20, Z
     d34:	44 23       	and	r20, r20
     d36:	f1 f1       	breq	.+124    	; 0xdb4 <HexStringToBuffer+0x84>
     d38:	51 81       	ldd	r21, Z+1	; 0x01
     d3a:	55 23       	and	r21, r21
     d3c:	d9 f1       	breq	.+118    	; 0xdb4 <HexStringToBuffer+0x84>
     d3e:	61 15       	cp	r22, r1
     d40:	71 05       	cpc	r23, r1
     d42:	c1 f1       	breq	.+112    	; 0xdb4 <HexStringToBuffer+0x84>
     d44:	dc 01       	movw	r26, r24
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	13 c0       	rjmp	.+38     	; 0xd72 <HexStringToBuffer+0x42>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     d4c:	42 95       	swap	r20
     d4e:	40 7f       	andi	r20, 0xF0	; 240
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     d50:	51 34       	cpi	r21, 0x41	; 65
     d52:	28 f5       	brcc	.+74     	; 0xd9e <HexStringToBuffer+0x6e>
     d54:	58 2f       	mov	r21, r24
     d56:	45 2b       	or	r20, r21

            *ByteBuffer = Byte;
     d58:	4d 93       	st	X+, r20

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     d5a:	2f 5f       	subi	r18, 0xFF	; 255
     d5c:	3f 4f       	sbci	r19, 0xFF	; 255
            HexIn += 2;
     d5e:	32 96       	adiw	r30, 0x02	; 2
uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     d60:	40 81       	ld	r20, Z
     d62:	44 23       	and	r20, r20
     d64:	29 f1       	breq	.+74     	; 0xdb0 <HexStringToBuffer+0x80>
     d66:	51 81       	ldd	r21, Z+1	; 0x01
     d68:	55 23       	and	r21, r21
     d6a:	21 f1       	breq	.+72     	; 0xdb4 <HexStringToBuffer+0x84>
     d6c:	62 17       	cp	r22, r18
     d6e:	73 07       	cpc	r23, r19
     d70:	f9 f0       	breq	.+62     	; 0xdb0 <HexStringToBuffer+0x80>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
     d72:	84 2f       	mov	r24, r20
     d74:	80 53       	subi	r24, 0x30	; 48
     d76:	8a 30       	cpi	r24, 0x0A	; 10
     d78:	18 f0       	brcs	.+6      	; 0xd80 <HexStringToBuffer+0x50>
     d7a:	81 51       	subi	r24, 0x11	; 17
     d7c:	86 30       	cpi	r24, 0x06	; 6
     d7e:	d0 f4       	brcc	.+52     	; 0xdb4 <HexStringToBuffer+0x84>
     d80:	85 2f       	mov	r24, r21
     d82:	80 53       	subi	r24, 0x30	; 48
     d84:	8a 30       	cpi	r24, 0x0A	; 10
     d86:	20 f0       	brcs	.+8      	; 0xd90 <HexStringToBuffer+0x60>
     d88:	95 2f       	mov	r25, r21
     d8a:	91 54       	subi	r25, 0x41	; 65
     d8c:	96 30       	cpi	r25, 0x06	; 6
     d8e:	90 f4       	brcc	.+36     	; 0xdb4 <HexStringToBuffer+0x84>
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     d90:	41 34       	cpi	r20, 0x41	; 65
     d92:	e0 f2       	brcs	.-72     	; 0xd4c <HexStringToBuffer+0x1c>
     d94:	42 95       	swap	r20
     d96:	40 7f       	andi	r20, 0xF0	; 240
     d98:	40 57       	subi	r20, 0x70	; 112
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     d9a:	51 34       	cpi	r21, 0x41	; 65
     d9c:	d8 f2       	brcs	.-74     	; 0xd54 <HexStringToBuffer+0x24>
     d9e:	57 53       	subi	r21, 0x37	; 55
     da0:	45 2b       	or	r20, r21

            *ByteBuffer = Byte;
     da2:	4d 93       	st	X+, r20

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     da4:	2f 5f       	subi	r18, 0xFF	; 255
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
            HexIn += 2;
     da8:	32 96       	adiw	r30, 0x02	; 2
uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     daa:	40 81       	ld	r20, Z
     dac:	41 11       	cpse	r20, r1
     dae:	db cf       	rjmp	.-74     	; 0xd66 <HexStringToBuffer+0x36>
        /* Odd number of characters */
        return 0;
    }

    return ByteCount;
}
     db0:	c9 01       	movw	r24, r18
     db2:	08 95       	ret
        }
    }

    if ( (HexIn[0] != '\0') && (HexIn[1] == '\0') ) {
        /* Odd number of characters */
        return 0;
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
    }

    return ByteCount;
}
     db8:	c9 01       	movw	r24, r18
     dba:	08 95       	ret

00000dbc <MemoryReadBlock>:
	MemoryRecall();
}

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint8_t* SrcPtr = &Memory[Address];
     dbc:	fb 01       	movw	r30, r22
     dbe:	ee 56       	subi	r30, 0x6E	; 110
     dc0:	ff 4d       	sbci	r31, 0xDF	; 223
	uint8_t* DstPtr = (uint8_t*) Buffer;

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);
     dc2:	a0 e0       	ldi	r26, 0x00	; 0
     dc4:	b4 e0       	ldi	r27, 0x04	; 4
     dc6:	a6 1b       	sub	r26, r22
     dc8:	b7 0b       	sbc	r27, r23
     dca:	9a 01       	movw	r18, r20
     dcc:	a4 17       	cp	r26, r20
     dce:	b5 07       	cpc	r27, r21
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <MemoryReadBlock+0x18>
     dd2:	9d 01       	movw	r18, r26

	while(ByteCount--) {
     dd4:	21 15       	cp	r18, r1
     dd6:	31 05       	cpc	r19, r1
     dd8:	41 f0       	breq	.+16     	; 0xdea <MemoryReadBlock+0x2e>
    
	/* Load permanent flash contents to memory at startup */
	MemoryRecall();
}

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
     dda:	2e 0f       	add	r18, r30
     ddc:	3f 1f       	adc	r19, r31
{
	uint8_t* SrcPtr = &Memory[Address];
	uint8_t* DstPtr = (uint8_t*) Buffer;
     dde:	dc 01       	movw	r26, r24

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
		*DstPtr++ = *SrcPtr++;
     de0:	81 91       	ld	r24, Z+
     de2:	8d 93       	st	X+, r24
	uint8_t* DstPtr = (uint8_t*) Buffer;

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
     de4:	e2 17       	cp	r30, r18
     de6:	f3 07       	cpc	r31, r19
     de8:	d9 f7       	brne	.-10     	; 0xde0 <MemoryReadBlock+0x24>
     dea:	08 95       	ret

00000dec <MemoryWriteBlock>:
}

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint8_t* SrcPtr = (uint8_t*) Buffer;
	uint8_t* DstPtr = &Memory[Address];
     dec:	db 01       	movw	r26, r22
     dee:	ae 56       	subi	r26, 0x6E	; 110
     df0:	bf 4d       	sbci	r27, 0xDF	; 223

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);
     df2:	e0 e0       	ldi	r30, 0x00	; 0
     df4:	f4 e0       	ldi	r31, 0x04	; 4
     df6:	e6 1b       	sub	r30, r22
     df8:	f7 0b       	sbc	r31, r23
     dfa:	9a 01       	movw	r18, r20
     dfc:	e4 17       	cp	r30, r20
     dfe:	f5 07       	cpc	r31, r21
     e00:	08 f4       	brcc	.+2      	; 0xe04 <MemoryWriteBlock+0x18>
     e02:	9f 01       	movw	r18, r30

	while(ByteCount--) {
     e04:	21 15       	cp	r18, r1
     e06:	31 05       	cpc	r19, r1
     e08:	49 f0       	breq	.+18     	; 0xe1c <MemoryWriteBlock+0x30>
     e0a:	fc 01       	movw	r30, r24
	while(ByteCount--) {
		*DstPtr++ = *SrcPtr++;
	}
}

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
     e0c:	c9 01       	movw	r24, r18
     e0e:	8e 0f       	add	r24, r30
     e10:	9f 1f       	adc	r25, r31

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
		*DstPtr++ = *SrcPtr++;
     e12:	21 91       	ld	r18, Z+
     e14:	2d 93       	st	X+, r18
	uint8_t* DstPtr = &Memory[Address];

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
     e16:	e8 17       	cp	r30, r24
     e18:	f9 07       	cpc	r31, r25
     e1a:	d9 f7       	brne	.-10     	; 0xe12 <MemoryWriteBlock+0x26>
		*DstPtr++ = *SrcPtr++;
	}

	LEDTrigger(LED_MEMORY_CHANGED, LED_ON);
     e1c:	61 e1       	ldi	r22, 0x11	; 17
     e1e:	85 e0       	ldi	r24, 0x05	; 5
     e20:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <LEDTrigger>

00000e24 <MemoryClear>:
}

void MemoryClear(void)
{
     e24:	e2 e9       	ldi	r30, 0x92	; 146
     e26:	f0 e2       	ldi	r31, 0x20	; 32
	for (uint16_t i=0; i<MEMORY_SIZE_PER_SETTING; i++) {
		Memory[i] = 0;
     e28:	11 92       	st	Z+, r1
	LEDTrigger(LED_MEMORY_CHANGED, LED_ON);
}

void MemoryClear(void)
{
	for (uint16_t i=0; i<MEMORY_SIZE_PER_SETTING; i++) {
     e2a:	84 e2       	ldi	r24, 0x24	; 36
     e2c:	e2 39       	cpi	r30, 0x92	; 146
     e2e:	f8 07       	cpc	r31, r24
     e30:	d9 f7       	brne	.-10     	; 0xe28 <MemoryClear+0x4>
		Memory[i] = 0;
	}
}
     e32:	08 95       	ret

00000e34 <MemoryRecall>:

void MemoryRecall(void)
{
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
     e34:	80 91 09 29 	lds	r24, 0x2909
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 e0       	ldi	r26, 0x00	; 0
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	4a e0       	ldi	r20, 0x0A	; 10
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	aa 1f       	adc	r26, r26
     e46:	bb 1f       	adc	r27, r27
     e48:	4a 95       	dec	r20
     e4a:	d1 f7       	brne	.-12     	; 0xe40 <MemoryRecall+0xc>

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e4c:	40 e1       	ldi	r20, 0x10	; 16

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e4e:	57 ed       	ldi	r21, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e50:	30 e4       	ldi	r19, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e52:	40 93 66 06 	sts	0x0666, r20

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e56:	50 93 a0 09 	sts	0x09A0, r21

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e5a:	20 91 a1 09 	lds	r18, 0x09A1
     e5e:	26 ff       	sbrs	r18, 6
     e60:	fc cf       	rjmp	.-8      	; 0xe5a <MemoryRecall+0x26>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e62:	30 93 a1 09 	sts	0x09A1, r19

	return MEMORY_FLASH_USART.DATA;
     e66:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e6a:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e6e:	20 91 a1 09 	lds	r18, 0x09A1
     e72:	26 ff       	sbrs	r18, 6
     e74:	fc cf       	rjmp	.-8      	; 0xe6e <MemoryRecall+0x3a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e76:	30 93 a1 09 	sts	0x09A1, r19

	return MEMORY_FLASH_USART.DATA;
     e7a:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     e7e:	40 93 65 06 	sts	0x0665, r20
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashRead(void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     e82:	27 ff       	sbrs	r18, 7
     e84:	e6 cf       	rjmp	.-52     	; 0xe52 <MemoryRecall+0x1e>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e86:	20 e1       	ldi	r18, 0x10	; 16
     e88:	20 93 66 06 	sts	0x0666, r18

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e8c:	23 e0       	ldi	r18, 0x03	; 3
     e8e:	20 93 a0 09 	sts	0x09A0, r18

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e92:	20 91 a1 09 	lds	r18, 0x09A1
     e96:	26 ff       	sbrs	r18, 6
     e98:	fc cf       	rjmp	.-8      	; 0xe92 <MemoryRecall+0x5e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e9a:	20 e4       	ldi	r18, 0x40	; 64
     e9c:	20 93 a1 09 	sts	0x09A1, r18

	return MEMORY_FLASH_USART.DATA;
     ea0:	20 91 a0 09 	lds	r18, 0x09A0
{
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
     ea4:	ad 01       	movw	r20, r26
     ea6:	66 27       	eor	r22, r22
     ea8:	77 27       	eor	r23, r23

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     eaa:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     eae:	20 91 a1 09 	lds	r18, 0x09A1
     eb2:	26 ff       	sbrs	r18, 6
     eb4:	fc cf       	rjmp	.-8      	; 0xeae <MemoryRecall+0x7a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     eb6:	20 e4       	ldi	r18, 0x40	; 64
     eb8:	20 93 a1 09 	sts	0x09A1, r18

	return MEMORY_FLASH_USART.DATA;
     ebc:	20 91 a0 09 	lds	r18, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
     ec0:	89 2f       	mov	r24, r25
     ec2:	9a 2f       	mov	r25, r26
     ec4:	ab 2f       	mov	r26, r27
     ec6:	bb 27       	eor	r27, r27

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ec8:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ecc:	80 91 a1 09 	lds	r24, 0x09A1
     ed0:	86 ff       	sbrs	r24, 6
     ed2:	fc cf       	rjmp	.-8      	; 0xecc <MemoryRecall+0x98>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ed4:	80 e4       	ldi	r24, 0x40	; 64
     ed6:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     eda:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ede:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ee2:	80 91 a1 09 	lds	r24, 0x09A1
     ee6:	86 ff       	sbrs	r24, 6
     ee8:	fc cf       	rjmp	.-8      	; 0xee2 <MemoryRecall+0xae>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     eea:	80 e4       	ldi	r24, 0x40	; 64
     eec:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     ef0:	80 91 a0 09 	lds	r24, 0x09A0
}

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;
     ef4:	e2 e9       	ldi	r30, 0x92	; 146
     ef6:	f0 e2       	ldi	r31, 0x20	; 32

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = 0;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ef8:	90 e4       	ldi	r25, 0x40	; 64
INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = 0;
     efa:	10 92 a0 09 	sts	0x09A0, r1
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     efe:	80 91 a1 09 	lds	r24, 0x09A1
     f02:	86 ff       	sbrs	r24, 6
     f04:	fc cf       	rjmp	.-8      	; 0xefe <MemoryRecall+0xca>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f06:	90 93 a1 09 	sts	0x09A1, r25
		*ByteBuffer++ = MEMORY_FLASH_USART.DATA;
     f0a:	80 91 a0 09 	lds	r24, 0x09A0
     f0e:	81 93       	st	Z+, r24

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     f10:	84 e2       	ldi	r24, 0x24	; 36
     f12:	e2 39       	cpi	r30, 0x92	; 146
     f14:	f8 07       	cpc	r31, r24
     f16:	89 f7       	brne	.-30     	; 0xefa <MemoryRecall+0xc6>
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
	SPITransferByte( (Address >> 0) & 0xFF );
	SPIReadBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f18:	80 e1       	ldi	r24, 0x10	; 16
     f1a:	80 93 65 06 	sts	0x0665, r24
     f1e:	08 95       	ret

00000f20 <MemoryInit>:
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

void MemoryInit(void)
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	00 d0       	rcall	.+0      	; 0xf26 <MemoryInit+0x6>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <MemoryInit+0x8>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	/* Configure MEMORY_FLASH_USART for SPI master mode 0 with maximum clock frequency */
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f2c:	80 e1       	ldi	r24, 0x10	; 16
     f2e:	80 93 65 06 	sts	0x0665, r24
	
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_SCK;
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	90 93 66 06 	sts	0x0666, r25
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_MOSI;
     f38:	98 e0       	ldi	r25, 0x08	; 8
     f3a:	90 93 65 06 	sts	0x0665, r25
	
	MEMORY_FLASH_PORT.DIRSET = MEMORY_FLASH_SCK | MEMORY_FLASH_MOSI | MEMORY_FLASH_CS;
     f3e:	9a e1       	ldi	r25, 0x1A	; 26
     f40:	90 93 61 06 	sts	0x0661, r25

    MEMORY_FLASH_USART.BAUDCTRLA = 15;//0;
     f44:	9f e0       	ldi	r25, 0x0F	; 15
     f46:	90 93 a6 09 	sts	0x09A6, r25
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
     f4a:	10 92 a7 09 	sts	0x09A7, r1
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc; //  | USART_CHSIZE_8BIT_gc;
     f4e:	90 ec       	ldi	r25, 0xC0	; 192
     f50:	90 93 a5 09 	sts	0x09A5, r25
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     f54:	98 e1       	ldi	r25, 0x18	; 24
     f56:	90 93 a4 09 	sts	0x09A4, r25

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f5a:	80 93 66 06 	sts	0x0666, r24

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f5e:	87 ed       	ldi	r24, 0xD7	; 215
     f60:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f64:	80 91 a1 09 	lds	r24, 0x09A1
     f68:	86 ff       	sbrs	r24, 6
     f6a:	fc cf       	rjmp	.-8      	; 0xf64 <MemoryInit+0x44>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f6c:	80 e4       	ldi	r24, 0x40	; 64
     f6e:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     f72:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f76:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f7a:	80 91 a1 09 	lds	r24, 0x09A1
     f7e:	86 ff       	sbrs	r24, 6
     f80:	fc cf       	rjmp	.-8      	; 0xf7a <MemoryInit+0x5a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f82:	80 e4       	ldi	r24, 0x40	; 64
     f84:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     f88:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f8c:	90 e1       	ldi	r25, 0x10	; 16
     f8e:	90 93 65 06 	sts	0x0665, r25
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc; //  | USART_CHSIZE_8BIT_gc;
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;


	if ( !(FlashReadStatusRegister() & FLASH_STATUS_REG_PAGESIZE_BIT) ) {
     f92:	80 fd       	sbrc	r24, 0
     f94:	3e c0       	rjmp	.+124    	; 0x1012 <MemoryInit+0xf2>
	return !(FlashReadStatusRegister() & FLASH_STATUS_REG_READY_BIT);
}

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};
     f96:	8d e3       	ldi	r24, 0x3D	; 61
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	8a e2       	ldi	r24, 0x2A	; 42
     f9c:	8a 83       	std	Y+2, r24	; 0x02
     f9e:	80 e8       	ldi	r24, 0x80	; 128
     fa0:	8b 83       	std	Y+3, r24	; 0x03
     fa2:	86 ea       	ldi	r24, 0xA6	; 166
     fa4:	8c 83       	std	Y+4, r24	; 0x04

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     fa6:	20 e1       	ldi	r18, 0x10	; 16

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     fa8:	37 ed       	ldi	r19, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     faa:	90 e4       	ldi	r25, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     fac:	20 93 66 06 	sts	0x0666, r18

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     fb0:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fb4:	80 91 a1 09 	lds	r24, 0x09A1
     fb8:	86 ff       	sbrs	r24, 6
     fba:	fc cf       	rjmp	.-8      	; 0xfb4 <MemoryInit+0x94>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fbc:	90 93 a1 09 	sts	0x09A1, r25

	return MEMORY_FLASH_USART.DATA;
     fc0:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     fc4:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fc8:	80 91 a1 09 	lds	r24, 0x09A1
     fcc:	86 ff       	sbrs	r24, 6
     fce:	fc cf       	rjmp	.-8      	; 0xfc8 <MemoryInit+0xa8>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fd0:	90 93 a1 09 	sts	0x09A1, r25

	return MEMORY_FLASH_USART.DATA;
     fd4:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     fd8:	20 93 65 06 	sts	0x0665, r18

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};

	while(FlashIsBusy());
     fdc:	87 ff       	sbrs	r24, 7
     fde:	e6 cf       	rjmp	.-52     	; 0xfac <MemoryInit+0x8c>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     fe0:	80 e1       	ldi	r24, 0x10	; 16
     fe2:	80 93 66 06 	sts	0x0666, r24
	}
}

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;
     fe6:	fe 01       	movw	r30, r28
     fe8:	31 96       	adiw	r30, 0x01	; 1
     fea:	ce 01       	movw	r24, r28
     fec:	05 96       	adiw	r24, 0x05	; 5

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fee:	30 e4       	ldi	r19, 0x40	; 64
INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     ff0:	21 91       	ld	r18, Z+
     ff2:	20 93 a0 09 	sts	0x09A0, r18
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ff6:	20 91 a1 09 	lds	r18, 0x09A1
     ffa:	26 ff       	sbrs	r18, 6
     ffc:	fc cf       	rjmp	.-8      	; 0xff6 <MemoryInit+0xd6>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ffe:	30 93 a1 09 	sts	0x09A1, r19
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
    1002:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    1006:	e8 17       	cp	r30, r24
    1008:	f9 07       	cpc	r31, r25
    100a:	91 f7       	brne	.-28     	; 0xff0 <MemoryInit+0xd0>

	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPIWriteBlock(Sequence, sizeof(Sequence));
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    100c:	80 e1       	ldi	r24, 0x10	; 16
    100e:	80 93 65 06 	sts	0x0665, r24
		FlashConfigurePageSize();
	}
    
	/* Load permanent flash contents to memory at startup */
	MemoryRecall();
}
    1012:	24 96       	adiw	r28, 0x04	; 4
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
		/* Configure for 256 byte Dataflash if not already done. */
		FlashConfigurePageSize();
	}
    
	/* Load permanent flash contents to memory at startup */
	MemoryRecall();
    101c:	0b cf       	rjmp	.-490    	; 0xe34 <MemoryRecall>

0000101e <MemoryStore>:
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}

void MemoryStore(void)
{
    101e:	4f 92       	push	r4
    1020:	5f 92       	push	r5
    1022:	6f 92       	push	r6
    1024:	7f 92       	push	r7
    1026:	8f 92       	push	r8
    1028:	9f 92       	push	r9
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
    103e:	80 91 09 29 	lds	r24, 0x2909
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e0       	ldi	r26, 0x00	; 0
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	6a e0       	ldi	r22, 0x0A	; 10
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	aa 1f       	adc	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	6a 95       	dec	r22
    1054:	d1 f7       	brne	.-12     	; 0x104a <MemoryStore+0x2c>
    1056:	e2 e9       	ldi	r30, 0x92	; 146
    1058:	f0 e2       	ldi	r31, 0x20	; 32
    105a:	00 e0       	ldi	r16, 0x00	; 0
    105c:	14 e0       	ldi	r17, 0x04	; 4
INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
    105e:	e1 2c       	mov	r14, r1
    1060:	ff 24       	eor	r15, r15
    1062:	f3 94       	inc	r15

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1064:	c0 e1       	ldi	r28, 0x10	; 16
    1066:	cc 2e       	mov	r12, r28

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1068:	d7 ed       	ldi	r29, 0xD7	; 215
    106a:	bd 2e       	mov	r11, r29

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    106c:	20 e4       	ldi	r18, 0x40	; 64
    106e:	d2 2e       	mov	r13, r18

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1070:	30 e1       	ldi	r19, 0x10	; 16
    1072:	a3 2e       	mov	r10, r19

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1074:	47 ed       	ldi	r20, 0xD7	; 215
    1076:	94 2e       	mov	r9, r20
    1078:	53 e5       	ldi	r21, 0x53	; 83
    107a:	45 2e       	mov	r4, r21
    107c:	64 e8       	ldi	r22, 0x84	; 132
    107e:	56 2e       	mov	r5, r22
    1080:	73 e8       	ldi	r23, 0x83	; 131
    1082:	67 2e       	mov	r6, r23
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
    1084:	49 2f       	mov	r20, r25
    1086:	5a 2f       	mov	r21, r26
    1088:	6b 2f       	mov	r22, r27
    108a:	77 27       	eor	r23, r23
    108c:	85 2e       	mov	r8, r21
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
    108e:	38 2f       	mov	r19, r24
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
    1090:	e7 01       	movw	r28, r14
    1092:	c8 1b       	sub	r28, r24
    1094:	d1 09       	sbc	r29, r1
    1096:	0c 17       	cp	r16, r28
    1098:	1d 07       	cpc	r17, r29
    109a:	08 f4       	brcc	.+2      	; 0x109e <MemoryStore+0x80>
    109c:	e8 01       	movw	r28, r16

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    109e:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    10a2:	90 92 a0 09 	sts	0x09A0, r9

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    10a6:	20 91 a1 09 	lds	r18, 0x09A1
    10aa:	26 ff       	sbrs	r18, 6
    10ac:	fc cf       	rjmp	.-8      	; 0x10a6 <MemoryStore+0x88>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    10ae:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    10b2:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    10b6:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    10ba:	20 91 a1 09 	lds	r18, 0x09A1
    10be:	26 ff       	sbrs	r18, 6
    10c0:	fc cf       	rjmp	.-8      	; 0x10ba <MemoryStore+0x9c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    10c2:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    10c6:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    10ca:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashMemoryToBuffer(uint16_t PageAddress)
{
	while(FlashIsBusy());
    10ce:	27 ff       	sbrs	r18, 7
    10d0:	e6 cf       	rjmp	.-52     	; 0x109e <MemoryStore+0x80>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    10d2:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    10d6:	40 92 a0 09 	sts	0x09A0, r4

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    10da:	20 91 a1 09 	lds	r18, 0x09A1
    10de:	26 ff       	sbrs	r18, 6
    10e0:	fc cf       	rjmp	.-8      	; 0x10da <MemoryStore+0xbc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    10e2:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    10e6:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    10ea:	80 92 a0 09 	sts	0x09A0, r8

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    10ee:	20 91 a1 09 	lds	r18, 0x09A1
    10f2:	26 ff       	sbrs	r18, 6
    10f4:	fc cf       	rjmp	.-8      	; 0x10ee <MemoryStore+0xd0>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    10f6:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    10fa:	20 91 a0 09 	lds	r18, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
    10fe:	74 2e       	mov	r7, r20

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1100:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1104:	20 91 a1 09 	lds	r18, 0x09A1
    1108:	26 ff       	sbrs	r18, 6
    110a:	fc cf       	rjmp	.-8      	; 0x1104 <MemoryStore+0xe6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    110c:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1110:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1114:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1118:	20 91 a1 09 	lds	r18, 0x09A1
    111c:	26 ff       	sbrs	r18, 6
    111e:	fc cf       	rjmp	.-8      	; 0x1118 <MemoryStore+0xfa>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1120:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1124:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1128:	c0 92 65 06 	sts	0x0665, r12

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    112c:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1130:	b0 92 a0 09 	sts	0x09A0, r11

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1134:	20 91 a1 09 	lds	r18, 0x09A1
    1138:	26 ff       	sbrs	r18, 6
    113a:	fc cf       	rjmp	.-8      	; 0x1134 <MemoryStore+0x116>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    113c:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1140:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1144:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1148:	20 91 a1 09 	lds	r18, 0x09A1
    114c:	26 ff       	sbrs	r18, 6
    114e:	fc cf       	rjmp	.-8      	; 0x1148 <MemoryStore+0x12a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1150:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1154:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1158:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWriteBuffer(const void* Buffer, uint8_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
    115c:	27 ff       	sbrs	r18, 7
    115e:	e6 cf       	rjmp	.-52     	; 0x112c <MemoryStore+0x10e>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1160:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1164:	50 92 a0 09 	sts	0x09A0, r5

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1168:	20 91 a1 09 	lds	r18, 0x09A1
    116c:	26 ff       	sbrs	r18, 6
    116e:	fc cf       	rjmp	.-8      	; 0x1168 <MemoryStore+0x14a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1170:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1174:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1178:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    117c:	20 91 a1 09 	lds	r18, 0x09A1
    1180:	26 ff       	sbrs	r18, 6
    1182:	fc cf       	rjmp	.-8      	; 0x117c <MemoryStore+0x15e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1184:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1188:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    118c:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1190:	20 91 a1 09 	lds	r18, 0x09A1
    1194:	26 ff       	sbrs	r18, 6
    1196:	fc cf       	rjmp	.-8      	; 0x1190 <MemoryStore+0x172>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1198:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    119c:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11a0:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11a4:	20 91 a1 09 	lds	r18, 0x09A1
    11a8:	26 ff       	sbrs	r18, 6
    11aa:	fc cf       	rjmp	.-8      	; 0x11a4 <MemoryStore+0x186>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11ac:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    11b0:	20 91 a0 09 	lds	r18, 0x09A0
{
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}

void MemoryStore(void)
    11b4:	9f 01       	movw	r18, r30

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    11b6:	20 97       	sbiw	r28, 0x00	; 0
    11b8:	81 f0       	breq	.+32     	; 0x11da <MemoryStore+0x1bc>
{
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}

void MemoryStore(void)
    11ba:	2c 0f       	add	r18, r28
    11bc:	3d 1f       	adc	r19, r29
INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
    11be:	41 91       	ld	r20, Z+
    11c0:	40 93 a0 09 	sts	0x09A0, r20
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11c4:	40 91 a1 09 	lds	r20, 0x09A1
    11c8:	46 ff       	sbrs	r20, 6
    11ca:	fc cf       	rjmp	.-8      	; 0x11c4 <MemoryStore+0x1a6>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11cc:	d0 92 a1 09 	sts	0x09A1, r13
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
    11d0:	40 91 a0 09 	lds	r20, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    11d4:	e2 17       	cp	r30, r18
    11d6:	f3 07       	cpc	r31, r19
    11d8:	91 f7       	brne	.-28     	; 0x11be <MemoryStore+0x1a0>
	SPITransferByte(FLASH_CMD_BUF1_WRITE);
	SPITransferByte( 0 );
	SPITransferByte( 0 );
	SPITransferByte( Address );
	SPIWriteBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    11da:	c0 92 65 06 	sts	0x0665, r12

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    11de:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11e2:	b0 92 a0 09 	sts	0x09A0, r11

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11e6:	40 91 a1 09 	lds	r20, 0x09A1
    11ea:	46 ff       	sbrs	r20, 6
    11ec:	fc cf       	rjmp	.-8      	; 0x11e6 <MemoryStore+0x1c8>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11ee:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    11f2:	40 91 a0 09 	lds	r20, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11f6:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11fa:	40 91 a1 09 	lds	r20, 0x09A1
    11fe:	46 ff       	sbrs	r20, 6
    1200:	fc cf       	rjmp	.-8      	; 0x11fa <MemoryStore+0x1dc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1202:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1206:	40 91 a0 09 	lds	r20, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    120a:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashBufferToMemory(uint16_t PageAddress)
{
	while(FlashIsBusy());
    120e:	47 ff       	sbrs	r20, 7
    1210:	e6 cf       	rjmp	.-52     	; 0x11de <MemoryStore+0x1c0>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1212:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1216:	60 92 a0 09 	sts	0x09A0, r6

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    121a:	40 91 a1 09 	lds	r20, 0x09A1
    121e:	46 ff       	sbrs	r20, 6
    1220:	fc cf       	rjmp	.-8      	; 0x121a <MemoryStore+0x1fc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1222:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1226:	40 91 a0 09 	lds	r20, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    122a:	80 92 a0 09 	sts	0x09A0, r8

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    122e:	40 91 a1 09 	lds	r20, 0x09A1
    1232:	46 ff       	sbrs	r20, 6
    1234:	fc cf       	rjmp	.-8      	; 0x122e <MemoryStore+0x210>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1236:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    123a:	40 91 a0 09 	lds	r20, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    123e:	70 92 a0 09 	sts	0x09A0, r7

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1242:	40 91 a1 09 	lds	r20, 0x09A1
    1246:	46 ff       	sbrs	r20, 6
    1248:	fc cf       	rjmp	.-8      	; 0x1242 <MemoryStore+0x224>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    124a:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    124e:	40 91 a0 09 	lds	r20, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1252:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1256:	40 91 a1 09 	lds	r20, 0x09A1
    125a:	46 ff       	sbrs	r20, 6
    125c:	fc cf       	rjmp	.-8      	; 0x1256 <MemoryStore+0x238>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    125e:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1262:	40 91 a0 09 	lds	r20, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_BUF1_TO_MEM_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1266:	c0 92 65 06 	sts	0x0665, r12

		FlashMemoryToBuffer(PageAddress);
		FlashWriteBuffer(Buffer, ByteAddress, PageBytes);
		FlashBufferToMemory(PageAddress);

		ByteCount -= PageBytes;
    126a:	0c 1b       	sub	r16, r28
    126c:	1d 0b       	sbc	r17, r29
		Address += PageBytes;
    126e:	8c 0f       	add	r24, r28
    1270:	9d 1f       	adc	r25, r29
    1272:	a1 1d       	adc	r26, r1
    1274:	b1 1d       	adc	r27, r1
		Buffer += PageBytes;
    1276:	f9 01       	movw	r30, r18
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
    1278:	01 15       	cp	r16, r1
    127a:	11 05       	cpc	r17, r1
    127c:	09 f0       	breq	.+2      	; 0x1280 <MemoryStore+0x262>
    127e:	02 cf       	rjmp	.-508    	; 0x1084 <MemoryStore+0x66>
void MemoryStore(void)
{
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);

	LEDTrigger(LED_MEMORY_CHANGED, LED_OFF);
    1280:	60 e1       	ldi	r22, 0x10	; 16
    1282:	85 e0       	ldi	r24, 0x05	; 5
    1284:	6c d6       	rcall	.+3288   	; 0x1f5e <LEDTrigger>
	LEDTrigger(LED_MEMORY_STORED, LED_PULSE);
    1286:	63 e1       	ldi	r22, 0x13	; 19
    1288:	84 e0       	ldi	r24, 0x04	; 4
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	bf 90       	pop	r11
    129c:	af 90       	pop	r10
    129e:	9f 90       	pop	r9
    12a0:	8f 90       	pop	r8
    12a2:	7f 90       	pop	r7
    12a4:	6f 90       	pop	r6
    12a6:	5f 90       	pop	r5
    12a8:	4f 90       	pop	r4
{
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);

	LEDTrigger(LED_MEMORY_CHANGED, LED_OFF);
	LEDTrigger(LED_MEMORY_STORED, LED_PULSE);
    12aa:	59 c6       	rjmp	.+3250   	; 0x1f5e <LEDTrigger>

000012ac <MemoryUploadBlock>:
}

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    12ac:	2f 92       	push	r2
    12ae:	3f 92       	push	r3
    12b0:	4f 92       	push	r4
    12b2:	5f 92       	push	r5
    12b4:	6f 92       	push	r6
    12b6:	7f 92       	push	r7
    12b8:	8f 92       	push	r8
    12ba:	9f 92       	push	r9
    12bc:	af 92       	push	r10
    12be:	bf 92       	push	r11
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	2b 97       	sbiw	r28, 0x0b	; 11
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	8d 83       	std	Y+5, r24	; 0x05
    12dc:	29 2e       	mov	r2, r25
    12de:	59 01       	movw	r10, r18
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    12e0:	41 15       	cp	r20, r1
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	58 07       	cpc	r21, r24
    12e6:	61 05       	cpc	r22, r1
    12e8:	71 05       	cpc	r23, r1
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <MemoryUploadBlock+0x42>
    12ec:	85 c1       	rjmp	.+778    	; 0x15f8 <MemoryUploadBlock+0x34c>
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING;
    12ee:	80 91 09 29 	lds	r24, 0x2909
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	fa e0       	ldi	r31, 0x0A	; 10
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	aa 1f       	adc	r26, r26
    1300:	bb 1f       	adc	r27, r27
    1302:	fa 95       	dec	r31
    1304:	d1 f7       	brne	.-12     	; 0x12fa <MemoryUploadBlock+0x4e>
    1306:	84 0f       	add	r24, r20
    1308:	95 1f       	adc	r25, r21
    130a:	a6 1f       	adc	r26, r22
    130c:	b7 1f       	adc	r27, r23
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	14 e0       	ldi	r17, 0x04	; 4
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	04 1b       	sub	r16, r20
    1318:	15 0b       	sbc	r17, r21
    131a:	26 0b       	sbc	r18, r22
    131c:	37 0b       	sbc	r19, r23
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    131e:	65 01       	movw	r12, r10
    1320:	e1 2c       	mov	r14, r1
    1322:	f1 2c       	mov	r15, r1
    1324:	c9 82       	std	Y+1, r12	; 0x01
    1326:	da 82       	std	Y+2, r13	; 0x02
    1328:	eb 82       	std	Y+3, r14	; 0x03
    132a:	fc 82       	std	Y+4, r15	; 0x04
    132c:	0c 15       	cp	r16, r12
    132e:	1d 05       	cpc	r17, r13
    1330:	2e 05       	cpc	r18, r14
    1332:	3f 05       	cpc	r19, r15
    1334:	08 f4       	brcc	.+2      	; 0x1338 <MemoryUploadBlock+0x8c>
    1336:	7a c1       	rjmp	.+756    	; 0x162c <MemoryUploadBlock+0x380>
    1338:	09 81       	ldd	r16, Y+1	; 0x01
    133a:	1a 81       	ldd	r17, Y+2	; 0x02
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
    133c:	01 15       	cp	r16, r1
    133e:	11 05       	cpc	r17, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <MemoryUploadBlock+0x98>
    1342:	5a c1       	rjmp	.+692    	; 0x15f8 <MemoryUploadBlock+0x34c>
    1344:	2d 81       	ldd	r18, Y+5	; 0x05
    1346:	32 2d       	mov	r19, r2
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
    1348:	e1 2c       	mov	r14, r1
    134a:	ff 24       	eor	r15, r15
    134c:	f3 94       	inc	r15

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    134e:	e0 e1       	ldi	r30, 0x10	; 16
    1350:	ce 2e       	mov	r12, r30

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1352:	f7 ed       	ldi	r31, 0xD7	; 215
    1354:	bf 2e       	mov	r11, r31

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1356:	e0 e4       	ldi	r30, 0x40	; 64
    1358:	de 2e       	mov	r13, r30

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    135a:	f0 e1       	ldi	r31, 0x10	; 16
    135c:	af 2e       	mov	r10, r31

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    135e:	e7 ed       	ldi	r30, 0xD7	; 215
    1360:	9e 2e       	mov	r9, r30
    1362:	f3 e5       	ldi	r31, 0x53	; 83
    1364:	6f 2e       	mov	r6, r31
    1366:	e4 e8       	ldi	r30, 0x84	; 132
    1368:	8e 2e       	mov	r8, r30
    136a:	2a 87       	std	Y+10, r18	; 0x0a
    136c:	3b 87       	std	Y+11, r19	; 0x0b
    136e:	4e 83       	std	Y+6, r20	; 0x06
    1370:	5f 83       	std	Y+7, r21	; 0x07
    1372:	68 87       	std	Y+8, r22	; 0x08
    1374:	79 87       	std	Y+9, r23	; 0x09
    1376:	36 2c       	mov	r3, r6
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
    1378:	49 2e       	mov	r4, r25
    137a:	5a 2e       	mov	r5, r26
    137c:	6b 2e       	mov	r6, r27
    137e:	77 24       	eor	r7, r7
    1380:	45 2d       	mov	r20, r5
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
    1382:	38 2f       	mov	r19, r24
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
    1384:	b7 01       	movw	r22, r14
    1386:	68 1b       	sub	r22, r24
    1388:	71 09       	sbc	r23, r1
    138a:	06 17       	cp	r16, r22
    138c:	17 07       	cpc	r17, r23
    138e:	08 f0       	brcs	.+2      	; 0x1392 <MemoryUploadBlock+0xe6>
    1390:	4a c1       	rjmp	.+660    	; 0x1626 <MemoryUploadBlock+0x37a>
    1392:	b8 01       	movw	r22, r16
    1394:	ea 85       	ldd	r30, Y+10	; 0x0a
    1396:	fb 85       	ldd	r31, Y+11	; 0x0b

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1398:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    139c:	90 92 a0 09 	sts	0x09A0, r9

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    13a0:	20 91 a1 09 	lds	r18, 0x09A1
    13a4:	26 ff       	sbrs	r18, 6
    13a6:	fc cf       	rjmp	.-8      	; 0x13a0 <MemoryUploadBlock+0xf4>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    13a8:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    13ac:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    13b0:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    13b4:	20 91 a1 09 	lds	r18, 0x09A1
    13b8:	26 ff       	sbrs	r18, 6
    13ba:	fc cf       	rjmp	.-8      	; 0x13b4 <MemoryUploadBlock+0x108>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    13bc:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    13c0:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    13c4:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashMemoryToBuffer(uint16_t PageAddress)
{
	while(FlashIsBusy());
    13c8:	27 ff       	sbrs	r18, 7
    13ca:	e6 cf       	rjmp	.-52     	; 0x1398 <MemoryUploadBlock+0xec>
    13cc:	ea 87       	std	Y+10, r30	; 0x0a
    13ce:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    13d0:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    13d4:	30 92 a0 09 	sts	0x09A0, r3
    13d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    13da:	fb 85       	ldd	r31, Y+11	; 0x0b

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    13dc:	20 91 a1 09 	lds	r18, 0x09A1
    13e0:	26 ff       	sbrs	r18, 6
    13e2:	fc cf       	rjmp	.-8      	; 0x13dc <MemoryUploadBlock+0x130>
    13e4:	ea 87       	std	Y+10, r30	; 0x0a
    13e6:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    13e8:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    13ec:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    13f0:	40 93 a0 09 	sts	0x09A0, r20
    13f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    13f6:	fb 85       	ldd	r31, Y+11	; 0x0b

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    13f8:	20 91 a1 09 	lds	r18, 0x09A1
    13fc:	26 ff       	sbrs	r18, 6
    13fe:	fc cf       	rjmp	.-8      	; 0x13f8 <MemoryUploadBlock+0x14c>
    1400:	ea 87       	std	Y+10, r30	; 0x0a
    1402:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1404:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1408:	20 91 a0 09 	lds	r18, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
    140c:	54 2d       	mov	r21, r4

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    140e:	40 92 a0 09 	sts	0x09A0, r4
    1412:	ea 85       	ldd	r30, Y+10	; 0x0a
    1414:	fb 85       	ldd	r31, Y+11	; 0x0b

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1416:	20 91 a1 09 	lds	r18, 0x09A1
    141a:	26 ff       	sbrs	r18, 6
    141c:	fc cf       	rjmp	.-8      	; 0x1416 <MemoryUploadBlock+0x16a>
    141e:	ea 87       	std	Y+10, r30	; 0x0a
    1420:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1422:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1426:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    142a:	10 92 a0 09 	sts	0x09A0, r1
    142e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1430:	fb 85       	ldd	r31, Y+11	; 0x0b

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1432:	20 91 a1 09 	lds	r18, 0x09A1
    1436:	26 ff       	sbrs	r18, 6
    1438:	fc cf       	rjmp	.-8      	; 0x1432 <MemoryUploadBlock+0x186>
    143a:	ea 87       	std	Y+10, r30	; 0x0a
    143c:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    143e:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1442:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1446:	c0 92 65 06 	sts	0x0665, r12
    144a:	ea 85       	ldd	r30, Y+10	; 0x0a
    144c:	fb 85       	ldd	r31, Y+11	; 0x0b

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    144e:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1452:	b0 92 a0 09 	sts	0x09A0, r11

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1456:	20 91 a1 09 	lds	r18, 0x09A1
    145a:	26 ff       	sbrs	r18, 6
    145c:	fc cf       	rjmp	.-8      	; 0x1456 <MemoryUploadBlock+0x1aa>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    145e:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1462:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1466:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    146a:	20 91 a1 09 	lds	r18, 0x09A1
    146e:	26 ff       	sbrs	r18, 6
    1470:	fc cf       	rjmp	.-8      	; 0x146a <MemoryUploadBlock+0x1be>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1472:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1476:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    147a:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWriteBuffer(const void* Buffer, uint8_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
    147e:	27 ff       	sbrs	r18, 7
    1480:	e6 cf       	rjmp	.-52     	; 0x144e <MemoryUploadBlock+0x1a2>
    1482:	ea 87       	std	Y+10, r30	; 0x0a
    1484:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1486:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    148a:	80 92 a0 09 	sts	0x09A0, r8
    148e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1490:	fb 85       	ldd	r31, Y+11	; 0x0b

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1492:	20 91 a1 09 	lds	r18, 0x09A1
    1496:	26 ff       	sbrs	r18, 6
    1498:	fc cf       	rjmp	.-8      	; 0x1492 <MemoryUploadBlock+0x1e6>
    149a:	ea 87       	std	Y+10, r30	; 0x0a
    149c:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    149e:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    14a2:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    14a6:	10 92 a0 09 	sts	0x09A0, r1
    14aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    14ac:	fb 85       	ldd	r31, Y+11	; 0x0b

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    14ae:	20 91 a1 09 	lds	r18, 0x09A1
    14b2:	26 ff       	sbrs	r18, 6
    14b4:	fc cf       	rjmp	.-8      	; 0x14ae <MemoryUploadBlock+0x202>
    14b6:	ea 87       	std	Y+10, r30	; 0x0a
    14b8:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    14ba:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    14be:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    14c2:	10 92 a0 09 	sts	0x09A0, r1
    14c6:	ea 85       	ldd	r30, Y+10	; 0x0a
    14c8:	fb 85       	ldd	r31, Y+11	; 0x0b

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    14ca:	20 91 a1 09 	lds	r18, 0x09A1
    14ce:	26 ff       	sbrs	r18, 6
    14d0:	fc cf       	rjmp	.-8      	; 0x14ca <MemoryUploadBlock+0x21e>
    14d2:	ea 87       	std	Y+10, r30	; 0x0a
    14d4:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    14d6:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    14da:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    14de:	30 93 a0 09 	sts	0x09A0, r19
    14e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    14e4:	fb 85       	ldd	r31, Y+11	; 0x0b

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    14e6:	20 91 a1 09 	lds	r18, 0x09A1
    14ea:	26 ff       	sbrs	r18, 6
    14ec:	fc cf       	rjmp	.-8      	; 0x14e6 <MemoryUploadBlock+0x23a>
    14ee:	ea 87       	std	Y+10, r30	; 0x0a
    14f0:	fb 87       	std	Y+11, r31	; 0x0b

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    14f2:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    14f6:	20 91 a0 09 	lds	r18, 0x09A0

	LEDTrigger(LED_MEMORY_CHANGED, LED_OFF);
	LEDTrigger(LED_MEMORY_STORED, LED_PULSE);
}

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
    14fa:	2a 85       	ldd	r18, Y+10	; 0x0a
    14fc:	3b 85       	ldd	r19, Y+11	; 0x0b

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    14fe:	61 15       	cp	r22, r1
    1500:	71 05       	cpc	r23, r1
    1502:	91 f0       	breq	.+36     	; 0x1528 <MemoryUploadBlock+0x27c>

	LEDTrigger(LED_MEMORY_CHANGED, LED_OFF);
	LEDTrigger(LED_MEMORY_STORED, LED_PULSE);
}

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
    1504:	26 0f       	add	r18, r22
    1506:	37 1f       	adc	r19, r23
    1508:	ea 85       	ldd	r30, Y+10	; 0x0a
    150a:	fb 85       	ldd	r31, Y+11	; 0x0b
INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
    150c:	71 90       	ld	r7, Z+
    150e:	70 92 a0 09 	sts	0x09A0, r7
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1512:	70 90 a1 09 	lds	r7, 0x09A1
    1516:	76 fe       	sbrs	r7, 6
    1518:	fc cf       	rjmp	.-8      	; 0x1512 <MemoryUploadBlock+0x266>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    151a:	d0 92 a1 09 	sts	0x09A1, r13
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
    151e:	70 90 a0 09 	lds	r7, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    1522:	e2 17       	cp	r30, r18
    1524:	f3 07       	cpc	r31, r19
    1526:	91 f7       	brne	.-28     	; 0x150c <MemoryUploadBlock+0x260>
	SPITransferByte(FLASH_CMD_BUF1_WRITE);
	SPITransferByte( 0 );
	SPITransferByte( 0 );
	SPITransferByte( Address );
	SPIWriteBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1528:	c0 92 65 06 	sts	0x0665, r12

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    152c:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1530:	b0 92 a0 09 	sts	0x09A0, r11

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1534:	e0 91 a1 09 	lds	r30, 0x09A1
    1538:	e6 ff       	sbrs	r30, 6
    153a:	fc cf       	rjmp	.-8      	; 0x1534 <MemoryUploadBlock+0x288>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    153c:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1540:	e0 91 a0 09 	lds	r30, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1544:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1548:	e0 91 a1 09 	lds	r30, 0x09A1
    154c:	e6 ff       	sbrs	r30, 6
    154e:	fc cf       	rjmp	.-8      	; 0x1548 <MemoryUploadBlock+0x29c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1550:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1554:	e0 91 a0 09 	lds	r30, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1558:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashBufferToMemory(uint16_t PageAddress)
{
	while(FlashIsBusy());
    155c:	e7 ff       	sbrs	r30, 7
    155e:	e6 cf       	rjmp	.-52     	; 0x152c <MemoryUploadBlock+0x280>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1560:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1564:	e3 e8       	ldi	r30, 0x83	; 131
    1566:	e0 93 a0 09 	sts	0x09A0, r30

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    156a:	e0 91 a1 09 	lds	r30, 0x09A1
    156e:	e6 ff       	sbrs	r30, 6
    1570:	fc cf       	rjmp	.-8      	; 0x156a <MemoryUploadBlock+0x2be>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1572:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1576:	e0 91 a0 09 	lds	r30, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    157a:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    157e:	40 91 a1 09 	lds	r20, 0x09A1
    1582:	46 ff       	sbrs	r20, 6
    1584:	fc cf       	rjmp	.-8      	; 0x157e <MemoryUploadBlock+0x2d2>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1586:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    158a:	40 91 a0 09 	lds	r20, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    158e:	50 93 a0 09 	sts	0x09A0, r21

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1592:	40 91 a1 09 	lds	r20, 0x09A1
    1596:	46 ff       	sbrs	r20, 6
    1598:	fc cf       	rjmp	.-8      	; 0x1592 <MemoryUploadBlock+0x2e6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    159a:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    159e:	40 91 a0 09 	lds	r20, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    15a2:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    15a6:	40 91 a1 09 	lds	r20, 0x09A1
    15aa:	46 ff       	sbrs	r20, 6
    15ac:	fc cf       	rjmp	.-8      	; 0x15a6 <MemoryUploadBlock+0x2fa>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    15ae:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    15b2:	40 91 a0 09 	lds	r20, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_BUF1_TO_MEM_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    15b6:	c0 92 65 06 	sts	0x0665, r12

		FlashMemoryToBuffer(PageAddress);
		FlashWriteBuffer(Buffer, ByteAddress, PageBytes);
		FlashBufferToMemory(PageAddress);

		ByteCount -= PageBytes;
    15ba:	06 1b       	sub	r16, r22
    15bc:	17 0b       	sbc	r17, r23
		Address += PageBytes;
    15be:	86 0f       	add	r24, r22
    15c0:	97 1f       	adc	r25, r23
    15c2:	a1 1d       	adc	r26, r1
    15c4:	b1 1d       	adc	r27, r1
		Buffer += PageBytes;
    15c6:	2a 87       	std	Y+10, r18	; 0x0a
    15c8:	3b 87       	std	Y+11, r19	; 0x0b
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
    15ca:	01 15       	cp	r16, r1
    15cc:	11 05       	cpc	r17, r1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <MemoryUploadBlock+0x326>
    15d0:	d3 ce       	rjmp	.-602    	; 0x1378 <MemoryUploadBlock+0xcc>
    15d2:	4e 81       	ldd	r20, Y+6	; 0x06
    15d4:	5f 81       	ldd	r21, Y+7	; 0x07
    15d6:	68 85       	ldd	r22, Y+8	; 0x08
    15d8:	79 85       	ldd	r23, Y+9	; 0x09

    	/* Store into flash */
    	FlashWrite(Buffer, FlashAddress, ByteCount);

		/* Store to local memory */
    	uint8_t* DstPtr = &Memory[BlockAddress];
    15da:	da 01       	movw	r26, r20
    15dc:	ae 56       	subi	r26, 0x6E	; 110
    15de:	bf 4d       	sbci	r27, 0xDF	; 223
    15e0:	2d 81       	ldd	r18, Y+5	; 0x05
    15e2:	32 2d       	mov	r19, r2

	LEDTrigger(LED_MEMORY_CHANGED, LED_OFF);
	LEDTrigger(LED_MEMORY_STORED, LED_PULSE);
}

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	8a 0f       	add	r24, r26
    15ea:	9b 1f       	adc	r25, r27
    15ec:	f9 01       	movw	r30, r18
		/* Store to local memory */
    	uint8_t* DstPtr = &Memory[BlockAddress];
    	uint8_t* SrcPtr = (uint8_t*) Buffer;

    	while(ByteCount--) {
    		*DstPtr++ = *SrcPtr++;
    15ee:	21 91       	ld	r18, Z+
    15f0:	2d 93       	st	X+, r18

		/* Store to local memory */
    	uint8_t* DstPtr = &Memory[BlockAddress];
    	uint8_t* SrcPtr = (uint8_t*) Buffer;

    	while(ByteCount--) {
    15f2:	a8 17       	cp	r26, r24
    15f4:	b9 07       	cpc	r27, r25
    15f6:	d9 f7       	brne	.-10     	; 0x15ee <MemoryUploadBlock+0x342>
    	}

		return true;
    }

}
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	2b 96       	adiw	r28, 0x0b	; 11
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	bf 90       	pop	r11
    1612:	af 90       	pop	r10
    1614:	9f 90       	pop	r9
    1616:	8f 90       	pop	r8
    1618:	7f 90       	pop	r7
    161a:	6f 90       	pop	r6
    161c:	5f 90       	pop	r5
    161e:	4f 90       	pop	r4
    1620:	3f 90       	pop	r3
    1622:	2f 90       	pop	r2
    1624:	08 95       	ret
    1626:	ea 85       	ldd	r30, Y+10	; 0x0a
    1628:	fb 85       	ldd	r31, Y+11	; 0x0b
    162a:	b6 ce       	rjmp	.-660    	; 0x1398 <MemoryUploadBlock+0xec>
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSettingIdx * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    162c:	09 83       	std	Y+1, r16	; 0x01
    162e:	1a 83       	std	Y+2, r17	; 0x02
    1630:	2b 83       	std	Y+3, r18	; 0x03
    1632:	3c 83       	std	Y+4, r19	; 0x04
    1634:	81 ce       	rjmp	.-766    	; 0x1338 <MemoryUploadBlock+0x8c>

00001636 <MemoryDownloadBlock>:
    }

}

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    1636:	cf 92       	push	r12
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	69 01       	movw	r12, r18
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    1644:	41 15       	cp	r20, r1
    1646:	24 e0       	ldi	r18, 0x04	; 4
    1648:	52 07       	cpc	r21, r18
    164a:	61 05       	cpc	r22, r1
    164c:	71 05       	cpc	r23, r1
    164e:	40 f5       	brcc	.+80     	; 0x16a0 <MemoryDownloadBlock+0x6a>
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    1650:	00 e0       	ldi	r16, 0x00	; 0
    1652:	14 e0       	ldi	r17, 0x04	; 4
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	04 1b       	sub	r16, r20
    165a:	15 0b       	sbc	r17, r21
    165c:	26 0b       	sbc	r18, r22
    165e:	37 0b       	sbc	r19, r23
    	//uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    1660:	e1 2c       	mov	r14, r1
    1662:	f1 2c       	mov	r15, r1
    1664:	0c 15       	cp	r16, r12
    1666:	1d 05       	cpc	r17, r13
    1668:	2e 05       	cpc	r18, r14
    166a:	3f 05       	cpc	r19, r15
    166c:	b0 f0       	brcs	.+44     	; 0x169a <MemoryDownloadBlock+0x64>

    	/* Output local memory contents */
    	uint8_t* DstPtr = (uint8_t*) Buffer;
    	uint8_t* SrcPtr = &Memory[BlockAddress];
    166e:	4e 56       	subi	r20, 0x6E	; 110
    1670:	5f 4d       	sbci	r21, 0xDF	; 223

    	while(ByteCount--) {
    1672:	c1 14       	cp	r12, r1
    1674:	d1 04       	cpc	r13, r1
    1676:	49 f0       	breq	.+18     	; 0x168a <MemoryDownloadBlock+0x54>
    1678:	da 01       	movw	r26, r20
		return true;
    }

}

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
    167a:	c8 0e       	add	r12, r24
    167c:	d9 1e       	adc	r13, r25
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    	//uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);

    	/* Output local memory contents */
    	uint8_t* DstPtr = (uint8_t*) Buffer;
    167e:	fc 01       	movw	r30, r24
    	uint8_t* SrcPtr = &Memory[BlockAddress];

    	while(ByteCount--) {
    		*DstPtr++ = *SrcPtr++;
    1680:	8d 91       	ld	r24, X+
    1682:	81 93       	st	Z+, r24

    	/* Output local memory contents */
    	uint8_t* DstPtr = (uint8_t*) Buffer;
    	uint8_t* SrcPtr = &Memory[BlockAddress];

    	while(ByteCount--) {
    1684:	ec 15       	cp	r30, r12
    1686:	fd 05       	cpc	r31, r13
    1688:	d9 f7       	brne	.-10     	; 0x1680 <MemoryDownloadBlock+0x4a>
    		*DstPtr++ = *SrcPtr++;
    	}

        return true;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	08 95       	ret
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    	//uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    169a:	68 01       	movw	r12, r16
    169c:	79 01       	movw	r14, r18
    169e:	e7 cf       	rjmp	.-50     	; 0x166e <MemoryDownloadBlock+0x38>

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    		*DstPtr++ = *SrcPtr++;
    	}

        return true;
    }
}
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	08 95       	ret

000016b0 <ExecuteButtonAction>:
    [BUTTON_ACTION_STORE_MEM] = "STORE_MEM",
    [BUTTON_ACTION_RECALL_MEM] = "RECALL_MEM",
};

static void ExecuteButtonAction(ButtonActionEnum ButtonAction)
{
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	a0 97       	sbiw	r28, 0x20	; 32
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	de bf       	out	0x3e, r29	; 62
    uint8_t UidBuffer[32];

    if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	e9 f0       	breq	.+58     	; 0x1702 <ExecuteButtonAction+0x52>
        for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
            UidBuffer[i] = RandomGetByte();
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	09 f4       	brne	.+2      	; 0x16ce <ExecuteButtonAction+0x1e>
    16cc:	55 c0       	rjmp	.+170    	; 0x1778 <ExecuteButtonAction+0xc8>
                UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
            }
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <ExecuteButtonAction+0x24>
    16d2:	74 c0       	rjmp	.+232    	; 0x17bc <ExecuteButtonAction+0x10c>
                UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
            }
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	79 f1       	breq	.+94     	; 0x1736 <ExecuteButtonAction+0x86>
                UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
            }
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
    16d8:	85 30       	cpi	r24, 0x05	; 5
    16da:	09 f4       	brne	.+2      	; 0x16de <ExecuteButtonAction+0x2e>
    16dc:	94 c0       	rjmp	.+296    	; 0x1806 <ExecuteButtonAction+0x156>
                UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
            }
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
    16de:	86 30       	cpi	r24, 0x06	; 6
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <ExecuteButtonAction+0x34>
    16e2:	b3 c0       	rjmp	.+358    	; 0x184a <ExecuteButtonAction+0x19a>
    	SettingsCycle();
    } else if (ButtonAction == BUTTON_ACTION_STORE_MEM) {
    16e4:	87 30       	cpi	r24, 0x07	; 7
    16e6:	09 f4       	brne	.+2      	; 0x16ea <ExecuteButtonAction+0x3a>
    16e8:	b2 c0       	rjmp	.+356    	; 0x184e <ExecuteButtonAction+0x19e>
    	MemoryStore();
    } else if (ButtonAction == BUTTON_ACTION_RECALL_MEM) {
    16ea:	88 30       	cpi	r24, 0x08	; 8
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <ExecuteButtonAction+0x40>
    16ee:	89 c0       	rjmp	.+274    	; 0x1802 <ExecuteButtonAction+0x152>
    	MemoryRecall();
    }
}
    16f0:	a0 96       	adiw	r28, 0x20	; 32
    16f2:	cd bf       	out	0x3d, r28	; 61
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	08 95       	ret
static void ExecuteButtonAction(ButtonActionEnum ButtonAction)
{
    uint8_t UidBuffer[32];

    if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
        for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
    1702:	80 91 05 29 	lds	r24, 0x2905
    1706:	88 23       	and	r24, r24
    1708:	09 f4       	brne	.+2      	; 0x170c <ExecuteButtonAction+0x5c>
    170a:	a3 c0       	rjmp	.+326    	; 0x1852 <ExecuteButtonAction+0x1a2>
    170c:	f1 2c       	mov	r15, r1
    170e:	8e 01       	movw	r16, r28
    1710:	0f 5f       	subi	r16, 0xFF	; 255
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
            UidBuffer[i] = RandomGetByte();
    1714:	b1 da       	rcall	.-2718   	; 0xc78 <RandomGetByte>
    1716:	f8 01       	movw	r30, r16
    1718:	ef 0d       	add	r30, r15
    171a:	f1 1d       	adc	r31, r1
    171c:	80 83       	st	Z, r24
static void ExecuteButtonAction(ButtonActionEnum ButtonAction)
{
    uint8_t UidBuffer[32];

    if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
        for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
    171e:	f3 94       	inc	r15
    1720:	80 91 05 29 	lds	r24, 0x2905
    1724:	f8 16       	cp	r15, r24
    1726:	b0 f3       	brcs	.-20     	; 0x1714 <ExecuteButtonAction+0x64>
INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    1728:	e0 91 01 29 	lds	r30, 0x2901
    172c:	f0 91 02 29 	lds	r31, 0x2902
    1730:	c8 01       	movw	r24, r16
    1732:	09 95       	icall
    1734:	dd cf       	rjmp	.-70     	; 0x16f0 <ExecuteButtonAction+0x40>
    ActiveConfiguration.ApplicationResetFunc();
    //LogEntry(LOG_INFO_APP_RESET, NULL, 0);
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    1736:	e0 91 ff 28 	lds	r30, 0x28FF
    173a:	f0 91 00 29 	lds	r31, 0x2900
    173e:	8e 01       	movw	r16, r28
    1740:	0f 5f       	subi	r16, 0xFF	; 255
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	c8 01       	movw	r24, r16
    1746:	09 95       	icall
    } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
        uint8_t i;

        for (i=0; i<ActiveConfiguration.UidSize; i++) {
    1748:	20 91 05 29 	lds	r18, 0x2905
    174c:	22 23       	and	r18, r18
    174e:	61 f3       	breq	.-40     	; 0x1728 <ExecuteButtonAction+0x78>
    1750:	f8 01       	movw	r30, r16
    [BUTTON_ACTION_CYCLE_SETTINGS] = "CYCLE_SETTINGS",
    [BUTTON_ACTION_STORE_MEM] = "STORE_MEM",
    [BUTTON_ACTION_RECALL_MEM] = "RECALL_MEM",
};

static void ExecuteButtonAction(ButtonActionEnum ButtonAction)
    1752:	ce 01       	movw	r24, r28
    1754:	02 96       	adiw	r24, 0x02	; 2
    1756:	21 50       	subi	r18, 0x01	; 1
    1758:	82 0f       	add	r24, r18
    175a:	91 1d       	adc	r25, r1
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
    175c:	21 e0       	ldi	r18, 0x01	; 1
        uint8_t i;

        for (i=0; i<ActiveConfiguration.UidSize; i++) {
            if (Carry) {
    175e:	22 23       	and	r18, r18
    1760:	31 f0       	breq	.+12     	; 0x176e <ExecuteButtonAction+0xbe>
                if (UidBuffer[i] == 0x00) {
    1762:	30 81       	ld	r19, Z
    1764:	21 e0       	ldi	r18, 0x01	; 1
    1766:	31 11       	cpse	r19, r1
    1768:	20 e0       	ldi	r18, 0x00	; 0
                    Carry = 1;
                } else {
                    Carry = 0;
                }

                UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
    176a:	31 50       	subi	r19, 0x01	; 1
    176c:	30 83       	st	Z, r19
    176e:	31 96       	adiw	r30, 0x01	; 1
    } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
        uint8_t i;

        for (i=0; i<ActiveConfiguration.UidSize; i++) {
    1770:	e8 17       	cp	r30, r24
    1772:	f9 07       	cpc	r31, r25
    1774:	a1 f7       	brne	.-24     	; 0x175e <ExecuteButtonAction+0xae>
    1776:	d8 cf       	rjmp	.-80     	; 0x1728 <ExecuteButtonAction+0x78>
    1778:	e0 91 ff 28 	lds	r30, 0x28FF
    177c:	f0 91 00 29 	lds	r31, 0x2900
    1780:	8e 01       	movw	r16, r28
    1782:	0f 5f       	subi	r16, 0xFF	; 255
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	c8 01       	movw	r24, r16
    1788:	09 95       	icall
    } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
        uint8_t i;

        for (i=0; i<ActiveConfiguration.UidSize; i++) {
    178a:	20 91 05 29 	lds	r18, 0x2905
    178e:	22 23       	and	r18, r18
    1790:	59 f2       	breq	.-106    	; 0x1728 <ExecuteButtonAction+0x78>
    1792:	f8 01       	movw	r30, r16
    [BUTTON_ACTION_CYCLE_SETTINGS] = "CYCLE_SETTINGS",
    [BUTTON_ACTION_STORE_MEM] = "STORE_MEM",
    [BUTTON_ACTION_RECALL_MEM] = "RECALL_MEM",
};

static void ExecuteButtonAction(ButtonActionEnum ButtonAction)
    1794:	ce 01       	movw	r24, r28
    1796:	02 96       	adiw	r24, 0x02	; 2
    1798:	21 50       	subi	r18, 0x01	; 1
    179a:	82 0f       	add	r24, r18
    179c:	91 1d       	adc	r25, r1
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
    179e:	21 e0       	ldi	r18, 0x01	; 1
        uint8_t i;

        for (i=0; i<ActiveConfiguration.UidSize; i++) {
            if (Carry) {
    17a0:	22 23       	and	r18, r18
    17a2:	39 f0       	breq	.+14     	; 0x17b2 <ExecuteButtonAction+0x102>
                if (UidBuffer[i] == 0xFF) {
    17a4:	30 81       	ld	r19, Z
    17a6:	21 e0       	ldi	r18, 0x01	; 1
    17a8:	3f 3f       	cpi	r19, 0xFF	; 255
    17aa:	09 f0       	breq	.+2      	; 0x17ae <ExecuteButtonAction+0xfe>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
                    Carry = 1;
                } else {
                    Carry = 0;
                }

                UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
    17ae:	3f 5f       	subi	r19, 0xFF	; 255
    17b0:	30 83       	st	Z, r19
    17b2:	31 96       	adiw	r30, 0x01	; 1
    } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
        uint8_t i;

        for (i=0; i<ActiveConfiguration.UidSize; i++) {
    17b4:	e8 17       	cp	r30, r24
    17b6:	f9 07       	cpc	r31, r25
    17b8:	99 f7       	brne	.-26     	; 0x17a0 <ExecuteButtonAction+0xf0>
    17ba:	b6 cf       	rjmp	.-148    	; 0x1728 <ExecuteButtonAction+0x78>
    17bc:	e0 91 ff 28 	lds	r30, 0x28FF
    17c0:	f0 91 00 29 	lds	r31, 0x2900
    17c4:	8e 01       	movw	r16, r28
    17c6:	0f 5f       	subi	r16, 0xFF	; 255
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	c8 01       	movw	r24, r16
    17cc:	09 95       	icall

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
        uint8_t i = ActiveConfiguration.UidSize;
    17ce:	20 91 05 29 	lds	r18, 0x2905
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
    17d2:	31 e0       	ldi	r19, 0x01	; 1
        uint8_t i = ActiveConfiguration.UidSize;

        while(i-- > 0) {
    17d4:	21 50       	subi	r18, 0x01	; 1
    17d6:	08 f4       	brcc	.+2      	; 0x17da <ExecuteButtonAction+0x12a>
    17d8:	a7 cf       	rjmp	.-178    	; 0x1728 <ExecuteButtonAction+0x78>
            if (Carry) {
    17da:	33 23       	and	r19, r19
    17dc:	d9 f3       	breq	.-10     	; 0x17d4 <ExecuteButtonAction+0x124>
                if (UidBuffer[i] == 0xFF) {
    17de:	82 2f       	mov	r24, r18
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	f8 01       	movw	r30, r16
    17e4:	e8 0f       	add	r30, r24
    17e6:	f9 1f       	adc	r31, r25
    17e8:	40 81       	ld	r20, Z
    17ea:	31 e0       	ldi	r19, 0x01	; 1
    17ec:	4f 3f       	cpi	r20, 0xFF	; 255
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <ExecuteButtonAction+0x142>
    17f0:	30 e0       	ldi	r19, 0x00	; 0
                    Carry = 1;
                } else {
                    Carry = 0;
                }

                UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
    17f2:	f8 01       	movw	r30, r16
    17f4:	e8 0f       	add	r30, r24
    17f6:	f9 1f       	adc	r31, r25
    17f8:	4f 5f       	subi	r20, 0xFF	; 255
    17fa:	40 83       	st	Z, r20
    } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
        uint8_t i = ActiveConfiguration.UidSize;

        while(i-- > 0) {
    17fc:	21 50       	subi	r18, 0x01	; 1
    17fe:	68 f7       	brcc	.-38     	; 0x17da <ExecuteButtonAction+0x12a>
    1800:	93 cf       	rjmp	.-218    	; 0x1728 <ExecuteButtonAction+0x78>
    } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
    	SettingsCycle();
    } else if (ButtonAction == BUTTON_ACTION_STORE_MEM) {
    	MemoryStore();
    } else if (ButtonAction == BUTTON_ACTION_RECALL_MEM) {
    	MemoryRecall();
    1802:	18 db       	rcall	.-2512   	; 0xe34 <MemoryRecall>
    1804:	75 cf       	rjmp	.-278    	; 0x16f0 <ExecuteButtonAction+0x40>
    1806:	e0 91 ff 28 	lds	r30, 0x28FF
    180a:	f0 91 00 29 	lds	r31, 0x2900
    180e:	8e 01       	movw	r16, r28
    1810:	0f 5f       	subi	r16, 0xFF	; 255
    1812:	1f 4f       	sbci	r17, 0xFF	; 255
    1814:	c8 01       	movw	r24, r16
    1816:	09 95       	icall

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
        uint8_t i = ActiveConfiguration.UidSize;
    1818:	20 91 05 29 	lds	r18, 0x2905
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
    181c:	31 e0       	ldi	r19, 0x01	; 1
        uint8_t i = ActiveConfiguration.UidSize;

        while(i-- > 0) {
    181e:	21 50       	subi	r18, 0x01	; 1
    1820:	08 f4       	brcc	.+2      	; 0x1824 <ExecuteButtonAction+0x174>
    1822:	82 cf       	rjmp	.-252    	; 0x1728 <ExecuteButtonAction+0x78>
            if (Carry) {
    1824:	33 23       	and	r19, r19
    1826:	d9 f3       	breq	.-10     	; 0x181e <ExecuteButtonAction+0x16e>
                if (UidBuffer[i] == 0x00) {
    1828:	82 2f       	mov	r24, r18
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	f8 01       	movw	r30, r16
    182e:	e8 0f       	add	r30, r24
    1830:	f9 1f       	adc	r31, r25
    1832:	40 81       	ld	r20, Z
    1834:	31 e0       	ldi	r19, 0x01	; 1
    1836:	41 11       	cpse	r20, r1
    1838:	30 e0       	ldi	r19, 0x00	; 0
                    Carry = 1;
                } else {
                    Carry = 0;
                }

                UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
    183a:	f8 01       	movw	r30, r16
    183c:	e8 0f       	add	r30, r24
    183e:	f9 1f       	adc	r31, r25
    1840:	41 50       	subi	r20, 0x01	; 1
    1842:	40 83       	st	Z, r20
    } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
        ApplicationGetUid(UidBuffer);
        bool Carry = 1;
        uint8_t i = ActiveConfiguration.UidSize;

        while(i-- > 0) {
    1844:	21 50       	subi	r18, 0x01	; 1
    1846:	70 f7       	brcc	.-36     	; 0x1824 <ExecuteButtonAction+0x174>
    1848:	6f cf       	rjmp	.-290    	; 0x1728 <ExecuteButtonAction+0x78>
            }
        }

        ApplicationSetUid(UidBuffer);
    } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
    	SettingsCycle();
    184a:	50 d2       	rcall	.+1184   	; 0x1cec <SettingsCycle>
    184c:	51 cf       	rjmp	.-350    	; 0x16f0 <ExecuteButtonAction+0x40>
    } else if (ButtonAction == BUTTON_ACTION_STORE_MEM) {
    	MemoryStore();
    184e:	e7 db       	rcall	.-2098   	; 0x101e <MemoryStore>
    1850:	4f cf       	rjmp	.-354    	; 0x16f0 <ExecuteButtonAction+0x40>
    1852:	8e 01       	movw	r16, r28
    1854:	0f 5f       	subi	r16, 0xFF	; 255
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	67 cf       	rjmp	.-306    	; 0x1728 <ExecuteButtonAction+0x78>

0000185a <ButtonInit>:
    }
}

void ButtonInit(void)
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
    185a:	e0 e0       	ldi	r30, 0x00	; 0
    185c:	f6 e0       	ldi	r31, 0x06	; 6
    185e:	80 e4       	ldi	r24, 0x40	; 64
    1860:	82 83       	std	Z+2, r24	; 0x02
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
    1862:	88 e1       	ldi	r24, 0x18	; 24
    1864:	86 8b       	std	Z+22, r24	; 0x16
    1866:	08 95       	ret

00001868 <ButtonTick>:
}

void ButtonTick(void)
{
    static uint8_t PressTickCounter = 0;
    uint8_t ThisButtonState = ~BUTTON_PORT.IN;
    1868:	80 91 08 06 	lds	r24, 0x0608

    if (ThisButtonState & BUTTON_MASK) {
    186c:	86 ff       	sbrs	r24, 6
    186e:	08 c0       	rjmp	.+16     	; 0x1880 <ButtonTick+0x18>
    		/* Button is still pressed, ignore */
    	}
    } else if (!(ThisButtonState & BUTTON_MASK)) {
    	/* Button is currently not being pressed. Check if PressTickCounter contains
    	 * a recent short button press. */
    	if ( (PressTickCounter > 0) && (PressTickCounter <= LONG_PRESS_TICK_COUNT) ) {
    1870:	80 91 92 24 	lds	r24, 0x2492
    1874:	81 50       	subi	r24, 0x01	; 1
    1876:	8a 30       	cpi	r24, 0x0A	; 10
    1878:	a8 f0       	brcs	.+42     	; 0x18a4 <ButtonTick+0x3c>
    		/* We have a short button press */
    		ExecuteButtonAction(GlobalSettings.ActiveSettingPtr->ButtonAction);
    	}

    	PressTickCounter = 0;
    187a:	10 92 92 24 	sts	0x2492, r1
    187e:	08 95       	ret
    static uint8_t PressTickCounter = 0;
    uint8_t ThisButtonState = ~BUTTON_PORT.IN;

    if (ThisButtonState & BUTTON_MASK) {
    	/* Button is currently pressed */
    	if (PressTickCounter < LONG_PRESS_TICK_COUNT) {
    1880:	80 91 92 24 	lds	r24, 0x2492
    1884:	8a 30       	cpi	r24, 0x0A	; 10
    1886:	50 f0       	brcs	.+20     	; 0x189c <ButtonTick+0x34>
    		/* Count ticks while button is being pressed */
    		PressTickCounter++;
    	} else if (PressTickCounter == LONG_PRESS_TICK_COUNT) {
    1888:	8a 30       	cpi	r24, 0x0A	; 10
    188a:	c9 f7       	brne	.-14     	; 0x187e <ButtonTick+0x16>
    		/* Long button press detected execute button action and advance PressTickCounter
    		 * to an invalid state. */
    		ExecuteButtonAction(GlobalSettings.ActiveSettingPtr->ButtonLongAction);
    188c:	e0 91 0a 29 	lds	r30, 0x290A
    1890:	f0 91 0b 29 	lds	r31, 0x290B
    1894:	81 81       	ldd	r24, Z+1	; 0x01
    1896:	0c df       	rcall	.-488    	; 0x16b0 <ExecuteButtonAction>
    		PressTickCounter++;
    1898:	80 91 92 24 	lds	r24, 0x2492
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	80 93 92 24 	sts	0x2492, r24
    18a2:	08 95       	ret
    } else if (!(ThisButtonState & BUTTON_MASK)) {
    	/* Button is currently not being pressed. Check if PressTickCounter contains
    	 * a recent short button press. */
    	if ( (PressTickCounter > 0) && (PressTickCounter <= LONG_PRESS_TICK_COUNT) ) {
    		/* We have a short button press */
    		ExecuteButtonAction(GlobalSettings.ActiveSettingPtr->ButtonAction);
    18a4:	e0 91 0a 29 	lds	r30, 0x290A
    18a8:	f0 91 0b 29 	lds	r31, 0x290B
    18ac:	80 81       	ld	r24, Z
    18ae:	00 df       	rcall	.-512    	; 0x16b0 <ExecuteButtonAction>
    18b0:	e4 cf       	rjmp	.-56     	; 0x187a <ButtonTick+0x12>

000018b2 <ButtonGetActionList>:
    	PressTickCounter = 0;
    }
}

void ButtonGetActionList(char* ListOut, uint16_t BufferSize)
{
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	ec 01       	movw	r28, r24
    uint8_t i;

    /* Account for '\0' */
    BufferSize--;
    18b8:	61 50       	subi	r22, 0x01	; 1
    18ba:	71 09       	sbc	r23, r1
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    18c0:	3c e2       	ldi	r19, 0x2C	; 44

    /* Account for '\0' */
    BufferSize--;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
    18c2:	fc 01       	movw	r30, r24
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	e2 95       	swap	r30
    18ca:	f2 95       	swap	r31
    18cc:	f0 7f       	andi	r31, 0xF0	; 240
    18ce:	fe 27       	eor	r31, r30
    18d0:	e0 7f       	andi	r30, 0xF0	; 240
    18d2:	fe 27       	eor	r31, r30
    18d4:	ea 59       	subi	r30, 0x9A	; 154
    18d6:	fc 4f       	sbci	r31, 0xFC	; 252
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    18d8:	24 91       	lpm	r18, Z
    18da:	22 23       	and	r18, r18
    18dc:	81 f0       	breq	.+32     	; 0x18fe <ButtonGetActionList+0x4c>
    18de:	61 32       	cpi	r22, 0x21	; 33
    18e0:	71 05       	cpc	r23, r1
    18e2:	68 f0       	brcs	.+26     	; 0x18fe <ButtonGetActionList+0x4c>
    18e4:	de 01       	movw	r26, r28
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <ButtonGetActionList+0x3c>
    18e8:	60 32       	cpi	r22, 0x20	; 32
    18ea:	71 05       	cpc	r23, r1
    18ec:	41 f0       	breq	.+16     	; 0x18fe <ButtonGetActionList+0x4c>
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ListOut++ = c;
    18ee:	2d 93       	st	X+, r18
    18f0:	ed 01       	movw	r28, r26
            ActionName++;
    18f2:	31 96       	adiw	r30, 0x01	; 1
            BufferSize--;
    18f4:	61 50       	subi	r22, 0x01	; 1
    18f6:	71 09       	sbc	r23, r1

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    18f8:	24 91       	lpm	r18, Z
    18fa:	21 11       	cpse	r18, r1
    18fc:	f5 cf       	rjmp	.-22     	; 0x18e8 <ButtonGetActionList+0x36>
            *ListOut++ = c;
            ActionName++;
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
    18fe:	88 30       	cpi	r24, 0x08	; 8
    1900:	91 05       	cpc	r25, r1
    1902:	21 f4       	brne	.+8      	; 0x190c <ButtonGetActionList+0x5a>
            *ListOut++ = ',';
            BufferSize--;
        }
    }

    *ListOut = '\0';
    1904:	18 82       	st	Y, r1
}
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    190c:	39 93       	st	Y+, r19
            BufferSize--;
    190e:	61 50       	subi	r22, 0x01	; 1
    1910:	71 09       	sbc	r23, r1
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	d6 cf       	rjmp	.-84     	; 0x18c2 <ButtonGetActionList+0x10>

00001916 <ButtonSetActionById>:

    *ListOut = '\0';
}

void ButtonSetActionById(ButtonTypeEnum Type, ButtonActionEnum Action)
{
    1916:	88 23       	and	r24, r24
    1918:	19 f0       	breq	.+6      	; 0x1920 <ButtonSetActionById+0xa>
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	91 f0       	breq	.+36     	; 0x1942 <ButtonSetActionById+0x2c>
    191e:	08 95       	ret
	}
#else
	/* Write button action to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Type == BUTTON_PRESS_SHORT) {
			GlobalSettings.Settings[i].ButtonAction = Action;
    1920:	60 93 0c 29 	sts	0x290C, r22
    1924:	60 93 12 29 	sts	0x2912, r22
    1928:	60 93 18 29 	sts	0x2918, r22
    192c:	60 93 1e 29 	sts	0x291E, r22
    1930:	60 93 24 29 	sts	0x2924, r22
    1934:	60 93 2a 29 	sts	0x292A, r22
    1938:	60 93 30 29 	sts	0x2930, r22
    193c:	60 93 36 29 	sts	0x2936, r22
    1940:	08 95       	ret
		} else if (Type == BUTTON_PRESS_LONG) {
			GlobalSettings.Settings[i].ButtonLongAction = Action;
    1942:	60 93 0d 29 	sts	0x290D, r22
    1946:	60 93 13 29 	sts	0x2913, r22
    194a:	60 93 19 29 	sts	0x2919, r22
    194e:	60 93 1f 29 	sts	0x291F, r22
    1952:	60 93 25 29 	sts	0x2925, r22
    1956:	60 93 2b 29 	sts	0x292B, r22
    195a:	60 93 31 29 	sts	0x2931, r22
    195e:	60 93 37 29 	sts	0x2937, r22
    1962:	08 95       	ret

00001964 <ButtonGetActionByName>:
	}
#endif
}

void ButtonGetActionByName(ButtonTypeEnum Type, char* ActionOut, uint16_t BufferSize)
{
    1964:	fb 01       	movw	r30, r22
	if (Type == BUTTON_PRESS_SHORT) {
    1966:	88 23       	and	r24, r24
    1968:	21 f0       	breq	.+8      	; 0x1972 <ButtonGetActionByName+0xe>
		strncpy_P(ActionOut, ButtonActionTable[GlobalSettings.ActiveSettingPtr->ButtonAction], BufferSize);
	} else if (Type == BUTTON_PRESS_LONG) {
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	81 f0       	breq	.+32     	; 0x198e <ButtonGetActionByName+0x2a>
		strncpy_P(ActionOut, ButtonActionTable[GlobalSettings.ActiveSettingPtr->ButtonLongAction], BufferSize);
	} else {
		/* Should not happen (TM) */
		*ActionOut = '\0';
    196e:	10 82       	st	Z, r1
    1970:	08 95       	ret
}

void ButtonGetActionByName(ButtonTypeEnum Type, char* ActionOut, uint16_t BufferSize)
{
	if (Type == BUTTON_PRESS_SHORT) {
		strncpy_P(ActionOut, ButtonActionTable[GlobalSettings.ActiveSettingPtr->ButtonAction], BufferSize);
    1972:	a0 91 0a 29 	lds	r26, 0x290A
    1976:	b0 91 0b 29 	lds	r27, 0x290B
    197a:	6c 91       	ld	r22, X
	} else if (Type == BUTTON_PRESS_LONG) {
		strncpy_P(ActionOut, ButtonActionTable[GlobalSettings.ActiveSettingPtr->ButtonLongAction], BufferSize);
    197c:	80 e2       	ldi	r24, 0x20	; 32
    197e:	68 9f       	mul	r22, r24
    1980:	b0 01       	movw	r22, r0
    1982:	11 24       	eor	r1, r1
    1984:	6a 59       	subi	r22, 0x9A	; 154
    1986:	7c 4f       	sbci	r23, 0xFC	; 252
    1988:	cf 01       	movw	r24, r30
    198a:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <strncpy_P>
    198e:	a0 91 0a 29 	lds	r26, 0x290A
    1992:	b0 91 0b 29 	lds	r27, 0x290B
    1996:	11 96       	adiw	r26, 0x01	; 1
    1998:	6c 91       	ld	r22, X
    199a:	f0 cf       	rjmp	.-32     	; 0x197c <ButtonGetActionByName+0x18>

0000199c <ButtonSetActionByName>:
		*ActionOut = '\0';
	}
}

bool ButtonSetActionByName(ButtonTypeEnum Type, const char* Action)
{
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	18 2f       	mov	r17, r24
    19a4:	eb 01       	movw	r28, r22
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
    19a6:	66 e6       	ldi	r22, 0x66	; 102
    19a8:	73 e0       	ldi	r23, 0x03	; 3
    19aa:	ce 01       	movw	r24, r28
    19ac:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    19b0:	89 2b       	or	r24, r25
    19b2:	f1 f1       	breq	.+124    	; 0x1a30 <ButtonSetActionByName+0x94>
    19b4:	66 e8       	ldi	r22, 0x86	; 134
    19b6:	73 e0       	ldi	r23, 0x03	; 3
    19b8:	ce 01       	movw	r24, r28
    19ba:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    19be:	89 2b       	or	r24, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <ButtonSetActionByName+0x28>
    19c2:	3e c0       	rjmp	.+124    	; 0x1a40 <ButtonSetActionByName+0xa4>
    19c4:	66 ea       	ldi	r22, 0xA6	; 166
    19c6:	73 e0       	ldi	r23, 0x03	; 3
    19c8:	ce 01       	movw	r24, r28
    19ca:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    19ce:	89 2b       	or	r24, r25
    19d0:	c9 f1       	breq	.+114    	; 0x1a44 <ButtonSetActionByName+0xa8>
    19d2:	66 ec       	ldi	r22, 0xC6	; 198
    19d4:	73 e0       	ldi	r23, 0x03	; 3
    19d6:	ce 01       	movw	r24, r28
    19d8:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    19dc:	89 2b       	or	r24, r25
    19de:	a1 f1       	breq	.+104    	; 0x1a48 <ButtonSetActionByName+0xac>
    19e0:	66 ee       	ldi	r22, 0xE6	; 230
    19e2:	73 e0       	ldi	r23, 0x03	; 3
    19e4:	ce 01       	movw	r24, r28
    19e6:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    19ea:	89 2b       	or	r24, r25
    19ec:	79 f1       	breq	.+94     	; 0x1a4c <ButtonSetActionByName+0xb0>
    19ee:	66 e0       	ldi	r22, 0x06	; 6
    19f0:	74 e0       	ldi	r23, 0x04	; 4
    19f2:	ce 01       	movw	r24, r28
    19f4:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    19f8:	89 2b       	or	r24, r25
    19fa:	51 f1       	breq	.+84     	; 0x1a50 <ButtonSetActionByName+0xb4>
    19fc:	66 e2       	ldi	r22, 0x26	; 38
    19fe:	74 e0       	ldi	r23, 0x04	; 4
    1a00:	ce 01       	movw	r24, r28
    1a02:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    1a06:	89 2b       	or	r24, r25
    1a08:	29 f1       	breq	.+74     	; 0x1a54 <ButtonSetActionByName+0xb8>
    1a0a:	66 e4       	ldi	r22, 0x46	; 70
    1a0c:	74 e0       	ldi	r23, 0x04	; 4
    1a0e:	ce 01       	movw	r24, r28
    1a10:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    1a14:	89 2b       	or	r24, r25
    1a16:	01 f1       	breq	.+64     	; 0x1a58 <ButtonSetActionByName+0xbc>
    1a18:	66 e6       	ldi	r22, 0x66	; 102
    1a1a:	74 e0       	ldi	r23, 0x04	; 4
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    1a22:	89 2b       	or	r24, r25
    1a24:	d9 f0       	breq	.+54     	; 0x1a5c <ButtonSetActionByName+0xc0>
            return true;
        }
    }

    /* Button action not found */
    return false;
    1a26:	80 e0       	ldi	r24, 0x00	; 0
}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	08 95       	ret

bool ButtonSetActionByName(ButtonTypeEnum Type, const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    1a30:	60 e0       	ldi	r22, 0x00	; 0
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
            ButtonSetActionById(Type, i);
    1a32:	81 2f       	mov	r24, r17
    1a34:	70 df       	rcall	.-288    	; 0x1916 <ButtonSetActionById>
            return true;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    /* Button action not found */
    return false;
}
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	1f 91       	pop	r17
    1a3e:	08 95       	ret

bool ButtonSetActionByName(ButtonTypeEnum Type, const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	f7 cf       	rjmp	.-18     	; 0x1a32 <ButtonSetActionByName+0x96>
    1a44:	62 e0       	ldi	r22, 0x02	; 2
    1a46:	f5 cf       	rjmp	.-22     	; 0x1a32 <ButtonSetActionByName+0x96>
    1a48:	63 e0       	ldi	r22, 0x03	; 3
    1a4a:	f3 cf       	rjmp	.-26     	; 0x1a32 <ButtonSetActionByName+0x96>
    1a4c:	64 e0       	ldi	r22, 0x04	; 4
    1a4e:	f1 cf       	rjmp	.-30     	; 0x1a32 <ButtonSetActionByName+0x96>
    1a50:	65 e0       	ldi	r22, 0x05	; 5
    1a52:	ef cf       	rjmp	.-34     	; 0x1a32 <ButtonSetActionByName+0x96>
    1a54:	66 e0       	ldi	r22, 0x06	; 6
    1a56:	ed cf       	rjmp	.-38     	; 0x1a32 <ButtonSetActionByName+0x96>
    1a58:	67 e0       	ldi	r22, 0x07	; 7
    1a5a:	eb cf       	rjmp	.-42     	; 0x1a32 <ButtonSetActionByName+0x96>
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
    1a5c:	68 e0       	ldi	r22, 0x08	; 8
    1a5e:	e9 cf       	rjmp	.-46     	; 0x1a32 <ButtonSetActionByName+0x96>

00001a60 <LogFuncOff>:
    [LOG_MODE_MEMORY] = "MEMORY",
    [LOG_MODE_TERMINAL] = "TERMINAL"
};

static void LogFuncOff(LogEntryEnum Entry, void* Data, uint8_t Length)
{
    1a60:	08 95       	ret

00001a62 <LogFuncTerminal>:
        LogSetModeById(LOG_MODE_OFF);
    }
}

static void LogFuncTerminal(LogEntryEnum Entry, void* Data, uint8_t Length)
{
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	eb 01       	movw	r28, r22
    1a6a:	14 2f       	mov	r17, r20
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
INLINE void TerminalSendByte(uint8_t Byte) { CDC_Device_SendByte(&TerminalHandle, Byte); }
    1a6c:	68 2f       	mov	r22, r24
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e2       	ldi	r25, 0x20	; 32
    1a72:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
    1a76:	61 2f       	mov	r22, r17
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e2       	ldi	r25, 0x20	; 32
    1a7c:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
    TerminalSendByte((uint8_t) Entry);
    TerminalSendByte((uint8_t) Length);
    TerminalSendBlock(Data, Length);
    1a80:	61 2f       	mov	r22, r17
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	ce 01       	movw	r24, r28
}
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17

static void LogFuncTerminal(LogEntryEnum Entry, void* Data, uint8_t Length)
{
    TerminalSendByte((uint8_t) Entry);
    TerminalSendByte((uint8_t) Length);
    TerminalSendBlock(Data, Length);
    1a8c:	8e c3       	rjmp	.+1820   	; 0x21aa <TerminalSendBlock>

00001a8e <LogTick>:
    LogMemClear();
    LogSetModeById(GlobalSettings.ActiveSettingPtr->LogMode);
}

void LogTick(void)
{
    1a8e:	08 95       	ret

00001a90 <LogTask>:

}

void LogTask(void)
{
    1a90:	08 95       	ret

00001a92 <LogMemLoadBlock>:

}

bool LogMemLoadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    if (BlockAddress < sizeof(LogMem)) {
    1a92:	41 15       	cp	r20, r1
    1a94:	e4 e0       	ldi	r30, 0x04	; 4
    1a96:	5e 07       	cpc	r21, r30
    1a98:	61 05       	cpc	r22, r1
    1a9a:	71 05       	cpc	r23, r1
    1a9c:	80 f4       	brcc	.+32     	; 0x1abe <LogMemLoadBlock+0x2c>
        uint8_t* DataPtr = (uint8_t*) Buffer;
        uint8_t* MemPtr = &LogMem[BlockAddress];
    1a9e:	4d 56       	subi	r20, 0x6D	; 109
    1aa0:	5b 4d       	sbci	r21, 0xDB	; 219

        while(ByteCount-- > 0) {
    1aa2:	21 15       	cp	r18, r1
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <LogMemLoadBlock+0x28>
    1aa8:	da 01       	movw	r26, r20
void LogTask(void)
{

}

bool LogMemLoadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
    1aaa:	28 0f       	add	r18, r24
    1aac:	39 1f       	adc	r19, r25
{
    if (BlockAddress < sizeof(LogMem)) {
        uint8_t* DataPtr = (uint8_t*) Buffer;
    1aae:	fc 01       	movw	r30, r24
        uint8_t* MemPtr = &LogMem[BlockAddress];

        while(ByteCount-- > 0) {
            *DataPtr++ = *MemPtr++;
    1ab0:	8d 91       	ld	r24, X+
    1ab2:	81 93       	st	Z+, r24
{
    if (BlockAddress < sizeof(LogMem)) {
        uint8_t* DataPtr = (uint8_t*) Buffer;
        uint8_t* MemPtr = &LogMem[BlockAddress];

        while(ByteCount-- > 0) {
    1ab4:	e2 17       	cp	r30, r18
    1ab6:	f3 07       	cpc	r31, r19
    1ab8:	d9 f7       	brne	.-10     	; 0x1ab0 <LogMemLoadBlock+0x1e>
            *DataPtr++ = *MemPtr++;
        }

        return true;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	08 95       	ret
    } else {
        return false;
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1ac0:	08 95       	ret

00001ac2 <LogMemClear>:

void LogMemClear(void)
{
    1ac2:	e3 e9       	ldi	r30, 0x93	; 147
    1ac4:	f4 e2       	ldi	r31, 0x24	; 36
    uint16_t i;

    for (i=0; i<sizeof(LogMem); i++) {
        LogMem[i] = (uint8_t) LOG_EMPTY;
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	81 93       	st	Z+, r24

void LogMemClear(void)
{
    uint16_t i;

    for (i=0; i<sizeof(LogMem); i++) {
    1aca:	98 e2       	ldi	r25, 0x28	; 40
    1acc:	e3 39       	cpi	r30, 0x93	; 147
    1ace:	f9 07       	cpc	r31, r25
    1ad0:	d9 f7       	brne	.-10     	; 0x1ac8 <LogMemClear+0x6>
        LogMem[i] = (uint8_t) LOG_EMPTY;
    }

    LogMemPtr = LogMem;
    1ad2:	83 e9       	ldi	r24, 0x93	; 147
    1ad4:	94 e2       	ldi	r25, 0x24	; 36
    1ad6:	80 93 93 28 	sts	0x2893, r24
    1ada:	90 93 94 28 	sts	0x2894, r25
    LogMemLeft = sizeof(LogMem);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	94 e0       	ldi	r25, 0x04	; 4
    1ae2:	80 93 95 28 	sts	0x2895, r24
    1ae6:	90 93 96 28 	sts	0x2896, r25
    1aea:	08 95       	ret

00001aec <LogMemFree>:
}

uint16_t LogMemFree(void)
{
    return LogMemLeft;
}
    1aec:	80 91 95 28 	lds	r24, 0x2895
    1af0:	90 91 96 28 	lds	r25, 0x2896
    1af4:	08 95       	ret

00001af6 <LogSetModeById>:

void LogSetModeById(LogModeEnum Mode)
{
    GlobalSettings.ActiveSettingPtr->LogMode = Mode;
    1af6:	e0 91 0a 29 	lds	r30, 0x290A
    1afa:	f0 91 0b 29 	lds	r31, 0x290B
    1afe:	82 83       	std	Z+2, r24	; 0x02

    switch(Mode) {
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	91 f0       	breq	.+36     	; 0x1b28 <LogSetModeById+0x32>
    1b04:	38 f4       	brcc	.+14     	; 0x1b14 <LogSetModeById+0x1e>
    case LOG_MODE_OFF:
        LogFunc = LogFuncOff;
    1b06:	80 e3       	ldi	r24, 0x30	; 48
    1b08:	9d e0       	ldi	r25, 0x0D	; 13
    1b0a:	80 93 07 29 	sts	0x2907, r24
    1b0e:	90 93 08 29 	sts	0x2908, r25
        break;
    1b12:	08 95       	ret

void LogSetModeById(LogModeEnum Mode)
{
    GlobalSettings.ActiveSettingPtr->LogMode = Mode;

    switch(Mode) {
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <LogSetModeById+0x24>
    1b18:	08 95       	ret
    case LOG_MODE_MEMORY:
        LogFunc = LogFuncMemory;
        break;

    case LOG_MODE_TERMINAL:
        LogFunc = LogFuncTerminal;
    1b1a:	81 e3       	ldi	r24, 0x31	; 49
    1b1c:	9d e0       	ldi	r25, 0x0D	; 13
    1b1e:	80 93 07 29 	sts	0x2907, r24
    1b22:	90 93 08 29 	sts	0x2908, r25
    1b26:	08 95       	ret
    case LOG_MODE_OFF:
        LogFunc = LogFuncOff;
        break;

    case LOG_MODE_MEMORY:
        LogFunc = LogFuncMemory;
    1b28:	8b e9       	ldi	r24, 0x9B	; 155
    1b2a:	9d e0       	ldi	r25, 0x0D	; 13
    1b2c:	80 93 07 29 	sts	0x2907, r24
    1b30:	90 93 08 29 	sts	0x2908, r25
        break;
    1b34:	08 95       	ret

00001b36 <LogFuncMemory>:
    /* Do nothing */
}

static void LogFuncMemory(LogEntryEnum Entry, void* Data, uint8_t Length)
{
    if (LogMemLeft >= (Length + 2)) {
    1b36:	20 91 95 28 	lds	r18, 0x2895
    1b3a:	30 91 96 28 	lds	r19, 0x2896
    1b3e:	e4 2f       	mov	r30, r20
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	df 01       	movw	r26, r30
    1b44:	12 96       	adiw	r26, 0x02	; 2
    1b46:	2a 17       	cp	r18, r26
    1b48:	3b 07       	cpc	r19, r27
    1b4a:	50 f1       	brcs	.+84     	; 0x1ba0 <LogFuncMemory+0x6a>
        LogMemLeft -= Length + 2;
    1b4c:	22 50       	subi	r18, 0x02	; 2
    1b4e:	31 09       	sbc	r19, r1
    1b50:	2e 1b       	sub	r18, r30
    1b52:	3f 0b       	sbc	r19, r31
    1b54:	20 93 95 28 	sts	0x2895, r18
    1b58:	30 93 96 28 	sts	0x2896, r19

        uint8_t* DataPtr = (uint8_t*) Data;

        *LogMemPtr++ = (uint8_t) Entry;
    1b5c:	e0 91 93 28 	lds	r30, 0x2893
    1b60:	f0 91 94 28 	lds	r31, 0x2894
    1b64:	80 83       	st	Z, r24
        *LogMemPtr++ = (uint8_t) Length;
    1b66:	41 83       	std	Z+1, r20	; 0x01
    1b68:	9f 01       	movw	r18, r30
    1b6a:	2e 5f       	subi	r18, 0xFE	; 254
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	20 93 93 28 	sts	0x2893, r18
    1b72:	30 93 94 28 	sts	0x2894, r19

        while(Length--) {
    1b76:	84 2f       	mov	r24, r20
    1b78:	81 50       	subi	r24, 0x01	; 1
    1b7a:	44 23       	and	r20, r20
    1b7c:	81 f0       	breq	.+32     	; 0x1b9e <LogFuncMemory+0x68>
    1b7e:	fb 01       	movw	r30, r22
    1b80:	d9 01       	movw	r26, r18
    1b82:	98 2f       	mov	r25, r24
            *LogMemPtr++ = *DataPtr++;
    1b84:	41 91       	ld	r20, Z+
    1b86:	4d 93       	st	X+, r20
        uint8_t* DataPtr = (uint8_t*) Data;

        *LogMemPtr++ = (uint8_t) Entry;
        *LogMemPtr++ = (uint8_t) Length;

        while(Length--) {
    1b88:	91 50       	subi	r25, 0x01	; 1
    1b8a:	e0 f7       	brcc	.-8      	; 0x1b84 <LogFuncMemory+0x4e>
static void LogFuncOff(LogEntryEnum Entry, void* Data, uint8_t Length)
{
    /* Do nothing */
}

static void LogFuncMemory(LogEntryEnum Entry, void* Data, uint8_t Length)
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	82 0f       	add	r24, r18
    1b92:	93 1f       	adc	r25, r19
    1b94:	80 93 93 28 	sts	0x2893, r24
    1b98:	90 93 94 28 	sts	0x2894, r25
    1b9c:	08 95       	ret
    1b9e:	08 95       	ret
        while(Length--) {
            *LogMemPtr++ = *DataPtr++;
        }
    } else {
        /* If memory full. Deactivate logmode */
        LogSetModeById(LOG_MODE_OFF);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	a9 cf       	rjmp	.-174    	; 0x1af6 <LogSetModeById>

00001ba4 <LogInit>:
    TerminalSendBlock(Data, Length);
}

void LogInit(void)
{
    LogMemClear();
    1ba4:	8e df       	rcall	.-228    	; 0x1ac2 <LogMemClear>
    LogSetModeById(GlobalSettings.ActiveSettingPtr->LogMode);
    1ba6:	e0 91 0a 29 	lds	r30, 0x290A
    1baa:	f0 91 0b 29 	lds	r31, 0x290B
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	a2 cf       	rjmp	.-188    	; 0x1af6 <LogSetModeById>

00001bb2 <LogSetModeByName>:
    }

}

bool LogSetModeByName(const char* Name)
{
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	ec 01       	movw	r28, r24
    uint8_t i;

    for (i=0; i<(sizeof(LogModeTable) / sizeof(*LogModeTable)); i++) {
        if (strcmp_P(Name, LogModeTable[i]) == 0) {
    1bb8:	66 e8       	ldi	r22, 0x86	; 134
    1bba:	74 e0       	ldi	r23, 0x04	; 4
    1bbc:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    1bc0:	89 2b       	or	r24, r25
    1bc2:	91 f0       	breq	.+36     	; 0x1be8 <LogSetModeByName+0x36>
    1bc4:	66 e9       	ldi	r22, 0x96	; 150
    1bc6:	74 e0       	ldi	r23, 0x04	; 4
    1bc8:	ce 01       	movw	r24, r28
    1bca:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    1bce:	89 2b       	or	r24, r25
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <LogSetModeByName+0x42>
    1bd2:	66 ea       	ldi	r22, 0xA6	; 166
    1bd4:	74 e0       	ldi	r23, 0x04	; 4
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    1bdc:	89 2b       	or	r24, r25
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <LogSetModeByName+0x46>
            LogSetModeById(i);
            return true;
        }
    }

    return false;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
}
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

bool LogSetModeByName(const char* Name)
{
    uint8_t i;

    for (i=0; i<(sizeof(LogModeTable) / sizeof(*LogModeTable)); i++) {
    1be8:	80 e0       	ldi	r24, 0x00	; 0
        if (strcmp_P(Name, LogModeTable[i]) == 0) {
            LogSetModeById(i);
    1bea:	85 df       	rcall	.-246    	; 0x1af6 <LogSetModeById>
            return true;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return false;
}
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	08 95       	ret

bool LogSetModeByName(const char* Name)
{
    uint8_t i;

    for (i=0; i<(sizeof(LogModeTable) / sizeof(*LogModeTable)); i++) {
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	f9 cf       	rjmp	.-14     	; 0x1bea <LogSetModeByName+0x38>
        if (strcmp_P(Name, LogModeTable[i]) == 0) {
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	f7 cf       	rjmp	.-18     	; 0x1bea <LogSetModeByName+0x38>

00001bfc <LogGetModeByName>:

    return false;
}

void LogGetModeByName(char* Name, uint16_t BufferSize)
{
    1bfc:	ab 01       	movw	r20, r22
    strncpy_P(Name, LogModeTable[GlobalSettings.ActiveSettingPtr->LogMode], BufferSize);
    1bfe:	e0 91 0a 29 	lds	r30, 0x290A
    1c02:	f0 91 0b 29 	lds	r31, 0x290B
    1c06:	62 81       	ldd	r22, Z+2	; 0x02
    1c08:	20 e1       	ldi	r18, 0x10	; 16
    1c0a:	62 9f       	mul	r22, r18
    1c0c:	b0 01       	movw	r22, r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	6a 57       	subi	r22, 0x7A	; 122
    1c12:	7b 4f       	sbci	r23, 0xFB	; 251
    1c14:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <strncpy_P>

00001c18 <LogGetModeList>:
}

void LogGetModeList(char* List, uint16_t BufferSize)
{
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	ec 01       	movw	r28, r24
    1c22:	8b 01       	movw	r16, r22
    uint8_t i;

    *List = '\0';
    1c24:	18 82       	st	Y, r1

    for (i=0; i<(sizeof(LogModeTable) / sizeof(*LogModeTable)); i++) {
        strncat_P(List, LogModeTable[i], BufferSize);
    1c26:	ab 01       	movw	r20, r22
    1c28:	66 e8       	ldi	r22, 0x86	; 134
    1c2a:	74 e0       	ldi	r23, 0x04	; 4
    1c2c:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <strncat_P>

        if (i < (sizeof(LogModeTable) / sizeof(*LogModeTable) - 1)) {
            strncat_P(List, PSTR(","), BufferSize);
    1c30:	a8 01       	movw	r20, r16
    1c32:	66 eb       	ldi	r22, 0xB6	; 182
    1c34:	74 e0       	ldi	r23, 0x04	; 4
    1c36:	ce 01       	movw	r24, r28
    1c38:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <strncat_P>
    uint8_t i;

    *List = '\0';

    for (i=0; i<(sizeof(LogModeTable) / sizeof(*LogModeTable)); i++) {
        strncat_P(List, LogModeTable[i], BufferSize);
    1c3c:	a8 01       	movw	r20, r16
    1c3e:	66 e9       	ldi	r22, 0x96	; 150
    1c40:	74 e0       	ldi	r23, 0x04	; 4
    1c42:	ce 01       	movw	r24, r28
    1c44:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <strncat_P>

        if (i < (sizeof(LogModeTable) / sizeof(*LogModeTable) - 1)) {
            strncat_P(List, PSTR(","), BufferSize);
    1c48:	a8 01       	movw	r20, r16
    1c4a:	66 eb       	ldi	r22, 0xB6	; 182
    1c4c:	74 e0       	ldi	r23, 0x04	; 4
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <strncat_P>
    uint8_t i;

    *List = '\0';

    for (i=0; i<(sizeof(LogModeTable) / sizeof(*LogModeTable)); i++) {
        strncat_P(List, LogModeTable[i], BufferSize);
    1c54:	a8 01       	movw	r20, r16
    1c56:	66 ea       	ldi	r22, 0xA6	; 166
    1c58:	74 e0       	ldi	r23, 0x04	; 4
    1c5a:	ce 01       	movw	r24, r28

        if (i < (sizeof(LogModeTable) / sizeof(*LogModeTable) - 1)) {
            strncat_P(List, PSTR(","), BufferSize);
        }
    }
}
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    uint8_t i;

    *List = '\0';

    for (i=0; i<(sizeof(LogModeTable) / sizeof(*LogModeTable)); i++) {
        strncat_P(List, LogModeTable[i], BufferSize);
    1c64:	0c 94 de 2d 	jmp	0x5bbc	; 0x5bbc <strncat_P>

00001c68 <SettingsLoad>:
		.LEDGreenFunction = DEFAULT_GREEN_LED_ACTION
	} }
};

void SettingsLoad(void) {
	eeprom_read_block(&GlobalSettings, &StoredSettings, sizeof(SettingsType));
    1c68:	43 e3       	ldi	r20, 0x33	; 51
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	89 e0       	ldi	r24, 0x09	; 9
    1c72:	99 e2       	ldi	r25, 0x29	; 41
    1c74:	0c 94 00 30 	jmp	0x6000	; 0x6000 <__eerd_block_x32a4u>

00001c78 <SettingsSave>:
}

void SettingsSave(void) {
#if ENABLE_EEPROM_SETTINGS
	eeprom_write_block(&GlobalSettings, &StoredSettings, sizeof(SettingsType));
    1c78:	43 e3       	ldi	r20, 0x33	; 51
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	89 e0       	ldi	r24, 0x09	; 9
    1c82:	99 e2       	ldi	r25, 0x29	; 41
    1c84:	0c 94 0b 30 	jmp	0x6016	; 0x6016 <__eewr_block_x32a4u>

00001c88 <SettingsSetActiveById>:
			break;
		}
	}
}

bool SettingsSetActiveById(uint8_t Setting) {
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	1f 92       	push	r1
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	if ( (Setting >= SETTINGS_FIRST) && (Setting <= SETTINGS_LAST) ) {
    1c94:	18 2f       	mov	r17, r24
    1c96:	11 50       	subi	r17, 0x01	; 1
    1c98:	18 30       	cpi	r17, 0x08	; 8
    1c9a:	30 f0       	brcs	.+12     	; 0x1ca8 <SettingsSetActiveById+0x20>
		/* Notify LED. blink according to current setting */
		LEDTrigger(LED_SETTING_CHANGE, LED_BLINK + SettingIdx);

		return true;
	} else {
		return false;
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1c9e:	0f 90       	pop	r0
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	08 95       	ret

bool SettingsSetActiveById(uint8_t Setting) {
	if ( (Setting >= SETTINGS_FIRST) && (Setting <= SETTINGS_LAST) ) {
		uint8_t SettingIdx = SETTING_TO_INDEX(Setting);
		/* Store current memory contents permanently */
		MemoryStore();
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	b9 d9       	rcall	.-3214   	; 0x101e <MemoryStore>

		GlobalSettings.ActiveSettingIdx = SettingIdx;
    1cac:	10 93 09 29 	sts	0x2909, r17
		GlobalSettings.ActiveSettingPtr =
				&GlobalSettings.Settings[SettingIdx];
    1cb0:	41 2f       	mov	r20, r17
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	9a 01       	movw	r18, r20
    1cb6:	22 0f       	add	r18, r18
    1cb8:	33 1f       	adc	r19, r19
    1cba:	24 0f       	add	r18, r20
    1cbc:	35 1f       	adc	r19, r21
    1cbe:	22 0f       	add	r18, r18
    1cc0:	33 1f       	adc	r19, r19
    1cc2:	24 5f       	subi	r18, 0xF4	; 244
    1cc4:	36 4d       	sbci	r19, 0xD6	; 214
		uint8_t SettingIdx = SETTING_TO_INDEX(Setting);
		/* Store current memory contents permanently */
		MemoryStore();

		GlobalSettings.ActiveSettingIdx = SettingIdx;
		GlobalSettings.ActiveSettingPtr =
    1cc6:	20 93 0a 29 	sts	0x290A, r18
    1cca:	30 93 0b 29 	sts	0x290B, r19
				&GlobalSettings.Settings[SettingIdx];

		/* Settings have changed. Progress changes through system */
		ConfigurationInit();
    1cce:	0e 94 c5 05 	call	0xb8a	; 0xb8a <ConfigurationInit>
		LogInit();
    1cd2:	68 df       	rcall	.-304    	; 0x1ba4 <LogInit>

		/* Recall new memory contents */
		MemoryRecall();
    1cd4:	af d8       	rcall	.-3746   	; 0xe34 <MemoryRecall>

		/* Notify LED. blink according to current setting */
		LEDTrigger(LED_SETTING_CHANGE, LED_BLINK + SettingIdx);
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	68 2f       	mov	r22, r24
    1cda:	61 5e       	subi	r22, 0xE1	; 225
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	3f d1       	rcall	.+638    	; 0x1f5e <LEDTrigger>

		return true;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    1ce2:	0f 90       	pop	r0
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	08 95       	ret

00001cec <SettingsCycle>:
	uint8_t SettingIdx = GlobalSettings.ActiveSettingIdx;

	while (i-- > 0) {
		/* Try to set one of the SETTINGS_COUNT following settings.
		 * But only set if it is not CONFIG_NONE. */
		SettingIdx = (SettingIdx + 1) % SETTINGS_COUNT;
    1cec:	20 91 09 29 	lds	r18, 0x2909
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	2f 5f       	subi	r18, 0xFF	; 255
    1cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf6:	27 70       	andi	r18, 0x07	; 7
    1cf8:	33 27       	eor	r19, r19
    1cfa:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[SettingIdx].Configuration != CONFIG_NONE) {
    1cfc:	2f 5f       	subi	r18, 0xFF	; 255
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	f9 01       	movw	r30, r18
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	e2 0f       	add	r30, r18
    1d08:	f3 1f       	adc	r31, r19
    1d0a:	ee 0f       	add	r30, r30
    1d0c:	ff 1f       	adc	r31, r31
    1d0e:	e7 5f       	subi	r30, 0xF7	; 247
    1d10:	f6 4d       	sbci	r31, 0xD6	; 214
    1d12:	90 81       	ld	r25, Z
    1d14:	91 11       	cpse	r25, r1
    1d16:	78 c0       	rjmp	.+240    	; 0x1e08 <SettingsCycle+0x11c>
	uint8_t SettingIdx = GlobalSettings.ActiveSettingIdx;

	while (i-- > 0) {
		/* Try to set one of the SETTINGS_COUNT following settings.
		 * But only set if it is not CONFIG_NONE. */
		SettingIdx = (SettingIdx + 1) % SETTINGS_COUNT;
    1d18:	27 70       	andi	r18, 0x07	; 7
    1d1a:	33 27       	eor	r19, r19
    1d1c:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[SettingIdx].Configuration != CONFIG_NONE) {
    1d1e:	2f 5f       	subi	r18, 0xFF	; 255
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	f9 01       	movw	r30, r18
    1d24:	ee 0f       	add	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	e2 0f       	add	r30, r18
    1d2a:	f3 1f       	adc	r31, r19
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	e7 5f       	subi	r30, 0xF7	; 247
    1d32:	f6 4d       	sbci	r31, 0xD6	; 214
    1d34:	90 81       	ld	r25, Z
    1d36:	91 11       	cpse	r25, r1
    1d38:	67 c0       	rjmp	.+206    	; 0x1e08 <SettingsCycle+0x11c>
	uint8_t SettingIdx = GlobalSettings.ActiveSettingIdx;

	while (i-- > 0) {
		/* Try to set one of the SETTINGS_COUNT following settings.
		 * But only set if it is not CONFIG_NONE. */
		SettingIdx = (SettingIdx + 1) % SETTINGS_COUNT;
    1d3a:	27 70       	andi	r18, 0x07	; 7
    1d3c:	33 27       	eor	r19, r19
    1d3e:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[SettingIdx].Configuration != CONFIG_NONE) {
    1d40:	2f 5f       	subi	r18, 0xFF	; 255
    1d42:	3f 4f       	sbci	r19, 0xFF	; 255
    1d44:	f9 01       	movw	r30, r18
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	e2 0f       	add	r30, r18
    1d4c:	f3 1f       	adc	r31, r19
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	e7 5f       	subi	r30, 0xF7	; 247
    1d54:	f6 4d       	sbci	r31, 0xD6	; 214
    1d56:	90 81       	ld	r25, Z
    1d58:	91 11       	cpse	r25, r1
    1d5a:	56 c0       	rjmp	.+172    	; 0x1e08 <SettingsCycle+0x11c>
	uint8_t SettingIdx = GlobalSettings.ActiveSettingIdx;

	while (i-- > 0) {
		/* Try to set one of the SETTINGS_COUNT following settings.
		 * But only set if it is not CONFIG_NONE. */
		SettingIdx = (SettingIdx + 1) % SETTINGS_COUNT;
    1d5c:	27 70       	andi	r18, 0x07	; 7
    1d5e:	33 27       	eor	r19, r19
    1d60:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[SettingIdx].Configuration != CONFIG_NONE) {
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	f9 01       	movw	r30, r18
    1d68:	ee 0f       	add	r30, r30
    1d6a:	ff 1f       	adc	r31, r31
    1d6c:	e2 0f       	add	r30, r18
    1d6e:	f3 1f       	adc	r31, r19
    1d70:	ee 0f       	add	r30, r30
    1d72:	ff 1f       	adc	r31, r31
    1d74:	e7 5f       	subi	r30, 0xF7	; 247
    1d76:	f6 4d       	sbci	r31, 0xD6	; 214
    1d78:	90 81       	ld	r25, Z
    1d7a:	91 11       	cpse	r25, r1
    1d7c:	45 c0       	rjmp	.+138    	; 0x1e08 <SettingsCycle+0x11c>
	uint8_t SettingIdx = GlobalSettings.ActiveSettingIdx;

	while (i-- > 0) {
		/* Try to set one of the SETTINGS_COUNT following settings.
		 * But only set if it is not CONFIG_NONE. */
		SettingIdx = (SettingIdx + 1) % SETTINGS_COUNT;
    1d7e:	27 70       	andi	r18, 0x07	; 7
    1d80:	33 27       	eor	r19, r19
    1d82:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[SettingIdx].Configuration != CONFIG_NONE) {
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	f9 01       	movw	r30, r18
    1d8a:	ee 0f       	add	r30, r30
    1d8c:	ff 1f       	adc	r31, r31
    1d8e:	e2 0f       	add	r30, r18
    1d90:	f3 1f       	adc	r31, r19
    1d92:	ee 0f       	add	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	e7 5f       	subi	r30, 0xF7	; 247
    1d98:	f6 4d       	sbci	r31, 0xD6	; 214
    1d9a:	90 81       	ld	r25, Z
    1d9c:	91 11       	cpse	r25, r1
    1d9e:	34 c0       	rjmp	.+104    	; 0x1e08 <SettingsCycle+0x11c>
	uint8_t SettingIdx = GlobalSettings.ActiveSettingIdx;

	while (i-- > 0) {
		/* Try to set one of the SETTINGS_COUNT following settings.
		 * But only set if it is not CONFIG_NONE. */
		SettingIdx = (SettingIdx + 1) % SETTINGS_COUNT;
    1da0:	27 70       	andi	r18, 0x07	; 7
    1da2:	33 27       	eor	r19, r19
    1da4:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[SettingIdx].Configuration != CONFIG_NONE) {
    1da6:	2f 5f       	subi	r18, 0xFF	; 255
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255
    1daa:	f9 01       	movw	r30, r18
    1dac:	ee 0f       	add	r30, r30
    1dae:	ff 1f       	adc	r31, r31
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	ee 0f       	add	r30, r30
    1db6:	ff 1f       	adc	r31, r31
    1db8:	e7 5f       	subi	r30, 0xF7	; 247
    1dba:	f6 4d       	sbci	r31, 0xD6	; 214
    1dbc:	90 81       	ld	r25, Z
    1dbe:	91 11       	cpse	r25, r1
    1dc0:	23 c0       	rjmp	.+70     	; 0x1e08 <SettingsCycle+0x11c>
	uint8_t SettingIdx = GlobalSettings.ActiveSettingIdx;

	while (i-- > 0) {
		/* Try to set one of the SETTINGS_COUNT following settings.
		 * But only set if it is not CONFIG_NONE. */
		SettingIdx = (SettingIdx + 1) % SETTINGS_COUNT;
    1dc2:	27 70       	andi	r18, 0x07	; 7
    1dc4:	33 27       	eor	r19, r19
    1dc6:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[SettingIdx].Configuration != CONFIG_NONE) {
    1dc8:	2f 5f       	subi	r18, 0xFF	; 255
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	f9 01       	movw	r30, r18
    1dce:	ee 0f       	add	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	e2 0f       	add	r30, r18
    1dd4:	f3 1f       	adc	r31, r19
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	e7 5f       	subi	r30, 0xF7	; 247
    1ddc:	f6 4d       	sbci	r31, 0xD6	; 214
    1dde:	90 81       	ld	r25, Z
    1de0:	91 11       	cpse	r25, r1
    1de2:	12 c0       	rjmp	.+36     	; 0x1e08 <SettingsCycle+0x11c>
	uint8_t SettingIdx = GlobalSettings.ActiveSettingIdx;

	while (i-- > 0) {
		/* Try to set one of the SETTINGS_COUNT following settings.
		 * But only set if it is not CONFIG_NONE. */
		SettingIdx = (SettingIdx + 1) % SETTINGS_COUNT;
    1de4:	27 70       	andi	r18, 0x07	; 7
    1de6:	33 27       	eor	r19, r19
    1de8:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[SettingIdx].Configuration != CONFIG_NONE) {
    1dea:	2f 5f       	subi	r18, 0xFF	; 255
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	f9 01       	movw	r30, r18
    1df0:	ee 0f       	add	r30, r30
    1df2:	ff 1f       	adc	r31, r31
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	e7 5f       	subi	r30, 0xF7	; 247
    1dfe:	f6 4d       	sbci	r31, 0xD6	; 214
    1e00:	90 81       	ld	r25, Z
    1e02:	91 11       	cpse	r25, r1
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <SettingsCycle+0x11c>
    1e06:	08 95       	ret
			SettingsSetActiveById(INDEX_TO_SETTING(SettingIdx));
    1e08:	8f 5f       	subi	r24, 0xFF	; 255
    1e0a:	3e cf       	rjmp	.-388    	; 0x1c88 <SettingsSetActiveById>

00001e0c <SettingsGetActiveById>:
		return false;
	}
}

uint8_t SettingsGetActiveById(void) {
	return INDEX_TO_SETTING(GlobalSettings.ActiveSettingIdx);
    1e0c:	80 91 09 29 	lds	r24, 0x2909
}
    1e10:	8f 5f       	subi	r24, 0xFF	; 255
    1e12:	08 95       	ret

00001e14 <SettingsGetActiveByName>:

void SettingsGetActiveByName(char* SettingOut, uint16_t BufferSize) {
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	ec 01       	movw	r28, r24
	SettingOut[0] = SettingsGetActiveById() + '0';
    1e1a:	f8 df       	rcall	.-16     	; 0x1e0c <SettingsGetActiveById>
    1e1c:	80 5d       	subi	r24, 0xD0	; 208
    1e1e:	88 83       	st	Y, r24
	SettingOut[1] = '\0';
    1e20:	19 82       	std	Y+1, r1	; 0x01
}
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <SettingsSetActiveByName>:

bool SettingsSetActiveByName(const char* Setting) {
    1e28:	fc 01       	movw	r30, r24
	uint8_t SettingNr = Setting[0] - '0';
    1e2a:	80 81       	ld	r24, Z

	if (Setting[1] == '\0') {
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	99 23       	and	r25, r25
    1e30:	11 f0       	breq	.+4      	; 0x1e36 <SettingsSetActiveByName+0xe>
		return SettingsSetActiveById(SettingNr);
	} else {
		return false;
	}
}
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	08 95       	ret

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';

	if (Setting[1] == '\0') {
		return SettingsSetActiveById(SettingNr);
    1e36:	80 53       	subi	r24, 0x30	; 48
    1e38:	27 cf       	rjmp	.-434    	; 0x1c88 <SettingsSetActiveById>

00001e3a <LEDInit>:
	}
}

void LEDInit(void)
{
	LED_PORT.DIRSET = LED_MASK;
    1e3a:	80 e3       	ldi	r24, 0x30	; 48
    1e3c:	e0 e0       	ldi	r30, 0x00	; 0
    1e3e:	f6 e0       	ldi	r31, 0x06	; 6
    1e40:	81 83       	std	Z+1, r24	; 0x01
    1e42:	08 95       	ret

00001e44 <LEDTick>:

INLINE void Tick(uint8_t Mask, LEDActionEnum* Action)
{
	static uint8_t BlinkPrescaler = 0;

	switch (*Action)
    1e44:	80 91 97 28 	lds	r24, 0x2897
    1e48:	82 31       	cpi	r24, 0x12	; 18
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <LEDTick+0xa>
    1e4c:	60 c0       	rjmp	.+192    	; 0x1f0e <LEDTick+0xca>
    1e4e:	c8 f0       	brcs	.+50     	; 0x1e82 <LEDTick+0x3e>
    1e50:	83 31       	cpi	r24, 0x13	; 19
    1e52:	01 f1       	breq	.+64     	; 0x1e94 <LEDTick+0x50>
    1e54:	98 2f       	mov	r25, r24
    1e56:	90 52       	subi	r25, 0x20	; 32
    1e58:	98 30       	cpi	r25, 0x08	; 8
    1e5a:	08 f0       	brcs	.+2      	; 0x1e5e <LEDTick+0x1a>
    1e5c:	4d c0       	rjmp	.+154    	; 0x1ef8 <LEDTick+0xb4>
				*Action = LED_NO_ACTION;
			}
			break;

		case LED_BLINK_1X ... LED_BLINK_8X:
			if (++BlinkPrescaler == BLINK_PRESCALER) {
    1e5e:	90 91 99 28 	lds	r25, 0x2899
    1e62:	9f 5f       	subi	r25, 0xFF	; 255
    1e64:	91 30       	cpi	r25, 0x01	; 1
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <LEDTick+0x26>
    1e68:	6b c0       	rjmp	.+214    	; 0x1f40 <LEDTick+0xfc>
    1e6a:	90 93 99 28 	sts	0x2899, r25

INLINE void Tick(uint8_t Mask, LEDActionEnum* Action)
{
	static uint8_t BlinkPrescaler = 0;

	switch (*Action)
    1e6e:	80 91 98 28 	lds	r24, 0x2898
    1e72:	82 31       	cpi	r24, 0x12	; 18
    1e74:	e1 f4       	brne	.+56     	; 0x1eae <LEDTick+0x6a>
			LED_PORT.OUTSET = Mask;
			*Action = LED_NO_ACTION;
			break;

		case LED_TOGGLE:
			LED_PORT.OUTTGL = Mask;
    1e76:	80 e2       	ldi	r24, 0x20	; 32
    1e78:	80 93 07 06 	sts	0x0607, r24
			*Action = LED_NO_ACTION;
    1e7c:	10 92 98 28 	sts	0x2898, r1
    1e80:	08 95       	ret

INLINE void Tick(uint8_t Mask, LEDActionEnum* Action)
{
	static uint8_t BlinkPrescaler = 0;

	switch (*Action)
    1e82:	80 31       	cpi	r24, 0x10	; 16
    1e84:	61 f0       	breq	.+24     	; 0x1e9e <LEDTick+0x5a>
    1e86:	b0 f1       	brcs	.+108    	; 0x1ef4 <LEDTick+0xb0>
			LED_PORT.OUTCLR = Mask;
			*Action = LED_NO_ACTION;
			break;

		case LED_ON:
			LED_PORT.OUTSET = Mask;
    1e88:	80 e1       	ldi	r24, 0x10	; 16
    1e8a:	80 93 05 06 	sts	0x0605, r24
			*Action = LED_NO_ACTION;
    1e8e:	10 92 97 28 	sts	0x2897, r1
    1e92:	09 c0       	rjmp	.+18     	; 0x1ea6 <LEDTick+0x62>
			LED_PORT.OUTTGL = Mask;
			*Action = LED_NO_ACTION;
			break;

		case LED_PULSE:
			if (!(LED_PORT.OUT & Mask)) {
    1e94:	80 91 04 06 	lds	r24, 0x0604
    1e98:	84 ff       	sbrs	r24, 4
    1e9a:	3f c0       	rjmp	.+126    	; 0x1f1a <LEDTick+0xd6>
				LED_PORT.OUTSET = Mask;
			} else {
				LED_PORT.OUTCLR = Mask;
    1e9c:	80 e1       	ldi	r24, 0x10	; 16
    1e9e:	80 93 06 06 	sts	0x0606, r24
				*Action = LED_NO_ACTION;
    1ea2:	10 92 97 28 	sts	0x2897, r1

INLINE void Tick(uint8_t Mask, LEDActionEnum* Action)
{
	static uint8_t BlinkPrescaler = 0;

	switch (*Action)
    1ea6:	80 91 98 28 	lds	r24, 0x2898
    1eaa:	82 31       	cpi	r24, 0x12	; 18
    1eac:	21 f3       	breq	.-56     	; 0x1e76 <LEDTick+0x32>
    1eae:	83 31       	cpi	r24, 0x13	; 19
    1eb0:	48 f4       	brcc	.+18     	; 0x1ec4 <LEDTick+0x80>
    1eb2:	80 31       	cpi	r24, 0x10	; 16
    1eb4:	a9 f0       	breq	.+42     	; 0x1ee0 <LEDTick+0x9c>
    1eb6:	d0 f0       	brcs	.+52     	; 0x1eec <LEDTick+0xa8>
			LED_PORT.OUTCLR = Mask;
			*Action = LED_NO_ACTION;
			break;

		case LED_ON:
			LED_PORT.OUTSET = Mask;
    1eb8:	80 e2       	ldi	r24, 0x20	; 32
    1eba:	80 93 05 06 	sts	0x0605, r24
			*Action = LED_NO_ACTION;
    1ebe:	10 92 98 28 	sts	0x2898, r1
    1ec2:	08 95       	ret

INLINE void Tick(uint8_t Mask, LEDActionEnum* Action)
{
	static uint8_t BlinkPrescaler = 0;

	switch (*Action)
    1ec4:	83 31       	cpi	r24, 0x13	; 19
    1ec6:	d9 f0       	breq	.+54     	; 0x1efe <LEDTick+0xba>
    1ec8:	98 2f       	mov	r25, r24
    1eca:	90 52       	subi	r25, 0x20	; 32
    1ecc:	98 30       	cpi	r25, 0x08	; 8
    1ece:	78 f4       	brcc	.+30     	; 0x1eee <LEDTick+0xaa>
				*Action = LED_NO_ACTION;
			}
			break;

		case LED_BLINK_1X ... LED_BLINK_8X:
			if (++BlinkPrescaler == BLINK_PRESCALER) {
    1ed0:	90 91 99 28 	lds	r25, 0x2899
    1ed4:	9f 5f       	subi	r25, 0xFF	; 255
    1ed6:	91 30       	cpi	r25, 0x01	; 1
    1ed8:	21 f1       	breq	.+72     	; 0x1f22 <LEDTick+0xde>
    1eda:	90 93 99 28 	sts	0x2899, r25
    1ede:	08 95       	ret

		case LED_PULSE:
			if (!(LED_PORT.OUT & Mask)) {
				LED_PORT.OUTSET = Mask;
			} else {
				LED_PORT.OUTCLR = Mask;
    1ee0:	80 e2       	ldi	r24, 0x20	; 32
    1ee2:	80 93 06 06 	sts	0x0606, r24
				*Action = LED_NO_ACTION;
    1ee6:	10 92 98 28 	sts	0x2898, r1
    1eea:	08 95       	ret

INLINE void Tick(uint8_t Mask, LEDActionEnum* Action)
{
	static uint8_t BlinkPrescaler = 0;

	switch (*Action)
    1eec:	81 11       	cpse	r24, r1
			}
			break;

		default:
			/* Should not happen (TM) */
			*Action = LED_NO_ACTION;
    1eee:	10 92 98 28 	sts	0x2898, r1
    1ef2:	08 95       	ret

INLINE void Tick(uint8_t Mask, LEDActionEnum* Action)
{
	static uint8_t BlinkPrescaler = 0;

	switch (*Action)
    1ef4:	88 23       	and	r24, r24
    1ef6:	b9 f2       	breq	.-82     	; 0x1ea6 <LEDTick+0x62>
			}
			break;

		default:
			/* Should not happen (TM) */
			*Action = LED_NO_ACTION;
    1ef8:	10 92 97 28 	sts	0x2897, r1
    1efc:	d4 cf       	rjmp	.-88     	; 0x1ea6 <LEDTick+0x62>
			LED_PORT.OUTTGL = Mask;
			*Action = LED_NO_ACTION;
			break;

		case LED_PULSE:
			if (!(LED_PORT.OUT & Mask)) {
    1efe:	80 91 04 06 	lds	r24, 0x0604
    1f02:	85 fd       	sbrc	r24, 5
    1f04:	ed cf       	rjmp	.-38     	; 0x1ee0 <LEDTick+0x9c>
				BlinkPrescaler = 0;
				/* Blink functionality occurs at slower speed than Tick-frequency */

				if (!(LED_PORT.OUT & Mask)) {
					/* LED is off, turn it on */
					LED_PORT.OUTSET = Mask;
    1f06:	80 e2       	ldi	r24, 0x20	; 32
    1f08:	80 93 05 06 	sts	0x0605, r24
    1f0c:	08 95       	ret
			LED_PORT.OUTSET = Mask;
			*Action = LED_NO_ACTION;
			break;

		case LED_TOGGLE:
			LED_PORT.OUTTGL = Mask;
    1f0e:	80 e1       	ldi	r24, 0x10	; 16
    1f10:	80 93 07 06 	sts	0x0607, r24
			*Action = LED_NO_ACTION;
    1f14:	10 92 97 28 	sts	0x2897, r1
    1f18:	c6 cf       	rjmp	.-116    	; 0x1ea6 <LEDTick+0x62>
				BlinkPrescaler = 0;
				/* Blink functionality occurs at slower speed than Tick-frequency */

				if (!(LED_PORT.OUT & Mask)) {
					/* LED is off, turn it on */
					LED_PORT.OUTSET = Mask;
    1f1a:	80 e1       	ldi	r24, 0x10	; 16
    1f1c:	80 93 05 06 	sts	0x0605, r24
    1f20:	c2 cf       	rjmp	.-124    	; 0x1ea6 <LEDTick+0x62>
			}
			break;

		case LED_BLINK_1X ... LED_BLINK_8X:
			if (++BlinkPrescaler == BLINK_PRESCALER) {
				BlinkPrescaler = 0;
    1f22:	10 92 99 28 	sts	0x2899, r1
				/* Blink functionality occurs at slower speed than Tick-frequency */

				if (!(LED_PORT.OUT & Mask)) {
    1f26:	90 91 04 06 	lds	r25, 0x0604
    1f2a:	95 ff       	sbrs	r25, 5
    1f2c:	ec cf       	rjmp	.-40     	; 0x1f06 <LEDTick+0xc2>
					/* LED is off, turn it on */
					LED_PORT.OUTSET = Mask;
				} else {
					/* LED is on, turn it off and change state */
					LED_PORT.OUTCLR = Mask;
    1f2e:	90 e2       	ldi	r25, 0x20	; 32
    1f30:	90 93 06 06 	sts	0x0606, r25

					if (*Action == LED_BLINK_1X) {
    1f34:	80 32       	cpi	r24, 0x20	; 32
    1f36:	d9 f2       	breq	.-74     	; 0x1eee <LEDTick+0xaa>
						*Action = LED_NO_ACTION;
					} else {
						/* Still some blinks to do. Use the fact that LED_BLINK_XY are ordered sequentially */
						*Action = *Action - 1;
    1f38:	81 50       	subi	r24, 0x01	; 1
    1f3a:	80 93 98 28 	sts	0x2898, r24
    1f3e:	08 95       	ret
			}
			break;

		case LED_BLINK_1X ... LED_BLINK_8X:
			if (++BlinkPrescaler == BLINK_PRESCALER) {
				BlinkPrescaler = 0;
    1f40:	10 92 99 28 	sts	0x2899, r1
				/* Blink functionality occurs at slower speed than Tick-frequency */

				if (!(LED_PORT.OUT & Mask)) {
    1f44:	90 91 04 06 	lds	r25, 0x0604
    1f48:	94 ff       	sbrs	r25, 4
    1f4a:	e7 cf       	rjmp	.-50     	; 0x1f1a <LEDTick+0xd6>
					/* LED is off, turn it on */
					LED_PORT.OUTSET = Mask;
				} else {
					/* LED is on, turn it off and change state */
					LED_PORT.OUTCLR = Mask;
    1f4c:	90 e1       	ldi	r25, 0x10	; 16
    1f4e:	90 93 06 06 	sts	0x0606, r25

					if (*Action == LED_BLINK_1X) {
    1f52:	80 32       	cpi	r24, 0x20	; 32
    1f54:	89 f2       	breq	.-94     	; 0x1ef8 <LEDTick+0xb4>
						*Action = LED_NO_ACTION;
					} else {
						/* Still some blinks to do. Use the fact that LED_BLINK_XY are ordered sequentially */
						*Action = *Action - 1;
    1f56:	81 50       	subi	r24, 0x01	; 1
    1f58:	80 93 97 28 	sts	0x2897, r24
    1f5c:	a4 cf       	rjmp	.-184    	; 0x1ea6 <LEDTick+0x62>

00001f5e <LEDTrigger>:
	Tick(LED_GREEN, &LEDGreenAction);
}

/* TODO: This would be nicer as INLINE */
void LEDTrigger(LEDFunctionEnum Func, LEDActionEnum Action) {
	if (GlobalSettings.ActiveSettingPtr->LEDGreenFunction == Func) {
    1f5e:	e0 91 0a 29 	lds	r30, 0x290A
    1f62:	f0 91 0b 29 	lds	r31, 0x290B
    1f66:	95 81       	ldd	r25, Z+5	; 0x05
    1f68:	98 17       	cp	r25, r24
    1f6a:	31 f0       	breq	.+12     	; 0x1f78 <LEDTrigger+0x1a>
		LEDGreenAction = Action;
	}

	if (GlobalSettings.ActiveSettingPtr->LEDRedFunction == Func) {
    1f6c:	94 81       	ldd	r25, Z+4	; 0x04
    1f6e:	98 13       	cpse	r25, r24
    1f70:	08 95       	ret
		LEDRedAction = Action;
    1f72:	60 93 97 28 	sts	0x2897, r22
    1f76:	08 95       	ret
}

/* TODO: This would be nicer as INLINE */
void LEDTrigger(LEDFunctionEnum Func, LEDActionEnum Action) {
	if (GlobalSettings.ActiveSettingPtr->LEDGreenFunction == Func) {
		LEDGreenAction = Action;
    1f78:	60 93 98 28 	sts	0x2898, r22
    1f7c:	f7 cf       	rjmp	.-18     	; 0x1f6c <LEDTrigger+0xe>

00001f7e <LEDGetFuncList>:
		LEDRedAction = Action;
	}
}

void LEDGetFuncList(char* ListOut, uint16_t BufferSize)
{
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	ec 01       	movw	r28, r24
    uint8_t i;

    /* Account for '\0' */
    BufferSize--;
    1f84:	61 50       	subi	r22, 0x01	; 1
    1f86:	71 09       	sbc	r23, r1
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
            BufferSize--;
        }

        if ( i < (LED_FUNC_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    1f8c:	3c e2       	ldi	r19, 0x2C	; 44

    /* Account for '\0' */
    BufferSize--;

    for (i=0; i<LED_FUNC_COUNT; i++) {
        const char* FuncName = LEDFuncTable[i];
    1f8e:	fc 01       	movw	r30, r24
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	e2 95       	swap	r30
    1f96:	f2 95       	swap	r31
    1f98:	f0 7f       	andi	r31, 0xF0	; 240
    1f9a:	fe 27       	eor	r31, r30
    1f9c:	e0 7f       	andi	r30, 0xF0	; 240
    1f9e:	fe 27       	eor	r31, r30
    1fa0:	e8 54       	subi	r30, 0x48	; 72
    1fa2:	fb 4f       	sbci	r31, 0xFB	; 251
        char c;

        while( (c = pgm_read_byte(FuncName)) != '\0' && BufferSize > sizeof(LEDFuncTable[i]) ) {
    1fa4:	24 91       	lpm	r18, Z
    1fa6:	22 23       	and	r18, r18
    1fa8:	81 f0       	breq	.+32     	; 0x1fca <LEDGetFuncList+0x4c>
    1faa:	61 32       	cpi	r22, 0x21	; 33
    1fac:	71 05       	cpc	r23, r1
    1fae:	68 f0       	brcs	.+26     	; 0x1fca <LEDGetFuncList+0x4c>
    1fb0:	de 01       	movw	r26, r28
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <LEDGetFuncList+0x3c>
    1fb4:	60 32       	cpi	r22, 0x20	; 32
    1fb6:	71 05       	cpc	r23, r1
    1fb8:	41 f0       	breq	.+16     	; 0x1fca <LEDGetFuncList+0x4c>
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ListOut++ = c;
    1fba:	2d 93       	st	X+, r18
    1fbc:	ed 01       	movw	r28, r26
            FuncName++;
    1fbe:	31 96       	adiw	r30, 0x01	; 1
            BufferSize--;
    1fc0:	61 50       	subi	r22, 0x01	; 1
    1fc2:	71 09       	sbc	r23, r1

    for (i=0; i<LED_FUNC_COUNT; i++) {
        const char* FuncName = LEDFuncTable[i];
        char c;

        while( (c = pgm_read_byte(FuncName)) != '\0' && BufferSize > sizeof(LEDFuncTable[i]) ) {
    1fc4:	24 91       	lpm	r18, Z
    1fc6:	21 11       	cpse	r18, r1
    1fc8:	f5 cf       	rjmp	.-22     	; 0x1fb4 <LEDGetFuncList+0x36>
            *ListOut++ = c;
            FuncName++;
            BufferSize--;
        }

        if ( i < (LED_FUNC_COUNT - 1) ) {
    1fca:	87 30       	cpi	r24, 0x07	; 7
    1fcc:	91 05       	cpc	r25, r1
    1fce:	21 f4       	brne	.+8      	; 0x1fd8 <LEDGetFuncList+0x5a>
            *ListOut++ = ',';
            BufferSize--;
        }
    }

    *ListOut = '\0';
    1fd0:	18 82       	st	Y, r1
}
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	08 95       	ret
            BufferSize--;
        }

        if ( i < (LED_FUNC_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    1fd8:	39 93       	st	Y+, r19
            BufferSize--;
    1fda:	61 50       	subi	r22, 0x01	; 1
    1fdc:	71 09       	sbc	r23, r1
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	d6 cf       	rjmp	.-84     	; 0x1f8e <LEDGetFuncList+0x10>

00001fe2 <LEDSetFuncById>:

    *ListOut = '\0';
}

void LEDSetFuncById(uint8_t Mask, LEDFunctionEnum Func)
{
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	90 71       	andi	r25, 0x10	; 16
    1fe6:	85 fd       	sbrc	r24, 5
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <LEDSetFuncById+0xe>
    1fea:	91 11       	cpse	r25, r1
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <LEDSetFuncById+0x8a>
    1fee:	08 95       	ret
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    1ff0:	60 93 11 29 	sts	0x2911, r22
    1ff4:	99 23       	and	r25, r25
    1ff6:	59 f1       	breq	.+86     	; 0x204e <LEDSetFuncById+0x6c>
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    1ff8:	60 93 10 29 	sts	0x2910, r22
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    1ffc:	60 93 17 29 	sts	0x2917, r22
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    2000:	60 93 16 29 	sts	0x2916, r22
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    2004:	60 93 1d 29 	sts	0x291D, r22
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    2008:	60 93 1c 29 	sts	0x291C, r22
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    200c:	60 93 23 29 	sts	0x2923, r22
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    2010:	60 93 22 29 	sts	0x2922, r22
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    2014:	60 93 29 29 	sts	0x2929, r22
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    2018:	60 93 28 29 	sts	0x2928, r22
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    201c:	60 93 2f 29 	sts	0x292F, r22
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    2020:	60 93 2e 29 	sts	0x292E, r22
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    2024:	60 93 35 29 	sts	0x2935, r22
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    2028:	60 93 34 29 	sts	0x2934, r22
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    202c:	60 93 3b 29 	sts	0x293B, r22
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    2030:	60 93 3a 29 	sts	0x293A, r22
	}
#endif

	/* Clear modified LED and remove any pending actions */
	if (Mask & LED_GREEN) {
		LED_PORT.OUTCLR = LED_GREEN;
    2034:	80 e2       	ldi	r24, 0x20	; 32
    2036:	80 93 06 06 	sts	0x0606, r24
		LEDGreenAction = LED_NO_ACTION;
    203a:	10 92 98 28 	sts	0x2898, r1
	}

	if (Mask & LED_RED) {
    203e:	99 23       	and	r25, r25
    2040:	b1 f2       	breq	.-84     	; 0x1fee <LEDSetFuncById+0xc>
		LED_PORT.OUTCLR = LED_RED;
    2042:	80 e1       	ldi	r24, 0x10	; 16
    2044:	80 93 06 06 	sts	0x0606, r24
		LEDRedAction = LED_NO_ACTION;
    2048:	10 92 97 28 	sts	0x2897, r1
    204c:	08 95       	ret
	}
#else
	/* Write LED func to all settings when using global settings */
	for (uint8_t i=0; i<SETTINGS_COUNT; i++) {
		if (Mask & LED_GREEN) {
			GlobalSettings.Settings[i].LEDGreenFunction = Func;
    204e:	60 93 17 29 	sts	0x2917, r22
    2052:	60 93 1d 29 	sts	0x291D, r22
    2056:	60 93 23 29 	sts	0x2923, r22
    205a:	60 93 29 29 	sts	0x2929, r22
    205e:	60 93 2f 29 	sts	0x292F, r22
    2062:	60 93 35 29 	sts	0x2935, r22
    2066:	60 93 3b 29 	sts	0x293B, r22
    206a:	e4 cf       	rjmp	.-56     	; 0x2034 <LEDSetFuncById+0x52>
		}

		if (Mask & LED_RED) {
			GlobalSettings.Settings[i].LEDRedFunction = Func;
    206c:	60 93 10 29 	sts	0x2910, r22
    2070:	60 93 16 29 	sts	0x2916, r22
    2074:	60 93 1c 29 	sts	0x291C, r22
    2078:	60 93 22 29 	sts	0x2922, r22
    207c:	60 93 28 29 	sts	0x2928, r22
    2080:	60 93 2e 29 	sts	0x292E, r22
    2084:	60 93 34 29 	sts	0x2934, r22
    2088:	60 93 3a 29 	sts	0x293A, r22
    208c:	d8 cf       	rjmp	.-80     	; 0x203e <LEDSetFuncById+0x5c>

0000208e <LEDGetFuncByName>:
	}

}

void LEDGetFuncByName(uint8_t Mask, char* FuncOut, uint16_t BufferSize)
{
    208e:	fb 01       	movw	r30, r22
	if (Mask == LED_GREEN) {
    2090:	80 32       	cpi	r24, 0x20	; 32
    2092:	21 f0       	breq	.+8      	; 0x209c <LEDGetFuncByName+0xe>
		strncpy_P(FuncOut, LEDFuncTable[GlobalSettings.ActiveSettingPtr->LEDGreenFunction], BufferSize);
	} else if (Mask == LED_RED) {
    2094:	80 31       	cpi	r24, 0x10	; 16
    2096:	89 f0       	breq	.+34     	; 0x20ba <LEDGetFuncByName+0x2c>
		strncpy_P(FuncOut, LEDFuncTable[GlobalSettings.ActiveSettingPtr->LEDRedFunction], BufferSize);
	} else {
		*FuncOut = '\0';
    2098:	10 82       	st	Z, r1
    209a:	08 95       	ret
}

void LEDGetFuncByName(uint8_t Mask, char* FuncOut, uint16_t BufferSize)
{
	if (Mask == LED_GREEN) {
		strncpy_P(FuncOut, LEDFuncTable[GlobalSettings.ActiveSettingPtr->LEDGreenFunction], BufferSize);
    209c:	a0 91 0a 29 	lds	r26, 0x290A
    20a0:	b0 91 0b 29 	lds	r27, 0x290B
    20a4:	15 96       	adiw	r26, 0x05	; 5
    20a6:	6c 91       	ld	r22, X
	} else if (Mask == LED_RED) {
		strncpy_P(FuncOut, LEDFuncTable[GlobalSettings.ActiveSettingPtr->LEDRedFunction], BufferSize);
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	68 9f       	mul	r22, r24
    20ac:	b0 01       	movw	r22, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	68 54       	subi	r22, 0x48	; 72
    20b2:	7b 4f       	sbci	r23, 0xFB	; 251
    20b4:	cf 01       	movw	r24, r30
    20b6:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <strncpy_P>
    20ba:	a0 91 0a 29 	lds	r26, 0x290A
    20be:	b0 91 0b 29 	lds	r27, 0x290B
    20c2:	14 96       	adiw	r26, 0x04	; 4
    20c4:	6c 91       	ld	r22, X
    20c6:	f0 cf       	rjmp	.-32     	; 0x20a8 <LEDGetFuncByName+0x1a>

000020c8 <LEDSetFuncByName>:
		*FuncOut = '\0';
	}
}

bool LEDSetFuncByName(uint8_t Mask, const char* FuncName)
{
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	18 2f       	mov	r17, r24
    20d0:	eb 01       	movw	r28, r22
    uint8_t i;

    for (i=0; i<LED_FUNC_COUNT; i++) {
        if (strcmp_P(FuncName, LEDFuncTable[i]) == 0) {
    20d2:	68 eb       	ldi	r22, 0xB8	; 184
    20d4:	74 e0       	ldi	r23, 0x04	; 4
    20d6:	ce 01       	movw	r24, r28
    20d8:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    20dc:	89 2b       	or	r24, r25
    20de:	b1 f1       	breq	.+108    	; 0x214c <LEDSetFuncByName+0x84>
    20e0:	68 ed       	ldi	r22, 0xD8	; 216
    20e2:	74 e0       	ldi	r23, 0x04	; 4
    20e4:	ce 01       	movw	r24, r28
    20e6:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    20ea:	89 2b       	or	r24, r25
    20ec:	b9 f1       	breq	.+110    	; 0x215c <LEDSetFuncByName+0x94>
    20ee:	68 ef       	ldi	r22, 0xF8	; 248
    20f0:	74 e0       	ldi	r23, 0x04	; 4
    20f2:	ce 01       	movw	r24, r28
    20f4:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    20f8:	89 2b       	or	r24, r25
    20fa:	91 f1       	breq	.+100    	; 0x2160 <LEDSetFuncByName+0x98>
    20fc:	68 e1       	ldi	r22, 0x18	; 24
    20fe:	75 e0       	ldi	r23, 0x05	; 5
    2100:	ce 01       	movw	r24, r28
    2102:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    2106:	89 2b       	or	r24, r25
    2108:	69 f1       	breq	.+90     	; 0x2164 <LEDSetFuncByName+0x9c>
    210a:	68 e3       	ldi	r22, 0x38	; 56
    210c:	75 e0       	ldi	r23, 0x05	; 5
    210e:	ce 01       	movw	r24, r28
    2110:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    2114:	89 2b       	or	r24, r25
    2116:	41 f1       	breq	.+80     	; 0x2168 <LEDSetFuncByName+0xa0>
    2118:	68 e5       	ldi	r22, 0x58	; 88
    211a:	75 e0       	ldi	r23, 0x05	; 5
    211c:	ce 01       	movw	r24, r28
    211e:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    2122:	89 2b       	or	r24, r25
    2124:	19 f1       	breq	.+70     	; 0x216c <LEDSetFuncByName+0xa4>
    2126:	68 e7       	ldi	r22, 0x78	; 120
    2128:	75 e0       	ldi	r23, 0x05	; 5
    212a:	ce 01       	movw	r24, r28
    212c:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    2130:	89 2b       	or	r24, r25
    2132:	f1 f0       	breq	.+60     	; 0x2170 <LEDSetFuncByName+0xa8>
    2134:	68 e9       	ldi	r22, 0x98	; 152
    2136:	75 e0       	ldi	r23, 0x05	; 5
    2138:	ce 01       	movw	r24, r28
    213a:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    213e:	89 2b       	or	r24, r25
    2140:	c9 f0       	breq	.+50     	; 0x2174 <LEDSetFuncByName+0xac>
            return true;
        }
    }

    /* LED Func not found */
    return false;
    2142:	80 e0       	ldi	r24, 0x00	; 0
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	08 95       	ret

bool LEDSetFuncByName(uint8_t Mask, const char* FuncName)
{
    uint8_t i;

    for (i=0; i<LED_FUNC_COUNT; i++) {
    214c:	60 e0       	ldi	r22, 0x00	; 0
        if (strcmp_P(FuncName, LEDFuncTable[i]) == 0) {
            LEDSetFuncById(Mask, i);
    214e:	81 2f       	mov	r24, r17
    2150:	48 df       	rcall	.-368    	; 0x1fe2 <LEDSetFuncById>
            return true;
    2152:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    /* LED Func not found */
    return false;
}
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	08 95       	ret

bool LEDSetFuncByName(uint8_t Mask, const char* FuncName)
{
    uint8_t i;

    for (i=0; i<LED_FUNC_COUNT; i++) {
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	f7 cf       	rjmp	.-18     	; 0x214e <LEDSetFuncByName+0x86>
    2160:	62 e0       	ldi	r22, 0x02	; 2
    2162:	f5 cf       	rjmp	.-22     	; 0x214e <LEDSetFuncByName+0x86>
    2164:	63 e0       	ldi	r22, 0x03	; 3
    2166:	f3 cf       	rjmp	.-26     	; 0x214e <LEDSetFuncByName+0x86>
    2168:	64 e0       	ldi	r22, 0x04	; 4
    216a:	f1 cf       	rjmp	.-30     	; 0x214e <LEDSetFuncByName+0x86>
    216c:	65 e0       	ldi	r22, 0x05	; 5
    216e:	ef cf       	rjmp	.-34     	; 0x214e <LEDSetFuncByName+0x86>
    2170:	66 e0       	ldi	r22, 0x06	; 6
    2172:	ed cf       	rjmp	.-38     	; 0x214e <LEDSetFuncByName+0x86>
        if (strcmp_P(FuncName, LEDFuncTable[i]) == 0) {
    2174:	67 e0       	ldi	r22, 0x07	; 7
    2176:	eb cf       	rjmp	.-42     	; 0x214e <LEDSetFuncByName+0x86>

00002178 <TerminalSendString>:
uint8_t TerminalBuffer[TERMINAL_BUFFER_SIZE];
TerminalStateEnum TerminalState = TERMINAL_UNINITIALIZED;
static uint8_t TerminalInitDelay = INIT_DELAY;

void TerminalSendString(const char* s) {
    CDC_Device_SendString(&TerminalHandle, s);
    2178:	bc 01       	movw	r22, r24
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e2       	ldi	r25, 0x20	; 32
    217e:	0c 94 6c 2b 	jmp	0x56d8	; 0x56d8 <CDC_Device_SendString>

00002182 <TerminalSendStringP>:
}

void TerminalSendStringP(const char* s) {
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    char c;

    while( (c = pgm_read_byte(s++)) != '\0' ) {
    2186:	ec 01       	movw	r28, r24
    2188:	21 96       	adiw	r28, 0x01	; 1
    218a:	fc 01       	movw	r30, r24
    218c:	64 91       	lpm	r22, Z
    218e:	66 23       	and	r22, r22
    2190:	49 f0       	breq	.+18     	; 0x21a4 <TerminalSendStringP+0x22>
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e2       	ldi	r25, 0x20	; 32
    2196:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
    219a:	fe 01       	movw	r30, r28
    219c:	21 96       	adiw	r28, 0x01	; 1
    219e:	64 91       	lpm	r22, Z
    21a0:	61 11       	cpse	r22, r1
    21a2:	f7 cf       	rjmp	.-18     	; 0x2192 <TerminalSendStringP+0x10>
        TerminalSendChar(c);
    }
}
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret

000021aa <TerminalSendBlock>:
#endif



void TerminalSendBlock(void* Buffer, uint16_t ByteCount)
{
    21aa:	ab 01       	movw	r20, r22
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
    21ac:	bc 01       	movw	r22, r24
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e2       	ldi	r25, 0x20	; 32
    21b2:	0c 94 95 2b 	jmp	0x572a	; 0x572a <CDC_Device_SendData>

000021b6 <TerminalInit>:
    }
}

void TerminalInit(void)
{
    TERMINAL_VBUS_PORT.DIRCLR = TERMINAL_VBUS_MASK;
    21b6:	80 e2       	ldi	r24, 0x20	; 32
    21b8:	e0 e6       	ldi	r30, 0x60	; 96
    21ba:	f6 e0       	ldi	r31, 0x06	; 6
    21bc:	82 83       	std	Z+2, r24	; 0x02
    21be:	08 95       	ret

000021c0 <TerminalTask>:
}

void TerminalTask(void)
{
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
	if (TerminalState == TERMINAL_INITIALIZED) {
    21c4:	80 91 9a 28 	lds	r24, 0x289A
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	19 f0       	breq	.+6      	; 0x21d2 <TerminalTask+0x12>
		CDC_Device_USBTask(&TerminalHandle);
		USB_USBTask();

		ProcessByte();
	}
}
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	08 95       	ret
}

void TerminalTask(void)
{
	if (TerminalState == TERMINAL_INITIALIZED) {
		CDC_Device_USBTask(&TerminalHandle);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e2       	ldi	r25, 0x20	; 32
    21d6:	0e 94 3e 2c 	call	0x587c	; 0x587c <CDC_Device_USBTask>
		USB_USBTask();
    21da:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <USB_USBTask>
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
}


static void ProcessByte(void) {
    int16_t Byte = CDC_Device_ReceiveByte(&TerminalHandle);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e2       	ldi	r25, 0x20	; 32
    21e2:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <CDC_Device_ReceiveByte>
    21e6:	ec 01       	movw	r28, r24

    if (Byte >= 0) {
    21e8:	97 fd       	sbrc	r25, 7
    21ea:	f0 cf       	rjmp	.-32     	; 0x21cc <TerminalTask+0xc>
        /* Byte received */
    	LEDTrigger(LED_TERMINAL_RXTX, LED_PULSE);
    21ec:	63 e1       	ldi	r22, 0x13	; 19
    21ee:	82 e0       	ldi	r24, 0x02	; 2
    21f0:	b6 de       	rcall	.-660    	; 0x1f5e <LEDTrigger>

        if (XModemProcessByte(Byte)) {
    21f2:	8c 2f       	mov	r24, r28
    21f4:	15 d3       	rcall	.+1578   	; 0x2820 <XModemProcessByte>
    21f6:	81 11       	cpse	r24, r1
    21f8:	e9 cf       	rjmp	.-46     	; 0x21cc <TerminalTask+0xc>
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    21fa:	8c 2f       	mov	r24, r28
		CDC_Device_USBTask(&TerminalHandle);
		USB_USBTask();

		ProcessByte();
	}
}
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
        /* Byte received */
    	LEDTrigger(LED_TERMINAL_RXTX, LED_PULSE);

        if (XModemProcessByte(Byte)) {
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    2200:	95 c4       	rjmp	.+2346   	; 0x2b2c <CommandLineProcessByte>

00002202 <TerminalTick>:
    }
}

static void SenseVBus(void)
{
    switch(TerminalState) {
    2202:	80 91 9a 28 	lds	r24, 0x289A
    2206:	81 30       	cpi	r24, 0x01	; 1
    2208:	09 f1       	breq	.+66     	; 0x224c <TerminalTick+0x4a>
    220a:	38 f0       	brcs	.+14     	; 0x221a <TerminalTick+0x18>
    220c:	82 30       	cpi	r24, 0x02	; 2
    220e:	71 f1       	breq	.+92     	; 0x226c <TerminalTick+0x6a>
    2210:	83 30       	cpi	r24, 0x03	; 3
    2212:	71 f0       	breq	.+28     	; 0x2230 <TerminalTick+0x2e>

void TerminalTick(void)
{
	SenseVBus();

	if (TerminalState == TERMINAL_INITIALIZED) {
    2214:	82 30       	cpi	r24, 0x02	; 2
    2216:	41 f1       	breq	.+80     	; 0x2268 <TerminalTick+0x66>
    2218:	08 95       	ret

static void SenseVBus(void)
{
    switch(TerminalState) {
    case TERMINAL_UNINITIALIZED:
    	if (TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK) {
    221a:	80 91 68 06 	lds	r24, 0x0668
    221e:	85 ff       	sbrs	r24, 5
    2220:	fb cf       	rjmp	.-10     	; 0x2218 <TerminalTick+0x16>
    		/* Not initialized and VBUS sense high */
    		TerminalInitDelay = INIT_DELAY;
    2222:	84 e1       	ldi	r24, 0x14	; 20
    2224:	80 93 1b 20 	sts	0x201B, r24
    		TerminalState = TERMINAL_INITIALIZING;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	80 93 9a 28 	sts	0x289A, r24
    222e:	08 95       	ret
    		TerminalState = TERMINAL_UNITIALIZING;
    	}
    	break;

    case TERMINAL_UNITIALIZING:
    	if (--TerminalInitDelay == 0) {
    2230:	80 91 1b 20 	lds	r24, 0x201B
    2234:	81 50       	subi	r24, 0x01	; 1
    2236:	80 93 1b 20 	sts	0x201B, r24
    223a:	81 11       	cpse	r24, r1
    223c:	ed cf       	rjmp	.-38     	; 0x2218 <TerminalTick+0x16>
        	USB_Disable();
    223e:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <USB_Disable>
        	SystemStopUSBClock();
    2242:	0e 94 87 05 	call	0xb0e	; 0xb0e <SystemStopUSBClock>
        	TerminalState = TERMINAL_UNINITIALIZED;
    2246:	10 92 9a 28 	sts	0x289A, r1
    224a:	08 95       	ret
    		TerminalState = TERMINAL_INITIALIZING;
    	}
    break;

    case TERMINAL_INITIALIZING:
    	if (--TerminalInitDelay == 0) {
    224c:	80 91 1b 20 	lds	r24, 0x201B
    2250:	81 50       	subi	r24, 0x01	; 1
    2252:	80 93 1b 20 	sts	0x201B, r24
    2256:	81 11       	cpse	r24, r1
    2258:	df cf       	rjmp	.-66     	; 0x2218 <TerminalTick+0x16>
            SystemStartUSBClock();
    225a:	0e 94 69 05 	call	0xad2	; 0xad2 <SystemStartUSBClock>
            USB_Init();
    225e:	0e 94 a4 2a 	call	0x5548	; 0x5548 <USB_Init>
            TerminalState = TERMINAL_INITIALIZED;
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	80 93 9a 28 	sts	0x289A, r24
void TerminalTick(void)
{
	SenseVBus();

	if (TerminalState == TERMINAL_INITIALIZED) {
		XModemTick();
    2268:	26 d4       	rcall	.+2124   	; 0x2ab6 <XModemTick>
		CommandLineTick();
    226a:	67 c5       	rjmp	.+2766   	; 0x2d3a <CommandLineTick>
            TerminalState = TERMINAL_INITIALIZED;
    	}
    	break;

    case TERMINAL_INITIALIZED:
    	if (!(TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK)) {
    226c:	80 91 68 06 	lds	r24, 0x0668
    2270:	85 fd       	sbrc	r24, 5
    2272:	fa cf       	rjmp	.-12     	; 0x2268 <TerminalTick+0x66>
    		/* Initialized and VBUS sense low */
    		TerminalInitDelay = INIT_DELAY;
    2274:	84 e1       	ldi	r24, 0x14	; 20
    2276:	80 93 1b 20 	sts	0x201B, r24
    		TerminalState = TERMINAL_UNITIALIZING;
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	80 93 9a 28 	sts	0x289A, r24
    2280:	08 95       	ret

00002282 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDTrigger(LED_TERMINAL_CONN, LED_ON);
    2282:	61 e1       	ldi	r22, 0x11	; 17
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	6b ce       	rjmp	.-810    	; 0x1f5e <LEDTrigger>

00002288 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDTrigger(LED_TERMINAL_CONN, LED_OFF);
    2288:	60 e1       	ldi	r22, 0x10	; 16
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	68 ce       	rjmp	.-816    	; 0x1f5e <LEDTrigger>

0000228e <EVENT_USB_Device_ConfigurationChanged>:


/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    CDC_Device_ConfigureEndpoints(&TerminalHandle);
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e2       	ldi	r25, 0x20	; 32
    2292:	0c 94 47 2b 	jmp	0x568e	; 0x568e <CDC_Device_ConfigureEndpoints>

00002296 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    CDC_Device_ProcessControlRequest(&TerminalHandle);
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e2       	ldi	r25, 0x20	; 32
    229a:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <CDC_Device_ProcessControlRequest>

0000229e <CommandGetVersion>:

extern const PROGMEM CommandEntryType CommandTable[];

CommandStatusIdType CommandGetVersion(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR(
    229e:	2f ef       	ldi	r18, 0xFF	; 255
    22a0:	35 e0       	ldi	r19, 0x05	; 5
    22a2:	3f 93       	push	r19
    22a4:	2f 93       	push	r18
    22a6:	28 ef       	ldi	r18, 0xF8	; 248
    22a8:	35 e0       	ldi	r19, 0x05	; 5
    22aa:	3f 93       	push	r19
    22ac:	2f 93       	push	r18
    22ae:	21 ef       	ldi	r18, 0xF1	; 241
    22b0:	35 e0       	ldi	r19, 0x05	; 5
    22b2:	3f 93       	push	r19
    22b4:	2f 93       	push	r18
    22b6:	28 eb       	ldi	r18, 0xB8	; 184
    22b8:	35 e0       	ldi	r19, 0x05	; 5
    22ba:	3f 93       	push	r19
    22bc:	2f 93       	push	r18
    22be:	21 e0       	ldi	r18, 0x01	; 1
    22c0:	2f 93       	push	r18
    22c2:	1f 92       	push	r1
    22c4:	9f 93       	push	r25
    22c6:	8f 93       	push	r24
    22c8:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <snprintf_P>
    "Chameleon-Mini %S using LUFA %S compiled with AVR-GCC %S"
    ), PSTR(CHAMELEON_MINI_VERSION_STRING), PSTR(LUFA_VERSION_STRING), PSTR(__VERSION__)
  );

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    22cc:	8d b7       	in	r24, 0x3d	; 61
    22ce:	9e b7       	in	r25, 0x3e	; 62
    22d0:	0c 96       	adiw	r24, 0x0c	; 12
    22d2:	8d bf       	out	0x3d, r24	; 61
    22d4:	9e bf       	out	0x3e, r25	; 62
}
    22d6:	85 e6       	ldi	r24, 0x65	; 101
    22d8:	08 95       	ret

000022da <CommandGetConfig>:

CommandStatusIdType CommandGetConfig(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    22da:	23 ee       	ldi	r18, 0xE3	; 227
    22dc:	38 e2       	ldi	r19, 0x28	; 40
    22de:	3f 93       	push	r19
    22e0:	2f 93       	push	r18
    22e2:	25 e0       	ldi	r18, 0x05	; 5
    22e4:	36 e0       	ldi	r19, 0x06	; 6
    22e6:	3f 93       	push	r19
    22e8:	2f 93       	push	r18
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	2f 93       	push	r18
    22ee:	1f 92       	push	r1
    22f0:	9f 93       	push	r25
    22f2:	8f 93       	push	r24
    22f4:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <snprintf_P>
    PSTR("%s"), ActiveConfiguration.ConfigurationName);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    22f8:	8d b7       	in	r24, 0x3d	; 61
    22fa:	9e b7       	in	r25, 0x3e	; 62
    22fc:	08 96       	adiw	r24, 0x08	; 8
    22fe:	8d bf       	out	0x3d, r24	; 61
    2300:	9e bf       	out	0x3e, r25	; 62

}
    2302:	85 e6       	ldi	r24, 0x65	; 101
    2304:	08 95       	ret

00002306 <CommandSetConfig>:

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
    2306:	0e 94 cb 05 	call	0xb96	; 0xb96 <ConfigurationSetByName>
    230a:	81 11       	cpse	r24, r1
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <CommandSetConfig+0xc>
	    SettingsSave();
    return COMMAND_INFO_OK_ID;
  } else {
    return COMMAND_ERR_INVALID_PARAM_ID;
    230e:	8a ec       	ldi	r24, 0xCA	; 202
  }
}
    2310:	08 95       	ret
}

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
	    SettingsSave();
    2312:	b2 dc       	rcall	.-1692   	; 0x1c78 <SettingsSave>
    return COMMAND_INFO_OK_ID;
    2314:	84 e6       	ldi	r24, 0x64	; 100
    2316:	08 95       	ret

00002318 <CommandExecConfig>:
  }
}

CommandStatusIdType CommandExecConfig(char* OutMessage)
{
  ConfigurationGetList(OutMessage, TERMINAL_BUFFER_SIZE);
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	71 e0       	ldi	r23, 0x01	; 1
    231c:	0e 94 0c 06 	call	0xc18	; 0xc18 <ConfigurationGetList>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    2320:	85 e6       	ldi	r24, 0x65	; 101
    2322:	08 95       	ret

00002324 <CommandGetUid>:

CommandStatusIdType CommandGetUid(char* OutParam)
{
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	a1 97       	sbiw	r28, 0x21	; 33
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    2338:	20 91 05 29 	lds	r18, 0x2905
    ActiveConfiguration.ApplicationResetFunc();
    //LogEntry(LOG_INFO_APP_RESET, NULL, 0);
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    233c:	e0 91 ff 28 	lds	r30, 0x28FF
    2340:	f0 91 00 29 	lds	r31, 0x2900
    2344:	ce 01       	movw	r24, r28
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	29 a3       	std	Y+33, r18	; 0x21
    234a:	09 95       	icall

  ApplicationGetUid(UidBuffer);

  BufferToHexString(OutParam, TERMINAL_BUFFER_SIZE,
    234c:	29 a1       	ldd	r18, Y+33	; 0x21
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	ae 01       	movw	r20, r28
    2352:	4f 5f       	subi	r20, 0xFF	; 255
    2354:	5f 4f       	sbci	r21, 0xFF	; 255
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	71 e0       	ldi	r23, 0x01	; 1
    235a:	c8 01       	movw	r24, r16
    235c:	0e 94 56 06 	call	0xcac	; 0xcac <BufferToHexString>
    UidBuffer, UidSize);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    2360:	85 e6       	ldi	r24, 0x65	; 101
    2362:	a1 96       	adiw	r28, 0x21	; 33
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	08 95       	ret

00002372 <CommandSetUid>:

CommandStatusIdType CommandSetUid(const char* InParam)
{
    2372:	bf 92       	push	r11
    2374:	cf 92       	push	r12
    2376:	df 92       	push	r13
    2378:	ef 92       	push	r14
    237a:	ff 92       	push	r15
    237c:	0f 93       	push	r16
    237e:	1f 93       	push	r17
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	a0 97       	sbiw	r28, 0x20	; 32
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    2390:	c0 90 05 29 	lds	r12, 0x2905
    2394:	d1 2c       	mov	r13, r1

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    2396:	68 e0       	ldi	r22, 0x08	; 8
    2398:	76 e0       	ldi	r23, 0x06	; 6
    239a:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    239e:	89 2b       	or	r24, r25
    23a0:	59 f5       	brne	.+86     	; 0x23f8 <CommandSetUid+0x86>
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    23a2:	c1 14       	cp	r12, r1
    23a4:	d1 04       	cpc	r13, r1
    23a6:	c1 f1       	breq	.+112    	; 0x2418 <CommandSetUid+0xa6>
    23a8:	b1 2c       	mov	r11, r1
    23aa:	ee 24       	eor	r14, r14
    23ac:	e3 94       	inc	r14
    23ae:	f1 2c       	mov	r15, r1
    23b0:	ec 0e       	add	r14, r28
    23b2:	fd 1e       	adc	r15, r29
    23b4:	00 e0       	ldi	r16, 0x00	; 0
    23b6:	10 e0       	ldi	r17, 0x00	; 0
      UidBuffer[i] = RandomGetByte();
    23b8:	0e 94 3c 06 	call	0xc78	; 0xc78 <RandomGetByte>
    23bc:	f7 01       	movw	r30, r14
    23be:	e0 0f       	add	r30, r16
    23c0:	f1 1f       	adc	r31, r17
    23c2:	80 83       	st	Z, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    23c4:	b3 94       	inc	r11
    23c6:	0b 2d       	mov	r16, r11
    23c8:	10 e0       	ldi	r17, 0x00	; 0
    23ca:	0c 15       	cp	r16, r12
    23cc:	1d 05       	cpc	r17, r13
    23ce:	a0 f3       	brcs	.-24     	; 0x23b8 <CommandSetUid+0x46>
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    23d0:	e0 91 01 29 	lds	r30, 0x2901
    23d4:	f0 91 02 29 	lds	r31, 0x2902
    23d8:	c7 01       	movw	r24, r14
    23da:	09 95       	icall
    }
  }

  ApplicationSetUid(UidBuffer);

  return COMMAND_INFO_OK_ID;
    23dc:	84 e6       	ldi	r24, 0x64	; 100
}
    23de:	a0 96       	adiw	r28, 0x20	; 32
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	ff 90       	pop	r15
    23ee:	ef 90       	pop	r14
    23f0:	df 90       	pop	r13
    23f2:	cf 90       	pop	r12
    23f4:	bf 90       	pop	r11
    23f6:	08 95       	ret
    for (uint8_t i=0; i<UidSize; i++) {
      UidBuffer[i] = RandomGetByte();
    }
  } else {
    /* Convert to Bytes */
    if (HexStringToBuffer(UidBuffer, sizeof(UidBuffer), InParam) != UidSize) {
    23f8:	a8 01       	movw	r20, r16
    23fa:	60 e2       	ldi	r22, 0x20	; 32
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	ee 24       	eor	r14, r14
    2400:	e3 94       	inc	r14
    2402:	f1 2c       	mov	r15, r1
    2404:	ec 0e       	add	r14, r28
    2406:	fd 1e       	adc	r15, r29
    2408:	c7 01       	movw	r24, r14
    240a:	0e 94 98 06 	call	0xd30	; 0xd30 <HexStringToBuffer>
    240e:	8c 15       	cp	r24, r12
    2410:	9d 05       	cpc	r25, r13
    2412:	f1 f2       	breq	.-68     	; 0x23d0 <CommandSetUid+0x5e>
      /* Malformed input. Abort */
      return COMMAND_ERR_INVALID_PARAM_ID;
    2414:	8a ec       	ldi	r24, 0xCA	; 202
    2416:	e3 cf       	rjmp	.-58     	; 0x23de <CommandSetUid+0x6c>
    2418:	ee 24       	eor	r14, r14
    241a:	e3 94       	inc	r14
    241c:	f1 2c       	mov	r15, r1
    241e:	ec 0e       	add	r14, r28
    2420:	fd 1e       	adc	r15, r29
    2422:	d6 cf       	rjmp	.-84     	; 0x23d0 <CommandSetUid+0x5e>

00002424 <CommandGetReadOnly>:
  return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    2424:	20 91 06 29 	lds	r18, 0x2906
    2428:	21 11       	cpse	r18, r1
    242a:	07 c0       	rjmp	.+14     	; 0x243a <CommandGetReadOnly+0x16>
    OutParam[0] = COMMAND_CHAR_TRUE;
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
    242c:	20 e3       	ldi	r18, 0x30	; 48
    242e:	fc 01       	movw	r30, r24
    2430:	20 83       	st	Z, r18
  }

  OutParam[1] = '\0';
    2432:	fc 01       	movw	r30, r24
    2434:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    2436:	85 e6       	ldi	r24, 0x65	; 101
    2438:	08 95       	ret
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    OutParam[0] = COMMAND_CHAR_TRUE;
    243a:	21 e3       	ldi	r18, 0x31	; 49
    243c:	fc 01       	movw	r30, r24
    243e:	20 83       	st	Z, r18
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
  }

  OutParam[1] = '\0';
    2440:	fc 01       	movw	r30, r24
    2442:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    2444:	85 e6       	ldi	r24, 0x65	; 101
    2446:	08 95       	ret

00002448 <CommandSetReadOnly>:

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    2448:	fc 01       	movw	r30, r24
    244a:	21 81       	ldd	r18, Z+1	; 0x01
    244c:	21 11       	cpse	r18, r1
    244e:	05 c0       	rjmp	.+10     	; 0x245a <CommandSetReadOnly+0x12>
    if (InParam[0] == COMMAND_CHAR_TRUE) {
    2450:	80 81       	ld	r24, Z
    2452:	81 33       	cpi	r24, 0x31	; 49
    2454:	41 f0       	breq	.+16     	; 0x2466 <CommandSetReadOnly+0x1e>
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
    2456:	80 33       	cpi	r24, 0x30	; 48
    2458:	11 f0       	breq	.+4      	; 0x245e <CommandSetReadOnly+0x16>
      ActiveConfiguration.ReadOnly = false;
      return COMMAND_INFO_OK_ID;
    }
  }

  return COMMAND_ERR_INVALID_PARAM_ID;
    245a:	8a ec       	ldi	r24, 0xCA	; 202
}
    245c:	08 95       	ret
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
      ActiveConfiguration.ReadOnly = false;
    245e:	10 92 06 29 	sts	0x2906, r1
      return COMMAND_INFO_OK_ID;
    2462:	84 e6       	ldi	r24, 0x64	; 100
    2464:	08 95       	ret

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	80 93 06 29 	sts	0x2906, r24
      return COMMAND_INFO_OK_ID;
    246c:	84 e6       	ldi	r24, 0x64	; 100
    246e:	08 95       	ret

00002470 <CommandExecUpload>:
  return COMMAND_ERR_INVALID_PARAM_ID;
}

CommandStatusIdType CommandExecUpload(char* OutMessage)
{
    XModemReceive(MemoryUploadBlock);
    2470:	86 e5       	ldi	r24, 0x56	; 86
    2472:	99 e0       	ldi	r25, 0x09	; 9
    2474:	a4 d1       	rcall	.+840    	; 0x27be <XModemReceive>
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    2476:	8e e6       	ldi	r24, 0x6E	; 110
    2478:	08 95       	ret

0000247a <CommandExecDownload>:

CommandStatusIdType CommandExecDownload(char* OutMessage)
{
    XModemSend(MemoryDownloadBlock);
    247a:	8b e1       	ldi	r24, 0x1B	; 27
    247c:	9b e0       	ldi	r25, 0x0B	; 11
    247e:	ba d1       	rcall	.+884    	; 0x27f4 <XModemSend>
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    2480:	8e e6       	ldi	r24, 0x6E	; 110
    2482:	08 95       	ret

00002484 <CommandExecReset>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    2484:	e0 ec       	ldi	r30, 0xC0	; 192
    2486:	f4 e0       	ldi	r31, 0x04	; 4
    2488:	81 81       	ldd	r24, Z+1	; 0x01
    248a:	8e 7f       	andi	r24, 0xFE	; 254
    248c:	81 83       	std	Z+1, r24	; 0x01

CommandStatusIdType CommandExecReset(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    248e:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <USB_Disable>

  SystemReset();
    2492:	0e 94 5c 05 	call	0xab8	; 0xab8 <SystemReset>

  return COMMAND_INFO_OK_ID;
}
    2496:	84 e6       	ldi	r24, 0x64	; 100
    2498:	08 95       	ret

0000249a <CommandExecUpgrade>:
    249a:	e0 ec       	ldi	r30, 0xC0	; 192
    249c:	f4 e0       	ldi	r31, 0x04	; 4
    249e:	81 81       	ldd	r24, Z+1	; 0x01
    24a0:	8e 7f       	andi	r24, 0xFE	; 254
    24a2:	81 83       	std	Z+1, r24	; 0x01

#ifdef SUPPORT_FIRMWARE_UPGRADE
CommandStatusIdType CommandExecUpgrade(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    24a4:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <USB_Disable>

  SystemEnterBootloader();
    24a8:	0e 94 63 05 	call	0xac6	; 0xac6 <SystemEnterBootloader>

  return COMMAND_INFO_OK_ID;
}
    24ac:	84 e6       	ldi	r24, 0x64	; 100
    24ae:	08 95       	ret

000024b0 <CommandGetMemSize>:
#endif

CommandStatusIdType CommandGetMemSize(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.MemorySize);
    24b0:	e3 e0       	ldi	r30, 0x03	; 3
    24b2:	f9 e2       	ldi	r31, 0x29	; 41
    24b4:	21 81       	ldd	r18, Z+1	; 0x01
    24b6:	2f 93       	push	r18
    24b8:	20 81       	ld	r18, Z
    24ba:	2f 93       	push	r18
    24bc:	2f e0       	ldi	r18, 0x0F	; 15
    24be:	36 e0       	ldi	r19, 0x06	; 6
    24c0:	3f 93       	push	r19
    24c2:	2f 93       	push	r18
    24c4:	21 e0       	ldi	r18, 0x01	; 1
    24c6:	2f 93       	push	r18
    24c8:	1f 92       	push	r1
    24ca:	9f 93       	push	r25
    24cc:	8f 93       	push	r24
    24ce:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <snprintf_P>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    24d2:	8d b7       	in	r24, 0x3d	; 61
    24d4:	9e b7       	in	r25, 0x3e	; 62
    24d6:	08 96       	adiw	r24, 0x08	; 8
    24d8:	8d bf       	out	0x3d, r24	; 61
    24da:	9e bf       	out	0x3e, r25	; 62
}
    24dc:	85 e6       	ldi	r24, 0x65	; 101
    24de:	08 95       	ret

000024e0 <CommandGetUidSize>:

CommandStatusIdType CommandGetUidSize(char* OutParam)
{
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.UidSize);
    24e0:	20 91 05 29 	lds	r18, 0x2905
    24e4:	1f 92       	push	r1
    24e6:	2f 93       	push	r18
    24e8:	22 e1       	ldi	r18, 0x12	; 18
    24ea:	36 e0       	ldi	r19, 0x06	; 6
    24ec:	3f 93       	push	r19
    24ee:	2f 93       	push	r18
    24f0:	21 e0       	ldi	r18, 0x01	; 1
    24f2:	2f 93       	push	r18
    24f4:	1f 92       	push	r1
    24f6:	9f 93       	push	r25
    24f8:	8f 93       	push	r24
    24fa:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <snprintf_P>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
    24fe:	8d b7       	in	r24, 0x3d	; 61
    2500:	9e b7       	in	r25, 0x3e	; 62
    2502:	08 96       	adiw	r24, 0x08	; 8
    2504:	8d bf       	out	0x3d, r24	; 61
    2506:	9e bf       	out	0x3e, r25	; 62
}
    2508:	85 e6       	ldi	r24, 0x65	; 101
    250a:	08 95       	ret

0000250c <CommandExecButton>:

CommandStatusIdType CommandExecButton(char* OutMessage)
{
    ButtonGetActionList(OutMessage, TERMINAL_BUFFER_SIZE);
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	71 e0       	ldi	r23, 0x01	; 1
    2510:	d0 d9       	rcall	.-3168   	; 0x18b2 <ButtonGetActionList>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    2512:	85 e6       	ldi	r24, 0x65	; 101
    2514:	08 95       	ret

00002516 <CommandGetButton>:

CommandStatusIdType CommandGetButton(char* OutParam)
{
    ButtonGetActionByName(BUTTON_PRESS_SHORT, OutParam, TERMINAL_BUFFER_SIZE);
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	51 e0       	ldi	r21, 0x01	; 1
    251a:	bc 01       	movw	r22, r24
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	22 da       	rcall	.-3004   	; 0x1964 <ButtonGetActionByName>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    2520:	85 e6       	ldi	r24, 0x65	; 101
    2522:	08 95       	ret

00002524 <CommandSetButton>:

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(BUTTON_PRESS_SHORT, InParam)) {
    2524:	bc 01       	movw	r22, r24
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	39 da       	rcall	.-2958   	; 0x199c <ButtonSetActionByName>
    252a:	81 11       	cpse	r24, r1
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <CommandSetButton+0xe>
        SettingsSave();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    252e:	8a ec       	ldi	r24, 0xCA	; 202
    }
}
    2530:	08 95       	ret
}

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(BUTTON_PRESS_SHORT, InParam)) {
        SettingsSave();
    2532:	a2 db       	rcall	.-2236   	; 0x1c78 <SettingsSave>
        return COMMAND_INFO_OK_ID;
    2534:	84 e6       	ldi	r24, 0x64	; 100
    2536:	08 95       	ret

00002538 <CommandExecButtonLong>:
    }
}

CommandStatusIdType CommandExecButtonLong(char* OutMessage)
{
    ButtonGetActionList(OutMessage, TERMINAL_BUFFER_SIZE);
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	71 e0       	ldi	r23, 0x01	; 1
    253c:	ba d9       	rcall	.-3212   	; 0x18b2 <ButtonGetActionList>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    253e:	85 e6       	ldi	r24, 0x65	; 101
    2540:	08 95       	ret

00002542 <CommandGetButtonLong>:

CommandStatusIdType CommandGetButtonLong(char* OutParam)
{
    ButtonGetActionByName(BUTTON_PRESS_LONG, OutParam, TERMINAL_BUFFER_SIZE);
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	51 e0       	ldi	r21, 0x01	; 1
    2546:	bc 01       	movw	r22, r24
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	0c da       	rcall	.-3048   	; 0x1964 <ButtonGetActionByName>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    254c:	85 e6       	ldi	r24, 0x65	; 101
    254e:	08 95       	ret

00002550 <CommandSetButtonLong>:

CommandStatusIdType CommandSetButtonLong(const char* InParam)
{
    if (ButtonSetActionByName(BUTTON_PRESS_LONG, InParam)) {
    2550:	bc 01       	movw	r22, r24
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	23 da       	rcall	.-3002   	; 0x199c <ButtonSetActionByName>
    2556:	81 11       	cpse	r24, r1
    2558:	02 c0       	rjmp	.+4      	; 0x255e <CommandSetButtonLong+0xe>
        SettingsSave();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    255a:	8a ec       	ldi	r24, 0xCA	; 202
    }
}
    255c:	08 95       	ret
}

CommandStatusIdType CommandSetButtonLong(const char* InParam)
{
    if (ButtonSetActionByName(BUTTON_PRESS_LONG, InParam)) {
        SettingsSave();
    255e:	8c db       	rcall	.-2280   	; 0x1c78 <SettingsSave>
        return COMMAND_INFO_OK_ID;
    2560:	84 e6       	ldi	r24, 0x64	; 100
    2562:	08 95       	ret

00002564 <CommandExecLedGreen>:
    }
}

CommandStatusIdType CommandExecLedGreen(char* OutMessage)
{
	LEDGetFuncList(OutMessage, TERMINAL_BUFFER_SIZE);
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	71 e0       	ldi	r23, 0x01	; 1
    2568:	0a dd       	rcall	.-1516   	; 0x1f7e <LEDGetFuncList>

	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    256a:	85 e6       	ldi	r24, 0x65	; 101
    256c:	08 95       	ret

0000256e <CommandGetLedGreen>:

CommandStatusIdType CommandGetLedGreen(char* OutParam)
{
	LEDGetFuncByName(LED_GREEN, OutParam, TERMINAL_BUFFER_SIZE);
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	51 e0       	ldi	r21, 0x01	; 1
    2572:	bc 01       	movw	r22, r24
    2574:	80 e2       	ldi	r24, 0x20	; 32
    2576:	8b dd       	rcall	.-1258   	; 0x208e <LEDGetFuncByName>

	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    2578:	85 e6       	ldi	r24, 0x65	; 101
    257a:	08 95       	ret

0000257c <CommandSetLedGreen>:

CommandStatusIdType CommandSetLedGreen(const char* InParam)
{
	if (LEDSetFuncByName(LED_GREEN, InParam)) {
    257c:	bc 01       	movw	r22, r24
    257e:	80 e2       	ldi	r24, 0x20	; 32
    2580:	a3 dd       	rcall	.-1210   	; 0x20c8 <LEDSetFuncByName>
    2582:	81 11       	cpse	r24, r1
    2584:	02 c0       	rjmp	.+4      	; 0x258a <CommandSetLedGreen+0xe>
		SettingsSave();
		return COMMAND_INFO_OK_ID;
	} else {
		return COMMAND_ERR_INVALID_PARAM_ID;
    2586:	8a ec       	ldi	r24, 0xCA	; 202
	}
}
    2588:	08 95       	ret
}

CommandStatusIdType CommandSetLedGreen(const char* InParam)
{
	if (LEDSetFuncByName(LED_GREEN, InParam)) {
		SettingsSave();
    258a:	76 db       	rcall	.-2324   	; 0x1c78 <SettingsSave>
		return COMMAND_INFO_OK_ID;
    258c:	84 e6       	ldi	r24, 0x64	; 100
    258e:	08 95       	ret

00002590 <CommandExecLedRed>:
	}
}

CommandStatusIdType CommandExecLedRed(char* OutMessage)
{
	LEDGetFuncList(OutMessage, TERMINAL_BUFFER_SIZE);
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	71 e0       	ldi	r23, 0x01	; 1
    2594:	f4 dc       	rcall	.-1560   	; 0x1f7e <LEDGetFuncList>

	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    2596:	85 e6       	ldi	r24, 0x65	; 101
    2598:	08 95       	ret

0000259a <CommandGetLedRed>:

CommandStatusIdType CommandGetLedRed(char* OutParam)
{
	LEDGetFuncByName(LED_RED, OutParam, TERMINAL_BUFFER_SIZE);
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	51 e0       	ldi	r21, 0x01	; 1
    259e:	bc 01       	movw	r22, r24
    25a0:	80 e1       	ldi	r24, 0x10	; 16
    25a2:	75 dd       	rcall	.-1302   	; 0x208e <LEDGetFuncByName>

	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    25a4:	85 e6       	ldi	r24, 0x65	; 101
    25a6:	08 95       	ret

000025a8 <CommandSetLedRed>:

CommandStatusIdType CommandSetLedRed(const char* InParam)
{
	if (LEDSetFuncByName(LED_RED, InParam)) {
    25a8:	bc 01       	movw	r22, r24
    25aa:	80 e1       	ldi	r24, 0x10	; 16
    25ac:	8d dd       	rcall	.-1254   	; 0x20c8 <LEDSetFuncByName>
    25ae:	81 11       	cpse	r24, r1
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <CommandSetLedRed+0xe>
		SettingsSave();
		return COMMAND_INFO_OK_ID;
	} else {
		return COMMAND_ERR_INVALID_PARAM_ID;
    25b2:	8a ec       	ldi	r24, 0xCA	; 202
	}
}
    25b4:	08 95       	ret
}

CommandStatusIdType CommandSetLedRed(const char* InParam)
{
	if (LEDSetFuncByName(LED_RED, InParam)) {
		SettingsSave();
    25b6:	60 db       	rcall	.-2368   	; 0x1c78 <SettingsSave>
		return COMMAND_INFO_OK_ID;
    25b8:	84 e6       	ldi	r24, 0x64	; 100
    25ba:	08 95       	ret

000025bc <CommandExecLogMode>:
}

CommandStatusIdType CommandExecLogMode(char* OutMessage)
{
    /* Get list of log modes */
    LogGetModeList(OutMessage, TERMINAL_BUFFER_SIZE);
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	71 e0       	ldi	r23, 0x01	; 1
    25c0:	2b db       	rcall	.-2474   	; 0x1c18 <LogGetModeList>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    25c2:	85 e6       	ldi	r24, 0x65	; 101
    25c4:	08 95       	ret

000025c6 <CommandGetLogMode>:

CommandStatusIdType CommandGetLogMode(char* OutParam)
{
    /* Get Logmode */
    LogGetModeByName(OutParam, TERMINAL_BUFFER_SIZE);
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	71 e0       	ldi	r23, 0x01	; 1
    25ca:	18 db       	rcall	.-2512   	; 0x1bfc <LogGetModeByName>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    25cc:	85 e6       	ldi	r24, 0x65	; 101
    25ce:	08 95       	ret

000025d0 <CommandSetLogMode>:

CommandStatusIdType CommandSetLogMode(const char* InParam)
{
    if (LogSetModeByName(InParam)) {
    25d0:	f0 da       	rcall	.-2592   	; 0x1bb2 <LogSetModeByName>
    25d2:	81 11       	cpse	r24, r1
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <CommandSetLogMode+0xa>
        SettingsSave();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    25d6:	8a ec       	ldi	r24, 0xCA	; 202
    }
}
    25d8:	08 95       	ret
}

CommandStatusIdType CommandSetLogMode(const char* InParam)
{
    if (LogSetModeByName(InParam)) {
        SettingsSave();
    25da:	4e db       	rcall	.-2404   	; 0x1c78 <SettingsSave>
        return COMMAND_INFO_OK_ID;
    25dc:	84 e6       	ldi	r24, 0x64	; 100
    25de:	08 95       	ret

000025e0 <CommandExecLogMem>:
    }
}

CommandStatusIdType CommandExecLogMem(char* OutMessage)
{
    snprintf_P(OutMessage, TERMINAL_BUFFER_SIZE,
    25e0:	23 e2       	ldi	r18, 0x23	; 35
    25e2:	36 e0       	ldi	r19, 0x06	; 6
    25e4:	3f 93       	push	r19
    25e6:	2f 93       	push	r18
    25e8:	2b e1       	ldi	r18, 0x1B	; 27
    25ea:	36 e0       	ldi	r19, 0x06	; 6
    25ec:	3f 93       	push	r19
    25ee:	2f 93       	push	r18
    25f0:	25 e1       	ldi	r18, 0x15	; 21
    25f2:	36 e0       	ldi	r19, 0x06	; 6
    25f4:	3f 93       	push	r19
    25f6:	2f 93       	push	r18
    25f8:	21 e0       	ldi	r18, 0x01	; 1
    25fa:	2f 93       	push	r18
    25fc:	1f 92       	push	r1
    25fe:	9f 93       	push	r25
    2600:	8f 93       	push	r24
    2602:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <snprintf_P>
        PSTR("%S,%S"), PSTR(COMMAND_LOGMEM_LOADBIN), PSTR(COMMAND_LOGMEM_CLEAR) );

    return COMMAND_INFO_OK_WITH_TEXT_ID;
    2606:	8d b7       	in	r24, 0x3d	; 61
    2608:	9e b7       	in	r25, 0x3e	; 62
    260a:	0a 96       	adiw	r24, 0x0a	; 10
    260c:	8d bf       	out	0x3d, r24	; 61
    260e:	9e bf       	out	0x3e, r25	; 62
}
    2610:	85 e6       	ldi	r24, 0x65	; 101
    2612:	08 95       	ret

00002614 <CommandGetLogMem>:

CommandStatusIdType CommandGetLogMem(char* OutParam)
{
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	ec 01       	movw	r28, r24
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    261a:	68 da       	rcall	.-2864   	; 0x1aec <LogMemFree>
    261c:	9f 93       	push	r25
    261e:	8f 93       	push	r24
    2620:	29 e2       	ldi	r18, 0x29	; 41
    2622:	36 e0       	ldi	r19, 0x06	; 6
    2624:	3f 93       	push	r19
    2626:	2f 93       	push	r18
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	8f 93       	push	r24
    262c:	1f 92       	push	r1
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <snprintf_P>
        PSTR("%u"), LogMemFree());


    return COMMAND_INFO_OK_WITH_TEXT_ID;
    2636:	8d b7       	in	r24, 0x3d	; 61
    2638:	9e b7       	in	r25, 0x3e	; 62
    263a:	08 96       	adiw	r24, 0x08	; 8
    263c:	8d bf       	out	0x3d, r24	; 61
    263e:	9e bf       	out	0x3e, r25	; 62
}
    2640:	85 e6       	ldi	r24, 0x65	; 101
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	08 95       	ret

00002648 <CommandSetLogMem>:

CommandStatusIdType CommandSetLogMem(const char* InParam)
{
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	ec 01       	movw	r28, r24
    if (strcmp_P(InParam, PSTR(COMMAND_LOGMEM_LOADBIN)) == 0) {
    264e:	6c e2       	ldi	r22, 0x2C	; 44
    2650:	76 e0       	ldi	r23, 0x06	; 6
    2652:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    2656:	89 2b       	or	r24, r25
    2658:	81 f0       	breq	.+32     	; 0x267a <CommandSetLogMem+0x32>
        XModemSend(LogMemLoadBlock);
        return COMMAND_INFO_XMODEM_WAIT_ID;
    } else if (strcmp_P(InParam, PSTR(COMMAND_LOGMEM_CLEAR)) == 0) {
    265a:	64 e3       	ldi	r22, 0x34	; 52
    265c:	76 e0       	ldi	r23, 0x06	; 6
    265e:	ce 01       	movw	r24, r28
    2660:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    2664:	89 2b       	or	r24, r25
    2666:	21 f0       	breq	.+8      	; 0x2670 <CommandSetLogMem+0x28>
        LogMemClear();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    2668:	8a ec       	ldi	r24, 0xCA	; 202
    }
}
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	08 95       	ret
{
    if (strcmp_P(InParam, PSTR(COMMAND_LOGMEM_LOADBIN)) == 0) {
        XModemSend(LogMemLoadBlock);
        return COMMAND_INFO_XMODEM_WAIT_ID;
    } else if (strcmp_P(InParam, PSTR(COMMAND_LOGMEM_CLEAR)) == 0) {
        LogMemClear();
    2670:	28 da       	rcall	.-2992   	; 0x1ac2 <LogMemClear>
        return COMMAND_INFO_OK_ID;
    2672:	84 e6       	ldi	r24, 0x64	; 100
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    }
}
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret
}

CommandStatusIdType CommandSetLogMem(const char* InParam)
{
    if (strcmp_P(InParam, PSTR(COMMAND_LOGMEM_LOADBIN)) == 0) {
        XModemSend(LogMemLoadBlock);
    267a:	89 e4       	ldi	r24, 0x49	; 73
    267c:	9d e0       	ldi	r25, 0x0D	; 13
    267e:	ba d0       	rcall	.+372    	; 0x27f4 <XModemSend>
        return COMMAND_INFO_XMODEM_WAIT_ID;
    2680:	8e e6       	ldi	r24, 0x6E	; 110
        LogMemClear();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    }
}
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	08 95       	ret

00002688 <CommandGetSetting>:

CommandStatusIdType CommandGetSetting(char* OutParam)
{
	SettingsGetActiveByName(OutParam, TERMINAL_BUFFER_SIZE);
    2688:	60 e0       	ldi	r22, 0x00	; 0
    268a:	71 e0       	ldi	r23, 0x01	; 1
    268c:	c3 db       	rcall	.-2170   	; 0x1e14 <SettingsGetActiveByName>
	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    268e:	85 e6       	ldi	r24, 0x65	; 101
    2690:	08 95       	ret

00002692 <CommandSetSetting>:

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
    2692:	ca db       	rcall	.-2156   	; 0x1e28 <SettingsSetActiveByName>
    2694:	81 11       	cpse	r24, r1
    2696:	02 c0       	rjmp	.+4      	; 0x269c <CommandSetSetting+0xa>
		SettingsSave();
		return COMMAND_INFO_OK_ID;
	} else {
		return COMMAND_ERR_INVALID_PARAM_ID;
    2698:	8a ec       	ldi	r24, 0xCA	; 202
	}
}
    269a:	08 95       	ret
}

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
		SettingsSave();
    269c:	ed da       	rcall	.-2598   	; 0x1c78 <SettingsSave>
		return COMMAND_INFO_OK_ID;
    269e:	84 e6       	ldi	r24, 0x64	; 100
    26a0:	08 95       	ret

000026a2 <CommandExecClear>:
	}
}

CommandStatusIdType CommandExecClear(char* OutParam)
{
	MemoryClear();
    26a2:	0e 94 12 07 	call	0xe24	; 0xe24 <MemoryClear>
	return COMMAND_INFO_OK_ID;
}
    26a6:	84 e6       	ldi	r24, 0x64	; 100
    26a8:	08 95       	ret

000026aa <CommandExecHelp>:

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    26aa:	bf 92       	push	r11
    26ac:	cf 92       	push	r12
    26ae:	df 92       	push	r13
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	7c 01       	movw	r14, r24
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */
    26be:	cf ef       	ldi	r28, 0xFF	; 255
    26c0:	d0 e0       	ldi	r29, 0x00	; 0
	return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    26c2:	31 e4       	ldi	r19, 0x41	; 65
    26c4:	c3 2e       	mov	r12, r19
    26c6:	36 e0       	ldi	r19, 0x06	; 6
    26c8:	d3 2e       	mov	r13, r19
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    26ca:	4c e2       	ldi	r20, 0x2C	; 44
    26cc:	b4 2e       	mov	r11, r20
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    26ce:	86 01       	movw	r16, r12
    26d0:	b6 01       	movw	r22, r12
    26d2:	80 e9       	ldi	r24, 0x90	; 144
    26d4:	90 e2       	ldi	r25, 0x20	; 32
    26d6:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    26da:	89 2b       	or	r24, r25
    26dc:	21 f1       	breq	.+72     	; 0x2726 <CommandExecHelp+0x7c>
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    26de:	f6 01       	movw	r30, r12
    26e0:	84 91       	lpm	r24, Z
    26e2:	88 23       	and	r24, r24
    26e4:	89 f0       	breq	.+34     	; 0x2708 <CommandExecHelp+0x5e>
    26e6:	c1 32       	cpi	r28, 0x21	; 33
    26e8:	d1 05       	cpc	r29, r1
    26ea:	70 f0       	brcs	.+28     	; 0x2708 <CommandExecHelp+0x5e>
    26ec:	d7 01       	movw	r26, r14
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <CommandExecHelp+0x4c>
    26f0:	c0 32       	cpi	r28, 0x20	; 32
    26f2:	d1 05       	cpc	r29, r1
    26f4:	49 f0       	breq	.+18     	; 0x2708 <CommandExecHelp+0x5e>
            *OutMessage++ = c;
    26f6:	8d 93       	st	X+, r24
    26f8:	7d 01       	movw	r14, r26
            CommandName++;
    26fa:	0f 5f       	subi	r16, 0xFF	; 255
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
            ByteCount--;
    26fe:	21 97       	sbiw	r28, 0x01	; 1

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    2700:	f8 01       	movw	r30, r16
    2702:	84 91       	lpm	r24, Z
    2704:	81 11       	cpse	r24, r1
    2706:	f4 cf       	rjmp	.-24     	; 0x26f0 <CommandExecHelp+0x46>
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    2708:	f7 01       	movw	r30, r14
    270a:	b1 92       	st	Z+, r11
    270c:	7f 01       	movw	r14, r30
        ByteCount--;
    270e:	21 97       	sbiw	r28, 0x01	; 1

        EntryPtr++;
    2710:	f6 e1       	ldi	r31, 0x16	; 22
    2712:	cf 0e       	add	r12, r31
    2714:	d1 1c       	adc	r13, r1
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    2716:	86 01       	movw	r16, r12
    2718:	b6 01       	movw	r22, r12
    271a:	80 e9       	ldi	r24, 0x90	; 144
    271c:	90 e2       	ldi	r25, 0x20	; 32
    271e:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    2722:	89 2b       	or	r24, r25
    2724:	e1 f6       	brne	.-72     	; 0x26de <CommandExecHelp+0x34>
        ByteCount--;

        EntryPtr++;
    }

    *--OutMessage = '\0';
    2726:	f7 01       	movw	r30, r14
    2728:	31 97       	sbiw	r30, 0x01	; 1
    272a:	10 82       	st	Z, r1

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    272c:	85 e6       	ldi	r24, 0x65	; 101
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	df 90       	pop	r13
    273c:	cf 90       	pop	r12
    273e:	bf 90       	pop	r11
    2740:	08 95       	ret

00002742 <CommandGetRssi>:

CommandStatusIdType CommandGetRssi(char* OutParam)
{
    2742:	fc 01       	movw	r30, r24
}

static inline
uint16_t AntennaLevelGet(void)
{
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
    2744:	20 91 20 02 	lds	r18, 0x0220
    2748:	20 68       	ori	r18, 0x80	; 128
    274a:	20 93 20 02 	sts	0x0220, r18
	while( !(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm) );
    274e:	20 91 23 02 	lds	r18, 0x0223
    2752:	20 ff       	sbrs	r18, 0
    2754:	fc cf       	rjmp	.-8      	; 0x274e <CommandGetRssi+0xc>

	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	80 93 23 02 	sts	0x0223, r24

	int16_t Result = ADCA.CH0RES - ANTENNA_LEVEL_OFFSET;
    275c:	a0 91 10 02 	lds	r26, 0x0210
    2760:	b0 91 11 02 	lds	r27, 0x0211
	if (Result < 0) Result = 0;

	return (uint16_t) (((uint32_t) Result * ANTENNA_LEVEL_NUMERATOR) / ANTENNA_LEVEL_DENOMINATOR);
    2764:	ae 5b       	subi	r26, 0xBE	; 190
    2766:	b1 09       	sbc	r27, r1
    2768:	b7 fd       	sbrc	r27, 7
    276a:	1c c0       	rjmp	.+56     	; 0x27a4 <CommandGetRssi+0x62>
    276c:	29 e6       	ldi	r18, 0x69	; 105
    276e:	37 e5       	ldi	r19, 0x57	; 87
    2770:	4b e0       	ldi	r20, 0x0B	; 11
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	0e 94 56 2d 	call	0x5aac	; 0x5aac <__mulshisi3>
    2778:	aa 27       	eor	r26, r26
    277a:	bb 27       	eor	r27, r27
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    277c:	9f 93       	push	r25
    277e:	8f 93       	push	r24
    2780:	2a e3       	ldi	r18, 0x3A	; 58
    2782:	36 e0       	ldi	r19, 0x06	; 6
    2784:	3f 93       	push	r19
    2786:	2f 93       	push	r18
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	8f 93       	push	r24
    278c:	1f 92       	push	r1
    278e:	ff 93       	push	r31
    2790:	ef 93       	push	r30
    2792:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <snprintf_P>
        PSTR("%5u mV"), AntennaLevelGet());


    return COMMAND_INFO_OK_WITH_TEXT_ID;
    2796:	8d b7       	in	r24, 0x3d	; 61
    2798:	9e b7       	in	r25, 0x3e	; 62
    279a:	08 96       	adiw	r24, 0x08	; 8
    279c:	8d bf       	out	0x3d, r24	; 61
    279e:	9e bf       	out	0x3e, r25	; 62
}
    27a0:	85 e6       	ldi	r24, 0x65	; 101
    27a2:	08 95       	ret
    27a4:	a0 e0       	ldi	r26, 0x00	; 0
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e1 cf       	rjmp	.-62     	; 0x276c <CommandGetRssi+0x2a>

000027aa <CalcChecksum.constprop.0>:
static uint32_t BlockAddress;

static XModemCallbackType CallbackFunc;

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t* DataPtr = (uint8_t*) Buffer;
    27ac:	ec e3       	ldi	r30, 0x3C	; 60
    27ae:	f9 e2       	ldi	r31, 0x29	; 41

    while(ByteCount--) {
        Checksum += *DataPtr++;
    27b0:	91 91       	ld	r25, Z+
    27b2:	89 0f       	add	r24, r25

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    27b4:	99 e2       	ldi	r25, 0x29	; 41
    27b6:	ec 3b       	cpi	r30, 0xBC	; 188
    27b8:	f9 07       	cpc	r31, r25
    27ba:	d1 f7       	brne	.-12     	; 0x27b0 <CalcChecksum.constprop.0+0x6>
        Checksum += *DataPtr++;
    }

    return Checksum;
}
    27bc:	08 95       	ret

000027be <XModemReceive>:

void XModemReceive(XModemCallbackType TheCallbackFunc)
{
    State = STATE_RECEIVE_INIT;
    27be:	21 e0       	ldi	r18, 0x01	; 1
    27c0:	20 93 9b 28 	sts	0x289B, r18
    CurrentFrameNumber = FIRST_FRAME_NUMBER;
    27c4:	20 93 9c 28 	sts	0x289C, r18
    RetryCount = RECV_INIT_COUNT;
    27c8:	2c e3       	ldi	r18, 0x3C	; 60
    27ca:	20 93 9d 28 	sts	0x289D, r18
    RetryTimeout = RECV_INIT_TIMEOUT;
    27ce:	25 e0       	ldi	r18, 0x05	; 5
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	20 93 9e 28 	sts	0x289E, r18
    27d6:	30 93 9f 28 	sts	0x289F, r19
    BlockAddress = 0;
    27da:	10 92 a0 28 	sts	0x28A0, r1
    27de:	10 92 a1 28 	sts	0x28A1, r1
    27e2:	10 92 a2 28 	sts	0x28A2, r1
    27e6:	10 92 a3 28 	sts	0x28A3, r1

    CallbackFunc = TheCallbackFunc;
    27ea:	80 93 a4 28 	sts	0x28A4, r24
    27ee:	90 93 a5 28 	sts	0x28A5, r25
    27f2:	08 95       	ret

000027f4 <XModemSend>:
}

void XModemSend(XModemCallbackType TheCallbackFunc)
{
    State = STATE_SEND_INIT;
    27f4:	27 e0       	ldi	r18, 0x07	; 7
    27f6:	20 93 9b 28 	sts	0x289B, r18
    RetryTimeout = SEND_INIT_TIMEOUT;
    27fa:	2c e2       	ldi	r18, 0x2C	; 44
    27fc:	31 e0       	ldi	r19, 0x01	; 1
    27fe:	20 93 9e 28 	sts	0x289E, r18
    2802:	30 93 9f 28 	sts	0x289F, r19
    BlockAddress = 0;
    2806:	10 92 a0 28 	sts	0x28A0, r1
    280a:	10 92 a1 28 	sts	0x28A1, r1
    280e:	10 92 a2 28 	sts	0x28A2, r1
    2812:	10 92 a3 28 	sts	0x28A3, r1

    CallbackFunc = TheCallbackFunc;
    2816:	80 93 a4 28 	sts	0x28A4, r24
    281a:	90 93 a5 28 	sts	0x28A5, r25
    281e:	08 95       	ret

00002820 <XModemProcessByte>:
}

bool XModemProcessByte(uint8_t Byte)
{
    2820:	cf 93       	push	r28
    2822:	c8 2f       	mov	r28, r24
    switch(State) {
    2824:	90 91 9b 28 	lds	r25, 0x289B
    2828:	95 30       	cpi	r25, 0x05	; 5
    282a:	09 f4       	brne	.+2      	; 0x282e <XModemProcessByte+0xe>
    282c:	84 c0       	rjmp	.+264    	; 0x2936 <XModemProcessByte+0x116>
    282e:	e0 f0       	brcs	.+56     	; 0x2868 <XModemProcessByte+0x48>
    2830:	97 30       	cpi	r25, 0x07	; 7
    2832:	09 f4       	brne	.+2      	; 0x2836 <XModemProcessByte+0x16>
    2834:	4c c0       	rjmp	.+152    	; 0x28ce <XModemProcessByte+0xae>
    2836:	60 f5       	brcc	.+88     	; 0x2890 <XModemProcessByte+0x70>
        }

        break;

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
    2838:	20 91 a9 28 	lds	r18, 0x28A9
    283c:	80 91 9c 28 	lds	r24, 0x289C
    2840:	28 17       	cp	r18, r24
    2842:	09 f4       	brne	.+2      	; 0x2846 <XModemProcessByte+0x26>
    2844:	ec c0       	rjmp	.+472    	; 0x2a1e <XModemProcessByte+0x1fe>
            } else {
                /* Data seems to be damaged */
                TerminalSendByte(BYTE_NAK);
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	28 17       	cp	r18, r24
    284e:	39 07       	cpc	r19, r25
    2850:	09 f4       	brne	.+2      	; 0x2854 <XModemProcessByte+0x34>
    2852:	14 c1       	rjmp	.+552    	; 0x2a7c <XModemProcessByte+0x25c>
INLINE void TerminalSendByte(uint8_t Byte) { CDC_Device_SendByte(&TerminalHandle, Byte); }
    2854:	68 e1       	ldi	r22, 0x18	; 24
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e2       	ldi	r25, 0x20	; 32
    285a:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
        } else {
            /* This frame is completely out of order. Just cancel */
            TerminalSendByte(BYTE_CAN);
            State = STATE_OFF;
    285e:	10 92 9b 28 	sts	0x289B, r1
    default:
        return false;
        break;
    }

    return true;
    2862:	81 e0       	ldi	r24, 0x01	; 1
}
    2864:	cf 91       	pop	r28
    2866:	08 95       	ret
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    2868:	93 30       	cpi	r25, 0x03	; 3
    286a:	09 f4       	brne	.+2      	; 0x286e <XModemProcessByte+0x4e>
    286c:	5c c0       	rjmp	.+184    	; 0x2926 <XModemProcessByte+0x106>
    286e:	b8 f0       	brcs	.+46     	; 0x289e <XModemProcessByte+0x7e>
        ReceivedFrameNumber = Byte;
        State = STATE_RECEIVE_FRAMENUM2;
        break;

    case STATE_RECEIVE_FRAMENUM2:
        if (Byte == (255 - ReceivedFrameNumber)) {
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	40 91 a9 28 	lds	r20, 0x28A9
    2876:	2f ef       	ldi	r18, 0xFF	; 255
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	24 1b       	sub	r18, r20
    287c:	31 09       	sbc	r19, r1
    287e:	82 17       	cp	r24, r18
    2880:	93 07       	cpc	r25, r19
    2882:	09 f0       	breq	.+2      	; 0x2886 <XModemProcessByte+0x66>
    2884:	6f c0       	rjmp	.+222    	; 0x2964 <XModemProcessByte+0x144>
            /* frame-number check passed. */
            State = STATE_RECEIVE_DATA;
    2886:	85 e0       	ldi	r24, 0x05	; 5
    2888:	80 93 9b 28 	sts	0x289B, r24
    default:
        return false;
        break;
    }

    return true;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	ea cf       	rjmp	.-44     	; 0x2864 <XModemProcessByte+0x44>
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    2890:	98 30       	cpi	r25, 0x08	; 8
    2892:	19 f1       	breq	.+70     	; 0x28da <XModemProcessByte+0xba>
    2894:	99 30       	cpi	r25, 0x09	; 9
    2896:	b1 f0       	breq	.+44     	; 0x28c4 <XModemProcessByte+0xa4>
        /* Receive Ack */
        State = STATE_OFF;
        break;

    default:
        return false;
    2898:	80 e0       	ldi	r24, 0x00	; 0
        break;
    }

    return true;
}
    289a:	cf 91       	pop	r28
    289c:	08 95       	ret
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    289e:	91 30       	cpi	r25, 0x01	; 1
    28a0:	d8 f3       	brcs	.-10     	; 0x2898 <XModemProcessByte+0x78>
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <XModemProcessByte+0x88>
    28a6:	ec c0       	rjmp	.+472    	; 0x2a80 <XModemProcessByte+0x260>
            /* Next frame incoming */
            BufferIdx = 0;
            Checksum = CHECKSUM_INIT_VALUE;
            State = STATE_RECEIVE_FRAMENUM1;
        } else if (Byte == BYTE_EOT) {
    28a8:	84 30       	cpi	r24, 0x04	; 4
    28aa:	39 f0       	breq	.+14     	; 0x28ba <XModemProcessByte+0x9a>
            /* Transmission finished */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if ( (Byte == BYTE_CAN) || (Byte == BYTE_ESC) ) {
    28ac:	88 31       	cpi	r24, 0x18	; 24
    28ae:	51 f0       	breq	.+20     	; 0x28c4 <XModemProcessByte+0xa4>
    28b0:	8b 31       	cpi	r24, 0x1B	; 27
    28b2:	41 f0       	breq	.+16     	; 0x28c4 <XModemProcessByte+0xa4>
    default:
        return false;
        break;
    }

    return true;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
}
    28b6:	cf 91       	pop	r28
    28b8:	08 95       	ret
    28ba:	66 e0       	ldi	r22, 0x06	; 6
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e2       	ldi	r25, 0x20	; 32
    28c0:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>

    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
    28c4:	10 92 9b 28 	sts	0x289B, r1
    default:
        return false;
        break;
    }

    return true;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
}
    28ca:	cf 91       	pop	r28
    28cc:	08 95       	ret

        break;

    case STATE_SEND_INIT:
        /* Start sending on NAK */
        if (Byte == BYTE_NAK) {
    28ce:	85 31       	cpi	r24, 0x15	; 21
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <XModemProcessByte+0xb4>
    28d2:	57 c0       	rjmp	.+174    	; 0x2982 <XModemProcessByte+0x162>
            CurrentFrameNumber = FIRST_FRAME_NUMBER - 1;
            Byte = BYTE_ACK;
        } else if (Byte == BYTE_ESC) {
    28d4:	8b 31       	cpi	r24, 0x1B	; 27
    28d6:	09 f4       	brne	.+2      	; 0x28da <XModemProcessByte+0xba>
    28d8:	50 c0       	rjmp	.+160    	; 0x297a <XModemProcessByte+0x15a>
        }

        /* Fallthrough */

    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
    28da:	c8 31       	cpi	r28, 0x18	; 24
    28dc:	71 f3       	breq	.-36     	; 0x28ba <XModemProcessByte+0x9a>
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
    28de:	c6 30       	cpi	r28, 0x06	; 6
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <XModemProcessByte+0xc4>
    28e2:	51 c0       	rjmp	.+162    	; 0x2986 <XModemProcessByte+0x166>
                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
            }
        } else if (Byte == BYTE_NAK){
    28e4:	c5 31       	cpi	r28, 0x15	; 21
    28e6:	31 f7       	brne	.-52     	; 0x28b4 <XModemProcessByte+0x94>
    28e8:	61 e0       	ldi	r22, 0x01	; 1
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e2       	ldi	r25, 0x20	; 32
    28ee:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
    28f2:	60 91 9c 28 	lds	r22, 0x289C
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e2       	ldi	r25, 0x20	; 32
    28fa:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
            /* Resend frame */
            TerminalSendByte(BYTE_SOH);
            TerminalSendByte(CurrentFrameNumber);
            TerminalSendByte(255 - CurrentFrameNumber);
    28fe:	60 91 9c 28 	lds	r22, 0x289C
    2902:	60 95       	com	r22
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e2       	ldi	r25, 0x20	; 32
    2908:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
            TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    290c:	60 e8       	ldi	r22, 0x80	; 128
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	8c e3       	ldi	r24, 0x3C	; 60
    2912:	99 e2       	ldi	r25, 0x29	; 41
    2914:	4a dc       	rcall	.-1900   	; 0x21aa <TerminalSendBlock>
            TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));
    2916:	49 df       	rcall	.-366    	; 0x27aa <CalcChecksum.constprop.0>
    2918:	68 2f       	mov	r22, r24
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e2       	ldi	r25, 0x20	; 32
    291e:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
    default:
        return false;
        break;
    }

    return true;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	9f cf       	rjmp	.-194    	; 0x2864 <XModemProcessByte+0x44>

        break;

    case STATE_RECEIVE_FRAMENUM1:
        /* Store frame number */
        ReceivedFrameNumber = Byte;
    2926:	80 93 a9 28 	sts	0x28A9, r24
        State = STATE_RECEIVE_FRAMENUM2;
    292a:	84 e0       	ldi	r24, 0x04	; 4
    292c:	80 93 9b 28 	sts	0x289B, r24
    default:
        return false;
        break;
    }

    return true;
    2930:	81 e0       	ldi	r24, 0x01	; 1
}
    2932:	cf 91       	pop	r28
    2934:	08 95       	ret

        break;

    case STATE_RECEIVE_DATA:
        /* Process byte and update checksum */
        TerminalBuffer[BufferIdx++] = Byte;
    2936:	20 91 a6 28 	lds	r18, 0x28A6
    293a:	30 91 a7 28 	lds	r19, 0x28A7
    293e:	f9 01       	movw	r30, r18
    2940:	e4 5c       	subi	r30, 0xC4	; 196
    2942:	f6 4d       	sbci	r31, 0xD6	; 214
    2944:	80 83       	st	Z, r24
    2946:	c9 01       	movw	r24, r18
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	80 93 a6 28 	sts	0x28A6, r24
    294e:	90 93 a7 28 	sts	0x28A7, r25

        if (BufferIdx == XMODEM_BLOCK_SIZE) {
    2952:	80 38       	cpi	r24, 0x80	; 128
    2954:	91 05       	cpc	r25, r1
    2956:	09 f0       	breq	.+2      	; 0x295a <XModemProcessByte+0x13a>
    2958:	ad cf       	rjmp	.-166    	; 0x28b4 <XModemProcessByte+0x94>
            /* Block full */
            State = STATE_RECEIVE_PROCESS;
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	80 93 9b 28 	sts	0x289B, r24
    default:
        return false;
        break;
    }

    return true;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 cf       	rjmp	.-256    	; 0x2864 <XModemProcessByte+0x44>
    2964:	65 e1       	ldi	r22, 0x15	; 21
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e2       	ldi	r25, 0x20	; 32
    296a:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
            /* This is a retransmission */
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	80 93 9b 28 	sts	0x289B, r24
    default:
        return false;
        break;
    }

    return true;
    2974:	81 e0       	ldi	r24, 0x01	; 1
}
    2976:	cf 91       	pop	r28
    2978:	08 95       	ret
        /* Start sending on NAK */
        if (Byte == BYTE_NAK) {
            CurrentFrameNumber = FIRST_FRAME_NUMBER - 1;
            Byte = BYTE_ACK;
        } else if (Byte == BYTE_ESC) {
        	State = STATE_OFF;
    297a:	10 92 9b 28 	sts	0x289B, r1
    default:
        return false;
        break;
    }

    return true;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	9a cf       	rjmp	.-204    	; 0x28b6 <XModemProcessByte+0x96>
        break;

    case STATE_SEND_INIT:
        /* Start sending on NAK */
        if (Byte == BYTE_NAK) {
            CurrentFrameNumber = FIRST_FRAME_NUMBER - 1;
    2982:	10 92 9c 28 	sts	0x289C, r1
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
            /* Acknowledge. Proceed to next frame, get data and calc checksum */
            CurrentFrameNumber++;
    2986:	80 91 9c 28 	lds	r24, 0x289C
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	80 93 9c 28 	sts	0x289C, r24

            if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    2990:	40 91 a0 28 	lds	r20, 0x28A0
    2994:	50 91 a1 28 	lds	r21, 0x28A1
    2998:	60 91 a2 28 	lds	r22, 0x28A2
    299c:	70 91 a3 28 	lds	r23, 0x28A3
    29a0:	e0 91 a4 28 	lds	r30, 0x28A4
    29a4:	f0 91 a5 28 	lds	r31, 0x28A5
    29a8:	20 e8       	ldi	r18, 0x80	; 128
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	8c e3       	ldi	r24, 0x3C	; 60
    29ae:	99 e2       	ldi	r25, 0x29	; 41
    29b0:	09 95       	icall
    29b2:	88 23       	and	r24, r24
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <XModemProcessByte+0x198>
    29b6:	6f c0       	rjmp	.+222    	; 0x2a96 <XModemProcessByte+0x276>
    29b8:	61 e0       	ldi	r22, 0x01	; 1
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e2       	ldi	r25, 0x20	; 32
    29be:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
    29c2:	60 91 9c 28 	lds	r22, 0x289C
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e2       	ldi	r25, 0x20	; 32
    29ca:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
                TerminalSendByte(BYTE_SOH);
                TerminalSendByte(CurrentFrameNumber);
                TerminalSendByte(255 - CurrentFrameNumber);
    29ce:	60 91 9c 28 	lds	r22, 0x289C
    29d2:	60 95       	com	r22
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	90 e2       	ldi	r25, 0x20	; 32
    29d8:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
                TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    29dc:	60 e8       	ldi	r22, 0x80	; 128
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	8c e3       	ldi	r24, 0x3C	; 60
    29e2:	99 e2       	ldi	r25, 0x29	; 41
    29e4:	e2 db       	rcall	.-2108   	; 0x21aa <TerminalSendBlock>
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));
    29e6:	e1 de       	rcall	.-574    	; 0x27aa <CalcChecksum.constprop.0>
    29e8:	68 2f       	mov	r22, r24
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e2       	ldi	r25, 0x20	; 32
    29ee:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>

                BlockAddress += XMODEM_BLOCK_SIZE;
    29f2:	80 91 a0 28 	lds	r24, 0x28A0
    29f6:	90 91 a1 28 	lds	r25, 0x28A1
    29fa:	a0 91 a2 28 	lds	r26, 0x28A2
    29fe:	b0 91 a3 28 	lds	r27, 0x28A3
    2a02:	80 58       	subi	r24, 0x80	; 128
    2a04:	9f 4f       	sbci	r25, 0xFF	; 255
    2a06:	af 4f       	sbci	r26, 0xFF	; 255
    2a08:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0a:	80 93 a0 28 	sts	0x28A0, r24
    2a0e:	90 93 a1 28 	sts	0x28A1, r25
    2a12:	a0 93 a2 28 	sts	0x28A2, r26
    2a16:	b0 93 a3 28 	sts	0x28A3, r27
    default:
        return false;
        break;
    }

    return true;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	4c cf       	rjmp	.-360    	; 0x28b6 <XModemProcessByte+0x96>

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
            /* This is the expected frame. Calculate and verify checksum */

            if (CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE) == Byte) {
    2a1e:	c5 de       	rcall	.-630    	; 0x27aa <CalcChecksum.constprop.0>
    2a20:	8c 13       	cpse	r24, r28
    2a22:	a0 cf       	rjmp	.-192    	; 0x2964 <XModemProcessByte+0x144>
                /* Checksum is valid. Pass received data to callback function */
                if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    2a24:	40 91 a0 28 	lds	r20, 0x28A0
    2a28:	50 91 a1 28 	lds	r21, 0x28A1
    2a2c:	60 91 a2 28 	lds	r22, 0x28A2
    2a30:	70 91 a3 28 	lds	r23, 0x28A3
    2a34:	e0 91 a4 28 	lds	r30, 0x28A4
    2a38:	f0 91 a5 28 	lds	r31, 0x28A5
    2a3c:	20 e8       	ldi	r18, 0x80	; 128
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	8c e3       	ldi	r24, 0x3C	; 60
    2a42:	99 e2       	ldi	r25, 0x29	; 41
    2a44:	09 95       	icall
    2a46:	88 23       	and	r24, r24
    2a48:	81 f1       	breq	.+96     	; 0x2aaa <XModemProcessByte+0x28a>
                    /* Proceed to next frame and send ACK */
                    CurrentFrameNumber++;
    2a4a:	80 91 9c 28 	lds	r24, 0x289C
    2a4e:	8f 5f       	subi	r24, 0xFF	; 255
    2a50:	80 93 9c 28 	sts	0x289C, r24
                    BlockAddress += XMODEM_BLOCK_SIZE;
    2a54:	80 91 a0 28 	lds	r24, 0x28A0
    2a58:	90 91 a1 28 	lds	r25, 0x28A1
    2a5c:	a0 91 a2 28 	lds	r26, 0x28A2
    2a60:	b0 91 a3 28 	lds	r27, 0x28A3
    2a64:	80 58       	subi	r24, 0x80	; 128
    2a66:	9f 4f       	sbci	r25, 0xFF	; 255
    2a68:	af 4f       	sbci	r26, 0xFF	; 255
    2a6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6c:	80 93 a0 28 	sts	0x28A0, r24
    2a70:	90 93 a1 28 	sts	0x28A1, r25
    2a74:	a0 93 a2 28 	sts	0x28A2, r26
    2a78:	b0 93 a3 28 	sts	0x28A3, r27
    2a7c:	66 e0       	ldi	r22, 0x06	; 6
    2a7e:	73 cf       	rjmp	.-282    	; 0x2966 <XModemProcessByte+0x146>
    switch(State) {
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
            /* Next frame incoming */
            BufferIdx = 0;
    2a80:	10 92 a6 28 	sts	0x28A6, r1
    2a84:	10 92 a7 28 	sts	0x28A7, r1
            Checksum = CHECKSUM_INIT_VALUE;
    2a88:	10 92 a8 28 	sts	0x28A8, r1
            State = STATE_RECEIVE_FRAMENUM1;
    2a8c:	83 e0       	ldi	r24, 0x03	; 3
    2a8e:	80 93 9b 28 	sts	0x289B, r24
    default:
        return false;
        break;
    }

    return true;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	e7 ce       	rjmp	.-562    	; 0x2864 <XModemProcessByte+0x44>
    2a96:	64 e0       	ldi	r22, 0x04	; 4
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e2       	ldi	r25, 0x20	; 32
    2a9c:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));

                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
    2aa0:	89 e0       	ldi	r24, 0x09	; 9
    2aa2:	80 93 9b 28 	sts	0x289B, r24
    default:
        return false;
        break;
    }

    return true;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	dd ce       	rjmp	.-582    	; 0x2864 <XModemProcessByte+0x44>
    2aaa:	68 e1       	ldi	r22, 0x18	; 24
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e2       	ldi	r25, 0x20	; 32
    2ab0:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
    2ab4:	cf ce       	rjmp	.-610    	; 0x2854 <XModemProcessByte+0x34>

00002ab6 <XModemTick>:
}

void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    2ab6:	80 91 9b 28 	lds	r24, 0x289B
    2aba:	81 30       	cpi	r24, 0x01	; 1
    2abc:	99 f0       	breq	.+38     	; 0x2ae4 <XModemTick+0x2e>
    2abe:	87 30       	cpi	r24, 0x07	; 7
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <XModemTick+0xe>
    2ac2:	08 95       	ret
            RetryTimeout = RECV_INIT_TIMEOUT;
        }
        break;

    case STATE_SEND_INIT:
        if (RetryTimeout-- == 0) {
    2ac4:	80 91 9e 28 	lds	r24, 0x289E
    2ac8:	90 91 9f 28 	lds	r25, 0x289F
    2acc:	9c 01       	movw	r18, r24
    2ace:	21 50       	subi	r18, 0x01	; 1
    2ad0:	31 09       	sbc	r19, r1
    2ad2:	20 93 9e 28 	sts	0x289E, r18
    2ad6:	30 93 9f 28 	sts	0x289F, r19
    2ada:	89 2b       	or	r24, r25
    2adc:	91 f7       	brne	.-28     	; 0x2ac2 <XModemTick+0xc>
            /* Abort */
            State = STATE_OFF;
    2ade:	10 92 9b 28 	sts	0x289B, r1
    2ae2:	08 95       	ret
void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    case STATE_RECEIVE_INIT:
        if (RetryTimeout-- == 0) {
    2ae4:	80 91 9e 28 	lds	r24, 0x289E
    2ae8:	90 91 9f 28 	lds	r25, 0x289F
    2aec:	9c 01       	movw	r18, r24
    2aee:	21 50       	subi	r18, 0x01	; 1
    2af0:	31 09       	sbc	r19, r1
    2af2:	20 93 9e 28 	sts	0x289E, r18
    2af6:	30 93 9f 28 	sts	0x289F, r19
    2afa:	89 2b       	or	r24, r25
    2afc:	11 f7       	brne	.-60     	; 0x2ac2 <XModemTick+0xc>
            if (RetryCount-- > 0) {
    2afe:	80 91 9d 28 	lds	r24, 0x289D
    2b02:	98 2f       	mov	r25, r24
    2b04:	91 50       	subi	r25, 0x01	; 1
    2b06:	90 93 9d 28 	sts	0x289D, r25
    2b0a:	81 11       	cpse	r24, r1
    2b0c:	09 c0       	rjmp	.+18     	; 0x2b20 <XModemTick+0x6a>
                /* Put out communication request */
                TerminalSendChar(BYTE_NAK);
            } else {
                /* Just shut off after some time. */
                State = STATE_OFF;
    2b0e:	10 92 9b 28 	sts	0x289B, r1
            }

            RetryTimeout = RECV_INIT_TIMEOUT;
    2b12:	85 e0       	ldi	r24, 0x05	; 5
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	80 93 9e 28 	sts	0x289E, r24
    2b1a:	90 93 9f 28 	sts	0x289F, r25
    2b1e:	08 95       	ret
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    2b20:	65 e1       	ldi	r22, 0x15	; 21
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e2       	ldi	r25, 0x20	; 32
    2b26:	0e 94 bf 2b 	call	0x577e	; 0x577e <CDC_Device_SendByte>
    2b2a:	f3 cf       	rjmp	.-26     	; 0x2b12 <XModemTick+0x5c>

00002b2c <CommandLineProcessByte>:
void CommandLineInit(void)
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
    2b2c:	af 92       	push	r10
    2b2e:	bf 92       	push	r11
    2b30:	df 92       	push	r13
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	0f 93       	push	r16
    2b38:	1f 93       	push	r17
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	1f 92       	push	r1
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
  if (IS_CHARACTER(Byte)){
    2b44:	98 2f       	mov	r25, r24
    2b46:	91 54       	subi	r25, 0x41	; 65
    2b48:	9a 31       	cpi	r25, 0x1A	; 26
    2b4a:	20 f0       	brcs	.+8      	; 0x2b54 <CommandLineProcessByte+0x28>
    2b4c:	90 52       	subi	r25, 0x20	; 32
    2b4e:	9a 31       	cpi	r25, 0x1A	; 26
    2b50:	f0 f4       	brcc	.+60     	; 0x2b8e <CommandLineProcessByte+0x62>
    /* Store uppercase character */
    if (IS_LOWERCASE(Byte)) {
      Byte = TO_UPPERCASE(Byte);
    2b52:	80 52       	subi	r24, 0x20	; 32
    }

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
    2b54:	20 91 aa 28 	lds	r18, 0x28AA
    2b58:	30 91 ab 28 	lds	r19, 0x28AB
    2b5c:	2f 3f       	cpi	r18, 0xFF	; 255
    2b5e:	31 05       	cpc	r19, r1
    2b60:	50 f4       	brcc	.+20     	; 0x2b76 <CommandLineProcessByte+0x4a>
      TerminalBuffer[BufferIdx++] = Byte;
    2b62:	f9 01       	movw	r30, r18
    2b64:	e4 5c       	subi	r30, 0xC4	; 196
    2b66:	f6 4d       	sbci	r31, 0xD6	; 214
    2b68:	80 83       	st	Z, r24
    2b6a:	2f 5f       	subi	r18, 0xFF	; 255
    2b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6e:	20 93 aa 28 	sts	0x28AA, r18
    2b72:	30 93 ab 28 	sts	0x28AB, r19
  } else {
    /* Ignore other chars */
  }

  return true;
}
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	0f 90       	pop	r0
    2b7a:	df 91       	pop	r29
    2b7c:	cf 91       	pop	r28
    2b7e:	1f 91       	pop	r17
    2b80:	0f 91       	pop	r16
    2b82:	ff 90       	pop	r15
    2b84:	ef 90       	pop	r14
    2b86:	df 90       	pop	r13
    2b88:	bf 90       	pop	r11
    2b8a:	af 90       	pop	r10
    2b8c:	08 95       	ret
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
  if (IS_CHARACTER(Byte)){
    2b8e:	9f 5c       	subi	r25, 0xCF	; 207
    2b90:	9a 30       	cpi	r25, 0x0A	; 10
    2b92:	00 f3       	brcs	.-64     	; 0x2b54 <CommandLineProcessByte+0x28>
    2b94:	8f 35       	cpi	r24, 0x5F	; 95
    2b96:	f1 f2       	breq	.-68     	; 0x2b54 <CommandLineProcessByte+0x28>
    2b98:	8f 33       	cpi	r24, 0x3F	; 63
    2b9a:	e1 f2       	breq	.-72     	; 0x2b54 <CommandLineProcessByte+0x28>
    2b9c:	8d 33       	cpi	r24, 0x3D	; 61
    2b9e:	d1 f2       	breq	.-76     	; 0x2b54 <CommandLineProcessByte+0x28>

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    2ba0:	8d 30       	cpi	r24, 0x0D	; 13
    2ba2:	a9 f0       	breq	.+42     	; 0x2bce <CommandLineProcessByte+0xa2>
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    2ba4:	88 30       	cpi	r24, 0x08	; 8
    2ba6:	39 f0       	breq	.+14     	; 0x2bb6 <CommandLineProcessByte+0x8a>
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
      BufferIdx--;
    }
  } else if (Byte == 0x1B){
    2ba8:	8b 31       	cpi	r24, 0x1B	; 27
    2baa:	29 f7       	brne	.-54     	; 0x2b76 <CommandLineProcessByte+0x4a>
    /* Drop buffer on escape */
    BufferIdx = 0;
    2bac:	10 92 aa 28 	sts	0x28AA, r1
    2bb0:	10 92 ab 28 	sts	0x28AB, r1
    2bb4:	e0 cf       	rjmp	.-64     	; 0x2b76 <CommandLineProcessByte+0x4a>
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
    2bb6:	80 91 aa 28 	lds	r24, 0x28AA
    2bba:	90 91 ab 28 	lds	r25, 0x28AB
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	d1 f2       	breq	.-76     	; 0x2b76 <CommandLineProcessByte+0x4a>
      BufferIdx--;
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	80 93 aa 28 	sts	0x28AA, r24
    2bc8:	90 93 ab 28 	sts	0x28AB, r25
    2bcc:	d4 cf       	rjmp	.-88     	; 0x2b76 <CommandLineProcessByte+0x4a>
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    2bce:	e0 91 aa 28 	lds	r30, 0x28AA
    2bd2:	f0 91 ab 28 	lds	r31, 0x28AB
    2bd6:	e4 5c       	subi	r30, 0xC4	; 196
    2bd8:	f6 4d       	sbci	r31, 0xD6	; 214
    2bda:	10 82       	st	Z, r1
    BufferIdx = 0;
    2bdc:	10 92 aa 28 	sts	0x28AA, r1
    2be0:	10 92 ab 28 	sts	0x28AB, r1
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Do some sanity check first */
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    2be4:	80 91 3c 29 	lds	r24, 0x293C
    2be8:	88 23       	and	r24, r24
    2bea:	69 f1       	breq	.+90     	; 0x2c46 <CommandLineProcessByte+0x11a>
    2bec:	8f 33       	cpi	r24, 0x3F	; 63
    2bee:	59 f1       	breq	.+86     	; 0x2c46 <CommandLineProcessByte+0x11a>
    2bf0:	8d 33       	cpi	r24, 0x3D	; 61
    2bf2:	49 f1       	breq	.+82     	; 0x2c46 <CommandLineProcessByte+0x11a>
    2bf4:	ed e3       	ldi	r30, 0x3D	; 61
    2bf6:	f9 e2       	ldi	r31, 0x29	; 41
    2bf8:	04 c0       	rjmp	.+8      	; 0x2c02 <CommandLineProcessByte+0xd6>
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    2bfa:	2f 33       	cpi	r18, 0x3F	; 63
    2bfc:	31 f0       	breq	.+12     	; 0x2c0a <CommandLineProcessByte+0xde>
    2bfe:	2d 33       	cpi	r18, 0x3D	; 61
    2c00:	21 f0       	breq	.+8      	; 0x2c0a <CommandLineProcessByte+0xde>
      pCommandDelimiter++;
    2c02:	7f 01       	movw	r14, r30
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    2c04:	21 91       	ld	r18, Z+
    2c06:	21 11       	cpse	r18, r1
    2c08:	f8 cf       	rjmp	.-16     	; 0x2bfa <CommandLineProcessByte+0xce>
      pCommandDelimiter++;

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';
    2c0a:	f7 01       	movw	r30, r14
    2c0c:	10 82       	st	Z, r1
    2c0e:	00 e0       	ldi	r16, 0x00	; 0
    2c10:	10 e0       	ldi	r17, 0x00	; 0

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    2c12:	86 e1       	ldi	r24, 0x16	; 22
    2c14:	d8 2e       	mov	r13, r24
    2c16:	d0 9e       	mul	r13, r16
    2c18:	50 01       	movw	r10, r0
    2c1a:	d1 9e       	mul	r13, r17
    2c1c:	b0 0c       	add	r11, r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	81 e4       	ldi	r24, 0x41	; 65
    2c22:	96 e0       	ldi	r25, 0x06	; 6
    2c24:	a8 0e       	add	r10, r24
    2c26:	b9 1e       	adc	r11, r25
    2c28:	b5 01       	movw	r22, r10
    2c2a:	8c e3       	ldi	r24, 0x3C	; 60
    2c2c:	99 e2       	ldi	r25, 0x29	; 41
    2c2e:	29 83       	std	Y+1, r18	; 0x01
    2c30:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <strcmp_P>
    2c34:	29 81       	ldd	r18, Y+1	; 0x01
    2c36:	89 2b       	or	r24, r25
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <CommandLineProcessByte+0x110>
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <CommandLineProcessByte+0x18e>
    2c3c:	0f 5f       	subi	r16, 0xFF	; 255
    2c3e:	1f 4f       	sbci	r17, 0xFF	; 255

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
    2c40:	05 31       	cpi	r16, 0x15	; 21
    2c42:	11 05       	cpc	r17, r1
    2c44:	41 f7       	brne	.-48     	; 0x2c16 <CommandLineProcessByte+0xea>

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
    2c46:	88 ec       	ldi	r24, 0xC8	; 200
}

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
    2c48:	10 e0       	ldi	r17, 0x00	; 0
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    2c4a:	e5 e1       	ldi	r30, 0x15	; 21
    2c4c:	f8 e0       	ldi	r31, 0x08	; 8
    2c4e:	e4 91       	lpm	r30, Z
    2c50:	8e 17       	cp	r24, r30
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <CommandLineProcessByte+0x12a>
    2c54:	63 c0       	rjmp	.+198    	; 0x2d1c <CommandLineProcessByte+0x1f0>
    2c56:	e6 e3       	ldi	r30, 0x36	; 54
    2c58:	f8 e0       	ldi	r31, 0x08	; 8
    2c5a:	e4 91       	lpm	r30, Z
    2c5c:	8e 17       	cp	r24, r30
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <CommandLineProcessByte+0x136>
    2c60:	5a c0       	rjmp	.+180    	; 0x2d16 <CommandLineProcessByte+0x1ea>
    2c62:	e7 e5       	ldi	r30, 0x57	; 87
    2c64:	f8 e0       	ldi	r31, 0x08	; 8
    2c66:	e4 91       	lpm	r30, Z
    2c68:	8e 17       	cp	r24, r30
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <CommandLineProcessByte+0x142>
    2c6c:	51 c0       	rjmp	.+162    	; 0x2d10 <CommandLineProcessByte+0x1e4>
    2c6e:	e8 e7       	ldi	r30, 0x78	; 120
    2c70:	f8 e0       	ldi	r31, 0x08	; 8
    2c72:	e4 91       	lpm	r30, Z
    2c74:	8e 17       	cp	r24, r30
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <CommandLineProcessByte+0x14e>
    2c78:	48 c0       	rjmp	.+144    	; 0x2d0a <CommandLineProcessByte+0x1de>
    2c7a:	e9 e9       	ldi	r30, 0x99	; 153
    2c7c:	f8 e0       	ldi	r31, 0x08	; 8
    2c7e:	e4 91       	lpm	r30, Z
    2c80:	8e 17       	cp	r24, r30
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <CommandLineProcessByte+0x15a>
    2c84:	3f c0       	rjmp	.+126    	; 0x2d04 <CommandLineProcessByte+0x1d8>
    2c86:	ea eb       	ldi	r30, 0xBA	; 186
    2c88:	f8 e0       	ldi	r31, 0x08	; 8
    2c8a:	e4 91       	lpm	r30, Z
    2c8c:	8e 17       	cp	r24, r30
    2c8e:	79 f1       	breq	.+94     	; 0x2cee <CommandLineProcessByte+0x1c2>
            return StatusTable[i].Message;
    }

    return (void*) 0;
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }

  /* Send command status message */
  TerminalSendStringP(GetStatusMessageP(StatusId));
    2c94:	76 da       	rcall	.-2836   	; 0x2182 <TerminalSendStringP>
  TerminalSendStringP(PSTR(STATUS_MESSAGE_TRAILER));
    2c96:	8f e0       	ldi	r24, 0x0F	; 15
    2c98:	98 e0       	ldi	r25, 0x08	; 8
    2c9a:	73 da       	rcall	.-2842   	; 0x2182 <TerminalSendStringP>

  if (CommandFound && (pTerminalBuffer[0] != '\0') ) {
    2c9c:	11 23       	and	r17, r17
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <CommandLineProcessByte+0x176>
    2ca0:	6a cf       	rjmp	.-300    	; 0x2b76 <CommandLineProcessByte+0x4a>
    2ca2:	80 91 3c 29 	lds	r24, 0x293C
    2ca6:	88 23       	and	r24, r24
    2ca8:	09 f4       	brne	.+2      	; 0x2cac <CommandLineProcessByte+0x180>
    2caa:	65 cf       	rjmp	.-310    	; 0x2b76 <CommandLineProcessByte+0x4a>
    /* Send optional answer */
    TerminalSendString(pTerminalBuffer);
    2cac:	8c e3       	ldi	r24, 0x3C	; 60
    2cae:	99 e2       	ldi	r25, 0x29	; 41
    2cb0:	63 da       	rcall	.-2874   	; 0x2178 <TerminalSendString>
    TerminalSendStringP(PSTR(OPTIONAL_ANSWER_TRAILER));
    2cb2:	82 e1       	ldi	r24, 0x12	; 18
    2cb4:	98 e0       	ldi	r25, 0x08	; 8
    2cb6:	65 da       	rcall	.-2870   	; 0x2182 <TerminalSendStringP>
    2cb8:	5e cf       	rjmp	.-324    	; 0x2b76 <CommandLineProcessByte+0x4a>
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
    2cba:	10 92 3c 29 	sts	0x293C, r1
static CommandStatusIdType CallCommandFunc(
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    2cbe:	2f 33       	cpi	r18, 0x3F	; 63
    2cc0:	99 f0       	breq	.+38     	; 0x2ce8 <CommandLineProcessByte+0x1bc>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    2cc2:	2d 33       	cpi	r18, 0x3D	; 61
    2cc4:	71 f1       	breq	.+92     	; 0x2d22 <CommandLineProcessByte+0x1f6>
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    2cc6:	22 23       	and	r18, r18
    2cc8:	19 f0       	breq	.+6      	; 0x2cd0 <CommandLineProcessByte+0x1a4>
  } else {
    /* This should not happen (TM) */
  }

  /* This delimiter has not been registered with this command */
  return COMMAND_ERR_INVALID_USAGE_ID;
    2cca:	89 ec       	ldi	r24, 0xC9	; 201
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    2ccc:	11 e0       	ldi	r17, 0x01	; 1
    2cce:	bd cf       	rjmp	.-134    	; 0x2c4a <CommandLineProcessByte+0x11e>
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    CommandExecFuncType ExecFunc = pgm_read_ptr(&CommandEntry->ExecFunc);
    2cd0:	f5 01       	movw	r30, r10
    2cd2:	70 96       	adiw	r30, 0x10	; 16
    2cd4:	85 91       	lpm	r24, Z+
    2cd6:	94 91       	lpm	r25, Z
    2cd8:	fc 01       	movw	r30, r24
    if (ExecFunc != NO_FUNCTION) {
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	b1 f3       	breq	.-20     	; 0x2cca <CommandLineProcessByte+0x19e>
      return ExecFunc(pTerminalBuffer);
    2cde:	8c e3       	ldi	r24, 0x3C	; 60
    2ce0:	99 e2       	ldi	r25, 0x29	; 41
    2ce2:	09 95       	icall
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    2ce4:	11 e0       	ldi	r17, 0x01	; 1
    2ce6:	b1 cf       	rjmp	.-158    	; 0x2c4a <CommandLineProcessByte+0x11e>
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    2ce8:	f5 01       	movw	r30, r10
    2cea:	74 96       	adiw	r30, 0x14	; 20
    2cec:	f3 cf       	rjmp	.-26     	; 0x2cd4 <CommandLineProcessByte+0x1a8>
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    2cee:	25 e0       	ldi	r18, 0x05	; 5
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
            return StatusTable[i].Message;
    2cf2:	41 e2       	ldi	r20, 0x21	; 33
    2cf4:	42 9f       	mul	r20, r18
    2cf6:	c0 01       	movw	r24, r0
    2cf8:	43 9f       	mul	r20, r19
    2cfa:	90 0d       	add	r25, r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	8a 5e       	subi	r24, 0xEA	; 234
    2d00:	97 4f       	sbci	r25, 0xF7	; 247
    2d02:	c8 cf       	rjmp	.-112    	; 0x2c94 <CommandLineProcessByte+0x168>
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    2d04:	24 e0       	ldi	r18, 0x04	; 4
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	f4 cf       	rjmp	.-24     	; 0x2cf2 <CommandLineProcessByte+0x1c6>
    2d0a:	23 e0       	ldi	r18, 0x03	; 3
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	f1 cf       	rjmp	.-30     	; 0x2cf2 <CommandLineProcessByte+0x1c6>
    2d10:	22 e0       	ldi	r18, 0x02	; 2
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	ee cf       	rjmp	.-36     	; 0x2cf2 <CommandLineProcessByte+0x1c6>
    2d16:	21 e0       	ldi	r18, 0x01	; 1
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	eb cf       	rjmp	.-42     	; 0x2cf2 <CommandLineProcessByte+0x1c6>
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	e8 cf       	rjmp	.-48     	; 0x2cf2 <CommandLineProcessByte+0x1c6>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    2d22:	f5 01       	movw	r30, r10
    2d24:	72 96       	adiw	r30, 0x12	; 18
    2d26:	85 91       	lpm	r24, Z+
    2d28:	94 91       	lpm	r25, Z
    2d2a:	fc 01       	movw	r30, r24
    if (SetFunc != NO_FUNCTION) {
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	69 f2       	breq	.-102    	; 0x2cca <CommandLineProcessByte+0x19e>
      return SetFunc(pParam);
    2d30:	c7 01       	movw	r24, r14
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	09 95       	icall
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    2d36:	11 e0       	ldi	r17, 0x01	; 1
    2d38:	88 cf       	rjmp	.-240    	; 0x2c4a <CommandLineProcessByte+0x11e>

00002d3a <CommandLineTick>:

  return true;
}

void CommandLineTick(void)
{
    2d3a:	08 95       	ret

00002d3c <StartDemod>:
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    2d3c:	a0 e2       	ldi	r26, 0x20	; 32
    2d3e:	b6 e0       	ldi	r27, 0x06	; 6
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	8c 93       	st	X, r24
    2d46:	11 97       	sbiw	r26, 0x01	; 1

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    2d48:	15 96       	adiw	r26, 0x05	; 5
    2d4a:	8c 93       	st	X, r24
    2d4c:	15 97       	sbiw	r26, 0x05	; 5

static void StartDemod(void) {
    /* Activate Power for demodulator */
    CodecSetDemodPower(true);

    CodecBufferPtr = CodecBuffer;
    2d4e:	8c e3       	ldi	r24, 0x3C	; 60
    2d50:	9a e2       	ldi	r25, 0x2A	; 42
    2d52:	80 93 b8 28 	sts	0x28B8, r24
    2d56:	90 93 b9 28 	sts	0x28B9, r25
    ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    2d5a:	8c eb       	ldi	r24, 0xBC	; 188
    2d5c:	9a e2       	ldi	r25, 0x2A	; 42
    2d5e:	80 93 ba 28 	sts	0x28BA, r24
    2d62:	90 93 bb 28 	sts	0x28BB, r25
    DataRegister = 0;
    2d66:	10 92 b1 28 	sts	0x28B1, r1
    SampleRegister = 0;
    2d6a:	10 92 b0 28 	sts	0x28B0, r1
    SamplePosition = 0;
    2d6e:	10 92 ac 28 	sts	0x28AC, r1
    BitCount = 0;
    2d72:	10 92 b4 28 	sts	0x28B4, r1
    2d76:	10 92 b5 28 	sts	0x28B5, r1
    IsParityBit = false;
    2d7a:	10 92 af 28 	sts	0x28AF, r1

    /* Configure sampling-timer free running and sync to first modulation-pause. */
    CODEC_TIMER_SAMPLING.CNT = 0;
    2d7e:	e0 e4       	ldi	r30, 0x40	; 64
    2d80:	f8 e0       	ldi	r31, 0x08	; 8
    2d82:	10 a2       	std	Z+32, r1	; 0x20
    2d84:	11 a2       	std	Z+33, r1	; 0x21
    CODEC_TIMER_SAMPLING.PER = SAMPLE_RATE_SYSTEM_CYCLES - 1;
    2d86:	8d e2       	ldi	r24, 0x2D	; 45
    2d88:	91 e0       	ldi	r25, 0x01	; 1
    2d8a:	86 a3       	std	Z+38, r24	; 0x26
    2d8c:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_TIMER_SAMPLING.CCA = 0xFFFF; /* CCA Interrupt is not active! */
    2d8e:	8f ef       	ldi	r24, 0xFF	; 255
    2d90:	9f ef       	ldi	r25, 0xFF	; 255
    2d92:	80 a7       	std	Z+40, r24	; 0x28
    2d94:	91 a7       	std	Z+41, r25	; 0x29
    CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_DIV1_gc;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	80 83       	st	Z, r24
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    2d9a:	88 e8       	ldi	r24, 0x88	; 136
    2d9c:	83 83       	std	Z+3, r24	; 0x03
    CODEC_TIMER_SAMPLING.INTCTRLB = TC_CCAINTLVL_HI_gc;
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	87 83       	std	Z+7, r24	; 0x07

    /* Start looking out for modulation pause via interrupt. */
    CODEC_DEMOD_IN_PORT.INT0MASK = CODEC_DEMOD_IN_MASK0;
    2da2:	84 e0       	ldi	r24, 0x04	; 4
    2da4:	1a 96       	adiw	r26, 0x0a	; 10
    2da6:	8c 93       	st	X, r24
	SLEEP.CTRL &= ~SLEEP_SEN_bm;
}

INLINE void SystemSleepSetMode(uint8_t SleepMode)
{
	SLEEP.CTRL = (SLEEP.CTRL & ~SLEEP_SMODE_gm) | SleepMode;
    2da8:	e8 e4       	ldi	r30, 0x48	; 72
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	81 7f       	andi	r24, 0xF1	; 241
    2db0:	86 60       	ori	r24, 0x06	; 6
    2db2:	80 83       	st	Z, r24
    2db4:	08 95       	ret

00002db6 <__vector_34>:
    SystemSleepSetMode(SYSTEM_SMODE_PSAVE);
}

ISR(CODEC_DEMOD_IN_INT0_VECT) {
    2db6:	1f 92       	push	r1
    2db8:	0f 92       	push	r0
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	0f 92       	push	r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	8f 93       	push	r24
    2dc2:	9f 93       	push	r25
    2dc4:	ef 93       	push	r30
    2dc6:	ff 93       	push	r31
    2dc8:	e8 e4       	ldi	r30, 0x48	; 72
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	81 7f       	andi	r24, 0xF1	; 241
    2dd0:	80 83       	st	Z, r24
     * XYZBUF mechanism of the xmega to automatically double the sampling rate on the
     * next overflow. For this we have to temporarily deactivate the automatical alignment
     * in order to catch next overflow event for updating the BUF registers.
     * We want to sample the demodulated data stream in the first quarter of the half-bit
     * where the pulsed miller encoded is located. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_OFF_gc;
    2dd2:	e0 e4       	ldi	r30, 0x40	; 64
    2dd4:	f8 e0       	ldi	r31, 0x08	; 8
    2dd6:	13 82       	std	Z+3, r1	; 0x03
    CODEC_TIMER_SAMPLING.PERBUF = SAMPLE_RATE_SYSTEM_CYCLES/2 - 1; /* Half bit width */
    2dd8:	86 e9       	ldi	r24, 0x96	; 150
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	86 ab       	std	Z+54, r24	; 0x36
    2dde:	97 ab       	std	Z+55, r25	; 0x37
    CODEC_TIMER_SAMPLING.CCABUF = SAMPLE_RATE_SYSTEM_CYCLES/8 - 10 - 1; /* Compensate for DIGFILT and ISR prolog */
    2de0:	8a e1       	ldi	r24, 0x1A	; 26
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	80 af       	std	Z+56, r24	; 0x38
    2de6:	91 af       	std	Z+57, r25	; 0x39
    /* Setup Frame Delay Timer and wire to EVSYS. Frame delay time is
     * measured from last change in RF field, therefore we use
     * the event channel 1 (end of modulation pause) as the restart event.
     * The preliminary frame delay time chosen here is irrelevant, because
     * the correct FDT gets set automatically after demodulation. */
    CODEC_TIMER_LOADMOD.CNT = 0;
    2de8:	e0 e4       	ldi	r30, 0x40	; 64
    2dea:	f9 e0       	ldi	r31, 0x09	; 9
    2dec:	10 a2       	std	Z+32, r1	; 0x20
    2dee:	11 a2       	std	Z+33, r1	; 0x21
    CODEC_TIMER_LOADMOD.PER = 0xFFFF;
    2df0:	8f ef       	ldi	r24, 0xFF	; 255
    2df2:	9f ef       	ldi	r25, 0xFF	; 255
    2df4:	86 a3       	std	Z+38, r24	; 0x26
    2df6:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH1_gc;
    2df8:	89 e8       	ldi	r24, 0x89	; 137
    2dfa:	83 83       	std	Z+3, r24	; 0x03
    CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_EVCH6_gc;
    2dfc:	8e e0       	ldi	r24, 0x0E	; 14
    2dfe:	80 83       	st	Z, r24

    /* Disable this interrupt */
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    2e00:	e0 e2       	ldi	r30, 0x20	; 32
    2e02:	f6 e0       	ldi	r31, 0x06	; 6
    2e04:	12 86       	std	Z+10, r1	; 0x0a
}
    2e06:	ff 91       	pop	r31
    2e08:	ef 91       	pop	r30
    2e0a:	9f 91       	pop	r25
    2e0c:	8f 91       	pop	r24
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti

00002e18 <__vector_22>:

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    2e18:	1f 92       	push	r1
    2e1a:	0f 92       	push	r0
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	0f 92       	push	r0
    2e20:	11 24       	eor	r1, r1
    2e22:	2f 93       	push	r18
    2e24:	8f 93       	push	r24
    2e26:	9f 93       	push	r25
    2e28:	ef 93       	push	r30
    2e2a:	ff 93       	push	r31
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    2e2c:	90 91 28 06 	lds	r25, 0x0628
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    2e30:	80 91 b0 28 	lds	r24, 0x28B0
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
}

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    2e34:	95 70       	andi	r25, 0x05	; 5
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    2e36:	21 e0       	ldi	r18, 0x01	; 1
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <__vector_22+0x24>
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    2e3c:	88 0f       	add	r24, r24
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    2e3e:	82 2b       	or	r24, r18
    SampleRegister = NewSampleRegister;
    2e40:	80 93 b0 28 	sts	0x28B0, r24

    if (SamplePosition) {
    2e44:	90 91 ac 28 	lds	r25, 0x28AC
    2e48:	99 23       	and	r25, r25
    2e4a:	a1 f1       	breq	.+104    	; 0x2eb4 <__vector_22+0x9c>
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
    2e4c:	98 2f       	mov	r25, r24
    2e4e:	97 70       	andi	r25, 0x07	; 7
    2e50:	97 30       	cpi	r25, 0x07	; 7
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <__vector_22+0x3e>
    2e54:	42 c0       	rjmp	.+132    	; 0x2eda <__vector_22+0xc2>

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
        } else {
            /* Otherwise, we check the two sample bits from the bit before. */
            uint8_t BitSample = NewSampleRegister & 0xC;
    2e56:	98 2f       	mov	r25, r24
    2e58:	9c 70       	andi	r25, 0x0C	; 12
            uint8_t Bit = 0;

            if (BitSample != (0x0 << 2)) {
    2e5a:	61 f1       	breq	.+88     	; 0x2eb4 <__vector_22+0x9c>
                /* We have a valid bit. decode and process it. */
                if (BitSample & (0x1 << 2)) {
    2e5c:	91 e0       	ldi	r25, 0x01	; 1
    2e5e:	82 fd       	sbrc	r24, 2
    2e60:	6b c0       	rjmp	.+214    	; 0x2f38 <__vector_22+0x120>
                } else {
                    /* 10 sequence -> This is a one bit */
                    Bit = 1;
                }

                LastBit = Bit;
    2e62:	90 93 ae 28 	sts	0x28AE, r25

                if (!IsParityBit) {
    2e66:	80 91 af 28 	lds	r24, 0x28AF
    2e6a:	81 11       	cpse	r24, r1
    2e6c:	6d c0       	rjmp	.+218    	; 0x2f48 <__vector_22+0x130>
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
    2e6e:	80 91 b1 28 	lds	r24, 0x28B1
    2e72:	86 95       	lsr	r24
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    2e74:	99 23       	and	r25, r25
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <__vector_22+0x62>
    2e78:	71 c0       	rjmp	.+226    	; 0x2f5c <__vector_22+0x144>
    2e7a:	20 e8       	ldi	r18, 0x80	; 128
    2e7c:	28 2b       	or	r18, r24
                    DataRegister = NewDataRegister;
    2e7e:	20 93 b1 28 	sts	0x28B1, r18

                    /* Update bitcount */
                    uint16_t NewBitCount = ++BitCount;
    2e82:	80 91 b4 28 	lds	r24, 0x28B4
    2e86:	90 91 b5 28 	lds	r25, 0x28B5
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	80 93 b4 28 	sts	0x28B4, r24
    2e90:	90 93 b5 28 	sts	0x28B5, r25
                    if ((NewBitCount & 0x07) == 0) {
    2e94:	87 70       	andi	r24, 0x07	; 7
    2e96:	99 27       	eor	r25, r25
    2e98:	89 2b       	or	r24, r25
    2e9a:	61 f4       	brne	.+24     	; 0x2eb4 <__vector_22+0x9c>
                        /* We have reached a byte boundary! Store the data register. */
                        /* TODO: Prevent buffer overflow */
                        *CodecBufferPtr++ = NewDataRegister;
    2e9c:	e0 91 b8 28 	lds	r30, 0x28B8
    2ea0:	f0 91 b9 28 	lds	r31, 0x28B9
    2ea4:	21 93       	st	Z+, r18
    2ea6:	e0 93 b8 28 	sts	0x28B8, r30
    2eaa:	f0 93 b9 28 	sts	0x28B9, r31

                        /* Store bit for determining FDT at EOC and enable parity
                         * handling on next bit. */
                        IsParityBit = true;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	80 93 af 28 	sts	0x28AF, r24
        }
    } else {
        /* On odd sample position just sample. */
    }

    SamplePosition = !SamplePosition;
    2eb4:	80 91 ac 28 	lds	r24, 0x28AC
    2eb8:	91 e0       	ldi	r25, 0x01	; 1
    2eba:	89 27       	eor	r24, r25
    2ebc:	80 93 ac 28 	sts	0x28AC, r24

    /* Make sure the sampling timer gets automatically aligned to the
     * modulation pauses by using the RESTART event.
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    2ec0:	88 e8       	ldi	r24, 0x88	; 136
    2ec2:	80 93 43 08 	sts	0x0843, r24
}
    2ec6:	ff 91       	pop	r31
    2ec8:	ef 91       	pop	r30
    2eca:	9f 91       	pop	r25
    2ecc:	8f 91       	pop	r24
    2ece:	2f 91       	pop	r18
    2ed0:	0f 90       	pop	r0
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	0f 90       	pop	r0
    2ed6:	1f 90       	pop	r1
    2ed8:	18 95       	reti

    if (SamplePosition) {
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
            /* No carrier modulation for 3 sample points. EOC! */
            CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_OFF_gc;
    2eda:	10 92 40 08 	sts	0x0840, r1
            CODEC_TIMER_SAMPLING.INTFLAGS = TC0_CCAIF_bm;
    2ede:	80 e1       	ldi	r24, 0x10	; 16
    2ee0:	80 93 4c 08 	sts	0x084C, r24

            /* By this time, the FDT timer is aligned to the last modulation
             * edge of the reader. So we disable the auto-synchronization and
             * let it count the frame delay time in the background, and generate
             * an interrupt once it has reached the FDT. */
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;
    2ee4:	10 92 43 09 	sts	0x0943, r1

            if (LastBit) {
    2ee8:	80 91 ae 28 	lds	r24, 0x28AE
    2eec:	88 23       	and	r24, r24
    2eee:	79 f1       	breq	.+94     	; 0x2f4e <__vector_22+0x136>
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
    2ef0:	8c eb       	ldi	r24, 0xBC	; 188
    2ef2:	94 e0       	ldi	r25, 0x04	; 4
    2ef4:	80 93 66 09 	sts	0x0966, r24
    2ef8:	90 93 67 09 	sts	0x0967, r25
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
            }

            LoadModState = LOADMOD_FDT;
    2efc:	10 92 ad 28 	sts	0x28AD, r1

            CODEC_TIMER_LOADMOD.INTFLAGS = TC1_OVFIF_bm;
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	80 93 4c 09 	sts	0x094C, r24
            CODEC_TIMER_LOADMOD.INTCTRLA = TC_OVFINTLVL_HI_gc;
    2f06:	83 e0       	ldi	r24, 0x03	; 3
    2f08:	80 93 46 09 	sts	0x0946, r24

            /* Determine if we did not receive a multiple of 8 bits.
             * If this is the case, right-align the remaining data and
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
    2f0c:	80 91 b4 28 	lds	r24, 0x28B4
    2f10:	90 91 b5 28 	lds	r25, 0x28B5
    2f14:	87 70       	andi	r24, 0x07	; 7
            if (RemainingBits != 0) {
    2f16:	61 f0       	breq	.+24     	; 0x2f30 <__vector_22+0x118>
                uint8_t NewDataRegister = DataRegister;
    2f18:	90 91 b1 28 	lds	r25, 0x28B1

                while (RemainingBits++ < 8) {
    2f1c:	8f 5f       	subi	r24, 0xFF	; 255
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2f1e:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    2f20:	8f 5f       	subi	r24, 0xFF	; 255
    2f22:	89 30       	cpi	r24, 0x09	; 9
    2f24:	e1 f7       	brne	.-8      	; 0x2f1e <__vector_22+0x106>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
                }

                /* TODO: Prevent buffer overflow */
                *CodecBufferPtr = NewDataRegister;
    2f26:	e0 91 b8 28 	lds	r30, 0x28B8
    2f2a:	f0 91 b9 28 	lds	r31, 0x28B9
    2f2e:	90 83       	st	Z, r25
            }

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	80 93 b6 28 	sts	0x28B6, r24
    2f36:	be cf       	rjmp	.-132    	; 0x2eb4 <__vector_22+0x9c>
            uint8_t BitSample = NewSampleRegister & 0xC;
            uint8_t Bit = 0;

            if (BitSample != (0x0 << 2)) {
                /* We have a valid bit. decode and process it. */
                if (BitSample & (0x1 << 2)) {
    2f38:	90 e0       	ldi	r25, 0x00	; 0
                } else {
                    /* 10 sequence -> This is a one bit */
                    Bit = 1;
                }

                LastBit = Bit;
    2f3a:	90 93 ae 28 	sts	0x28AE, r25

                if (!IsParityBit) {
    2f3e:	80 91 af 28 	lds	r24, 0x28AF
    2f42:	88 23       	and	r24, r24
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <__vector_22+0x130>
    2f46:	93 cf       	rjmp	.-218    	; 0x2e6e <__vector_22+0x56>

                } else {
                    /* This is a parity bit. Store it */
                    /* TODO: Store parity and prevent overflow */
                    //*ParityBufferPtr++ = Bit;
                    IsParityBit = false;
    2f48:	10 92 af 28 	sts	0x28AF, r1
    2f4c:	b3 cf       	rjmp	.-154    	; 0x2eb4 <__vector_22+0x9c>
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;

            if (LastBit) {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
    2f4e:	8c e7       	ldi	r24, 0x7C	; 124
    2f50:	94 e0       	ldi	r25, 0x04	; 4
    2f52:	80 93 66 09 	sts	0x0966, r24
    2f56:	90 93 67 09 	sts	0x0967, r25
    2f5a:	d0 cf       	rjmp	.-96     	; 0x2efc <__vector_22+0xe4>

                if (!IsParityBit) {
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	8e cf       	rjmp	.-228    	; 0x2e7c <__vector_22+0x64>

00002f60 <__vector_83>:
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
}

ISR(CODEC_TIMER_OVF_VECT) {
    2f60:	1f 92       	push	r1
    2f62:	0f 92       	push	r0
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	0f 92       	push	r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	2f 93       	push	r18
    2f6c:	3f 93       	push	r19
    2f6e:	8f 93       	push	r24
    2f70:	9f 93       	push	r25
    2f72:	ef 93       	push	r30
    2f74:	ff 93       	push	r31
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    2f76:	80 91 ad 28 	lds	r24, 0x28AD
    2f7a:	85 30       	cpi	r24, 0x05	; 5
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <__vector_83+0x20>
    2f7e:	4d c0       	rjmp	.+154    	; 0x301a <__stack+0x1b>
    2f80:	a8 f0       	brcs	.+42     	; 0x2fac <__vector_83+0x4c>
    2f82:	88 30       	cpi	r24, 0x08	; 8
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__vector_83+0x28>
    2f86:	7c c0       	rjmp	.+248    	; 0x3080 <__stack+0x81>
    2f88:	20 f5       	brcc	.+72     	; 0x2fd2 <__vector_83+0x72>
    2f8a:	86 30       	cpi	r24, 0x06	; 6
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <__vector_83+0x30>
    2f8e:	b8 c0       	rjmp	.+368    	; 0x3100 <__stack+0x101>
    2f90:	87 30       	cpi	r24, 0x07	; 7
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <__vector_83+0x36>
    2f94:	8a c0       	rjmp	.+276    	; 0x30aa <__stack+0xab>
        break;

    default:
        break;
    }
}
    2f96:	ff 91       	pop	r31
    2f98:	ef 91       	pop	r30
    2f9a:	9f 91       	pop	r25
    2f9c:	8f 91       	pop	r24
    2f9e:	3f 91       	pop	r19
    2fa0:	2f 91       	pop	r18
    2fa2:	0f 90       	pop	r0
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	0f 90       	pop	r0
    2fa8:	1f 90       	pop	r1
    2faa:	18 95       	reti
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    2fac:	82 30       	cpi	r24, 0x02	; 2
    2fae:	71 f1       	breq	.+92     	; 0x300c <__stack+0xd>
    2fb0:	f8 f0       	brcs	.+62     	; 0x2ff0 <__vector_83+0x90>
    2fb2:	83 30       	cpi	r24, 0x03	; 3
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <__vector_83+0x58>
    2fb6:	56 c0       	rjmp	.+172    	; 0x3064 <__stack+0x65>
    2fb8:	84 30       	cpi	r24, 0x04	; 4
    2fba:	69 f7       	brne	.-38     	; 0x2f96 <__vector_83+0x36>
        /* Fetch first byte */
        DataRegister = *CodecBufferPtr;
        break;

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
    2fbc:	80 91 b1 28 	lds	r24, 0x28B1
    2fc0:	80 fd       	sbrc	r24, 0
    2fc2:	b7 c0       	rjmp	.+366    	; 0x3132 <__stack+0x133>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2fc4:	80 e4       	ldi	r24, 0x40	; 64
    2fc6:	80 93 46 06 	sts	0x0646, r24
        }

        LoadModState = LOADMOD_DATA1;
    2fca:	85 e0       	ldi	r24, 0x05	; 5
    2fcc:	80 93 ad 28 	sts	0x28AD, r24
        break;
    2fd0:	e2 cf       	rjmp	.-60     	; 0x2f96 <__vector_83+0x36>
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    2fd2:	89 30       	cpi	r24, 0x09	; 9
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <__vector_83+0x78>
    2fd6:	5b c0       	rjmp	.+182    	; 0x308e <__stack+0x8f>
    2fd8:	8a 30       	cpi	r24, 0x0A	; 10
    2fda:	e9 f6       	brne	.-70     	; 0x2f96 <__vector_83+0x36>

    case LOADMOD_FINISHED:
        /* We have written all of our bits. Deactivate the loadmod
         * timer. Also disable the bit-rate interrupt again. And
         * stop the subcarrier divider. */
        CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    2fdc:	10 92 40 09 	sts	0x0940, r1
        CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    2fe0:	10 92 46 09 	sts	0x0946, r1
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_OFF_gc;
    2fe4:	10 92 00 08 	sts	0x0800, r1

        /* Signal application that we have finished loadmod */
        Flags.LoadmodFinished = 1;
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	80 93 b7 28 	sts	0x28B7, r24
        break;
    2fee:	d3 cf       	rjmp	.-90     	; 0x2f96 <__vector_83+0x36>
ISR(CODEC_TIMER_OVF_VECT) {
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    2ff0:	88 23       	and	r24, r24
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <__vector_83+0x96>
    2ff4:	53 c0       	rjmp	.+166    	; 0x309c <__stack+0x9d>
    2ff6:	81 30       	cpi	r24, 0x01	; 1
    2ff8:	71 f6       	brne	.-100    	; 0x2f96 <__vector_83+0x36>
        break;

    case LOADMOD_START:
        /* Application produced data. With this interrupt we are aligned to the bit-grid.
         * Start subcarrier generation and align to bitrate. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_RATE_CYCLES / 2 - 1;
    2ffa:	8f e3       	ldi	r24, 0x3F	; 63
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	80 93 66 09 	sts	0x0966, r24
    3002:	90 93 67 09 	sts	0x0967, r25
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_EVCH6_gc;
    3006:	8e e0       	ldi	r24, 0x0E	; 14
    3008:	80 93 00 08 	sts	0x0800, r24

        /* Fallthrough to first bit */

    case LOADMOD_START_BIT0:
    	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    300c:	80 e4       	ldi	r24, 0x40	; 64
    300e:	80 93 45 06 	sts	0x0645, r24
        LoadModState = LOADMOD_START_BIT1;
    3012:	83 e0       	ldi	r24, 0x03	; 3
    3014:	80 93 ad 28 	sts	0x28AD, r24
        break;
    3018:	be cf       	rjmp	.-132    	; 0x2f96 <__vector_83+0x36>

        LoadModState = LOADMOD_DATA1;
        break;

    case LOADMOD_DATA1:
        Temp8 = DataRegister;
    301a:	80 91 b1 28 	lds	r24, 0x28B1

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    301e:	90 e4       	ldi	r25, 0x40	; 64
        break;

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
    3020:	80 fd       	sbrc	r24, 0
    3022:	84 c0       	rjmp	.+264    	; 0x312c <__stack+0x12d>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    3024:	90 93 45 06 	sts	0x0645, r25
        }

        DataRegister = Temp8 >> 1;
    3028:	86 95       	lsr	r24
    302a:	80 93 b1 28 	sts	0x28B1, r24

        Temp16 = BitSent;
    302e:	80 91 b2 28 	lds	r24, 0x28B2
    3032:	90 91 b3 28 	lds	r25, 0x28B3
        BitSent = ++Temp16;
    3036:	01 96       	adiw	r24, 0x01	; 1
    3038:	80 93 b2 28 	sts	0x28B2, r24
    303c:	90 93 b3 28 	sts	0x28B3, r25

        if ((Temp16 & 0x07) == 0) {
    3040:	9c 01       	movw	r18, r24
    3042:	27 70       	andi	r18, 0x07	; 7
    3044:	33 27       	eor	r19, r19
    3046:	23 2b       	or	r18, r19
    3048:	09 f4       	brne	.+2      	; 0x304c <__stack+0x4d>
    304a:	77 c0       	rjmp	.+238    	; 0x313a <__stack+0x13b>
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
            break;
        }

        if (Temp16 == BitCount) {
    304c:	20 91 b4 28 	lds	r18, 0x28B4
    3050:	30 91 b5 28 	lds	r19, 0x28B5
    3054:	82 17       	cp	r24, r18
    3056:	93 07       	cpc	r25, r19
    3058:	09 f0       	breq	.+2      	; 0x305c <__stack+0x5d>
    305a:	4e c0       	rjmp	.+156    	; 0x30f8 <__stack+0xf9>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        }

        if (BitSent == BitCount) {
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
    305c:	88 e0       	ldi	r24, 0x08	; 8
    305e:	80 93 ad 28 	sts	0x28AD, r24
    3062:	99 cf       	rjmp	.-206    	; 0x2f96 <__vector_83+0x36>
    	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        LoadModState = LOADMOD_START_BIT1;
        break;

    case LOADMOD_START_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    3064:	80 e4       	ldi	r24, 0x40	; 64
    3066:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_DATA0;
    306a:	84 e0       	ldi	r24, 0x04	; 4
    306c:	80 93 ad 28 	sts	0x28AD, r24

        /* Fetch first byte */
        DataRegister = *CodecBufferPtr;
    3070:	e0 91 b8 28 	lds	r30, 0x28B8
    3074:	f0 91 b9 28 	lds	r31, 0x28B9
    3078:	80 81       	ld	r24, Z
    307a:	80 93 b1 28 	sts	0x28B1, r24
        break;
    307e:	8b cf       	rjmp	.-234    	; 0x2f96 <__vector_83+0x36>
        }

        break;

    case LOADMOD_STOP_BIT0:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    3080:	80 e4       	ldi	r24, 0x40	; 64
    3082:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_STOP_BIT1;
    3086:	89 e0       	ldi	r24, 0x09	; 9
    3088:	80 93 ad 28 	sts	0x28AD, r24
        break;
    308c:	84 cf       	rjmp	.-248    	; 0x2f96 <__vector_83+0x36>

    case LOADMOD_STOP_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    308e:	80 e4       	ldi	r24, 0x40	; 64
    3090:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_FINISHED;
    3094:	8a e0       	ldi	r24, 0x0A	; 10
    3096:	80 93 ad 28 	sts	0x28AD, r24
        break;
    309a:	7d cf       	rjmp	.-262    	; 0x2f96 <__vector_83+0x36>
    uint16_t Temp16;

    switch (LoadModState) {
    case LOADMOD_FDT:
        /* No data has been produced, but FDT has ended. Switch over to bit-grid aligning. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_GRID_CYCLES - 1;
    309c:	8f e7       	ldi	r24, 0x7F	; 127
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	80 93 66 09 	sts	0x0966, r24
    30a4:	90 93 67 09 	sts	0x0967, r25
        break;
    30a8:	76 cf       	rjmp	.-276    	; 0x2f96 <__vector_83+0x36>

        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
    30aa:	e0 91 ba 28 	lds	r30, 0x28BA
    30ae:	f0 91 bb 28 	lds	r31, 0x28BB
    30b2:	80 81       	ld	r24, Z
    30b4:	81 11       	cpse	r24, r1
    30b6:	36 c0       	rjmp	.+108    	; 0x3124 <__stack+0x125>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    30b8:	80 e4       	ldi	r24, 0x40	; 64
    30ba:	80 93 45 06 	sts	0x0645, r24
        }

        if (BitSent == BitCount) {
    30be:	20 91 b2 28 	lds	r18, 0x28B2
    30c2:	30 91 b3 28 	lds	r19, 0x28B3
    30c6:	80 91 b4 28 	lds	r24, 0x28B4
    30ca:	90 91 b5 28 	lds	r25, 0x28B5
    30ce:	28 17       	cp	r18, r24
    30d0:	39 07       	cpc	r19, r25
    30d2:	21 f2       	breq	.-120    	; 0x305c <__stack+0x5d>
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
        } else {
            /* Fetch next data and continue sending bits. */
            ParityBufferPtr++;
    30d4:	31 96       	adiw	r30, 0x01	; 1
    30d6:	e0 93 ba 28 	sts	0x28BA, r30
    30da:	f0 93 bb 28 	sts	0x28BB, r31
            DataRegister = *++CodecBufferPtr;
    30de:	e0 91 b8 28 	lds	r30, 0x28B8
    30e2:	f0 91 b9 28 	lds	r31, 0x28B9
    30e6:	cf 01       	movw	r24, r30
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	80 93 b8 28 	sts	0x28B8, r24
    30ee:	90 93 b9 28 	sts	0x28B9, r25
    30f2:	81 81       	ldd	r24, Z+1	; 0x01
    30f4:	80 93 b1 28 	sts	0x28B1, r24
            LoadModState = LOADMOD_DATA0;
    30f8:	84 e0       	ldi	r24, 0x04	; 4
    30fa:	80 93 ad 28 	sts	0x28AD, r24
    30fe:	4b cf       	rjmp	.-362    	; 0x2f96 <__vector_83+0x36>
        LoadModState = LOADMOD_DATA0;

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
    3100:	e0 91 ba 28 	lds	r30, 0x28BA
    3104:	f0 91 bb 28 	lds	r31, 0x28BB
    3108:	80 81       	ld	r24, Z
    310a:	81 11       	cpse	r24, r1
    310c:	07 c0       	rjmp	.+14     	; 0x311c <__stack+0x11d>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    310e:	80 e4       	ldi	r24, 0x40	; 64
    3110:	80 93 46 06 	sts	0x0646, r24
        }

        LoadModState = LOADMOD_PARITY1;
    3114:	87 e0       	ldi	r24, 0x07	; 7
    3116:	80 93 ad 28 	sts	0x28AD, r24
        break;
    311a:	3d cf       	rjmp	.-390    	; 0x2f96 <__vector_83+0x36>

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    311c:	80 e4       	ldi	r24, 0x40	; 64
    311e:	80 93 45 06 	sts	0x0645, r24
    3122:	f8 cf       	rjmp	.-16     	; 0x3114 <__stack+0x115>
        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    3124:	80 e4       	ldi	r24, 0x40	; 64
    3126:	80 93 46 06 	sts	0x0646, r24
    312a:	c9 cf       	rjmp	.-110    	; 0x30be <__stack+0xbf>

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    312c:	90 93 46 06 	sts	0x0646, r25
    3130:	7b cf       	rjmp	.-266    	; 0x3028 <__stack+0x29>
        DataRegister = *CodecBufferPtr;
        break;

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    3132:	80 e4       	ldi	r24, 0x40	; 64
    3134:	80 93 45 06 	sts	0x0645, r24
    3138:	48 cf       	rjmp	.-368    	; 0x2fca <__vector_83+0x6a>
        Temp16 = BitSent;
        BitSent = ++Temp16;

        if ((Temp16 & 0x07) == 0) {
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
    313a:	86 e0       	ldi	r24, 0x06	; 6
    313c:	80 93 ad 28 	sts	0x28AD, r24
            break;
    3140:	2a cf       	rjmp	.-428    	; 0x2f96 <__vector_83+0x36>

00003142 <ISO14443ACodecInit>:
    default:
        break;
    }
}

void ISO14443ACodecInit(void) {
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
static volatile LoadModStateType LoadModState;
static volatile bool SamplePosition;

static void Initialize(void) {
    /* Configure CARRIER input pin and route it to EVSYS */
    CODEC_CARRIER_IN_PORT.DIRCLR = CODEC_CARRIER_IN_MASK;
    3146:	e0 e4       	ldi	r30, 0x40	; 64
    3148:	f6 e0       	ldi	r31, 0x06	; 6
    314a:	84 e0       	ldi	r24, 0x04	; 4
    314c:	82 83       	std	Z+2, r24	; 0x02
    CODEC_CARRIER_IN_PORT.CODEC_CARRIER_IN_PINCTRL = PORT_ISC_BOTHEDGES_gc;
    314e:	12 8a       	std	Z+18, r1	; 0x12
    EVSYS.CH6MUX = CODEC_CARRIER_IN_EVMUX;
    3150:	c0 e8       	ldi	r28, 0x80	; 128
    3152:	d1 e0       	ldi	r29, 0x01	; 1
    3154:	82 e6       	ldi	r24, 0x62	; 98
    3156:	8e 83       	std	Y+6, r24	; 0x06

    /* Configure two DEMOD pins for input.
     * Configure event channel 0 for rising edge (begin of modulation pause)
     * Configure event channel 1 for falling edge (end of modulation pause) */
    CODEC_DEMOD_IN_PORT.DIRCLR = CODEC_DEMOD_IN_MASK;
    3158:	a0 e2       	ldi	r26, 0x20	; 32
    315a:	b6 e0       	ldi	r27, 0x06	; 6
    315c:	85 e0       	ldi	r24, 0x05	; 5
    315e:	12 96       	adiw	r26, 0x02	; 2
    3160:	8c 93       	st	X, r24
    3162:	12 97       	sbiw	r26, 0x02	; 2
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL0 = PORT_ISC_RISING_gc;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	52 96       	adiw	r26, 0x12	; 18
    3168:	8c 93       	st	X, r24
    316a:	52 97       	sbiw	r26, 0x12	; 18
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL1 = PORT_ISC_FALLING_gc;
    316c:	82 e0       	ldi	r24, 0x02	; 2
    316e:	50 96       	adiw	r26, 0x10	; 16
    3170:	8c 93       	st	X, r24
    3172:	50 97       	sbiw	r26, 0x10	; 16
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    3174:	1a 96       	adiw	r26, 0x0a	; 10
    3176:	1c 92       	st	X, r1
    3178:	1a 97       	sbiw	r26, 0x0a	; 10
    CODEC_DEMOD_IN_PORT.INTCTRL = PORT_INT0LVL_HI_gc;
    317a:	83 e0       	ldi	r24, 0x03	; 3
    317c:	19 96       	adiw	r26, 0x09	; 9
    317e:	8c 93       	st	X, r24
    EVSYS.CH0MUX = CODEC_DEMOD_IN_EVMUX0;
    3180:	9a e5       	ldi	r25, 0x5A	; 90
    3182:	98 83       	st	Y, r25
    EVSYS.CH1MUX = CODEC_DEMOD_IN_EVMUX1;
    3184:	98 e5       	ldi	r25, 0x58	; 88
    3186:	99 83       	std	Y+1, r25	; 0x01

    /* Configure LOADMOD and SUBCARRIER output pins.
     * Disable PSK modulation by setting pin to low. */
    CODEC_LOADMOD_PORT.DIRSET = CODEC_LOADMOD_MASK;
    3188:	90 e4       	ldi	r25, 0x40	; 64
    318a:	91 83       	std	Z+1, r25	; 0x01
    CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    318c:	96 83       	std	Z+6, r25	; 0x06
    CODEC_SUBCARRIER_PORT.DIRSET = CODEC_SUBCARRIER_MASK;
    318e:	81 83       	std	Z+1, r24	; 0x01
    CODEC_SUBCARRIER_PORT.OUTCLR = CODEC_SUBCARRIER_MASK;
    3190:	86 83       	std	Z+6, r24	; 0x06

    /* Configure subcarrier generation with 50% DC output using OOK */
    CODEC_SUBCARRIER_TIMER.PER = ISO14443A_SUBCARRIER_DIVIDER - 1;
    3192:	e0 e0       	ldi	r30, 0x00	; 0
    3194:	f8 e0       	ldi	r31, 0x08	; 8
    3196:	8f e0       	ldi	r24, 0x0F	; 15
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	86 a3       	std	Z+38, r24	; 0x26
    319c:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_SUBCARRIER_TIMER.CODEC_SUBCARRIER_CC_OOK = ISO14443A_SUBCARRIER_DIVIDER/2;
    319e:	88 e0       	ldi	r24, 0x08	; 8
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	82 a7       	std	Z+42, r24	; 0x2a
    31a4:	93 a7       	std	Z+43, r25	; 0x2b
    CODEC_SUBCARRIER_TIMER.CTRLB = CODEC_SUBCARRIER_CCEN_OOK | TC_WGMODE_SINGLESLOPE_gc;
    31a6:	83 e2       	ldi	r24, 0x23	; 35
    31a8:	81 83       	std	Z+1, r24	; 0x01
void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
}
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28

void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
    31ae:	c6 cd       	rjmp	.-1140   	; 0x2d3c <StartDemod>

000031b0 <ISO14443ACodecTask>:
}

void ISO14443ACodecTask(void) {
    31b0:	0f 93       	push	r16
    31b2:	1f 93       	push	r17
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29
    if (Flags.DemodFinished) {
    31b8:	80 91 b6 28 	lds	r24, 0x28B6
    31bc:	88 23       	and	r24, r24
    31be:	c1 f0       	breq	.+48     	; 0x31f0 <ISO14443ACodecTask+0x40>
        Flags.DemodFinished = 0;
    31c0:	10 92 b6 28 	sts	0x28B6, r1
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    31c4:	82 e0       	ldi	r24, 0x02	; 2
    31c6:	80 93 21 06 	sts	0x0621, r24

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    } else {
        CODEC_DEMOD_POWER_PORT.OUTCLR = CODEC_DEMOD_POWER_MASK;
    31ca:	80 93 26 06 	sts	0x0626, r24
        /* Reception finished. Process the received bytes */
        CodecSetDemodPower(false);

        uint16_t DemodBitCount = BitCount;
    31ce:	00 91 b4 28 	lds	r16, 0x28B4
    31d2:	10 91 b5 28 	lds	r17, 0x28B5
        uint16_t AnswerBitCount = ISO14443A_APP_NO_RESPONSE;

        if (DemodBitCount > 0) {
    31d6:	01 15       	cp	r16, r1
    31d8:	11 05       	cpc	r17, r1
    31da:	99 f4       	brne	.+38     	; 0x3202 <ISO14443ACodecTask+0x52>
INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
}

INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
    31dc:	e0 91 f9 28 	lds	r30, 0x28F9
    31e0:	f0 91 fa 28 	lds	r31, 0x28FA
    31e4:	09 95       	icall
            CodecBufferPtr = CodecBuffer;
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
            LoadModState = LOADMOD_START;
        } else {
            /* No data to be processed. Disable loadmodding and start listening again */
            CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    31e6:	10 92 40 09 	sts	0x0940, r1
            CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    31ea:	10 92 46 09 	sts	0x0946, r1

            StartDemod();
    31ee:	a6 dd       	rcall	.-1204   	; 0x2d3c <StartDemod>
        }
    }

    if (Flags.LoadmodFinished) {
    31f0:	80 91 b7 28 	lds	r24, 0x28B7
    31f4:	81 11       	cpse	r24, r1
    31f6:	5a c0       	rjmp	.+180    	; 0x32ac <ISO14443ACodecTask+0xfc>
         * for incoming data again. */
        StartDemod();
    }

    //SystemSleep();
}
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	08 95       	ret

        uint16_t DemodBitCount = BitCount;
        uint16_t AnswerBitCount = ISO14443A_APP_NO_RESPONSE;

        if (DemodBitCount > 0) {
            LogEntry(LOG_INFO_RX_DATA, CodecBuffer, (DemodBitCount+7)/8);
    3202:	a8 01       	movw	r20, r16
    3204:	49 5f       	subi	r20, 0xF9	; 249
    3206:	5f 4f       	sbci	r21, 0xFF	; 255
    3208:	56 95       	lsr	r21
    320a:	47 95       	ror	r20
    320c:	56 95       	lsr	r21
    320e:	47 95       	ror	r20
    3210:	56 95       	lsr	r21
    3212:	47 95       	ror	r20
void LogSetModeById(LogModeEnum Mode);
bool LogSetModeByName(const char* Name);
void LogGetModeByName(char* Name, uint16_t BufferSize);
void LogGetModeList(char* List, uint16_t BufferSize);

INLINE void LogEntry(LogEntryEnum Entry, void* Data, uint8_t Length) { LogFunc(Entry, Data, Length); }
    3214:	e0 91 07 29 	lds	r30, 0x2907
    3218:	f0 91 08 29 	lds	r31, 0x2908
    321c:	6c e3       	ldi	r22, 0x3C	; 60
    321e:	7a e2       	ldi	r23, 0x2A	; 42
    3220:	80 e2       	ldi	r24, 0x20	; 32
    3222:	09 95       	icall
            LEDTrigger(LED_CODEC_RX, LED_PULSE);
    3224:	63 e1       	ldi	r22, 0x13	; 19
    3226:	86 e0       	ldi	r24, 0x06	; 6
    3228:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LEDTrigger>
INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
}

INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
    322c:	e0 91 fd 28 	lds	r30, 0x28FD
    3230:	f0 91 fe 28 	lds	r31, 0x28FE
    3234:	b8 01       	movw	r22, r16
    3236:	8c e3       	ldi	r24, 0x3C	; 60
    3238:	9a e2       	ldi	r25, 0x2A	; 42
    323a:	09 95       	icall
    323c:	8c 01       	movw	r16, r24

            /* Call application if we received data */
            AnswerBitCount = ApplicationProcess(CodecBuffer, DemodBitCount);

            if (AnswerBitCount & ISO14443A_APP_CUSTOM_PARITY) {
    323e:	94 ff       	sbrs	r25, 4
    3240:	3c c0       	rjmp	.+120    	; 0x32ba <ISO14443ACodecTask+0x10a>
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
    3242:	1f 7e       	andi	r17, 0xEF	; 239
            }
        } else {
            ApplicationReset();
        }

        if (AnswerBitCount != ISO14443A_APP_NO_RESPONSE) {
    3244:	01 15       	cp	r16, r1
    3246:	11 05       	cpc	r17, r1
    3248:	71 f2       	breq	.-100    	; 0x31e6 <ISO14443ACodecTask+0x36>
            LogEntry(LOG_INFO_TX_DATA, CodecBuffer, (AnswerBitCount + 7) / 8);
    324a:	a8 01       	movw	r20, r16
    324c:	49 5f       	subi	r20, 0xF9	; 249
    324e:	5f 4f       	sbci	r21, 0xFF	; 255
    3250:	56 95       	lsr	r21
    3252:	47 95       	ror	r20
    3254:	56 95       	lsr	r21
    3256:	47 95       	ror	r20
    3258:	56 95       	lsr	r21
    325a:	47 95       	ror	r20
    325c:	e0 91 07 29 	lds	r30, 0x2907
    3260:	f0 91 08 29 	lds	r31, 0x2908
    3264:	6c e3       	ldi	r22, 0x3C	; 60
    3266:	7a e2       	ldi	r23, 0x2A	; 42
    3268:	81 e2       	ldi	r24, 0x21	; 33
    326a:	09 95       	icall
            LEDTrigger(LED_CODEC_TX, LED_PULSE);
    326c:	63 e1       	ldi	r22, 0x13	; 19
    326e:	87 e0       	ldi	r24, 0x07	; 7
    3270:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <LEDTrigger>

            BitCount = AnswerBitCount;
    3274:	00 93 b4 28 	sts	0x28B4, r16
    3278:	10 93 b5 28 	sts	0x28B5, r17
            BitSent = 0;
    327c:	10 92 b2 28 	sts	0x28B2, r1
    3280:	10 92 b3 28 	sts	0x28B3, r1
            CodecBufferPtr = CodecBuffer;
    3284:	8c e3       	ldi	r24, 0x3C	; 60
    3286:	9a e2       	ldi	r25, 0x2A	; 42
    3288:	80 93 b8 28 	sts	0x28B8, r24
    328c:	90 93 b9 28 	sts	0x28B9, r25
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    3290:	8c eb       	ldi	r24, 0xBC	; 188
    3292:	9a e2       	ldi	r25, 0x2A	; 42
    3294:	80 93 ba 28 	sts	0x28BA, r24
    3298:	90 93 bb 28 	sts	0x28BB, r25
            LoadModState = LOADMOD_START;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	80 93 ad 28 	sts	0x28AD, r24

            StartDemod();
        }
    }

    if (Flags.LoadmodFinished) {
    32a2:	80 91 b7 28 	lds	r24, 0x28B7
    32a6:	88 23       	and	r24, r24
    32a8:	09 f4       	brne	.+2      	; 0x32ac <ISO14443ACodecTask+0xfc>
    32aa:	a6 cf       	rjmp	.-180    	; 0x31f8 <ISO14443ACodecTask+0x48>
        Flags.LoadmodFinished = 0;
    32ac:	10 92 b7 28 	sts	0x28B7, r1
         * for incoming data again. */
        StartDemod();
    }

    //SystemSleep();
}
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16

    if (Flags.LoadmodFinished) {
        Flags.LoadmodFinished = 0;
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    32b8:	41 cd       	rjmp	.-1406   	; 0x2d3c <StartDemod>
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    32ba:	96 95       	lsr	r25
    32bc:	87 95       	ror	r24
    32be:	96 95       	lsr	r25
    32c0:	87 95       	ror	r24
    32c2:	96 95       	lsr	r25
    32c4:	87 95       	ror	r24
    32c6:	00 97       	sbiw	r24, 0x00	; 0
    32c8:	09 f4       	brne	.+2      	; 0x32cc <ISO14443ACodecTask+0x11c>
    32ca:	bc cf       	rjmp	.-136    	; 0x3244 <ISO14443ACodecTask+0x94>
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
                            ODD_PARITY(CodecBuffer[i]);
    32d2:	f9 01       	movw	r30, r18
    32d4:	e4 5c       	subi	r30, 0xC4	; 196
    32d6:	f5 4d       	sbci	r31, 0xD5	; 213
    32d8:	20 81       	ld	r18, Z
    32da:	02 2e       	mov	r0, r18
    32dc:	22 95       	swap	r18
    32de:	20 25       	eor	r18, r0
    32e0:	02 2e       	mov	r0, r18
    32e2:	26 95       	lsr	r18
    32e4:	26 95       	lsr	r18
    32e6:	20 25       	eor	r18, r0
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
    32e8:	e0 58       	subi	r30, 0x80	; 128
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
                            ODD_PARITY(CodecBuffer[i]);
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	2f 5f       	subi	r18, 0xFF	; 255
    32f0:	3f 4f       	sbci	r19, 0xFF	; 255
    32f2:	21 fb       	bst	r18, 1
    32f4:	55 27       	eor	r21, r21
    32f6:	50 f9       	bld	r21, 0
    32f8:	c5 2f       	mov	r28, r21
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	d2 2f       	mov	r29, r18
    32fe:	51 e0       	ldi	r21, 0x01	; 1
    3300:	c5 27       	eor	r28, r21
    3302:	c0 83       	st	Z, r28
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    3304:	4f 5f       	subi	r20, 0xFF	; 255
    3306:	24 2f       	mov	r18, r20
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	28 17       	cp	r18, r24
    330c:	39 07       	cpc	r19, r25
    330e:	08 f3       	brcs	.-62     	; 0x32d2 <ISO14443ACodecTask+0x122>
    3310:	99 cf       	rjmp	.-206    	; 0x3244 <ISO14443ACodecTask+0x94>

00003312 <MifareUltralightAppInit>:

static uint8_t CompatWritePageAddress;

void MifareUltralightAppInit(void)
{
    State = STATE_IDLE;
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	80 93 bc 28 	sts	0x28BC, r24
    3318:	08 95       	ret

0000331a <MifareUltralightAppReset>:
}

void MifareUltralightAppReset(void)
{
    State = STATE_IDLE;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	80 93 bc 28 	sts	0x28BC, r24
    3320:	08 95       	ret

00003322 <MifareUltralightAppTask>:
}

void MifareUltralightAppTask(void)
{
    3322:	08 95       	ret

00003324 <MifareUltralightAppProcess>:

}


uint16_t MifareUltralightAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    3324:	ff 92       	push	r15
    3326:	0f 93       	push	r16
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	00 d0       	rcall	.+0      	; 0x3330 <MifareUltralightAppProcess+0xc>
    3330:	00 d0       	rcall	.+0      	; 0x3332 <MifareUltralightAppProcess+0xe>
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	8c 01       	movw	r16, r24
    uint8_t Cmd = Buffer[0];
    3338:	fc 01       	movw	r30, r24
    333a:	90 81       	ld	r25, Z

    switch(State) {
    333c:	80 91 bc 28 	lds	r24, 0x28BC
    3340:	82 30       	cpi	r24, 0x02	; 2
    3342:	09 f4       	brne	.+2      	; 0x3346 <MifareUltralightAppProcess+0x22>
    3344:	5b c0       	rjmp	.+182    	; 0x33fc <MifareUltralightAppProcess+0xd8>
    3346:	80 f4       	brcc	.+32     	; 0x3368 <MifareUltralightAppProcess+0x44>
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    3348:	96 32       	cpi	r25, 0x26	; 38
    334a:	a9 f1       	breq	.+106    	; 0x33b6 <MifareUltralightAppProcess+0x92>
    334c:	92 35       	cpi	r25, 0x52	; 82
    334e:	99 f1       	breq	.+102    	; 0x33b6 <MifareUltralightAppProcess+0x92>

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
            return true;
        } else {
            /* We have not been selected. Don't send anything. */
            *BitCount = 0;
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
}
    3354:	c9 01       	movw	r24, r18
    3356:	24 96       	adiw	r28, 0x04	; 4
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	1f 91       	pop	r17
    3362:	0f 91       	pop	r16
    3364:	ff 90       	pop	r15
    3366:	08 95       	ret

uint16_t MifareUltralightAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    uint8_t Cmd = Buffer[0];

    switch(State) {
    3368:	84 30       	cpi	r24, 0x04	; 4
    336a:	79 f1       	breq	.+94     	; 0x33ca <MifareUltralightAppProcess+0xa6>
    336c:	68 f4       	brcc	.+26     	; 0x3388 <MifareUltralightAppProcess+0x64>
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    336e:	96 32       	cpi	r25, 0x26	; 38
    3370:	11 f1       	breq	.+68     	; 0x33b6 <MifareUltralightAppProcess+0x92>
    3372:	92 35       	cpi	r25, 0x52	; 82
    3374:	01 f1       	breq	.+64     	; 0x33b6 <MifareUltralightAppProcess+0x92>

    case STATE_READY2:
        if (ISO14443AWakeUp(Buffer, &BitCount, ATQA_VALUE)) {
            State = STATE_READY1;
            return BitCount;
        } else if (Cmd == ISO14443A_CMD_SELECT_CL2) {
    3376:	95 39       	cpi	r25, 0x95	; 149
    3378:	09 f4       	brne	.+2      	; 0x337c <MifareUltralightAppProcess+0x58>
    337a:	90 c0       	rjmp	.+288    	; 0x349c <MifareUltralightAppProcess+0x178>
                Buffer[0] = NAK_INVALID_ARG;
                return NAK_FRAME_SIZE;
            }
        } else {
            /* Unknown command. Enter halt state */
            State = STATE_IDLE;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	80 93 bc 28 	sts	0x28BC, r24
        /* Unknown state? Should never happen. */
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
            }
        } else {
            /* Unknown command. Enter halt state */
            State = STATE_IDLE;
        }
    break;
    3386:	e6 cf       	rjmp	.-52     	; 0x3354 <MifareUltralightAppProcess+0x30>

uint16_t MifareUltralightAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    uint8_t Cmd = Buffer[0];

    switch(State) {
    3388:	85 30       	cpi	r24, 0x05	; 5
    338a:	11 f7       	brne	.-60     	; 0x3350 <MifareUltralightAppProcess+0x2c>
        }
    break;

    case STATE_COMPAT_WRITE:
        /* Compatibility write. Receiving 16 bytes of data of which 4 bytes are valid. */
        if (ISO14443ACheckCRCA(Buffer, BYTES_PER_COMPAT_WRITE)) {
    338c:	60 e1       	ldi	r22, 0x10	; 16
    338e:	70 e0       	ldi	r23, 0x00	; 0
    3390:	c8 01       	movw	r24, r16
    3392:	e7 d7       	rcall	.+4046   	; 0x4362 <ISO14443ACheckCRCA>
    3394:	88 23       	and	r24, r24
    3396:	09 f4       	brne	.+2      	; 0x339a <MifareUltralightAppProcess+0x76>
    3398:	6b c0       	rjmp	.+214    	; 0x3470 <MifareUltralightAppProcess+0x14c>
            /* We don't perform any checks here. You will be able to program the
            * whole memory. Also there is no OTP behaviour. */
            if (!ActiveConfiguration.ReadOnly) {
    339a:	80 91 06 29 	lds	r24, 0x2906
    339e:	88 23       	and	r24, r24
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <MifareUltralightAppProcess+0x80>
    33a2:	6f c0       	rjmp	.+222    	; 0x3482 <MifareUltralightAppProcess+0x15e>
            } else {
                /* If we are told to be read only, we silently ignore the write command
                * and pretend to have written data. */
            }

            State = STATE_ACTIVE;
    33a4:	84 e0       	ldi	r24, 0x04	; 4
    33a6:	80 93 bc 28 	sts	0x28BC, r24
            Buffer[0] = ACK_VALUE;
    33aa:	8a e0       	ldi	r24, 0x0A	; 10
    33ac:	f8 01       	movw	r30, r16
    33ae:	80 83       	st	Z, r24
            return ACK_FRAME_SIZE;
    33b0:	24 e0       	ldi	r18, 0x04	; 4
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	cf cf       	rjmp	.-98     	; 0x3354 <MifareUltralightAppProcess+0x30>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    33b6:	84 e4       	ldi	r24, 0x44	; 68
    33b8:	f8 01       	movw	r30, r16
    33ba:	80 83       	st	Z, r24
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    33bc:	11 82       	std	Z+1, r1	; 0x01
        }
        break;

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, ATQA_VALUE)) {
            State = STATE_READY1;
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	80 93 bc 28 	sts	0x28BC, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    33c4:	20 e1       	ldi	r18, 0x10	; 16
    33c6:	30 e0       	ldi	r19, 0x00	; 0
            return BitCount;
    33c8:	c5 cf       	rjmp	.-118    	; 0x3354 <MifareUltralightAppProcess+0x30>
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    33ca:	96 32       	cpi	r25, 0x26	; 38
    33cc:	a1 f3       	breq	.-24     	; 0x33b6 <MifareUltralightAppProcess+0x92>
    33ce:	92 35       	cpi	r25, 0x52	; 82
    33d0:	91 f3       	breq	.-28     	; 0x33b6 <MifareUltralightAppProcess+0x92>
        } else if (Cmd == CMD_READ) {
    33d2:	90 33       	cpi	r25, 0x30	; 48
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <MifareUltralightAppProcess+0xb4>
    33d6:	8e c0       	rjmp	.+284    	; 0x34f4 <MifareUltralightAppProcess+0x1d0>
                }
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return NAK_FRAME_SIZE;
            }
        } else if (Cmd == CMD_WRITE) {
    33d8:	92 3a       	cpi	r25, 0xA2	; 162
    33da:	09 f4       	brne	.+2      	; 0x33de <MifareUltralightAppProcess+0xba>
    33dc:	ba c0       	rjmp	.+372    	; 0x3552 <MifareUltralightAppProcess+0x22e>
                }
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return NAK_FRAME_SIZE;
            }
        } else if (Cmd == CMD_COMPAT_WRITE) {
    33de:	90 3a       	cpi	r25, 0xA0	; 160
    33e0:	09 f4       	brne	.+2      	; 0x33e4 <MifareUltralightAppProcess+0xc0>
    33e2:	d4 c0       	rjmp	.+424    	; 0x358c <MifareUltralightAppProcess+0x268>
                }
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return NAK_FRAME_SIZE;
            }
        } else if (Cmd == CMD_HALT) {
    33e4:	90 35       	cpi	r25, 0x50	; 80
    33e6:	51 f6       	brne	.-108    	; 0x337c <MifareUltralightAppProcess+0x58>
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
    33e8:	f8 01       	movw	r30, r16
    33ea:	81 81       	ldd	r24, Z+1	; 0x01
    33ec:	88 23       	and	r24, r24
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <MifareUltralightAppProcess+0xce>
    33f0:	df c0       	rjmp	.+446    	; 0x35b0 <MifareUltralightAppProcess+0x28c>
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
                    return NAK_FRAME_SIZE;
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
    33f2:	f8 01       	movw	r30, r16
    33f4:	10 82       	st	Z, r1
                return NAK_FRAME_SIZE;
    33f6:	24 e0       	ldi	r18, 0x04	; 4
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	ac cf       	rjmp	.-168    	; 0x3354 <MifareUltralightAppProcess+0x30>
    33fc:	96 32       	cpi	r25, 0x26	; 38
    33fe:	d9 f2       	breq	.-74     	; 0x33b6 <MifareUltralightAppProcess+0x92>
    3400:	92 35       	cpi	r25, 0x52	; 82
    3402:	c9 f2       	breq	.-78     	; 0x33b6 <MifareUltralightAppProcess+0x92>

    case STATE_READY1:
        if (ISO14443AWakeUp(Buffer, &BitCount, ATQA_VALUE)) {
            State = STATE_READY1;
            return BitCount;
        } else if (Cmd == ISO14443A_CMD_SELECT_CL1) {
    3404:	93 39       	cpi	r25, 0x93	; 147
    3406:	09 f0       	breq	.+2      	; 0x340a <MifareUltralightAppProcess+0xe6>
    3408:	b9 cf       	rjmp	.-142    	; 0x337c <MifareUltralightAppProcess+0x58>
            /* Load UID CL1 and perform anticollision. Since
            * MF Ultralight use a double-sized UID, the first byte
            * of CL1 has to be the cascade-tag byte. */
            uint8_t UidCL1[ISO14443A_CL_UID_SIZE] = { [0] = ISO14443A_UID0_CT };
    340a:	19 82       	std	Y+1, r1	; 0x01
    340c:	1a 82       	std	Y+2, r1	; 0x02
    340e:	1b 82       	std	Y+3, r1	; 0x03
    3410:	1c 82       	std	Y+4, r1	; 0x04
    3412:	88 e8       	ldi	r24, 0x88	; 136
    3414:	89 83       	std	Y+1, r24	; 0x01

            MemoryReadBlock(&UidCL1[1], UID_CL1_ADDRESS, UID_CL1_SIZE);
    3416:	43 e0       	ldi	r20, 0x03	; 3
    3418:	50 e0       	ldi	r21, 0x00	; 0
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	ce 01       	movw	r24, r28
    3420:	02 96       	adiw	r24, 0x02	; 2
    3422:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    3426:	f8 01       	movw	r30, r16
    3428:	81 81       	ldd	r24, Z+1	; 0x01
    342a:	80 32       	cpi	r24, 0x20	; 32
    342c:	09 f4       	brne	.+2      	; 0x3430 <MifareUltralightAppProcess+0x10c>
    342e:	81 c0       	rjmp	.+258    	; 0x3532 <MifareUltralightAppProcess+0x20e>
    3430:	80 37       	cpi	r24, 0x70	; 112
    3432:	09 f0       	breq	.+2      	; 0x3436 <MifareUltralightAppProcess+0x112>
    3434:	8d cf       	rjmp	.-230    	; 0x3350 <MifareUltralightAppProcess+0x2c>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    3436:	f8 01       	movw	r30, r16
    3438:	92 81       	ldd	r25, Z+2	; 0x02
    343a:	89 81       	ldd	r24, Y+1	; 0x01
    343c:	98 13       	cpse	r25, r24
    343e:	88 cf       	rjmp	.-240    	; 0x3350 <MifareUltralightAppProcess+0x2c>
    3440:	93 81       	ldd	r25, Z+3	; 0x03
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	98 13       	cpse	r25, r24
    3446:	84 cf       	rjmp	.-248    	; 0x3350 <MifareUltralightAppProcess+0x2c>
                (DataPtr[3] == UidCL[1]) &&
    3448:	94 81       	ldd	r25, Z+4	; 0x04
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	98 13       	cpse	r25, r24
    344e:	80 cf       	rjmp	.-256    	; 0x3350 <MifareUltralightAppProcess+0x2c>
                (DataPtr[4] == UidCL[2]) &&
    3450:	95 81       	ldd	r25, Z+5	; 0x05
    3452:	8c 81       	ldd	r24, Y+4	; 0x04
    3454:	98 13       	cpse	r25, r24
    3456:	7c cf       	rjmp	.-264    	; 0x3350 <MifareUltralightAppProcess+0x2c>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    3458:	84 e0       	ldi	r24, 0x04	; 4
    345a:	80 83       	st	Z, r24
            ISO14443AAppendCRCA(Buffer, 1);
    345c:	61 e0       	ldi	r22, 0x01	; 1
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	c8 01       	movw	r24, r16
    3462:	50 d7       	rcall	.+3744   	; 0x4304 <ISO14443AAppendCRCA>

            if (ISO14443ASelect(Buffer, &BitCount, UidCL1, SAK_CL1_VALUE)) {
                /* CL1 stage has ended successfully */
                State = STATE_READY2;
    3464:	83 e0       	ldi	r24, 0x03	; 3
    3466:	80 93 bc 28 	sts	0x28BC, r24

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
    346a:	28 e1       	ldi	r18, 0x18	; 24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	72 cf       	rjmp	.-284    	; 0x3354 <MifareUltralightAppProcess+0x30>

            State = STATE_ACTIVE;
            Buffer[0] = ACK_VALUE;
            return ACK_FRAME_SIZE;
        } else {
            State = STATE_ACTIVE;
    3470:	84 e0       	ldi	r24, 0x04	; 4
    3472:	80 93 bc 28 	sts	0x28BC, r24
            Buffer[0] = NAK_CRC_ERROR;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	f8 01       	movw	r30, r16
    347a:	80 83       	st	Z, r24
            return NAK_FRAME_SIZE;
    347c:	24 e0       	ldi	r18, 0x04	; 4
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	69 cf       	rjmp	.-302    	; 0x3354 <MifareUltralightAppProcess+0x30>
        /* Compatibility write. Receiving 16 bytes of data of which 4 bytes are valid. */
        if (ISO14443ACheckCRCA(Buffer, BYTES_PER_COMPAT_WRITE)) {
            /* We don't perform any checks here. You will be able to program the
            * whole memory. Also there is no OTP behaviour. */
            if (!ActiveConfiguration.ReadOnly) {
                MemoryWriteBlock(Buffer, CompatWritePageAddress * BYTES_PER_PAGE, BYTES_PER_WRITE);
    3482:	60 91 bd 28 	lds	r22, 0x28BD
    3486:	70 e0       	ldi	r23, 0x00	; 0
    3488:	66 0f       	add	r22, r22
    348a:	77 1f       	adc	r23, r23
    348c:	66 0f       	add	r22, r22
    348e:	77 1f       	adc	r23, r23
    3490:	44 e0       	ldi	r20, 0x04	; 4
    3492:	50 e0       	ldi	r21, 0x00	; 0
    3494:	c8 01       	movw	r24, r16
    3496:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    349a:	84 cf       	rjmp	.-248    	; 0x33a4 <MifareUltralightAppProcess+0x80>
            return BitCount;
        } else if (Cmd == ISO14443A_CMD_SELECT_CL2) {
            /* Load UID CL2 and perform anticollision */
            uint8_t UidCL2[ISO14443A_CL_UID_SIZE];

            MemoryReadBlock(UidCL2, UID_CL2_ADDRESS, UID_CL2_SIZE);
    349c:	44 e0       	ldi	r20, 0x04	; 4
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	64 e0       	ldi	r22, 0x04	; 4
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	ce 01       	movw	r24, r28
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    34ac:	f8 01       	movw	r30, r16
    34ae:	81 81       	ldd	r24, Z+1	; 0x01
    34b0:	80 32       	cpi	r24, 0x20	; 32
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <MifareUltralightAppProcess+0x192>
    34b4:	3e c0       	rjmp	.+124    	; 0x3532 <MifareUltralightAppProcess+0x20e>
    34b6:	80 37       	cpi	r24, 0x70	; 112
    34b8:	09 f0       	breq	.+2      	; 0x34bc <MifareUltralightAppProcess+0x198>
    34ba:	4a cf       	rjmp	.-364    	; 0x3350 <MifareUltralightAppProcess+0x2c>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    34bc:	f8 01       	movw	r30, r16
    34be:	92 81       	ldd	r25, Z+2	; 0x02
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	98 13       	cpse	r25, r24
    34c4:	45 cf       	rjmp	.-374    	; 0x3350 <MifareUltralightAppProcess+0x2c>
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	98 13       	cpse	r25, r24
    34cc:	41 cf       	rjmp	.-382    	; 0x3350 <MifareUltralightAppProcess+0x2c>
                (DataPtr[3] == UidCL[1]) &&
    34ce:	94 81       	ldd	r25, Z+4	; 0x04
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	98 13       	cpse	r25, r24
    34d4:	3d cf       	rjmp	.-390    	; 0x3350 <MifareUltralightAppProcess+0x2c>
                (DataPtr[4] == UidCL[2]) &&
    34d6:	95 81       	ldd	r25, Z+5	; 0x05
    34d8:	8c 81       	ldd	r24, Y+4	; 0x04
    34da:	98 13       	cpse	r25, r24
    34dc:	39 cf       	rjmp	.-398    	; 0x3350 <MifareUltralightAppProcess+0x2c>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    34de:	10 82       	st	Z, r1
            ISO14443AAppendCRCA(Buffer, 1);
    34e0:	61 e0       	ldi	r22, 0x01	; 1
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	c8 01       	movw	r24, r16
    34e6:	0e d7       	rcall	.+3612   	; 0x4304 <ISO14443AAppendCRCA>

            if (ISO14443ASelect(Buffer, &BitCount, UidCL2, SAK_CL2_VALUE)) {
                /* CL2 stage has ended successfully. This means
                * our complete UID has been sent to the reader. */
                State = STATE_ACTIVE;
    34e8:	84 e0       	ldi	r24, 0x04	; 4
    34ea:	80 93 bc 28 	sts	0x28BC, r24

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
    34ee:	28 e1       	ldi	r18, 0x18	; 24
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	30 cf       	rjmp	.-416    	; 0x3354 <MifareUltralightAppProcess+0x30>
    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, ATQA_VALUE)) {
            State = STATE_READY1;
            return BitCount;
        } else if (Cmd == CMD_READ) {
            uint8_t PageAddress = Buffer[1];
    34f4:	f8 01       	movw	r30, r16
    34f6:	f1 80       	ldd	r15, Z+1	; 0x01

            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
    34f8:	62 e0       	ldi	r22, 0x02	; 2
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	c8 01       	movw	r24, r16
    34fe:	31 d7       	rcall	.+3682   	; 0x4362 <ISO14443ACheckCRCA>
    3500:	88 23       	and	r24, r24
    3502:	09 f4       	brne	.+2      	; 0x3506 <MifareUltralightAppProcess+0x1e2>
    3504:	b8 cf       	rjmp	.-144    	; 0x3476 <MifareUltralightAppProcess+0x152>
                if (   (PageAddress >= PAGE_READ_MIN)
    3506:	ff e0       	ldi	r31, 0x0F	; 15
    3508:	ff 15       	cp	r31, r15
    350a:	08 f4       	brcc	.+2      	; 0x350e <MifareUltralightAppProcess+0x1ea>
    350c:	72 cf       	rjmp	.-284    	; 0x33f2 <MifareUltralightAppProcess+0xce>
                    && (PageAddress <= PAGE_READ_MAX) ) {
                    /* TODO: Missing address wrap around behaviour.
                    * Implement using a for-loop copying 4 bytes each iteration
                    * and mask pageaddress */
                    MemoryReadBlock(Buffer, PageAddress * BYTES_PER_PAGE, BYTES_PER_READ);
    350e:	6f 2d       	mov	r22, r15
    3510:	70 e0       	ldi	r23, 0x00	; 0
    3512:	66 0f       	add	r22, r22
    3514:	77 1f       	adc	r23, r23
    3516:	66 0f       	add	r22, r22
    3518:	77 1f       	adc	r23, r23
    351a:	40 e1       	ldi	r20, 0x10	; 16
    351c:	50 e0       	ldi	r21, 0x00	; 0
    351e:	c8 01       	movw	r24, r16
    3520:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
                    ISO14443AAppendCRCA(Buffer, BYTES_PER_READ);
    3524:	60 e1       	ldi	r22, 0x10	; 16
    3526:	70 e0       	ldi	r23, 0x00	; 0
    3528:	c8 01       	movw	r24, r16
    352a:	ec d6       	rcall	.+3544   	; 0x4304 <ISO14443AAppendCRCA>
                    return (BYTES_PER_READ + ISO14443A_CRCA_SIZE) * 8;
    352c:	20 e9       	ldi	r18, 0x90	; 144
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	11 cf       	rjmp	.-478    	; 0x3354 <MifareUltralightAppProcess+0x30>

    switch (NVB) {
    case ISO14443A_NVB_AC_START:
        /* Start of anticollision procedure.
        * Send whole UID CLn + BCC */
        DataPtr[0] = UidCL[0];
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	f8 01       	movw	r30, r16
    3536:	80 83       	st	Z, r24
        DataPtr[1] = UidCL[1];
    3538:	3a 81       	ldd	r19, Y+2	; 0x02
    353a:	31 83       	std	Z+1, r19	; 0x01
        DataPtr[2] = UidCL[2];
    353c:	2b 81       	ldd	r18, Y+3	; 0x03
    353e:	22 83       	std	Z+2, r18	; 0x02
        DataPtr[3] = UidCL[3];
    3540:	9c 81       	ldd	r25, Y+4	; 0x04
    3542:	93 83       	std	Z+3, r25	; 0x03
        DataPtr[4] = ISO14443A_CALC_BCC(DataPtr);
    3544:	83 27       	eor	r24, r19
    3546:	82 27       	eor	r24, r18
    3548:	89 27       	eor	r24, r25
    354a:	84 83       	std	Z+4, r24	; 0x04

        *BitCount = ISO14443A_CL_FRAME_SIZE;
    354c:	28 e2       	ldi	r18, 0x28	; 40
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	01 cf       	rjmp	.-510    	; 0x3354 <MifareUltralightAppProcess+0x30>
                return NAK_FRAME_SIZE;
            }
        } else if (Cmd == CMD_WRITE) {
            /* This is a write command containing 4 bytes of data that
            * should be written to the given page address. */
            uint8_t PageAddress = Buffer[1];
    3552:	f8 01       	movw	r30, r16
    3554:	f1 80       	ldd	r15, Z+1	; 0x01
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
    3556:	66 e0       	ldi	r22, 0x06	; 6
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	c8 01       	movw	r24, r16
    355c:	02 d7       	rcall	.+3588   	; 0x4362 <ISO14443ACheckCRCA>
    355e:	88 23       	and	r24, r24
    3560:	09 f4       	brne	.+2      	; 0x3564 <MifareUltralightAppProcess+0x240>
    3562:	89 cf       	rjmp	.-238    	; 0x3476 <MifareUltralightAppProcess+0x152>
                /* CRC check passed */
                if (   (PageAddress >= PAGE_WRITE_MIN)
                    && (PageAddress <= PAGE_WRITE_MAX) ) {
    3564:	8f 2d       	mov	r24, r15
    3566:	82 50       	subi	r24, 0x02	; 2
            /* This is a write command containing 4 bytes of data that
            * should be written to the given page address. */
            uint8_t PageAddress = Buffer[1];
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
                /* CRC check passed */
                if (   (PageAddress >= PAGE_WRITE_MIN)
    3568:	8e 30       	cpi	r24, 0x0E	; 14
    356a:	08 f0       	brcs	.+2      	; 0x356e <MifareUltralightAppProcess+0x24a>
    356c:	42 cf       	rjmp	.-380    	; 0x33f2 <MifareUltralightAppProcess+0xce>
                    && (PageAddress <= PAGE_WRITE_MAX) ) {
                    /* PageAddress is within bounds. */

                    if (!ActiveConfiguration.ReadOnly) {
    356e:	80 91 06 29 	lds	r24, 0x2906
    3572:	81 11       	cpse	r24, r1
    3574:	1a cf       	rjmp	.-460    	; 0x33aa <MifareUltralightAppProcess+0x86>
                        MemoryWriteBlock(&Buffer[2], PageAddress * BYTES_PER_PAGE, BYTES_PER_WRITE);
    3576:	f4 e0       	ldi	r31, 0x04	; 4
    3578:	ff 9e       	mul	r15, r31
    357a:	b0 01       	movw	r22, r0
    357c:	11 24       	eor	r1, r1
    357e:	44 e0       	ldi	r20, 0x04	; 4
    3580:	50 e0       	ldi	r21, 0x00	; 0
    3582:	c8 01       	movw	r24, r16
    3584:	02 96       	adiw	r24, 0x02	; 2
    3586:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    358a:	0f cf       	rjmp	.-482    	; 0x33aa <MifareUltralightAppProcess+0x86>
            }
        } else if (Cmd == CMD_COMPAT_WRITE) {
            /* The Mifare compatbility write command is a 2-frame command.
            * The first frame contains the page-address and the second frame
            * holds the data. */
            uint8_t PageAddress = Buffer[1];
    358c:	f8 01       	movw	r30, r16
    358e:	f1 80       	ldd	r15, Z+1	; 0x01

            if (ISO14443ACheckCRCA(Buffer, CMD_COMPAT_WRITE_FRAME_SIZE)) {
    3590:	62 e0       	ldi	r22, 0x02	; 2
    3592:	70 e0       	ldi	r23, 0x00	; 0
    3594:	c8 01       	movw	r24, r16
    3596:	e5 d6       	rcall	.+3530   	; 0x4362 <ISO14443ACheckCRCA>
    3598:	88 23       	and	r24, r24
    359a:	09 f4       	brne	.+2      	; 0x359e <MifareUltralightAppProcess+0x27a>
    359c:	6c cf       	rjmp	.-296    	; 0x3476 <MifareUltralightAppProcess+0x152>
                if (   (PageAddress >= PAGE_WRITE_MIN)
                    && (PageAddress <= PAGE_WRITE_MAX) ) {
    359e:	8f 2d       	mov	r24, r15
    35a0:	82 50       	subi	r24, 0x02	; 2
            * The first frame contains the page-address and the second frame
            * holds the data. */
            uint8_t PageAddress = Buffer[1];

            if (ISO14443ACheckCRCA(Buffer, CMD_COMPAT_WRITE_FRAME_SIZE)) {
                if (   (PageAddress >= PAGE_WRITE_MIN)
    35a2:	8e 30       	cpi	r24, 0x0E	; 14
    35a4:	08 f0       	brcs	.+2      	; 0x35a8 <MifareUltralightAppProcess+0x284>
    35a6:	25 cf       	rjmp	.-438    	; 0x33f2 <MifareUltralightAppProcess+0xce>
                    && (PageAddress <= PAGE_WRITE_MAX) ) {
                    /* CRC check passed and page-address is within bounds.
                    * Store address and proceed to receiving the data. */
                    CompatWritePageAddress = PageAddress;
    35a8:	f0 92 bd 28 	sts	0x28BD, r15
                    State = STATE_COMPAT_WRITE;
    35ac:	85 e0       	ldi	r24, 0x05	; 5
    35ae:	fb ce       	rjmp	.-522    	; 0x33a6 <MifareUltralightAppProcess+0x82>
            }
        } else if (Cmd == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, 2)) {
    35b0:	62 e0       	ldi	r22, 0x02	; 2
    35b2:	70 e0       	ldi	r23, 0x00	; 0
    35b4:	c8 01       	movw	r24, r16
    35b6:	d5 d6       	rcall	.+3498   	; 0x4362 <ISO14443ACheckCRCA>
    35b8:	88 23       	and	r24, r24
    35ba:	09 f4       	brne	.+2      	; 0x35be <MifareUltralightAppProcess+0x29a>
    35bc:	5c cf       	rjmp	.-328    	; 0x3476 <MifareUltralightAppProcess+0x152>
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
    35be:	10 92 bc 28 	sts	0x28BC, r1
                    return ISO14443A_APP_NO_RESPONSE;
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	c6 ce       	rjmp	.-628    	; 0x3354 <MifareUltralightAppProcess+0x30>

000035c8 <MifareUltralightGetUid>:
    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
}

void MifareUltralightGetUid(ConfigurationUidType Uid)
{
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	ec 01       	movw	r28, r24
    /* Read UID from memory */
    MemoryReadBlock(&Uid[0], UID_CL1_ADDRESS, UID_CL1_SIZE);
    35ce:	43 e0       	ldi	r20, 0x03	; 3
    35d0:	50 e0       	ldi	r21, 0x00	; 0
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
    MemoryReadBlock(&Uid[UID_CL1_SIZE], UID_CL2_ADDRESS, UID_CL2_SIZE);
    35da:	44 e0       	ldi	r20, 0x04	; 4
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	64 e0       	ldi	r22, 0x04	; 4
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	ce 01       	movw	r24, r28
    35e4:	03 96       	adiw	r24, 0x03	; 3
}
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28

void MifareUltralightGetUid(ConfigurationUidType Uid)
{
    /* Read UID from memory */
    MemoryReadBlock(&Uid[0], UID_CL1_ADDRESS, UID_CL1_SIZE);
    MemoryReadBlock(&Uid[UID_CL1_SIZE], UID_CL2_ADDRESS, UID_CL2_SIZE);
    35ea:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <MemoryReadBlock>

000035ee <MifareUltralightSetUid>:
}

void MifareUltralightSetUid(ConfigurationUidType Uid)
{
    35ee:	0f 93       	push	r16
    35f0:	1f 93       	push	r17
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	00 d0       	rcall	.+0      	; 0x35f8 <MifareUltralightSetUid+0xa>
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	8c 01       	movw	r16, r24
    /* Calculate check bytes and write everything into memory */
    uint8_t BCC1 = ISO14443A_UID0_CT ^ Uid[0] ^ Uid[1] ^ Uid[2];
    35fe:	fc 01       	movw	r30, r24
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	89 27       	eor	r24, r25
    3606:	98 e8       	ldi	r25, 0x88	; 136
    3608:	89 27       	eor	r24, r25
    360a:	92 81       	ldd	r25, Z+2	; 0x02
    360c:	89 27       	eor	r24, r25
    360e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t BCC2 = Uid[3] ^ Uid[4] ^ Uid[5] ^ Uid[6];
    3610:	84 81       	ldd	r24, Z+4	; 0x04
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	89 27       	eor	r24, r25
    3616:	95 81       	ldd	r25, Z+5	; 0x05
    3618:	89 27       	eor	r24, r25
    361a:	96 81       	ldd	r25, Z+6	; 0x06
    361c:	89 27       	eor	r24, r25
    361e:	89 83       	std	Y+1, r24	; 0x01

    MemoryWriteBlock(&Uid[0], UID_CL1_ADDRESS, UID_CL1_SIZE);
    3620:	43 e0       	ldi	r20, 0x03	; 3
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	60 e0       	ldi	r22, 0x00	; 0
    3626:	70 e0       	ldi	r23, 0x00	; 0
    3628:	c8 01       	movw	r24, r16
    362a:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    MemoryWriteBlock(&BCC1, UID_BCC1_ADDRESS, ISO14443A_CL_BCC_SIZE);
    362e:	41 e0       	ldi	r20, 0x01	; 1
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	63 e0       	ldi	r22, 0x03	; 3
    3634:	70 e0       	ldi	r23, 0x00	; 0
    3636:	ce 01       	movw	r24, r28
    3638:	02 96       	adiw	r24, 0x02	; 2
    363a:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    MemoryWriteBlock(&Uid[UID_CL1_SIZE], UID_CL2_ADDRESS, UID_CL2_SIZE);
    363e:	44 e0       	ldi	r20, 0x04	; 4
    3640:	50 e0       	ldi	r21, 0x00	; 0
    3642:	64 e0       	ldi	r22, 0x04	; 4
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	c8 01       	movw	r24, r16
    3648:	03 96       	adiw	r24, 0x03	; 3
    364a:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    MemoryWriteBlock(&BCC2, UID_BCC2_ADDRESS, ISO14443A_CL_BCC_SIZE);
    364e:	41 e0       	ldi	r20, 0x01	; 1
    3650:	50 e0       	ldi	r21, 0x00	; 0
    3652:	68 e0       	ldi	r22, 0x08	; 8
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	ce 01       	movw	r24, r28
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
}
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	08 95       	ret

0000366c <MifareClassicAppInit1K>:
    Block[11] = Block[3];
}

void MifareClassicAppInit1K(void)
{
    State = STATE_IDLE;
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	80 93 be 28 	sts	0x28BE, r24
    CardATQAValue = MFCLASSIC_1K_ATQA_VALUE;
    3672:	84 e0       	ldi	r24, 0x04	; 4
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	80 93 bf 28 	sts	0x28BF, r24
    367a:	90 93 c0 28 	sts	0x28C0, r25
    CardSAKValue = MFCLASSIC_1K_SAK_CL1_VALUE;
    367e:	88 e0       	ldi	r24, 0x08	; 8
    3680:	80 93 c1 28 	sts	0x28C1, r24
	_7BUID = 0x00;
    3684:	10 92 c2 28 	sts	0x28C2, r1
    3688:	08 95       	ret

0000368a <MifarePlus1kAppInit_7B>:
}

void MifarePlus1kAppInit_7B(void)
{
	State = STATE_IDLE;
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	80 93 be 28 	sts	0x28BE, r24
	CardATQAValue = MFPlus_ATQA_VALUE;
    3690:	84 e4       	ldi	r24, 0x44	; 68
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	80 93 bf 28 	sts	0x28BF, r24
    3698:	90 93 c0 28 	sts	0x28C0, r25
	CardSAKValue = MFCLASSIC_1K_SAK_CL1_VALUE;
    369c:	88 e0       	ldi	r24, 0x08	; 8
    369e:	80 93 c1 28 	sts	0x28C1, r24
	uint8_t UidSize = ActiveConfiguration.UidSize;
	_7BUID = (UidSize == 7);
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	90 91 05 29 	lds	r25, 0x2905
    36a8:	97 30       	cpi	r25, 0x07	; 7
    36aa:	09 f0       	breq	.+2      	; 0x36ae <MifarePlus1kAppInit_7B+0x24>
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	80 93 c2 28 	sts	0x28C2, r24
    36b2:	08 95       	ret

000036b4 <MifareClassicAppInit4K>:
}

void MifareClassicAppInit4K(void)
{
    State = STATE_IDLE;
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	80 93 be 28 	sts	0x28BE, r24
    CardATQAValue = MFCLASSIC_4K_ATQA_VALUE;
    36ba:	82 e0       	ldi	r24, 0x02	; 2
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	80 93 bf 28 	sts	0x28BF, r24
    36c2:	90 93 c0 28 	sts	0x28C0, r25
    CardSAKValue = MFCLASSIC_4K_SAK_CL1_VALUE;
    36c6:	88 e1       	ldi	r24, 0x18	; 24
    36c8:	80 93 c1 28 	sts	0x28C1, r24
	_7BUID = 0x00;
    36cc:	10 92 c2 28 	sts	0x28C2, r1
    36d0:	08 95       	ret

000036d2 <MifareClassicAppReset>:
}

void MifareClassicAppReset(void)
{
    State = STATE_IDLE;
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	80 93 be 28 	sts	0x28BE, r24
    36d8:	08 95       	ret

000036da <MifareClassicAppTask>:
}

void MifareClassicAppTask(void)
{
    36da:	08 95       	ret

000036dc <MifareClassicAppProcess>:

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    36dc:	6f 92       	push	r6
    36de:	7f 92       	push	r7
    36e0:	8f 92       	push	r8
    36e2:	9f 92       	push	r9
    36e4:	af 92       	push	r10
    36e6:	bf 92       	push	r11
    36e8:	cf 92       	push	r12
    36ea:	df 92       	push	r13
    36ec:	ef 92       	push	r14
    36ee:	ff 92       	push	r15
    36f0:	0f 93       	push	r16
    36f2:	1f 93       	push	r17
    36f4:	cf 93       	push	r28
    36f6:	df 93       	push	r29
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	2e 97       	sbiw	r28, 0x0e	; 14
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	8c 01       	movw	r16, r24
    switch(State) {
    3704:	80 91 be 28 	lds	r24, 0x28BE
    3708:	85 30       	cpi	r24, 0x05	; 5
    370a:	09 f4       	brne	.+2      	; 0x370e <MifareClassicAppProcess+0x32>
    370c:	d1 c0       	rjmp	.+418    	; 0x38b0 <MifareClassicAppProcess+0x1d4>
    370e:	f8 f0       	brcs	.+62     	; 0x374e <MifareClassicAppProcess+0x72>
    3710:	88 30       	cpi	r24, 0x08	; 8
    3712:	09 f4       	brne	.+2      	; 0x3716 <MifareClassicAppProcess+0x3a>
    3714:	1b c1       	rjmp	.+566    	; 0x394c <MifareClassicAppProcess+0x270>
    3716:	b8 f5       	brcc	.+110    	; 0x3786 <MifareClassicAppProcess+0xaa>
    3718:	86 30       	cpi	r24, 0x06	; 6
    371a:	09 f4       	brne	.+2      	; 0x371e <MifareClassicAppProcess+0x42>
    371c:	f5 c1       	rjmp	.+1002   	; 0x3b08 <MifareClassicAppProcess+0x42c>
    371e:	87 30       	cpi	r24, 0x07	; 7
    3720:	09 f4       	brne	.+2      	; 0x3724 <MifareClassicAppProcess+0x48>
    3722:	c9 c1       	rjmp	.+914    	; 0x3ab6 <MifareClassicAppProcess+0x3da>

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
            return true;
        } else {
            /* We have not been selected. Don't send anything. */
            *BitCount = 0;
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
}
    3728:	c9 01       	movw	r24, r18
    372a:	2e 96       	adiw	r28, 0x0e	; 14
    372c:	cd bf       	out	0x3d, r28	; 61
    372e:	de bf       	out	0x3e, r29	; 62
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	1f 91       	pop	r17
    3736:	0f 91       	pop	r16
    3738:	ff 90       	pop	r15
    373a:	ef 90       	pop	r14
    373c:	df 90       	pop	r13
    373e:	cf 90       	pop	r12
    3740:	bf 90       	pop	r11
    3742:	af 90       	pop	r10
    3744:	9f 90       	pop	r9
    3746:	8f 90       	pop	r8
    3748:	7f 90       	pop	r7
    374a:	6f 90       	pop	r6
    374c:	08 95       	ret

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    374e:	82 30       	cpi	r24, 0x02	; 2
    3750:	09 f4       	brne	.+2      	; 0x3754 <MifareClassicAppProcess+0x78>
    3752:	e1 c0       	rjmp	.+450    	; 0x3916 <MifareClassicAppProcess+0x23a>
    3754:	08 f0       	brcs	.+2      	; 0x3758 <MifareClassicAppProcess+0x7c>
    3756:	5a c0       	rjmp	.+180    	; 0x380c <MifareClassicAppProcess+0x130>
    case STATE_IDLE:
    case STATE_HALT:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    3758:	20 91 bf 28 	lds	r18, 0x28BF
    375c:	90 91 c0 28 	lds	r25, 0x28C0
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    3760:	d8 01       	movw	r26, r16
    3762:	8c 91       	ld	r24, X
    3764:	86 32       	cpi	r24, 0x26	; 38
    3766:	09 f4       	brne	.+2      	; 0x376a <MifareClassicAppProcess+0x8e>
    3768:	ae c0       	rjmp	.+348    	; 0x38c6 <MifareClassicAppProcess+0x1ea>
    376a:	82 35       	cpi	r24, 0x52	; 82
    376c:	09 f4       	brne	.+2      	; 0x3770 <MifareClassicAppProcess+0x94>
    376e:	ab c0       	rjmp	.+342    	; 0x38c6 <MifareClassicAppProcess+0x1ea>
            State = STATE_READY1;
            return BitCount;
        }
#ifdef SUPPORT_MF_CLASSIC_MAGIC_MODE
        else if (Buffer[0] == CMD_CHINESE_UNLOCK) {
    3770:	80 34       	cpi	r24, 0x40	; 64
    3772:	c1 f6       	brne	.-80     	; 0x3724 <MifareClassicAppProcess+0x48>
            State = STATE_CHINESE_IDLE;
    3774:	82 e0       	ldi	r24, 0x02	; 2
    3776:	80 93 be 28 	sts	0x28BE, r24
            Buffer[0] = ACK_VALUE;
    377a:	8a e0       	ldi	r24, 0x0A	; 10
    377c:	d8 01       	movw	r26, r16
    377e:	8c 93       	st	X, r24
            return ACK_NAK_FRAME_SIZE;
    3780:	24 e0       	ldi	r18, 0x04	; 4
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	d1 cf       	rjmp	.-94     	; 0x3728 <MifareClassicAppProcess+0x4c>

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    3786:	89 30       	cpi	r24, 0x09	; 9
    3788:	09 f4       	brne	.+2      	; 0x378c <MifareClassicAppProcess+0xb0>
    378a:	a6 c0       	rjmp	.+332    	; 0x38d8 <MifareClassicAppProcess+0x1fc>
    378c:	8d 30       	cpi	r24, 0x0D	; 13
    378e:	50 f6       	brcc	.-108    	; 0x3724 <MifareClassicAppProcess+0x48>
         * decrypt the data and check CRC. Read data from the requested block
         * address into the global block buffer and check for integrity. Then
         * add or subtract according to issued command if necessary and store
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    3790:	d8 01       	movw	r26, r16
    3792:	fc 90       	ld	r15, X
    3794:	0e 94 33 24 	call	0x4866	; 0x4866 <Crypto1Byte>
    3798:	8f 25       	eor	r24, r15
    379a:	f8 01       	movw	r30, r16
    379c:	80 83       	st	Z, r24
    379e:	f1 80       	ldd	r15, Z+1	; 0x01
    37a0:	0e 94 33 24 	call	0x4866	; 0x4866 <Crypto1Byte>
    37a4:	8f 25       	eor	r24, r15
    37a6:	d8 01       	movw	r26, r16
    37a8:	11 96       	adiw	r26, 0x01	; 1
    37aa:	8c 93       	st	X, r24
    37ac:	11 97       	sbiw	r26, 0x01	; 1
    37ae:	12 96       	adiw	r26, 0x02	; 2
    37b0:	fc 90       	ld	r15, X
    37b2:	0e 94 33 24 	call	0x4866	; 0x4866 <Crypto1Byte>
    37b6:	8f 25       	eor	r24, r15
    37b8:	f8 01       	movw	r30, r16
    37ba:	82 83       	std	Z+2, r24	; 0x02
    37bc:	f3 80       	ldd	r15, Z+3	; 0x03
    37be:	0e 94 33 24 	call	0x4866	; 0x4866 <Crypto1Byte>
    37c2:	8f 25       	eor	r24, r15
    37c4:	d8 01       	movw	r26, r16
    37c6:	13 96       	adiw	r26, 0x03	; 3
    37c8:	8c 93       	st	X, r24
    37ca:	13 97       	sbiw	r26, 0x03	; 3
    37cc:	14 96       	adiw	r26, 0x04	; 4
    37ce:	fc 90       	ld	r15, X
    37d0:	0e 94 33 24 	call	0x4866	; 0x4866 <Crypto1Byte>
    37d4:	8f 25       	eor	r24, r15
    37d6:	f8 01       	movw	r30, r16
    37d8:	84 83       	std	Z+4, r24	; 0x04
    37da:	f5 80       	ldd	r15, Z+5	; 0x05
    37dc:	0e 94 33 24 	call	0x4866	; 0x4866 <Crypto1Byte>
    37e0:	8f 25       	eor	r24, r15
    37e2:	d8 01       	movw	r26, r16
    37e4:	15 96       	adiw	r26, 0x05	; 5
    37e6:	8c 93       	st	X, r24

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
    37e8:	64 e0       	ldi	r22, 0x04	; 4
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	c8 01       	movw	r24, r16
    37ee:	b9 d5       	rcall	.+2930   	; 0x4362 <ISO14443ACheckCRCA>
    37f0:	81 11       	cpse	r24, r1
    37f2:	99 c2       	rjmp	.+1330   	; 0x3d26 <MifareClassicAppProcess+0x64a>
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
            }
        } else {
            /* CRC Error. */
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    37f4:	0e 94 74 24 	call	0x48e8	; 0x48e8 <Crypto1Nibble>
    37f8:	91 e0       	ldi	r25, 0x01	; 1
    37fa:	98 27       	eor	r25, r24
    37fc:	f8 01       	movw	r30, r16
    37fe:	90 83       	st	Z, r25
        }

        State = STATE_AUTHED_IDLE;
    3800:	88 e0       	ldi	r24, 0x08	; 8
    3802:	80 93 be 28 	sts	0x28BE, r24
        return ACK_NAK_FRAME_SIZE;
    3806:	24 e0       	ldi	r18, 0x04	; 4
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	8e cf       	rjmp	.-228    	; 0x3728 <MifareClassicAppProcess+0x4c>

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    380c:	83 30       	cpi	r24, 0x03	; 3
    380e:	09 f4       	brne	.+2      	; 0x3812 <MifareClassicAppProcess+0x136>
    3810:	42 c1       	rjmp	.+644    	; 0x3a96 <MifareClassicAppProcess+0x3ba>
    3812:	84 30       	cpi	r24, 0x04	; 4
    3814:	09 f0       	breq	.+2      	; 0x3818 <MifareClassicAppProcess+0x13c>
    3816:	86 cf       	rjmp	.-244    	; 0x3724 <MifareClassicAppProcess+0x48>

        return ACK_NAK_FRAME_SIZE;
#endif

    case STATE_READY1:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    3818:	20 91 bf 28 	lds	r18, 0x28BF
    381c:	90 91 c0 28 	lds	r25, 0x28C0
    3820:	d8 01       	movw	r26, r16
    3822:	8c 91       	ld	r24, X
    3824:	86 32       	cpi	r24, 0x26	; 38
    3826:	09 f4       	brne	.+2      	; 0x382a <MifareClassicAppProcess+0x14e>
    3828:	4e c0       	rjmp	.+156    	; 0x38c6 <MifareClassicAppProcess+0x1ea>
    382a:	82 35       	cpi	r24, 0x52	; 82
    382c:	09 f4       	brne	.+2      	; 0x3830 <MifareClassicAppProcess+0x154>
    382e:	4b c0       	rjmp	.+150    	; 0x38c6 <MifareClassicAppProcess+0x1ea>
            State = STATE_READY1;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
    3830:	83 39       	cpi	r24, 0x93	; 147
    3832:	09 f0       	breq	.+2      	; 0x3836 <MifareClassicAppProcess+0x15a>
    3834:	95 c1       	rjmp	.+810    	; 0x3b60 <MifareClassicAppProcess+0x484>
            /* Load UID CL1 and perform anticollision */
            uint8_t UidCL1[ISO14443A_CL_UID_SIZE];
			
            if (_7BUID) {
    3836:	80 91 c2 28 	lds	r24, 0x28C2
    383a:	88 23       	and	r24, r24
    383c:	09 f4       	brne	.+2      	; 0x3840 <MifareClassicAppProcess+0x164>
    383e:	34 c3       	rjmp	.+1640   	; 0x3ea8 <MifareClassicAppProcess+0x7cc>
	            MemoryReadBlock(&UidCL1[1], MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE-1);
    3840:	43 e0       	ldi	r20, 0x03	; 3
    3842:	50 e0       	ldi	r21, 0x00	; 0
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	70 e0       	ldi	r23, 0x00	; 0
    3848:	ce 01       	movw	r24, r28
    384a:	02 96       	adiw	r24, 0x02	; 2
    384c:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
	            UidCL1[0] = ISO14443A_UID0_CT;
    3850:	88 e8       	ldi	r24, 0x88	; 136
    3852:	89 83       	std	Y+1, r24	; 0x01
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    3854:	d8 01       	movw	r26, r16
    3856:	11 96       	adiw	r26, 0x01	; 1
    3858:	9c 91       	ld	r25, X
    385a:	90 32       	cpi	r25, 0x20	; 32
    385c:	09 f4       	brne	.+2      	; 0x3860 <MifareClassicAppProcess+0x184>
    385e:	c2 c4       	rjmp	.+2436   	; 0x41e4 <MifareClassicAppProcess+0xb08>
    3860:	90 37       	cpi	r25, 0x70	; 112
    3862:	09 f0       	breq	.+2      	; 0x3866 <MifareClassicAppProcess+0x18a>
    3864:	5f cf       	rjmp	.-322    	; 0x3724 <MifareClassicAppProcess+0x48>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    3866:	d8 01       	movw	r26, r16
    3868:	12 96       	adiw	r26, 0x02	; 2
    386a:	8c 91       	ld	r24, X
    386c:	12 97       	sbiw	r26, 0x02	; 2
    386e:	88 38       	cpi	r24, 0x88	; 136
    3870:	09 f0       	breq	.+2      	; 0x3874 <MifareClassicAppProcess+0x198>
    3872:	58 cf       	rjmp	.-336    	; 0x3724 <MifareClassicAppProcess+0x48>
    3874:	13 96       	adiw	r26, 0x03	; 3
    3876:	9c 91       	ld	r25, X
    3878:	13 97       	sbiw	r26, 0x03	; 3
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	98 13       	cpse	r25, r24
    387e:	52 cf       	rjmp	.-348    	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[3] == UidCL[1]) &&
    3880:	14 96       	adiw	r26, 0x04	; 4
    3882:	9c 91       	ld	r25, X
    3884:	14 97       	sbiw	r26, 0x04	; 4
    3886:	8b 81       	ldd	r24, Y+3	; 0x03
    3888:	98 13       	cpse	r25, r24
    388a:	4c cf       	rjmp	.-360    	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[4] == UidCL[2]) &&
    388c:	15 96       	adiw	r26, 0x05	; 5
    388e:	9c 91       	ld	r25, X
    3890:	15 97       	sbiw	r26, 0x05	; 5
    3892:	8c 81       	ldd	r24, Y+4	; 0x04
    3894:	98 13       	cpse	r25, r24
    3896:	46 cf       	rjmp	.-372    	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    3898:	84 e0       	ldi	r24, 0x04	; 4
    389a:	8c 93       	st	X, r24
            ISO14443AAppendCRCA(Buffer, 1);
    389c:	61 e0       	ldi	r22, 0x01	; 1
    389e:	70 e0       	ldi	r23, 0x00	; 0
    38a0:	c8 01       	movw	r24, r16
    38a2:	30 d5       	rcall	.+2656   	; 0x4304 <ISO14443AAppendCRCA>
	            if (ISO14443ASelect(Buffer, &BitCount, UidCL1, SAK_CL1_VALUE))
	            State = STATE_READY2;
    38a4:	85 e0       	ldi	r24, 0x05	; 5
    38a6:	80 93 be 28 	sts	0x28BE, r24

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
    38aa:	28 e1       	ldi	r18, 0x18	; 24
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	3c cf       	rjmp	.-392    	; 0x3728 <MifareClassicAppProcess+0x4c>
            State = STATE_HALT;
        }
        break;

    case STATE_READY2:
    if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    38b0:	20 91 bf 28 	lds	r18, 0x28BF
    38b4:	90 91 c0 28 	lds	r25, 0x28C0
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    38b8:	d8 01       	movw	r26, r16
    38ba:	8c 91       	ld	r24, X
    38bc:	86 32       	cpi	r24, 0x26	; 38
    38be:	19 f0       	breq	.+6      	; 0x38c6 <MifareClassicAppProcess+0x1ea>
    38c0:	82 35       	cpi	r24, 0x52	; 82
    38c2:	09 f0       	breq	.+2      	; 0x38c6 <MifareClassicAppProcess+0x1ea>
    38c4:	4a c1       	rjmp	.+660    	; 0x3b5a <MifareClassicAppProcess+0x47e>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    38c6:	f8 01       	movw	r30, r16
    38c8:	20 83       	st	Z, r18
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    38ca:	91 83       	std	Z+1, r25	; 0x01
	    State = STATE_READY1;
    38cc:	84 e0       	ldi	r24, 0x04	; 4
    38ce:	80 93 be 28 	sts	0x28BE, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    38d2:	20 e1       	ldi	r18, 0x10	; 16
    38d4:	30 e0       	ldi	r19, 0x00	; 0
	    return BitCount;
    38d6:	28 cf       	rjmp	.-432    	; 0x3728 <MifareClassicAppProcess+0x4c>
    38d8:	78 01       	movw	r14, r16

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    38da:	d1 2c       	mov	r13, r1
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    38dc:	d7 01       	movw	r26, r14
    38de:	cc 90       	ld	r12, X
    38e0:	c2 d7       	rcall	.+3972   	; 0x4866 <Crypto1Byte>
    38e2:	8c 25       	eor	r24, r12
    38e4:	f7 01       	movw	r30, r14
    38e6:	81 93       	st	Z+, r24
    38e8:	7f 01       	movw	r14, r30
         * sending the data to be written. Decrypt the data first and
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
    38ea:	d3 94       	inc	r13
    38ec:	f2 e1       	ldi	r31, 0x12	; 18
    38ee:	df 12       	cpse	r13, r31
    38f0:	f5 cf       	rjmp	.-22     	; 0x38dc <MifareClassicAppProcess+0x200>
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
    38f2:	60 e1       	ldi	r22, 0x10	; 16
    38f4:	70 e0       	ldi	r23, 0x00	; 0
    38f6:	c8 01       	movw	r24, r16
    38f8:	34 d5       	rcall	.+2664   	; 0x4362 <ISO14443ACheckCRCA>
    38fa:	88 23       	and	r24, r24
    38fc:	09 f4       	brne	.+2      	; 0x3900 <MifareClassicAppProcess+0x224>
    38fe:	7a cf       	rjmp	.-268    	; 0x37f4 <MifareClassicAppProcess+0x118>
            if (!ActiveConfiguration.ReadOnly) {
    3900:	80 91 06 29 	lds	r24, 0x2906
    3904:	88 23       	and	r24, r24
    3906:	09 f4       	brne	.+2      	; 0x390a <MifareClassicAppProcess+0x22e>
    3908:	3e c1       	rjmp	.+636    	; 0x3b86 <MifareClassicAppProcess+0x4aa>
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
            } else {
                /* Silently ignore in ReadOnly mode */
            }

            Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    390a:	ee d7       	rcall	.+4060   	; 0x48e8 <Crypto1Nibble>
    390c:	9a e0       	ldi	r25, 0x0A	; 10
    390e:	98 27       	eor	r25, r24
    3910:	d8 01       	movw	r26, r16
    3912:	9c 93       	st	X, r25
    3914:	75 cf       	rjmp	.-278    	; 0x3800 <MifareClassicAppProcess+0x124>
        break;

#ifdef SUPPORT_MF_CLASSIC_MAGIC_MODE
    case STATE_CHINESE_IDLE:
        /* Support special china commands that dont require authentication. */
        if (Buffer[0] == CMD_CHINESE_UNLOCK_RW) {
    3916:	f8 01       	movw	r30, r16
    3918:	80 81       	ld	r24, Z
    391a:	83 34       	cpi	r24, 0x43	; 67
    391c:	09 f4       	brne	.+2      	; 0x3920 <MifareClassicAppProcess+0x244>
    391e:	6d c1       	rjmp	.+730    	; 0x3bfa <MifareClassicAppProcess+0x51e>
            /* Unlock read and write commands */
            Buffer[0] = ACK_VALUE;
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_CHINESE_WIPE) {
    3920:	81 34       	cpi	r24, 0x41	; 65
    3922:	09 f4       	brne	.+2      	; 0x3926 <MifareClassicAppProcess+0x24a>
    3924:	2b c1       	rjmp	.+598    	; 0x3b7c <MifareClassicAppProcess+0x4a0>
            /* Wipe memory */
            Buffer[0] = ACK_VALUE;
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_READ) {
    3926:	80 33       	cpi	r24, 0x30	; 48
    3928:	09 f4       	brne	.+2      	; 0x392c <MifareClassicAppProcess+0x250>
    392a:	34 c4       	rjmp	.+2152   	; 0x4194 <MifareClassicAppProcess+0xab8>
                        * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
    392c:	80 3a       	cpi	r24, 0xA0	; 160
    392e:	09 f4       	brne	.+2      	; 0x3932 <MifareClassicAppProcess+0x256>
    3930:	56 c1       	rjmp	.+684    	; 0x3bde <MifareClassicAppProcess+0x502>
                return ACK_NAK_FRAME_SIZE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_HALT) {
    3932:	80 35       	cpi	r24, 0x50	; 80
    3934:	09 f0       	breq	.+2      	; 0x3938 <MifareClassicAppProcess+0x25c>
    3936:	f6 ce       	rjmp	.-532    	; 0x3724 <MifareClassicAppProcess+0x48>
            State = STATE_READY1;
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
    3938:	f8 01       	movw	r30, r16
    393a:	81 81       	ldd	r24, Z+1	; 0x01
    393c:	88 23       	and	r24, r24
    393e:	09 f4       	brne	.+2      	; 0x3942 <MifareClassicAppProcess+0x266>
    3940:	1d c4       	rjmp	.+2106   	; 0x417c <MifareClassicAppProcess+0xaa0>
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
                    return ACK_NAK_FRAME_SIZE;
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
    3942:	f8 01       	movw	r30, r16
    3944:	10 82       	st	Z, r1
                return ACK_NAK_FRAME_SIZE;
    3946:	24 e0       	ldi	r18, 0x04	; 4
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	ee ce       	rjmp	.-548    	; 0x3728 <MifareClassicAppProcess+0x4c>

    case STATE_AUTHED_IDLE:
        /* In this state, all communication is encrypted. Thus we first have to encrypt
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();
    394c:	d8 01       	movw	r26, r16
    394e:	dc 90       	ld	r13, X
    3950:	8a d7       	rcall	.+3860   	; 0x4866 <Crypto1Byte>
    3952:	8d 25       	eor	r24, r13
    3954:	f8 01       	movw	r30, r16
    3956:	80 83       	st	Z, r24
    3958:	d1 80       	ldd	r13, Z+1	; 0x01
    395a:	85 d7       	rcall	.+3850   	; 0x4866 <Crypto1Byte>
    395c:	8d 25       	eor	r24, r13
    395e:	d8 01       	movw	r26, r16
    3960:	11 96       	adiw	r26, 0x01	; 1
    3962:	8c 93       	st	X, r24
    3964:	11 97       	sbiw	r26, 0x01	; 1
    3966:	12 96       	adiw	r26, 0x02	; 2
    3968:	dc 90       	ld	r13, X
    396a:	7d d7       	rcall	.+3834   	; 0x4866 <Crypto1Byte>
    396c:	8d 25       	eor	r24, r13
    396e:	f8 01       	movw	r30, r16
    3970:	82 83       	std	Z+2, r24	; 0x02
    3972:	d3 80       	ldd	r13, Z+3	; 0x03
    3974:	78 d7       	rcall	.+3824   	; 0x4866 <Crypto1Byte>
    3976:	8d 25       	eor	r24, r13
    3978:	d8 01       	movw	r26, r16
    397a:	13 96       	adiw	r26, 0x03	; 3
    397c:	8c 93       	st	X, r24
    397e:	13 97       	sbiw	r26, 0x03	; 3

        if (Buffer[0] == CMD_READ) {
    3980:	8c 91       	ld	r24, X
    3982:	80 33       	cpi	r24, 0x30	; 48
    3984:	09 f4       	brne	.+2      	; 0x3988 <MifareClassicAppProcess+0x2ac>
    3986:	fd c1       	rjmp	.+1018   	; 0x3d82 <MifareClassicAppProcess+0x6a6>
                        * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
    3988:	80 3a       	cpi	r24, 0xA0	; 160
    398a:	09 f4       	brne	.+2      	; 0x398e <MifareClassicAppProcess+0x2b2>
    398c:	6f c2       	rjmp	.+1246   	; 0x3e6c <MifareClassicAppProcess+0x790>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
    398e:	80 3c       	cpi	r24, 0xC0	; 192
    3990:	09 f4       	brne	.+2      	; 0x3994 <MifareClassicAppProcess+0x2b8>
    3992:	af c2       	rjmp	.+1374   	; 0x3ef2 <MifareClassicAppProcess+0x816>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
    3994:	81 3c       	cpi	r24, 0xC1	; 193
    3996:	09 f4       	brne	.+2      	; 0x399a <MifareClassicAppProcess+0x2be>
    3998:	46 c3       	rjmp	.+1676   	; 0x4026 <MifareClassicAppProcess+0x94a>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
    399a:	82 3c       	cpi	r24, 0xC2	; 194
    399c:	09 f4       	brne	.+2      	; 0x39a0 <MifareClassicAppProcess+0x2c4>
    399e:	09 c1       	rjmp	.+530    	; 0x3bb2 <MifareClassicAppProcess+0x4d6>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
    39a0:	80 3b       	cpi	r24, 0xB0	; 176
    39a2:	09 f4       	brne	.+2      	; 0x39a6 <MifareClassicAppProcess+0x2ca>
    39a4:	57 c3       	rjmp	.+1710   	; 0x4054 <MifareClassicAppProcess+0x978>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
    39a6:	80 56       	subi	r24, 0x60	; 96
    39a8:	82 30       	cpi	r24, 0x02	; 2
    39aa:	08 f0       	brcs	.+2      	; 0x39ae <MifareClassicAppProcess+0x2d2>
    39ac:	a7 c0       	rjmp	.+334    	; 0x3afc <MifareClassicAppProcess+0x420>
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    39ae:	62 e0       	ldi	r22, 0x02	; 2
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	c8 01       	movw	r24, r16
    39b4:	d6 d4       	rcall	.+2476   	; 0x4362 <ISO14443ACheckCRCA>
    39b6:	88 23       	and	r24, r24
    39b8:	09 f4       	brne	.+2      	; 0x39bc <MifareClassicAppProcess+0x2e0>
    39ba:	cf c1       	rjmp	.+926    	; 0x3d5a <MifareClassicAppProcess+0x67e>
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    39bc:	f8 01       	movw	r30, r16
    39be:	81 81       	ldd	r24, Z+1	; 0x01
    39c0:	8c 73       	andi	r24, 0x3C	; 60
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    39c2:	90 81       	ld	r25, Z
    39c4:	90 36       	cpi	r25, 0x60	; 96
    39c6:	09 f4       	brne	.+2      	; 0x39ca <MifareClassicAppProcess+0x2ee>
    39c8:	47 c4       	rjmp	.+2190   	; 0x4258 <MifareClassicAppProcess+0xb7c>
    39ca:	6a e3       	ldi	r22, 0x3A	; 58
    39cc:	70 e0       	ldi	r23, 0x00	; 0
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    39ce:	5b 01       	movw	r10, r22
    39d0:	f0 e1       	ldi	r31, 0x10	; 16
    39d2:	8f 9f       	mul	r24, r31
    39d4:	a0 0c       	add	r10, r0
    39d6:	b1 1c       	adc	r11, r1
    39d8:	11 24       	eor	r1, r1
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    39da:	6e 01       	movw	r12, r28
    39dc:	37 e0       	ldi	r19, 0x07	; 7
    39de:	c3 0e       	add	r12, r19
    39e0:	d1 1c       	adc	r13, r1
    39e2:	64 e0       	ldi	r22, 0x04	; 4
    39e4:	c6 01       	movw	r24, r12
    39e6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <RandomGetBuffer>
                if (_7BUID)
    39ea:	80 91 c2 28 	lds	r24, 0x28C2
					MemoryReadBlock(Uid, MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
    39ee:	7e 01       	movw	r14, r28
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
                if (_7BUID)
    39f0:	88 23       	and	r24, r24
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <MifareClassicAppProcess+0x31a>
    39f4:	15 c4       	rjmp	.+2090   	; 0x4220 <MifareClassicAppProcess+0xb44>
					MemoryReadBlock(Uid, MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
    39f6:	8b e0       	ldi	r24, 0x0B	; 11
    39f8:	e8 0e       	add	r14, r24
    39fa:	f1 1c       	adc	r15, r1
    39fc:	44 e0       	ldi	r20, 0x04	; 4
    39fe:	50 e0       	ldi	r21, 0x00	; 0
    3a00:	63 e0       	ldi	r22, 0x03	; 3
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	c7 01       	movw	r24, r14
    3a06:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
                else
					MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    3a0a:	46 e0       	ldi	r20, 0x06	; 6
    3a0c:	50 e0       	ldi	r21, 0x00	; 0
    3a0e:	b5 01       	movw	r22, r10
    3a10:	ce 01       	movw	r24, r28
    3a12:	01 96       	adiw	r24, 0x01	; 1
    3a14:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];
    3a18:	8f 81       	ldd	r24, Y+7	; 0x07
    3a1a:	80 93 c4 28 	sts	0x28C4, r24
    3a1e:	88 85       	ldd	r24, Y+8	; 0x08
    3a20:	80 93 c5 28 	sts	0x28C5, r24
    3a24:	89 85       	ldd	r24, Y+9	; 0x09
    3a26:	80 93 c6 28 	sts	0x28C6, r24
    3a2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a2c:	80 93 c7 28 	sts	0x28C7, r24

                Crypto1PRNG(ReaderResponse, 64);
    3a30:	60 e4       	ldi	r22, 0x40	; 64
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	84 ec       	ldi	r24, 0xC4	; 196
    3a36:	98 e2       	ldi	r25, 0x28	; 40
    3a38:	7b d7       	rcall	.+3830   	; 0x4930 <Crypto1PRNG>

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];
    3a3a:	80 91 c4 28 	lds	r24, 0x28C4
    3a3e:	80 93 c8 28 	sts	0x28C8, r24
    3a42:	80 91 c5 28 	lds	r24, 0x28C5
    3a46:	80 93 c9 28 	sts	0x28C9, r24
    3a4a:	80 91 c6 28 	lds	r24, 0x28C6
    3a4e:	80 93 ca 28 	sts	0x28CA, r24
    3a52:	80 91 c7 28 	lds	r24, 0x28C7
    3a56:	80 93 cb 28 	sts	0x28CB, r24

                Crypto1PRNG(CardResponse, 32);
    3a5a:	60 e2       	ldi	r22, 0x20	; 32
    3a5c:	70 e0       	ldi	r23, 0x00	; 0
    3a5e:	88 ec       	ldi	r24, 0xC8	; 200
    3a60:	98 e2       	ldi	r25, 0x28	; 40
    3a62:	66 d7       	rcall	.+3788   	; 0x4930 <Crypto1PRNG>

                /* Setup crypto1 cipher. */
                Crypto1Setup(Key, Uid, CardNonce);
    3a64:	a6 01       	movw	r20, r12
    3a66:	b7 01       	movw	r22, r14
    3a68:	ce 01       	movw	r24, r28
    3a6a:	01 96       	adiw	r24, 0x01	; 1
    3a6c:	33 d5       	rcall	.+2662   	; 0x44d4 <Crypto1Setup>

                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];
    3a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a70:	d8 01       	movw	r26, r16
    3a72:	8c 93       	st	X, r24
    3a74:	88 85       	ldd	r24, Y+8	; 0x08
    3a76:	11 96       	adiw	r26, 0x01	; 1
    3a78:	8c 93       	st	X, r24
    3a7a:	11 97       	sbiw	r26, 0x01	; 1
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	12 96       	adiw	r26, 0x02	; 2
    3a80:	8c 93       	st	X, r24
    3a82:	12 97       	sbiw	r26, 0x02	; 2
    3a84:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a86:	13 96       	adiw	r26, 0x03	; 3
    3a88:	8c 93       	st	X, r24

                /* Respond with the encrypted random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    3a8a:	87 e0       	ldi	r24, 0x07	; 7
    3a8c:	80 93 be 28 	sts	0x28BE, r24

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    3a90:	20 e2       	ldi	r18, 0x20	; 32
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	49 ce       	rjmp	.-878    	; 0x3728 <MifareClassicAppProcess+0x4c>
            }
        }
        break;

    case STATE_CHINESE_WRITE:
        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
    3a96:	60 e1       	ldi	r22, 0x10	; 16
    3a98:	70 e0       	ldi	r23, 0x00	; 0
    3a9a:	c8 01       	movw	r24, r16
    3a9c:	62 d4       	rcall	.+2244   	; 0x4362 <ISO14443ACheckCRCA>
    3a9e:	88 23       	and	r24, r24
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <MifareClassicAppProcess+0x3c8>
    3aa2:	63 c0       	rjmp	.+198    	; 0x3b6a <MifareClassicAppProcess+0x48e>
            /* CRC check passed. Write data into memory and send ACK. */
            if (!ActiveConfiguration.ReadOnly) {
    3aa4:	80 91 06 29 	lds	r24, 0x2906
    3aa8:	88 23       	and	r24, r24
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <MifareClassicAppProcess+0x3d2>
    3aac:	5e c1       	rjmp	.+700    	; 0x3d6a <MifareClassicAppProcess+0x68e>
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
            }

            Buffer[0] = ACK_VALUE;
    3aae:	8a e0       	ldi	r24, 0x0A	; 10
    3ab0:	d8 01       	movw	r26, r16
    3ab2:	8c 93       	st	X, r24
    3ab4:	5d c0       	rjmp	.+186    	; 0x3b70 <MifareClassicAppProcess+0x494>

    case STATE_AUTHING:
        /* Reader delivers an encrypted nonce. We use it
        * to setup the crypto1 LFSR in nonlinear feedback mode.
        * Furthermore it delivers an encrypted answer. Decrypt and check it */
        Crypto1Auth(&Buffer[0]);
    3ab6:	c8 01       	movw	r24, r16
    3ab8:	ad d6       	rcall	.+3418   	; 0x4814 <Crypto1Auth>

        for (uint8_t i=0; i<4; i++)
            Buffer[i+4] ^= Crypto1Byte();
    3aba:	f8 01       	movw	r30, r16
    3abc:	f4 80       	ldd	r15, Z+4	; 0x04
    3abe:	d3 d6       	rcall	.+3494   	; 0x4866 <Crypto1Byte>
    3ac0:	8f 25       	eor	r24, r15
    3ac2:	d8 01       	movw	r26, r16
    3ac4:	14 96       	adiw	r26, 0x04	; 4
    3ac6:	8c 93       	st	X, r24
    3ac8:	14 97       	sbiw	r26, 0x04	; 4
    3aca:	15 96       	adiw	r26, 0x05	; 5
    3acc:	fc 90       	ld	r15, X
    3ace:	cb d6       	rcall	.+3478   	; 0x4866 <Crypto1Byte>
    3ad0:	8f 25       	eor	r24, r15
    3ad2:	f8 01       	movw	r30, r16
    3ad4:	85 83       	std	Z+5, r24	; 0x05
    3ad6:	f6 80       	ldd	r15, Z+6	; 0x06
    3ad8:	c6 d6       	rcall	.+3468   	; 0x4866 <Crypto1Byte>
    3ada:	8f 25       	eor	r24, r15
    3adc:	d8 01       	movw	r26, r16
    3ade:	16 96       	adiw	r26, 0x06	; 6
    3ae0:	8c 93       	st	X, r24
    3ae2:	16 97       	sbiw	r26, 0x06	; 6
    3ae4:	17 96       	adiw	r26, 0x07	; 7
    3ae6:	fc 90       	ld	r15, X
    3ae8:	be d6       	rcall	.+3452   	; 0x4866 <Crypto1Byte>
    3aea:	8f 25       	eor	r24, r15
    3aec:	f8 01       	movw	r30, r16
    3aee:	87 83       	std	Z+7, r24	; 0x07

        if ((Buffer[4] == ReaderResponse[0]) &&
    3af0:	24 81       	ldd	r18, Z+4	; 0x04
    3af2:	90 91 c4 28 	lds	r25, 0x28C4
    3af6:	29 17       	cp	r18, r25
    3af8:	09 f4       	brne	.+2      	; 0x3afc <MifareClassicAppProcess+0x420>
    3afa:	84 c0       	rjmp	.+264    	; 0x3c04 <MifareClassicAppProcess+0x528>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	80 93 be 28 	sts	0x28BE, r24
        /* Unknown state? Should never happen. */
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
        }

        break;
    3b06:	10 ce       	rjmp	.-992    	; 0x3728 <MifareClassicAppProcess+0x4c>
	    State = STATE_HALT;
    }
    break;

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    3b08:	20 91 bf 28 	lds	r18, 0x28BF
    3b0c:	90 91 c0 28 	lds	r25, 0x28C0
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    3b10:	f8 01       	movw	r30, r16
    3b12:	80 81       	ld	r24, Z
    3b14:	86 32       	cpi	r24, 0x26	; 38
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <MifareClassicAppProcess+0x43e>
    3b18:	42 c0       	rjmp	.+132    	; 0x3b9e <MifareClassicAppProcess+0x4c2>
    3b1a:	82 35       	cpi	r24, 0x52	; 82
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <MifareClassicAppProcess+0x444>
    3b1e:	3f c0       	rjmp	.+126    	; 0x3b9e <MifareClassicAppProcess+0x4c2>
            State = STATE_READY1;
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
    3b20:	80 35       	cpi	r24, 0x50	; 80
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <MifareClassicAppProcess+0x44a>
    3b24:	09 cf       	rjmp	.-494    	; 0x3938 <MifareClassicAppProcess+0x25c>
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
    3b26:	98 2f       	mov	r25, r24
    3b28:	90 56       	subi	r25, 0x60	; 96
    3b2a:	92 30       	cpi	r25, 0x02	; 2
    3b2c:	08 f4       	brcc	.+2      	; 0x3b30 <MifareClassicAppProcess+0x454>
    3b2e:	ab c2       	rjmp	.+1366   	; 0x4086 <MifareClassicAppProcess+0x9aa>
                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (  (Buffer[0] == CMD_READ) || (Buffer[0] == CMD_WRITE) || (Buffer[0] == CMD_DECREMENT)
    3b30:	80 33       	cpi	r24, 0x30	; 48
    3b32:	51 f0       	breq	.+20     	; 0x3b48 <MifareClassicAppProcess+0x46c>
    3b34:	80 3a       	cpi	r24, 0xA0	; 160
    3b36:	41 f0       	breq	.+16     	; 0x3b48 <MifareClassicAppProcess+0x46c>
    3b38:	80 3c       	cpi	r24, 0xC0	; 192
    3b3a:	31 f0       	breq	.+12     	; 0x3b48 <MifareClassicAppProcess+0x46c>
                  || (Buffer[0] == CMD_INCREMENT) || (Buffer[0] == CMD_RESTORE) || (Buffer[0] == CMD_TRANSFER) ) {
    3b3c:	81 3c       	cpi	r24, 0xC1	; 193
    3b3e:	21 f0       	breq	.+8      	; 0x3b48 <MifareClassicAppProcess+0x46c>
    3b40:	82 3c       	cpi	r24, 0xC2	; 194
    3b42:	11 f0       	breq	.+4      	; 0x3b48 <MifareClassicAppProcess+0x46c>
    3b44:	80 3b       	cpi	r24, 0xB0	; 176
    3b46:	d1 f6       	brne	.-76     	; 0x3afc <MifareClassicAppProcess+0x420>
            State = STATE_IDLE;
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	80 93 be 28 	sts	0x28BE, r24
            Buffer[0] = NAK_NOT_AUTHED;
    3b4e:	84 e0       	ldi	r24, 0x04	; 4
    3b50:	d8 01       	movw	r26, r16
    3b52:	8c 93       	st	X, r24
            return ACK_NAK_FRAME_SIZE;
    3b54:	24 e0       	ldi	r18, 0x04	; 4
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	e7 cd       	rjmp	.-1074   	; 0x3728 <MifareClassicAppProcess+0x4c>

    case STATE_READY2:
    if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
	    State = STATE_READY1;
	    return BitCount;
	    } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL2) {
    3b5a:	85 39       	cpi	r24, 0x95	; 149
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <MifareClassicAppProcess+0x484>
    3b5e:	4f c1       	rjmp	.+670    	; 0x3dfe <MifareClassicAppProcess+0x722>
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
    3b60:	10 92 be 28 	sts	0x28BE, r1
                    return ISO14443A_APP_NO_RESPONSE;
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	df cd       	rjmp	.-1090   	; 0x3728 <MifareClassicAppProcess+0x4c>
            }

            Buffer[0] = ACK_VALUE;
        } else {
            /* CRC Error. */
            Buffer[0] = NAK_CRC_ERROR;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	f8 01       	movw	r30, r16
    3b6e:	80 83       	st	Z, r24
        }

        State = STATE_CHINESE_IDLE;
    3b70:	82 e0       	ldi	r24, 0x02	; 2
    3b72:	80 93 be 28 	sts	0x28BE, r24

        return ACK_NAK_FRAME_SIZE;
    3b76:	24 e0       	ldi	r18, 0x04	; 4
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	d6 cd       	rjmp	.-1108   	; 0x3728 <MifareClassicAppProcess+0x4c>
            /* Unlock read and write commands */
            Buffer[0] = ACK_VALUE;
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_CHINESE_WIPE) {
            /* Wipe memory */
            Buffer[0] = ACK_VALUE;
    3b7c:	8a e0       	ldi	r24, 0x0A	; 10
    3b7e:	80 83       	st	Z, r24
            return ACK_NAK_FRAME_SIZE;
    3b80:	24 e0       	ldi	r18, 0x04	; 4
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	d1 cd       	rjmp	.-1118   	; 0x3728 <MifareClassicAppProcess+0x4c>
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
            if (!ActiveConfiguration.ReadOnly) {
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    3b86:	60 91 c3 28 	lds	r22, 0x28C3
    3b8a:	30 e1       	ldi	r19, 0x10	; 16
    3b8c:	63 9f       	mul	r22, r19
    3b8e:	b0 01       	movw	r22, r0
    3b90:	11 24       	eor	r1, r1
    3b92:	40 e1       	ldi	r20, 0x10	; 16
    3b94:	50 e0       	ldi	r21, 0x00	; 0
    3b96:	c8 01       	movw	r24, r16
    3b98:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    3b9c:	b6 ce       	rjmp	.-660    	; 0x390a <MifareClassicAppProcess+0x22e>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    3b9e:	d8 01       	movw	r26, r16
    3ba0:	2c 93       	st	X, r18
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    3ba2:	11 96       	adiw	r26, 0x01	; 1
    3ba4:	9c 93       	st	X, r25
    }
    break;

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
            State = STATE_READY1;
    3ba6:	84 e0       	ldi	r24, 0x04	; 4
    3ba8:	80 93 be 28 	sts	0x28BE, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    3bac:	20 e1       	ldi	r18, 0x10	; 16
    3bae:	30 e0       	ldi	r19, 0x00	; 0
            return BitCount;
    3bb0:	bb cd       	rjmp	.-1162   	; 0x3728 <MifareClassicAppProcess+0x4c>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    3bb2:	62 e0       	ldi	r22, 0x02	; 2
    3bb4:	70 e0       	ldi	r23, 0x00	; 0
    3bb6:	c8 01       	movw	r24, r16
    3bb8:	d4 d3       	rcall	.+1960   	; 0x4362 <ISO14443ACheckCRCA>
    3bba:	88 23       	and	r24, r24
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <MifareClassicAppProcess+0x4e4>
    3bbe:	cd c0       	rjmp	.+410    	; 0x3d5a <MifareClassicAppProcess+0x67e>
                CurrentAddress = Buffer[1];
    3bc0:	f8 01       	movw	r30, r16
    3bc2:	81 81       	ldd	r24, Z+1	; 0x01
    3bc4:	80 93 c3 28 	sts	0x28C3, r24
                State = STATE_RESTORE;
    3bc8:	8c e0       	ldi	r24, 0x0C	; 12
    3bca:	80 93 be 28 	sts	0x28BE, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    3bce:	8c d6       	rcall	.+3352   	; 0x48e8 <Crypto1Nibble>
    3bd0:	9a e0       	ldi	r25, 0x0A	; 10
    3bd2:	98 27       	eor	r25, r24
    3bd4:	d8 01       	movw	r26, r16
    3bd6:	9c 93       	st	X, r25
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
    3bd8:	24 e0       	ldi	r18, 0x04	; 4
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	a5 cd       	rjmp	.-1206   	; 0x3728 <MifareClassicAppProcess+0x4c>
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
    3bde:	62 e0       	ldi	r22, 0x02	; 2
    3be0:	70 e0       	ldi	r23, 0x00	; 0
    3be2:	c8 01       	movw	r24, r16
    3be4:	be d3       	rcall	.+1916   	; 0x4362 <ISO14443ACheckCRCA>
    3be6:	88 23       	and	r24, r24
    3be8:	09 f4       	brne	.+2      	; 0x3bec <MifareClassicAppProcess+0x510>
    3bea:	ce c2       	rjmp	.+1436   	; 0x4188 <MifareClassicAppProcess+0xaac>
                /* Write command. Store the address and prepare for the upcoming data.
                * Respond with ACK. */
                CurrentAddress = Buffer[1];
    3bec:	f8 01       	movw	r30, r16
    3bee:	81 81       	ldd	r24, Z+1	; 0x01
    3bf0:	80 93 c3 28 	sts	0x28C3, r24
                State = STATE_CHINESE_WRITE;
    3bf4:	83 e0       	ldi	r24, 0x03	; 3
    3bf6:	80 93 be 28 	sts	0x28BE, r24

                Buffer[0] = ACK_VALUE;
    3bfa:	8a e0       	ldi	r24, 0x0A	; 10
    3bfc:	80 83       	st	Z, r24
                return ACK_NAK_FRAME_SIZE;
    3bfe:	24 e0       	ldi	r18, 0x04	; 4
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	92 cd       	rjmp	.-1244   	; 0x3728 <MifareClassicAppProcess+0x4c>
        Crypto1Auth(&Buffer[0]);

        for (uint8_t i=0; i<4; i++)
            Buffer[i+4] ^= Crypto1Byte();

        if ((Buffer[4] == ReaderResponse[0]) &&
    3c04:	25 81       	ldd	r18, Z+5	; 0x05
    3c06:	90 91 c5 28 	lds	r25, 0x28C5
    3c0a:	29 13       	cpse	r18, r25
    3c0c:	77 cf       	rjmp	.-274    	; 0x3afc <MifareClassicAppProcess+0x420>
            (Buffer[5] == ReaderResponse[1]) &&
    3c0e:	26 81       	ldd	r18, Z+6	; 0x06
    3c10:	90 91 c6 28 	lds	r25, 0x28C6
    3c14:	29 13       	cpse	r18, r25
    3c16:	72 cf       	rjmp	.-284    	; 0x3afc <MifareClassicAppProcess+0x420>
            (Buffer[6] == ReaderResponse[2]) &&
    3c18:	90 91 c7 28 	lds	r25, 0x28C7
    3c1c:	89 13       	cpse	r24, r25
    3c1e:	6e cf       	rjmp	.-292    	; 0x3afc <MifareClassicAppProcess+0x420>
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    3c20:	f0 90 c8 28 	lds	r15, 0x28C8
    3c24:	20 d6       	rcall	.+3136   	; 0x4866 <Crypto1Byte>
    3c26:	8f 25       	eor	r24, r15
    3c28:	d8 01       	movw	r26, r16
    3c2a:	8c 93       	st	X, r24
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    3c2c:	f0 90 c8 28 	lds	r15, 0x28C8
    3c30:	0f 2c       	mov	r0, r15
    3c32:	f2 94       	swap	r15
    3c34:	f0 24       	eor	r15, r0
    3c36:	0f 2c       	mov	r0, r15
    3c38:	f6 94       	lsr	r15
    3c3a:	f6 94       	lsr	r15
    3c3c:	f0 24       	eor	r15, r0
    3c3e:	16 d4       	rcall	.+2092   	; 0x446c <Crypto1FilterOutput>
    3c40:	f8 01       	movw	r30, r16
    3c42:	e0 58       	subi	r30, 0x80	; 128
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	2f 2d       	mov	r18, r15
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	2f 5f       	subi	r18, 0xFF	; 255
    3c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4e:	21 fb       	bst	r18, 1
    3c50:	88 24       	eor	r8, r8
    3c52:	80 f8       	bld	r8, 0
    3c54:	91 2c       	mov	r9, r1
    3c56:	b1 e0       	ldi	r27, 0x01	; 1
    3c58:	8b 26       	eor	r8, r27
    3c5a:	88 25       	eor	r24, r8
    3c5c:	80 83       	st	Z, r24
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    3c5e:	f0 90 c9 28 	lds	r15, 0x28C9
    3c62:	01 d6       	rcall	.+3074   	; 0x4866 <Crypto1Byte>
    3c64:	8f 25       	eor	r24, r15
    3c66:	f8 01       	movw	r30, r16
    3c68:	81 83       	std	Z+1, r24	; 0x01
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    3c6a:	f0 90 c9 28 	lds	r15, 0x28C9
    3c6e:	0f 2c       	mov	r0, r15
    3c70:	f2 94       	swap	r15
    3c72:	f0 24       	eor	r15, r0
    3c74:	0f 2c       	mov	r0, r15
    3c76:	f6 94       	lsr	r15
    3c78:	f6 94       	lsr	r15
    3c7a:	f0 24       	eor	r15, r0
    3c7c:	f7 d3       	rcall	.+2030   	; 0x446c <Crypto1FilterOutput>
    3c7e:	f8 01       	movw	r30, r16
    3c80:	ef 57       	subi	r30, 0x7F	; 127
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	2f 2d       	mov	r18, r15
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	2f 5f       	subi	r18, 0xFF	; 255
    3c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8c:	21 fb       	bst	r18, 1
    3c8e:	aa 24       	eor	r10, r10
    3c90:	a0 f8       	bld	r10, 0
    3c92:	b1 2c       	mov	r11, r1
    3c94:	31 e0       	ldi	r19, 0x01	; 1
    3c96:	a3 26       	eor	r10, r19
    3c98:	8a 25       	eor	r24, r10
    3c9a:	80 83       	st	Z, r24
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    3c9c:	f0 90 ca 28 	lds	r15, 0x28CA
    3ca0:	e2 d5       	rcall	.+3012   	; 0x4866 <Crypto1Byte>
    3ca2:	8f 25       	eor	r24, r15
    3ca4:	d8 01       	movw	r26, r16
    3ca6:	12 96       	adiw	r26, 0x02	; 2
    3ca8:	8c 93       	st	X, r24
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    3caa:	f0 90 ca 28 	lds	r15, 0x28CA
    3cae:	0f 2c       	mov	r0, r15
    3cb0:	f2 94       	swap	r15
    3cb2:	f0 24       	eor	r15, r0
    3cb4:	0f 2c       	mov	r0, r15
    3cb6:	f6 94       	lsr	r15
    3cb8:	f6 94       	lsr	r15
    3cba:	f0 24       	eor	r15, r0
    3cbc:	d7 d3       	rcall	.+1966   	; 0x446c <Crypto1FilterOutput>
    3cbe:	f8 01       	movw	r30, r16
    3cc0:	ee 57       	subi	r30, 0x7E	; 126
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	2f 2d       	mov	r18, r15
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	2f 5f       	subi	r18, 0xFF	; 255
    3cca:	3f 4f       	sbci	r19, 0xFF	; 255
    3ccc:	21 fb       	bst	r18, 1
    3cce:	cc 24       	eor	r12, r12
    3cd0:	c0 f8       	bld	r12, 0
    3cd2:	d1 2c       	mov	r13, r1
    3cd4:	b1 e0       	ldi	r27, 0x01	; 1
    3cd6:	cb 26       	eor	r12, r27
    3cd8:	8c 25       	eor	r24, r12
    3cda:	80 83       	st	Z, r24
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    3cdc:	f0 90 cb 28 	lds	r15, 0x28CB
    3ce0:	c2 d5       	rcall	.+2948   	; 0x4866 <Crypto1Byte>
    3ce2:	8f 25       	eor	r24, r15
    3ce4:	f8 01       	movw	r30, r16
    3ce6:	83 83       	std	Z+3, r24	; 0x03
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    3ce8:	f0 90 cb 28 	lds	r15, 0x28CB
    3cec:	0f 2c       	mov	r0, r15
    3cee:	f2 94       	swap	r15
    3cf0:	f0 24       	eor	r15, r0
    3cf2:	0f 2c       	mov	r0, r15
    3cf4:	f6 94       	lsr	r15
    3cf6:	f6 94       	lsr	r15
    3cf8:	f0 24       	eor	r15, r0
    3cfa:	b8 d3       	rcall	.+1904   	; 0x446c <Crypto1FilterOutput>
    3cfc:	f8 01       	movw	r30, r16
    3cfe:	ed 57       	subi	r30, 0x7D	; 125
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	2f 2d       	mov	r18, r15
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	2f 5f       	subi	r18, 0xFF	; 255
    3d08:	3f 4f       	sbci	r19, 0xFF	; 255
    3d0a:	21 fb       	bst	r18, 1
    3d0c:	66 24       	eor	r6, r6
    3d0e:	60 f8       	bld	r6, 0
    3d10:	71 2c       	mov	r7, r1
    3d12:	31 e0       	ldi	r19, 0x01	; 1
    3d14:	63 26       	eor	r6, r19
    3d16:	86 25       	eor	r24, r6
    3d18:	80 83       	st	Z, r24
            }

            State = STATE_AUTHED_IDLE;
    3d1a:	88 e0       	ldi	r24, 0x08	; 8
    3d1c:	80 93 be 28 	sts	0x28BE, r24

            return (CMD_AUTH_BA_FRAME_SIZE * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
    3d20:	20 e2       	ldi	r18, 0x20	; 32
    3d22:	30 e1       	ldi	r19, 0x10	; 16
    3d24:	01 cd       	rjmp	.-1534   	; 0x3728 <MifareClassicAppProcess+0x4c>
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
            MemoryReadBlock(BlockBuffer, (uint16_t) CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    3d26:	60 91 c3 28 	lds	r22, 0x28C3
    3d2a:	b0 e1       	ldi	r27, 0x10	; 16
    3d2c:	6b 9f       	mul	r22, r27
    3d2e:	b0 01       	movw	r22, r0
    3d30:	11 24       	eor	r1, r1
    3d32:	40 e1       	ldi	r20, 0x10	; 16
    3d34:	50 e0       	ldi	r21, 0x00	; 0
    3d36:	8c ec       	ldi	r24, 0xCC	; 204
    3d38:	98 e2       	ldi	r25, 0x28	; 40
    3d3a:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    3d3e:	20 91 cc 28 	lds	r18, 0x28CC
    3d42:	80 91 d0 28 	lds	r24, 0x28D0
    3d46:	80 95       	com	r24
    3d48:	28 17       	cp	r18, r24
    3d4a:	09 f4       	brne	.+2      	; 0x3d4e <MifareClassicAppProcess+0x672>
    3d4c:	df c0       	rjmp	.+446    	; 0x3f0c <MifareClassicAppProcess+0x830>
                State = STATE_AUTHED_IDLE;
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
            } else {
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
    3d4e:	cc d5       	rcall	.+2968   	; 0x48e8 <Crypto1Nibble>
    3d50:	96 e0       	ldi	r25, 0x06	; 6
    3d52:	98 27       	eor	r25, r24
    3d54:	d8 01       	movw	r26, r16
    3d56:	9c 93       	st	X, r25
    3d58:	53 cd       	rjmp	.-1370   	; 0x3800 <MifareClassicAppProcess+0x124>
                * form the reader in the next frame. */
                State = STATE_AUTHING;

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    3d5a:	c6 d5       	rcall	.+2956   	; 0x48e8 <Crypto1Nibble>
    3d5c:	91 e0       	ldi	r25, 0x01	; 1
    3d5e:	98 27       	eor	r25, r24
    3d60:	f8 01       	movw	r30, r16
    3d62:	90 83       	st	Z, r25
                return ACK_NAK_FRAME_SIZE;
    3d64:	24 e0       	ldi	r18, 0x04	; 4
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	df cc       	rjmp	.-1602   	; 0x3728 <MifareClassicAppProcess+0x4c>

    case STATE_CHINESE_WRITE:
        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
            /* CRC check passed. Write data into memory and send ACK. */
            if (!ActiveConfiguration.ReadOnly) {
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    3d6a:	60 91 c3 28 	lds	r22, 0x28C3
    3d6e:	f0 e1       	ldi	r31, 0x10	; 16
    3d70:	6f 9f       	mul	r22, r31
    3d72:	b0 01       	movw	r22, r0
    3d74:	11 24       	eor	r1, r1
    3d76:	40 e1       	ldi	r20, 0x10	; 16
    3d78:	50 e0       	ldi	r21, 0x00	; 0
    3d7a:	c8 01       	movw	r24, r16
    3d7c:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    3d80:	96 ce       	rjmp	.-724    	; 0x3aae <MifareClassicAppProcess+0x3d2>
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
    3d82:	62 e0       	ldi	r22, 0x02	; 2
    3d84:	70 e0       	ldi	r23, 0x00	; 0
    3d86:	c8 01       	movw	r24, r16
    3d88:	ec d2       	rcall	.+1496   	; 0x4362 <ISO14443ACheckCRCA>
    3d8a:	88 23       	and	r24, r24
    3d8c:	31 f3       	breq	.-52     	; 0x3d5a <MifareClassicAppProcess+0x67e>
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    3d8e:	f8 01       	movw	r30, r16
    3d90:	61 81       	ldd	r22, Z+1	; 0x01
    3d92:	f0 e1       	ldi	r31, 0x10	; 16
    3d94:	6f 9f       	mul	r22, r31
    3d96:	b0 01       	movw	r22, r0
    3d98:	11 24       	eor	r1, r1
    3d9a:	40 e1       	ldi	r20, 0x10	; 16
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	c8 01       	movw	r24, r16
    3da0:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);
    3da4:	60 e1       	ldi	r22, 0x10	; 16
    3da6:	70 e0       	ldi	r23, 0x00	; 0
    3da8:	c8 01       	movw	r24, r16
    3daa:	ac d2       	rcall	.+1368   	; 0x4304 <ISO14443AAppendCRCA>
void MifareClassicAppTask(void)
{

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
    3dac:	68 01       	movw	r12, r16
    3dae:	30 e8       	ldi	r19, 0x80	; 128
    3db0:	c3 0e       	add	r12, r19
    3db2:	d1 1c       	adc	r13, r1
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
    3db4:	a1 2c       	mov	r10, r1
                    uint8_t Plain = Buffer[i];
    3db6:	d8 01       	movw	r26, r16
    3db8:	bc 90       	ld	r11, X
                    Buffer[i] = Plain ^ Crypto1Byte();
    3dba:	55 d5       	rcall	.+2730   	; 0x4866 <Crypto1Byte>
    3dbc:	8b 25       	eor	r24, r11
    3dbe:	f8 01       	movw	r30, r16
    3dc0:	81 93       	st	Z+, r24
    3dc2:	8f 01       	movw	r16, r30
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
    3dc4:	0b 2c       	mov	r0, r11
    3dc6:	b2 94       	swap	r11
    3dc8:	b0 24       	eor	r11, r0
    3dca:	0b 2c       	mov	r0, r11
    3dcc:	b6 94       	lsr	r11
    3dce:	b6 94       	lsr	r11
    3dd0:	b0 24       	eor	r11, r0
    3dd2:	4c d3       	rcall	.+1688   	; 0x446c <Crypto1FilterOutput>
    3dd4:	2b 2d       	mov	r18, r11
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	2f 5f       	subi	r18, 0xFF	; 255
    3dda:	3f 4f       	sbci	r19, 0xFF	; 255
    3ddc:	21 fb       	bst	r18, 1
    3dde:	ee 24       	eor	r14, r14
    3de0:	e0 f8       	bld	r14, 0
    3de2:	f1 2c       	mov	r15, r1
    3de4:	f1 e0       	ldi	r31, 0x01	; 1
    3de6:	ef 26       	eor	r14, r31
    3de8:	8e 25       	eor	r24, r14
    3dea:	d6 01       	movw	r26, r12
    3dec:	8d 93       	st	X+, r24
    3dee:	6d 01       	movw	r12, r26
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
    3df0:	a3 94       	inc	r10
    3df2:	b2 e1       	ldi	r27, 0x12	; 18
    3df4:	ab 12       	cpse	r10, r27
    3df6:	df cf       	rjmp	.-66     	; 0x3db6 <MifareClassicAppProcess+0x6da>
                    uint8_t Plain = Buffer[i];
                    Buffer[i] = Plain ^ Crypto1Byte();
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
                }

                return ( (CMD_READ_RESPONSE_FRAME_SIZE + ISO14443A_CRCA_SIZE )
    3df8:	20 e9       	ldi	r18, 0x90	; 144
    3dfa:	30 e1       	ldi	r19, 0x10	; 16
    3dfc:	95 cc       	rjmp	.-1750   	; 0x3728 <MifareClassicAppProcess+0x4c>
	    State = STATE_READY1;
	    return BitCount;
	    } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL2) {
	    /* Load UID CL2 and perform anticollision */
	    uint8_t UidCL2[ISO14443A_CL_UID_SIZE];
	    MemoryReadBlock(UidCL2, MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
    3dfe:	44 e0       	ldi	r20, 0x04	; 4
    3e00:	50 e0       	ldi	r21, 0x00	; 0
    3e02:	63 e0       	ldi	r22, 0x03	; 3
    3e04:	70 e0       	ldi	r23, 0x00	; 0
    3e06:	ce 01       	movw	r24, r28
    3e08:	01 96       	adiw	r24, 0x01	; 1
    3e0a:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>

	    if (ISO14443ASelect(Buffer, &BitCount, UidCL2, CardSAKValue)) {
    3e0e:	90 91 c1 28 	lds	r25, 0x28C1
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    3e12:	d8 01       	movw	r26, r16
    3e14:	11 96       	adiw	r26, 0x01	; 1
    3e16:	8c 91       	ld	r24, X
    3e18:	80 32       	cpi	r24, 0x20	; 32
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <MifareClassicAppProcess+0x742>
    3e1c:	d3 c1       	rjmp	.+934    	; 0x41c4 <MifareClassicAppProcess+0xae8>
    3e1e:	80 37       	cpi	r24, 0x70	; 112
    3e20:	09 f0       	breq	.+2      	; 0x3e24 <MifareClassicAppProcess+0x748>
    3e22:	80 cc       	rjmp	.-1792   	; 0x3724 <MifareClassicAppProcess+0x48>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    3e24:	d8 01       	movw	r26, r16
    3e26:	12 96       	adiw	r26, 0x02	; 2
    3e28:	2c 91       	ld	r18, X
    3e2a:	12 97       	sbiw	r26, 0x02	; 2
    3e2c:	89 81       	ldd	r24, Y+1	; 0x01
    3e2e:	28 13       	cpse	r18, r24
    3e30:	79 cc       	rjmp	.-1806   	; 0x3724 <MifareClassicAppProcess+0x48>
    3e32:	13 96       	adiw	r26, 0x03	; 3
    3e34:	2c 91       	ld	r18, X
    3e36:	13 97       	sbiw	r26, 0x03	; 3
    3e38:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3a:	28 13       	cpse	r18, r24
    3e3c:	73 cc       	rjmp	.-1818   	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[3] == UidCL[1]) &&
    3e3e:	14 96       	adiw	r26, 0x04	; 4
    3e40:	2c 91       	ld	r18, X
    3e42:	14 97       	sbiw	r26, 0x04	; 4
    3e44:	8b 81       	ldd	r24, Y+3	; 0x03
    3e46:	28 13       	cpse	r18, r24
    3e48:	6d cc       	rjmp	.-1830   	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[4] == UidCL[2]) &&
    3e4a:	15 96       	adiw	r26, 0x05	; 5
    3e4c:	2c 91       	ld	r18, X
    3e4e:	15 97       	sbiw	r26, 0x05	; 5
    3e50:	8c 81       	ldd	r24, Y+4	; 0x04
    3e52:	28 13       	cpse	r18, r24
    3e54:	67 cc       	rjmp	.-1842   	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    3e56:	9c 93       	st	X, r25
            ISO14443AAppendCRCA(Buffer, 1);
    3e58:	61 e0       	ldi	r22, 0x01	; 1
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	c8 01       	movw	r24, r16
    3e5e:	52 d2       	rcall	.+1188   	; 0x4304 <ISO14443AAppendCRCA>
		    State = STATE_ACTIVE;
    3e60:	86 e0       	ldi	r24, 0x06	; 6
    3e62:	80 93 be 28 	sts	0x28BE, r24

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
    3e66:	28 e1       	ldi	r18, 0x18	; 24
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	5e cc       	rjmp	.-1860   	; 0x3728 <MifareClassicAppProcess+0x4c>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
    3e6c:	62 e0       	ldi	r22, 0x02	; 2
    3e6e:	70 e0       	ldi	r23, 0x00	; 0
    3e70:	c8 01       	movw	r24, r16
    3e72:	77 d2       	rcall	.+1262   	; 0x4362 <ISO14443ACheckCRCA>
    3e74:	88 23       	and	r24, r24
    3e76:	81 f0       	breq	.+32     	; 0x3e98 <MifareClassicAppProcess+0x7bc>
                /* Write command. Store the address and prepare for the upcoming data.
                * Respond with ACK. */
                CurrentAddress = Buffer[1];
    3e78:	d8 01       	movw	r26, r16
    3e7a:	11 96       	adiw	r26, 0x01	; 1
    3e7c:	8c 91       	ld	r24, X
    3e7e:	80 93 c3 28 	sts	0x28C3, r24
                State = STATE_WRITE;
    3e82:	89 e0       	ldi	r24, 0x09	; 9
    3e84:	80 93 be 28 	sts	0x28BE, r24
                    MemoryWriteBlock(BlockBuffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK );
                } else {
                    /* In read only mode, silently ignore the write */
                }

                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    3e88:	2f d5       	rcall	.+2654   	; 0x48e8 <Crypto1Nibble>
    3e8a:	9a e0       	ldi	r25, 0x0A	; 10
    3e8c:	98 27       	eor	r25, r24
    3e8e:	f8 01       	movw	r30, r16
    3e90:	90 83       	st	Z, r25
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
    3e92:	24 e0       	ldi	r18, 0x04	; 4
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	48 cc       	rjmp	.-1904   	; 0x3728 <MifareClassicAppProcess+0x4c>
                    /* In read only mode, silently ignore the write */
                }

                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    3e98:	27 d5       	rcall	.+2638   	; 0x48e8 <Crypto1Nibble>
    3e9a:	91 e0       	ldi	r25, 0x01	; 1
    3e9c:	98 27       	eor	r25, r24
    3e9e:	d8 01       	movw	r26, r16
    3ea0:	9c 93       	st	X, r25
            }

            return ACK_NAK_FRAME_SIZE;
    3ea2:	24 e0       	ldi	r18, 0x04	; 4
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	40 cc       	rjmp	.-1920   	; 0x3728 <MifareClassicAppProcess+0x4c>
	            MemoryReadBlock(&UidCL1[1], MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE-1);
	            UidCL1[0] = ISO14443A_UID0_CT;
	            if (ISO14443ASelect(Buffer, &BitCount, UidCL1, SAK_CL1_VALUE))
	            State = STATE_READY2;
	            } else {
	            MemoryReadBlock(UidCL1, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    3ea8:	44 e0       	ldi	r20, 0x04	; 4
    3eaa:	50 e0       	ldi	r21, 0x00	; 0
    3eac:	60 e0       	ldi	r22, 0x00	; 0
    3eae:	70 e0       	ldi	r23, 0x00	; 0
    3eb0:	ce 01       	movw	r24, r28
    3eb2:	01 96       	adiw	r24, 0x01	; 1
    3eb4:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
	            if (ISO14443ASelect(Buffer, &BitCount, UidCL1, CardSAKValue))
    3eb8:	90 91 c1 28 	lds	r25, 0x28C1
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	81 81       	ldd	r24, Z+1	; 0x01
    3ec0:	80 32       	cpi	r24, 0x20	; 32
    3ec2:	09 f4       	brne	.+2      	; 0x3ec6 <MifareClassicAppProcess+0x7ea>
    3ec4:	9e c1       	rjmp	.+828    	; 0x4202 <MifareClassicAppProcess+0xb26>
    3ec6:	80 37       	cpi	r24, 0x70	; 112
    3ec8:	09 f0       	breq	.+2      	; 0x3ecc <MifareClassicAppProcess+0x7f0>
    3eca:	2c cc       	rjmp	.-1960   	; 0x3724 <MifareClassicAppProcess+0x48>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    3ecc:	f8 01       	movw	r30, r16
    3ece:	22 81       	ldd	r18, Z+2	; 0x02
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	28 13       	cpse	r18, r24
    3ed4:	27 cc       	rjmp	.-1970   	; 0x3724 <MifareClassicAppProcess+0x48>
    3ed6:	23 81       	ldd	r18, Z+3	; 0x03
    3ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eda:	28 13       	cpse	r18, r24
    3edc:	23 cc       	rjmp	.-1978   	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[3] == UidCL[1]) &&
    3ede:	24 81       	ldd	r18, Z+4	; 0x04
    3ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee2:	28 13       	cpse	r18, r24
    3ee4:	1f cc       	rjmp	.-1986   	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[4] == UidCL[2]) &&
    3ee6:	25 81       	ldd	r18, Z+5	; 0x05
    3ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eea:	28 13       	cpse	r18, r24
    3eec:	1b cc       	rjmp	.-1994   	; 0x3724 <MifareClassicAppProcess+0x48>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    3eee:	90 83       	st	Z, r25
    3ef0:	b3 cf       	rjmp	.-154    	; 0x3e58 <MifareClassicAppProcess+0x77c>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    3ef2:	62 e0       	ldi	r22, 0x02	; 2
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	c8 01       	movw	r24, r16
    3ef8:	34 d2       	rcall	.+1128   	; 0x4362 <ISO14443ACheckCRCA>
    3efa:	88 23       	and	r24, r24
    3efc:	09 f4       	brne	.+2      	; 0x3f00 <MifareClassicAppProcess+0x824>
    3efe:	2d cf       	rjmp	.-422    	; 0x3d5a <MifareClassicAppProcess+0x67e>
                CurrentAddress = Buffer[1];
    3f00:	f8 01       	movw	r30, r16
    3f02:	81 81       	ldd	r24, Z+1	; 0x01
    3f04:	80 93 c3 28 	sts	0x28C3, r24
                State = STATE_DECREMENT;
    3f08:	8b e0       	ldi	r24, 0x0B	; 11
    3f0a:	5f ce       	rjmp	.-834    	; 0x3bca <MifareClassicAppProcess+0x4ee>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    3f0c:	80 91 d4 28 	lds	r24, 0x28D4
    3f10:	28 13       	cpse	r18, r24
    3f12:	1d cf       	rjmp	.-454    	; 0x3d4e <MifareClassicAppProcess+0x672>
         && (Block[1] == (uint8_t) ~Block[5]) && (Block[1] == Block[9])
    3f14:	e0 91 cd 28 	lds	r30, 0x28CD
    3f18:	80 91 d1 28 	lds	r24, 0x28D1
    3f1c:	80 95       	com	r24
    3f1e:	e8 13       	cpse	r30, r24
    3f20:	16 cf       	rjmp	.-468    	; 0x3d4e <MifareClassicAppProcess+0x672>
    3f22:	80 91 d5 28 	lds	r24, 0x28D5
    3f26:	e8 13       	cpse	r30, r24
    3f28:	12 cf       	rjmp	.-476    	; 0x3d4e <MifareClassicAppProcess+0x672>
         && (Block[2] == (uint8_t) ~Block[6]) && (Block[2] == Block[10])
    3f2a:	80 91 ce 28 	lds	r24, 0x28CE
    3f2e:	90 91 d2 28 	lds	r25, 0x28D2
    3f32:	90 95       	com	r25
    3f34:	89 13       	cpse	r24, r25
    3f36:	0b cf       	rjmp	.-490    	; 0x3d4e <MifareClassicAppProcess+0x672>
    3f38:	90 91 d6 28 	lds	r25, 0x28D6
    3f3c:	89 13       	cpse	r24, r25
    3f3e:	07 cf       	rjmp	.-498    	; 0x3d4e <MifareClassicAppProcess+0x672>
         && (Block[3] == (uint8_t) ~Block[7]) && (Block[3] == Block[11])
    3f40:	30 91 cf 28 	lds	r19, 0x28CF
    3f44:	90 91 d3 28 	lds	r25, 0x28D3
    3f48:	90 95       	com	r25
    3f4a:	39 13       	cpse	r19, r25
    3f4c:	00 cf       	rjmp	.-512    	; 0x3d4e <MifareClassicAppProcess+0x672>
    3f4e:	90 91 d7 28 	lds	r25, 0x28D7
    3f52:	39 13       	cpse	r19, r25
    3f54:	fc ce       	rjmp	.-520    	; 0x3d4e <MifareClassicAppProcess+0x672>
         && (Block[12] == (uint8_t) ~Block[13])
    3f56:	40 91 d8 28 	lds	r20, 0x28D8
    3f5a:	90 91 d9 28 	lds	r25, 0x28D9
    3f5e:	90 95       	com	r25
    3f60:	49 13       	cpse	r20, r25
    3f62:	f5 ce       	rjmp	.-534    	; 0x3d4e <MifareClassicAppProcess+0x672>
         && (Block[12] == Block[14])
    3f64:	90 91 da 28 	lds	r25, 0x28DA
    3f68:	49 13       	cpse	r20, r25
    3f6a:	f1 ce       	rjmp	.-542    	; 0x3d4e <MifareClassicAppProcess+0x672>
         && (Block[14] == (uint8_t) ~Block[15])) {
    3f6c:	90 91 db 28 	lds	r25, 0x28DB
    3f70:	90 95       	com	r25
    3f72:	49 13       	cpse	r20, r25
    3f74:	ec ce       	rjmp	.-552    	; 0x3d4e <MifareClassicAppProcess+0x672>
}

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    3f76:	d8 01       	movw	r26, r16
    3f78:	9c 91       	ld	r25, X
    *Value |= ((uint32_t) Block[1] << 8);
    3f7a:	11 96       	adiw	r26, 0x01	; 1
    3f7c:	fc 91       	ld	r31, X
    3f7e:	11 97       	sbiw	r26, 0x01	; 1
    *Value |= ((uint32_t) Block[2] << 16);
    3f80:	12 96       	adiw	r26, 0x02	; 2
    3f82:	4c 91       	ld	r20, X
    3f84:	12 97       	sbiw	r26, 0x02	; 2
    3f86:	50 e0       	ldi	r21, 0x00	; 0
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	70 e0       	ldi	r23, 0x00	; 0
    3f8c:	ba 01       	movw	r22, r20
    3f8e:	55 27       	eor	r21, r21
    3f90:	44 27       	eor	r20, r20

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    3f92:	5f 2b       	or	r21, r31
    *Value |= ((uint32_t) Block[2] << 16);
    3f94:	49 2b       	or	r20, r25
    *Value |= ((uint32_t) Block[3] << 24);
    3f96:	13 96       	adiw	r26, 0x03	; 3
    3f98:	9c 91       	ld	r25, X
    3f9a:	79 2b       	or	r23, r25
INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    *Value |= ((uint32_t) Block[2] << 16);
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	a0 e0       	ldi	r26, 0x00	; 0
    3fa0:	b0 e0       	ldi	r27, 0x00	; 0
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	99 27       	eor	r25, r25
    3fa6:	88 27       	eor	r24, r24

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    3fa8:	9e 2b       	or	r25, r30
    *Value |= ((uint32_t) Block[2] << 16);
    3faa:	82 2b       	or	r24, r18
    *Value |= ((uint32_t) Block[3] << 24);
    3fac:	b3 2b       	or	r27, r19
                uint32_t BlockValue;

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
    3fae:	20 91 be 28 	lds	r18, 0x28BE
    3fb2:	2b 30       	cpi	r18, 0x0B	; 11
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <MifareClassicAppProcess+0x8dc>
    3fb6:	dd c0       	rjmp	.+442    	; 0x4172 <MifareClassicAppProcess+0xa96>
                    BlockValue -= ParamValue;
                } else if (State == STATE_INCREMENT) {
    3fb8:	2a 30       	cpi	r18, 0x0A	; 10
    3fba:	21 f4       	brne	.+8      	; 0x3fc4 <MifareClassicAppProcess+0x8e8>
                    BlockValue += ParamValue;
    3fbc:	84 0f       	add	r24, r20
    3fbe:	95 1f       	adc	r25, r21
    3fc0:	a6 1f       	adc	r26, r22
    3fc2:	b7 1f       	adc	r27, r23
    *Value |= ((uint32_t) Block[3] << 24);
}

INLINE void ValueToBlock(uint8_t* Block, uint32_t Value)
{
    Block[0] = (uint8_t) (Value >> 0);
    3fc4:	80 93 cc 28 	sts	0x28CC, r24
    Block[1] = (uint8_t) (Value >> 8);
    3fc8:	c9 2e       	mov	r12, r25
    3fca:	da 2e       	mov	r13, r26
    3fcc:	eb 2e       	mov	r14, r27
    3fce:	ff 24       	eor	r15, r15
    3fd0:	c0 92 cd 28 	sts	0x28CD, r12
    Block[2] = (uint8_t) (Value >> 16);
    3fd4:	8d 01       	movw	r16, r26
    3fd6:	22 27       	eor	r18, r18
    3fd8:	33 27       	eor	r19, r19
    3fda:	00 93 ce 28 	sts	0x28CE, r16
    Block[3] = (uint8_t) (Value >> 24);
    3fde:	4b 2f       	mov	r20, r27
    3fe0:	55 27       	eor	r21, r21
    3fe2:	66 27       	eor	r22, r22
    3fe4:	77 27       	eor	r23, r23
    3fe6:	40 93 cf 28 	sts	0x28CF, r20
    Block[4] = ~Block[0];
    3fea:	e8 2f       	mov	r30, r24
    3fec:	e0 95       	com	r30
    3fee:	e0 93 d0 28 	sts	0x28D0, r30
    Block[5] = ~Block[1];
    3ff2:	ec 2d       	mov	r30, r12
    3ff4:	e0 95       	com	r30
    3ff6:	e0 93 d1 28 	sts	0x28D1, r30
    Block[6] = ~Block[2];
    3ffa:	e0 2f       	mov	r30, r16
    3ffc:	e0 95       	com	r30
    3ffe:	e0 93 d2 28 	sts	0x28D2, r30
    Block[7] = ~Block[3];
    4002:	e4 2f       	mov	r30, r20
    4004:	e0 95       	com	r30
    4006:	e0 93 d3 28 	sts	0x28D3, r30
    Block[8] = Block[0];
    400a:	80 93 d4 28 	sts	0x28D4, r24
    Block[9] = Block[1];
    400e:	c0 92 d5 28 	sts	0x28D5, r12
    Block[10] = Block[2];
    4012:	00 93 d6 28 	sts	0x28D6, r16
    Block[11] = Block[3];
    4016:	40 93 d7 28 	sts	0x28D7, r20
                    /* Do nothing */
                }

                ValueToBlock(BlockBuffer, BlockValue);

                State = STATE_AUTHED_IDLE;
    401a:	88 e0       	ldi	r24, 0x08	; 8
    401c:	80 93 be 28 	sts	0x28BE, r24
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	81 cb       	rjmp	.-2302   	; 0x3728 <MifareClassicAppProcess+0x4c>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    4026:	62 e0       	ldi	r22, 0x02	; 2
    4028:	70 e0       	ldi	r23, 0x00	; 0
    402a:	c8 01       	movw	r24, r16
    402c:	9a d1       	rcall	.+820    	; 0x4362 <ISO14443ACheckCRCA>
    402e:	88 23       	and	r24, r24
    4030:	09 f4       	brne	.+2      	; 0x4034 <MifareClassicAppProcess+0x958>
    4032:	32 cf       	rjmp	.-412    	; 0x3e98 <MifareClassicAppProcess+0x7bc>
                CurrentAddress = Buffer[1];
    4034:	d8 01       	movw	r26, r16
    4036:	11 96       	adiw	r26, 0x01	; 1
    4038:	8c 91       	ld	r24, X
    403a:	80 93 c3 28 	sts	0x28C3, r24
                State = STATE_INCREMENT;
    403e:	5a e0       	ldi	r21, 0x0A	; 10
    4040:	f5 2e       	mov	r15, r21
    4042:	f0 92 be 28 	sts	0x28BE, r15
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    4046:	50 d4       	rcall	.+2208   	; 0x48e8 <Crypto1Nibble>
    4048:	8f 25       	eor	r24, r15
    404a:	f8 01       	movw	r30, r16
    404c:	80 83       	st	Z, r24
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
    404e:	24 e0       	ldi	r18, 0x04	; 4
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	6a cb       	rjmp	.-2348   	; 0x3728 <MifareClassicAppProcess+0x4c>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
            /* Write back the global block buffer to the desired block address */
            if (ISO14443ACheckCRCA(Buffer, CMD_TRANSFER_FRAME_SIZE)) {
    4054:	62 e0       	ldi	r22, 0x02	; 2
    4056:	70 e0       	ldi	r23, 0x00	; 0
    4058:	c8 01       	movw	r24, r16
    405a:	83 d1       	rcall	.+774    	; 0x4362 <ISO14443ACheckCRCA>
    405c:	88 23       	and	r24, r24
    405e:	09 f4       	brne	.+2      	; 0x4062 <MifareClassicAppProcess+0x986>
    4060:	1b cf       	rjmp	.-458    	; 0x3e98 <MifareClassicAppProcess+0x7bc>
                if (!ActiveConfiguration.ReadOnly) {
    4062:	80 91 06 29 	lds	r24, 0x2906
    4066:	81 11       	cpse	r24, r1
    4068:	0f cf       	rjmp	.-482    	; 0x3e88 <MifareClassicAppProcess+0x7ac>
                    MemoryWriteBlock(BlockBuffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK );
    406a:	d8 01       	movw	r26, r16
    406c:	11 96       	adiw	r26, 0x01	; 1
    406e:	6c 91       	ld	r22, X
    4070:	b0 e1       	ldi	r27, 0x10	; 16
    4072:	6b 9f       	mul	r22, r27
    4074:	b0 01       	movw	r22, r0
    4076:	11 24       	eor	r1, r1
    4078:	40 e1       	ldi	r20, 0x10	; 16
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	8c ec       	ldi	r24, 0xCC	; 204
    407e:	98 e2       	ldi	r25, 0x28	; 40
    4080:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    4084:	01 cf       	rjmp	.-510    	; 0x3e88 <MifareClassicAppProcess+0x7ac>
            } else {
                Buffer[0] = NAK_INVALID_ARG;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    4086:	62 e0       	ldi	r22, 0x02	; 2
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	c8 01       	movw	r24, r16
    408c:	6a d1       	rcall	.+724    	; 0x4362 <ISO14443ACheckCRCA>
    408e:	88 23       	and	r24, r24
    4090:	09 f4       	brne	.+2      	; 0x4094 <MifareClassicAppProcess+0x9b8>
    4092:	d1 c0       	rjmp	.+418    	; 0x4236 <MifareClassicAppProcess+0xb5a>
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    4094:	d8 01       	movw	r26, r16
    4096:	11 96       	adiw	r26, 0x01	; 1
    4098:	2c 91       	ld	r18, X
    409a:	11 97       	sbiw	r26, 0x01	; 1
    409c:	2c 73       	andi	r18, 0x3C	; 60
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    409e:	8c 91       	ld	r24, X
    40a0:	80 36       	cpi	r24, 0x60	; 96
    40a2:	09 f4       	brne	.+2      	; 0x40a6 <MifareClassicAppProcess+0x9ca>
    40a4:	dc c0       	rjmp	.+440    	; 0x425e <MifareClassicAppProcess+0xb82>
    40a6:	8a e3       	ldi	r24, 0x3A	; 58
    40a8:	90 e0       	ldi	r25, 0x00	; 0
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    40aa:	5c 01       	movw	r10, r24
    40ac:	b0 e1       	ldi	r27, 0x10	; 16
    40ae:	2b 9f       	mul	r18, r27
    40b0:	a0 0c       	add	r10, r0
    40b2:	b1 1c       	adc	r11, r1
    40b4:	11 24       	eor	r1, r1
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    40b6:	6e 01       	movw	r12, r28
    40b8:	e7 e0       	ldi	r30, 0x07	; 7
    40ba:	ce 0e       	add	r12, r30
    40bc:	d1 1c       	adc	r13, r1
    40be:	64 e0       	ldi	r22, 0x04	; 4
    40c0:	c6 01       	movw	r24, r12
    40c2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <RandomGetBuffer>
                if (_7BUID)
    40c6:	80 91 c2 28 	lds	r24, 0x28C2
					MemoryReadBlock(Uid, MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
    40ca:	7e 01       	movw	r14, r28
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
                if (_7BUID)
    40cc:	88 23       	and	r24, r24
    40ce:	09 f4       	brne	.+2      	; 0x40d2 <MifareClassicAppProcess+0x9f6>
    40d0:	b8 c0       	rjmp	.+368    	; 0x4242 <MifareClassicAppProcess+0xb66>
					MemoryReadBlock(Uid, MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
    40d2:	fb e0       	ldi	r31, 0x0B	; 11
    40d4:	ef 0e       	add	r14, r31
    40d6:	f1 1c       	adc	r15, r1
    40d8:	44 e0       	ldi	r20, 0x04	; 4
    40da:	50 e0       	ldi	r21, 0x00	; 0
    40dc:	63 e0       	ldi	r22, 0x03	; 3
    40de:	70 e0       	ldi	r23, 0x00	; 0
    40e0:	c7 01       	movw	r24, r14
    40e2:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
                else
					MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    40e6:	46 e0       	ldi	r20, 0x06	; 6
    40e8:	50 e0       	ldi	r21, 0x00	; 0
    40ea:	b5 01       	movw	r22, r10
    40ec:	ce 01       	movw	r24, r28
    40ee:	01 96       	adiw	r24, 0x01	; 1
    40f0:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];
    40f4:	8f 81       	ldd	r24, Y+7	; 0x07
    40f6:	80 93 c4 28 	sts	0x28C4, r24
    40fa:	88 85       	ldd	r24, Y+8	; 0x08
    40fc:	80 93 c5 28 	sts	0x28C5, r24
    4100:	89 85       	ldd	r24, Y+9	; 0x09
    4102:	80 93 c6 28 	sts	0x28C6, r24
    4106:	8a 85       	ldd	r24, Y+10	; 0x0a
    4108:	80 93 c7 28 	sts	0x28C7, r24

                Crypto1PRNG(ReaderResponse, 64);
    410c:	60 e4       	ldi	r22, 0x40	; 64
    410e:	70 e0       	ldi	r23, 0x00	; 0
    4110:	84 ec       	ldi	r24, 0xC4	; 196
    4112:	98 e2       	ldi	r25, 0x28	; 40
    4114:	0d d4       	rcall	.+2074   	; 0x4930 <Crypto1PRNG>

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];
    4116:	80 91 c4 28 	lds	r24, 0x28C4
    411a:	80 93 c8 28 	sts	0x28C8, r24
    411e:	80 91 c5 28 	lds	r24, 0x28C5
    4122:	80 93 c9 28 	sts	0x28C9, r24
    4126:	80 91 c6 28 	lds	r24, 0x28C6
    412a:	80 93 ca 28 	sts	0x28CA, r24
    412e:	80 91 c7 28 	lds	r24, 0x28C7
    4132:	80 93 cb 28 	sts	0x28CB, r24

                Crypto1PRNG(CardResponse, 32);
    4136:	60 e2       	ldi	r22, 0x20	; 32
    4138:	70 e0       	ldi	r23, 0x00	; 0
    413a:	88 ec       	ldi	r24, 0xC8	; 200
    413c:	98 e2       	ldi	r25, 0x28	; 40
    413e:	f8 d3       	rcall	.+2032   	; 0x4930 <Crypto1PRNG>

                /* Respond with the random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    4140:	87 e0       	ldi	r24, 0x07	; 7
    4142:	80 93 be 28 	sts	0x28BE, r24

                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];
    4146:	8f 81       	ldd	r24, Y+7	; 0x07
    4148:	d8 01       	movw	r26, r16
    414a:	8c 93       	st	X, r24
    414c:	88 85       	ldd	r24, Y+8	; 0x08
    414e:	11 96       	adiw	r26, 0x01	; 1
    4150:	8c 93       	st	X, r24
    4152:	11 97       	sbiw	r26, 0x01	; 1
    4154:	89 85       	ldd	r24, Y+9	; 0x09
    4156:	12 96       	adiw	r26, 0x02	; 2
    4158:	8c 93       	st	X, r24
    415a:	12 97       	sbiw	r26, 0x02	; 2
    415c:	8a 85       	ldd	r24, Y+10	; 0x0a
    415e:	13 96       	adiw	r26, 0x03	; 3
    4160:	8c 93       	st	X, r24

                /* Setup crypto1 cipher. Discard in-place encrypted CardNonce. */
                Crypto1Setup(Key, Uid, CardNonce);
    4162:	a6 01       	movw	r20, r12
    4164:	b7 01       	movw	r22, r14
    4166:	ce 01       	movw	r24, r28
    4168:	01 96       	adiw	r24, 0x01	; 1
    416a:	b4 d1       	rcall	.+872    	; 0x44d4 <Crypto1Setup>

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    416c:	20 e2       	ldi	r18, 0x20	; 32
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	db ca       	rjmp	.-2634   	; 0x3728 <MifareClassicAppProcess+0x4c>

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
                    BlockValue -= ParamValue;
    4172:	84 1b       	sub	r24, r20
    4174:	95 0b       	sbc	r25, r21
    4176:	a6 0b       	sbc	r26, r22
    4178:	b7 0b       	sbc	r27, r23
    417a:	24 cf       	rjmp	.-440    	; 0x3fc4 <MifareClassicAppProcess+0x8e8>
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
    417c:	62 e0       	ldi	r22, 0x02	; 2
    417e:	70 e0       	ldi	r23, 0x00	; 0
    4180:	c8 01       	movw	r24, r16
    4182:	ef d0       	rcall	.+478    	; 0x4362 <ISO14443ACheckCRCA>
    4184:	81 11       	cpse	r24, r1
    4186:	ec cc       	rjmp	.-1576   	; 0x3b60 <MifareClassicAppProcess+0x484>
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
                    return ISO14443A_APP_NO_RESPONSE;
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	d8 01       	movw	r26, r16
    418c:	8c 93       	st	X, r24
                    return ACK_NAK_FRAME_SIZE;
    418e:	24 e0       	ldi	r18, 0x04	; 4
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	ca ca       	rjmp	.-2668   	; 0x3728 <MifareClassicAppProcess+0x4c>
        } else if (Buffer[0] == CMD_CHINESE_WIPE) {
            /* Wipe memory */
            Buffer[0] = ACK_VALUE;
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_READ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
    4194:	62 e0       	ldi	r22, 0x02	; 2
    4196:	70 e0       	ldi	r23, 0x00	; 0
    4198:	c8 01       	movw	r24, r16
    419a:	e3 d0       	rcall	.+454    	; 0x4362 <ISO14443ACheckCRCA>
    419c:	88 23       	and	r24, r24
    419e:	a1 f3       	breq	.-24     	; 0x4188 <MifareClassicAppProcess+0xaac>
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    41a0:	f8 01       	movw	r30, r16
    41a2:	61 81       	ldd	r22, Z+1	; 0x01
    41a4:	f0 e1       	ldi	r31, 0x10	; 16
    41a6:	6f 9f       	mul	r22, r31
    41a8:	b0 01       	movw	r22, r0
    41aa:	11 24       	eor	r1, r1
    41ac:	40 e1       	ldi	r20, 0x10	; 16
    41ae:	50 e0       	ldi	r21, 0x00	; 0
    41b0:	c8 01       	movw	r24, r16
    41b2:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);
    41b6:	60 e1       	ldi	r22, 0x10	; 16
    41b8:	70 e0       	ldi	r23, 0x00	; 0
    41ba:	c8 01       	movw	r24, r16
    41bc:	a3 d0       	rcall	.+326    	; 0x4304 <ISO14443AAppendCRCA>

                return (CMD_READ_RESPONSE_FRAME_SIZE + ISO14443A_CRCA_SIZE )
    41be:	20 e9       	ldi	r18, 0x90	; 144
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	b2 ca       	rjmp	.-2716   	; 0x3728 <MifareClassicAppProcess+0x4c>

    switch (NVB) {
    case ISO14443A_NVB_AC_START:
        /* Start of anticollision procedure.
        * Send whole UID CLn + BCC */
        DataPtr[0] = UidCL[0];
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	f8 01       	movw	r30, r16
    41c8:	80 83       	st	Z, r24
        DataPtr[1] = UidCL[1];
    41ca:	3a 81       	ldd	r19, Y+2	; 0x02
    41cc:	31 83       	std	Z+1, r19	; 0x01
        DataPtr[2] = UidCL[2];
    41ce:	2b 81       	ldd	r18, Y+3	; 0x03
    41d0:	22 83       	std	Z+2, r18	; 0x02
        DataPtr[3] = UidCL[3];
    41d2:	9c 81       	ldd	r25, Y+4	; 0x04
    41d4:	93 83       	std	Z+3, r25	; 0x03
        DataPtr[4] = ISO14443A_CALC_BCC(DataPtr);
    41d6:	83 27       	eor	r24, r19
    41d8:	82 27       	eor	r24, r18
    41da:	89 27       	eor	r24, r25
    41dc:	84 83       	std	Z+4, r24	; 0x04

        *BitCount = ISO14443A_CL_FRAME_SIZE;
    41de:	28 e2       	ldi	r18, 0x28	; 40
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	a2 ca       	rjmp	.-2748   	; 0x3728 <MifareClassicAppProcess+0x4c>

    switch (NVB) {
    case ISO14443A_NVB_AC_START:
        /* Start of anticollision procedure.
        * Send whole UID CLn + BCC */
        DataPtr[0] = UidCL[0];
    41e4:	f8 01       	movw	r30, r16
    41e6:	80 83       	st	Z, r24
        DataPtr[1] = UidCL[1];
    41e8:	3a 81       	ldd	r19, Y+2	; 0x02
    41ea:	31 83       	std	Z+1, r19	; 0x01
        DataPtr[2] = UidCL[2];
    41ec:	9b 81       	ldd	r25, Y+3	; 0x03
    41ee:	92 83       	std	Z+2, r25	; 0x02
        DataPtr[3] = UidCL[3];
    41f0:	2c 81       	ldd	r18, Y+4	; 0x04
    41f2:	23 83       	std	Z+3, r18	; 0x03
        DataPtr[4] = ISO14443A_CALC_BCC(DataPtr);
    41f4:	93 27       	eor	r25, r19
    41f6:	98 27       	eor	r25, r24
    41f8:	92 27       	eor	r25, r18
    41fa:	94 83       	std	Z+4, r25	; 0x04

        *BitCount = ISO14443A_CL_FRAME_SIZE;
    41fc:	28 e2       	ldi	r18, 0x28	; 40
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	93 ca       	rjmp	.-2778   	; 0x3728 <MifareClassicAppProcess+0x4c>

    switch (NVB) {
    case ISO14443A_NVB_AC_START:
        /* Start of anticollision procedure.
        * Send whole UID CLn + BCC */
        DataPtr[0] = UidCL[0];
    4202:	89 81       	ldd	r24, Y+1	; 0x01
    4204:	80 83       	st	Z, r24
        DataPtr[1] = UidCL[1];
    4206:	3a 81       	ldd	r19, Y+2	; 0x02
    4208:	31 83       	std	Z+1, r19	; 0x01
        DataPtr[2] = UidCL[2];
    420a:	2b 81       	ldd	r18, Y+3	; 0x03
    420c:	22 83       	std	Z+2, r18	; 0x02
        DataPtr[3] = UidCL[3];
    420e:	9c 81       	ldd	r25, Y+4	; 0x04
    4210:	93 83       	std	Z+3, r25	; 0x03
        DataPtr[4] = ISO14443A_CALC_BCC(DataPtr);
    4212:	83 27       	eor	r24, r19
    4214:	82 27       	eor	r24, r18
    4216:	89 27       	eor	r24, r25
    4218:	84 83       	std	Z+4, r24	; 0x04

        *BitCount = ISO14443A_CL_FRAME_SIZE;
    421a:	28 e2       	ldi	r18, 0x28	; 40
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	84 ca       	rjmp	.-2808   	; 0x3728 <MifareClassicAppProcess+0x4c>
                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
                if (_7BUID)
					MemoryReadBlock(Uid, MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
                else
					MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    4220:	9b e0       	ldi	r25, 0x0B	; 11
    4222:	e9 0e       	add	r14, r25
    4224:	f1 1c       	adc	r15, r1
    4226:	44 e0       	ldi	r20, 0x04	; 4
    4228:	50 e0       	ldi	r21, 0x00	; 0
    422a:	60 e0       	ldi	r22, 0x00	; 0
    422c:	70 e0       	ldi	r23, 0x00	; 0
    422e:	c7 01       	movw	r24, r14
    4230:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
    4234:	ea cb       	rjmp	.-2092   	; 0x3a0a <MifareClassicAppProcess+0x32e>
                /* Setup crypto1 cipher. Discard in-place encrypted CardNonce. */
                Crypto1Setup(Key, Uid, CardNonce);

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	f8 01       	movw	r30, r16
    423a:	80 83       	st	Z, r24
                return ACK_NAK_FRAME_SIZE;
    423c:	24 e0       	ldi	r18, 0x04	; 4
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	73 ca       	rjmp	.-2842   	; 0x3728 <MifareClassicAppProcess+0x4c>
                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
                if (_7BUID)
					MemoryReadBlock(Uid, MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
                else
					MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    4242:	3b e0       	ldi	r19, 0x0B	; 11
    4244:	e3 0e       	add	r14, r19
    4246:	f1 1c       	adc	r15, r1
    4248:	44 e0       	ldi	r20, 0x04	; 4
    424a:	50 e0       	ldi	r21, 0x00	; 0
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	c7 01       	movw	r24, r14
    4252:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
    4256:	47 cf       	rjmp	.-370    	; 0x40e6 <MifareClassicAppProcess+0xa0a>
            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    4258:	60 e3       	ldi	r22, 0x30	; 48
    425a:	70 e0       	ldi	r23, 0x00	; 0
    425c:	b8 cb       	rjmp	.-2192   	; 0x39ce <MifareClassicAppProcess+0x2f2>
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    425e:	80 e3       	ldi	r24, 0x30	; 48
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	23 cf       	rjmp	.-442    	; 0x40aa <MifareClassicAppProcess+0x9ce>

00004264 <MifareClassicGetUid>:
    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
}

void MifareClassicGetUid(ConfigurationUidType Uid)
{
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	ec 01       	movw	r28, r24
	if (_7BUID) {
    426a:	80 91 c2 28 	lds	r24, 0x28C2
    426e:	81 11       	cpse	r24, r1
    4270:	09 c0       	rjmp	.+18     	; 0x4284 <MifareClassicGetUid+0x20>
		//Uid[0]=0x88;
		MemoryReadBlock(&Uid[0], MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE-1);
		MemoryReadBlock(&Uid[3], MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
	}
	else
	MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    4272:	44 e0       	ldi	r20, 0x04	; 4
    4274:	50 e0       	ldi	r21, 0x00	; 0
    4276:	60 e0       	ldi	r22, 0x00	; 0
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	ce 01       	movw	r24, r28
}
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
		//Uid[0]=0x88;
		MemoryReadBlock(&Uid[0], MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE-1);
		MemoryReadBlock(&Uid[3], MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
	}
	else
	MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    4280:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <MemoryReadBlock>

void MifareClassicGetUid(ConfigurationUidType Uid)
{
	if (_7BUID) {
		//Uid[0]=0x88;
		MemoryReadBlock(&Uid[0], MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE-1);
    4284:	43 e0       	ldi	r20, 0x03	; 3
    4286:	50 e0       	ldi	r21, 0x00	; 0
    4288:	60 e0       	ldi	r22, 0x00	; 0
    428a:	70 e0       	ldi	r23, 0x00	; 0
    428c:	ce 01       	movw	r24, r28
    428e:	0e 94 de 06 	call	0xdbc	; 0xdbc <MemoryReadBlock>
		MemoryReadBlock(&Uid[3], MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
    4292:	44 e0       	ldi	r20, 0x04	; 4
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	63 e0       	ldi	r22, 0x03	; 3
    4298:	70 e0       	ldi	r23, 0x00	; 0
    429a:	ce 01       	movw	r24, r28
    429c:	03 96       	adiw	r24, 0x03	; 3
	}
	else
	MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
}
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
void MifareClassicGetUid(ConfigurationUidType Uid)
{
	if (_7BUID) {
		//Uid[0]=0x88;
		MemoryReadBlock(&Uid[0], MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE-1);
		MemoryReadBlock(&Uid[3], MEM_UID_CL2_ADDRESS, MEM_UID_CL2_SIZE);
    42a2:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <MemoryReadBlock>

000042a6 <MifareClassicSetUid>:
	else
	MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
}

void MifareClassicSetUid(ConfigurationUidType Uid)
{
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	1f 92       	push	r1
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62
    if (_7BUID) {
    42b0:	20 91 c2 28 	lds	r18, 0x28C2
    42b4:	21 11       	cpse	r18, r1
    42b6:	1b c0       	rjmp	.+54     	; 0x42ee <MifareClassicSetUid+0x48>
	    //Uid[0]=0x88;
	    MemoryWriteBlock(Uid, MEM_UID_CL1_ADDRESS, ActiveConfiguration.UidSize);
    }
    else {
	    uint8_t BCC =  Uid[0] ^ Uid[1] ^ Uid[2] ^ Uid[3];
    42b8:	fc 01       	movw	r30, r24
    42ba:	21 81       	ldd	r18, Z+1	; 0x01
    42bc:	30 81       	ld	r19, Z
    42be:	23 27       	eor	r18, r19
    42c0:	32 81       	ldd	r19, Z+2	; 0x02
    42c2:	23 27       	eor	r18, r19
    42c4:	33 81       	ldd	r19, Z+3	; 0x03
    42c6:	23 27       	eor	r18, r19
    42c8:	29 83       	std	Y+1, r18	; 0x01

	    MemoryWriteBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    42ca:	44 e0       	ldi	r20, 0x04	; 4
    42cc:	50 e0       	ldi	r21, 0x00	; 0
    42ce:	60 e0       	ldi	r22, 0x00	; 0
    42d0:	70 e0       	ldi	r23, 0x00	; 0
    42d2:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
	    MemoryWriteBlock(&BCC, MEM_UID_BCC1_ADDRESS, ISO14443A_CL_BCC_SIZE);
    42d6:	41 e0       	ldi	r20, 0x01	; 1
    42d8:	50 e0       	ldi	r21, 0x00	; 0
    42da:	64 e0       	ldi	r22, 0x04	; 4
    42dc:	70 e0       	ldi	r23, 0x00	; 0
    42de:	ce 01       	movw	r24, r28
    42e0:	01 96       	adiw	r24, 0x01	; 1
    42e2:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
    }
}
    42e6:	0f 90       	pop	r0
    42e8:	df 91       	pop	r29
    42ea:	cf 91       	pop	r28
    42ec:	08 95       	ret

void MifareClassicSetUid(ConfigurationUidType Uid)
{
    if (_7BUID) {
	    //Uid[0]=0x88;
	    MemoryWriteBlock(Uid, MEM_UID_CL1_ADDRESS, ActiveConfiguration.UidSize);
    42ee:	40 91 05 29 	lds	r20, 0x2905
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	60 e0       	ldi	r22, 0x00	; 0
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	0e 94 f6 06 	call	0xdec	; 0xdec <MemoryWriteBlock>
	    uint8_t BCC =  Uid[0] ^ Uid[1] ^ Uid[2] ^ Uid[3];

	    MemoryWriteBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
	    MemoryWriteBlock(&BCC, MEM_UID_BCC1_ADDRESS, ISO14443A_CL_BCC_SIZE);
    }
}
    42fc:	0f 90       	pop	r0
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	08 95       	ret

00004304 <ISO14443AAppendCRCA>:

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    4304:	61 15       	cp	r22, r1
    4306:	71 05       	cpc	r23, r1
    4308:	41 f1       	breq	.+80     	; 0x435a <ISO14443AAppendCRCA+0x56>
 *      Author: skuser
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    430a:	68 0f       	add	r22, r24
    430c:	79 1f       	adc	r23, r25
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    430e:	fc 01       	movw	r30, r24
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    4310:	23 e6       	ldi	r18, 0x63	; 99
    4312:	33 e6       	ldi	r19, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    4314:	41 91       	ld	r20, Z+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    4316:	42 27       	eor	r20, r18
        Byte ^= Byte << 4;
    4318:	50 e1       	ldi	r21, 0x10	; 16
    431a:	45 9f       	mul	r20, r21
    431c:	c0 01       	movw	r24, r0
    431e:	11 24       	eor	r1, r1
    4320:	a4 2f       	mov	r26, r20
    4322:	a8 27       	eor	r26, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    4324:	8a 2f       	mov	r24, r26
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	58 2f       	mov	r21, r24
    432a:	44 27       	eor	r20, r20
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    432c:	88 0f       	add	r24, r24
    432e:	99 1f       	adc	r25, r25
    4330:	88 0f       	add	r24, r24
    4332:	99 1f       	adc	r25, r25
    4334:	88 0f       	add	r24, r24
    4336:	99 1f       	adc	r25, r25
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    4338:	48 27       	eor	r20, r24
    433a:	59 27       	eor	r21, r25
    433c:	23 2f       	mov	r18, r19
    433e:	33 27       	eor	r19, r19
    4340:	24 27       	eor	r18, r20
    4342:	35 27       	eor	r19, r21
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    4344:	a2 95       	swap	r26
    4346:	af 70       	andi	r26, 0x0F	; 15
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    4348:	2a 27       	eor	r18, r26

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    434a:	e6 17       	cp	r30, r22
    434c:	f7 07       	cpc	r31, r23
    434e:	11 f7       	brne	.-60     	; 0x4314 <ISO14443AAppendCRCA+0x10>
    4350:	92 2f       	mov	r25, r18
    4352:	83 2f       	mov	r24, r19

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    4354:	90 83       	st	Z, r25
    *DataPtr = (Checksum >> 8) & 0x00FF;
    4356:	81 83       	std	Z+1, r24	; 0x01
    4358:	08 95       	ret

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    435a:	fc 01       	movw	r30, r24

    while(ByteCount--) {
    435c:	83 e6       	ldi	r24, 0x63	; 99
    435e:	93 e6       	ldi	r25, 0x63	; 99
    4360:	f9 cf       	rjmp	.-14     	; 0x4354 <ISO14443AAppendCRCA+0x50>

00004362 <ISO14443ACheckCRCA>:
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    4362:	61 15       	cp	r22, r1
    4364:	71 05       	cpc	r23, r1
    4366:	b1 f1       	breq	.+108    	; 0x43d4 <ISO14443ACheckCRCA+0x72>

    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
    4368:	68 0f       	add	r22, r24
    436a:	79 1f       	adc	r23, r25
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    436c:	fc 01       	movw	r30, r24
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    436e:	23 e6       	ldi	r18, 0x63	; 99
    4370:	33 e6       	ldi	r19, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    4372:	41 91       	ld	r20, Z+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    4374:	42 27       	eor	r20, r18
        Byte ^= Byte << 4;
    4376:	50 e1       	ldi	r21, 0x10	; 16
    4378:	45 9f       	mul	r20, r21
    437a:	c0 01       	movw	r24, r0
    437c:	11 24       	eor	r1, r1
    437e:	a4 2f       	mov	r26, r20
    4380:	a8 27       	eor	r26, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    4382:	8a 2f       	mov	r24, r26
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	58 2f       	mov	r21, r24
    4388:	44 27       	eor	r20, r20
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    438a:	88 0f       	add	r24, r24
    438c:	99 1f       	adc	r25, r25
    438e:	88 0f       	add	r24, r24
    4390:	99 1f       	adc	r25, r25
    4392:	88 0f       	add	r24, r24
    4394:	99 1f       	adc	r25, r25
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    4396:	48 27       	eor	r20, r24
    4398:	59 27       	eor	r21, r25
    439a:	23 2f       	mov	r18, r19
    439c:	33 27       	eor	r19, r19
    439e:	24 27       	eor	r18, r20
    43a0:	35 27       	eor	r19, r21
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    43a2:	a2 95       	swap	r26
    43a4:	af 70       	andi	r26, 0x0F	; 15
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    43a6:	2a 27       	eor	r18, r26
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    43a8:	e6 17       	cp	r30, r22
    43aa:	f7 07       	cpc	r31, r23
    43ac:	11 f7       	brne	.-60     	; 0x4372 <ISO14443ACheckCRCA+0x10>
    43ae:	a9 01       	movw	r20, r18
    43b0:	55 27       	eor	r21, r21

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    43b2:	80 81       	ld	r24, Z
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	84 17       	cp	r24, r20
    43b8:	95 07       	cpc	r25, r21
    43ba:	11 f0       	breq	.+4      	; 0x43c0 <ISO14443ACheckCRCA+0x5e>
    43bc:	80 e0       	ldi	r24, 0x00	; 0
}
    43be:	08 95       	ret

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    43c0:	41 81       	ldd	r20, Z+1	; 0x01
    43c2:	50 e0       	ldi	r21, 0x00	; 0
    43c4:	23 2f       	mov	r18, r19
    43c6:	33 27       	eor	r19, r19
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	42 17       	cp	r20, r18
    43cc:	53 07       	cpc	r21, r19
    43ce:	b9 f3       	breq	.-18     	; 0x43be <ISO14443ACheckCRCA+0x5c>
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	f5 cf       	rjmp	.-22     	; 0x43be <ISO14443ACheckCRCA+0x5c>
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;
    43d4:	fc 01       	movw	r30, r24

    while(ByteCount--) {
    43d6:	43 e6       	ldi	r20, 0x63	; 99
    43d8:	50 e0       	ldi	r21, 0x00	; 0
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    43da:	23 e6       	ldi	r18, 0x63	; 99
    43dc:	33 e6       	ldi	r19, 0x63	; 99
    43de:	e9 cf       	rjmp	.-46     	; 0x43b2 <ISO14443ACheckCRCA+0x50>

000043e0 <Crypto1LFSR>:
/* Split Crypto1 state into even and odd bits to speed up the output filter network */
static uint8_t StateEven[LFSR_SIZE/2] = {0};
static uint8_t StateOdd[LFSR_SIZE/2] = {0};

/* Proceed LFSR by one clock cycle */
static void Crypto1LFSR(uint8_t In) {
    43e0:	cf 93       	push	r28
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    43e2:	b0 91 df 28 	lds	r27, 0x28DF
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    43e6:	c0 91 e0 28 	lds	r28, 0x28E0
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    43ea:	40 91 e1 28 	lds	r20, 0x28E1

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    43ee:	a0 91 dc 28 	lds	r26, 0x28DC
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    43f2:	f0 91 dd 28 	lds	r31, 0x28DD
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    43f6:	e0 91 de 28 	lds	r30, 0x28DE
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    43fa:	9c 2f       	mov	r25, r28
    43fc:	90 71       	andi	r25, 0x10	; 16
static void Crypto1LFSR(uint8_t In) {
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    43fe:	2b 2f       	mov	r18, r27
    4400:	21 7e       	andi	r18, 0xE1	; 225
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    4402:	92 27       	eor	r25, r18
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    4404:	24 2f       	mov	r18, r20
    4406:	20 72       	andi	r18, 0x20	; 32
    4408:	92 27       	eor	r25, r18

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    440a:	2a 2f       	mov	r18, r26
    440c:	24 79       	andi	r18, 0x94	; 148
    440e:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    4410:	2f 2f       	mov	r18, r31
    4412:	23 77       	andi	r18, 0x73	; 115
    4414:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    4416:	2e 2f       	mov	r18, r30
    4418:	2a 73       	andi	r18, 0x3A	; 58
    441a:	92 27       	eor	r25, r18

    Feedback ^= Feedback >> 4;
    441c:	39 2f       	mov	r19, r25
    441e:	32 95       	swap	r19
    4420:	3f 70       	andi	r19, 0x0F	; 15
    4422:	39 27       	eor	r19, r25
    Feedback ^= Feedback >> 2;
    4424:	23 2f       	mov	r18, r19
    4426:	26 95       	lsr	r18
    4428:	26 95       	lsr	r18
    442a:	23 27       	eor	r18, r19
    Feedback ^= Feedback >> 1;
    442c:	92 2f       	mov	r25, r18
    442e:	96 95       	lsr	r25
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    Temp |= ((uint32_t) StateEven[2] << 16);
    4430:	50 e0       	ldi	r21, 0x00	; 0
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	70 e0       	ldi	r23, 0x00	; 0
    4436:	ba 01       	movw	r22, r20
    4438:	55 27       	eor	r21, r21
    443a:	44 27       	eor	r20, r20
    * - the new even state becomes the old odd state
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    443c:	5c 2b       	or	r21, r28
    Temp |= ((uint32_t) StateEven[2] << 16);
    443e:	4b 2b       	or	r20, r27

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;
    4440:	76 95       	lsr	r23
    4442:	67 95       	ror	r22
    4444:	57 95       	ror	r21
    4446:	47 95       	ror	r20
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);

    Feedback ^= Feedback >> 4;
    Feedback ^= Feedback >> 2;
    Feedback ^= Feedback >> 1;
    4448:	92 27       	eor	r25, r18

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;

    /* Calculate MSBit of even state as input bit to LFSR */
    if ( (Feedback & 0x01) ^ In ) {
    444a:	91 70       	andi	r25, 0x01	; 1
    444c:	98 13       	cpse	r25, r24
        Temp |= (uint32_t) 1 << (8 * LFSR_SIZE/2 - 1);
    444e:	60 68       	ori	r22, 0x80	; 128
    }

    /* Convert even state back into byte array and swap odd/even state
    * as explained above. */
    StateEven[0] = StateOdd[0];
    4450:	a0 93 df 28 	sts	0x28DF, r26
    StateEven[1] = StateOdd[1];
    4454:	f0 93 e0 28 	sts	0x28E0, r31
    StateEven[2] = StateOdd[2];
    4458:	e0 93 e1 28 	sts	0x28E1, r30

    StateOdd[0] = (uint8_t) (Temp >> 0);
    445c:	40 93 dc 28 	sts	0x28DC, r20
    StateOdd[1] = (uint8_t) (Temp >> 8);
    4460:	50 93 dd 28 	sts	0x28DD, r21
    StateOdd[2] = (uint8_t) (Temp >> 16);
    4464:	60 93 de 28 	sts	0x28DE, r22
}
    4468:	cf 91       	pop	r28
    446a:	08 95       	ret

0000446c <Crypto1FilterOutput>:

uint8_t Crypto1FilterOutput(void) {
    446c:	cf 93       	push	r28
    446e:	df 93       	push	r29
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    4470:	c0 91 dd 28 	lds	r28, 0x28DD
    Sum |= TableAB[2][(StateOdd[1] >> 4) & 0x0F];
    Sum |= TableAB[3][(StateOdd[2] >> 0) & 0x0F];
    4474:	90 91 de 28 	lds	r25, 0x28DE
    4478:	a9 2f       	mov	r26, r25
    447a:	af 70       	andi	r26, 0x0F	; 15
    447c:	b0 e0       	ldi	r27, 0x00	; 0
    447e:	a0 5e       	subi	r26, 0xE0	; 224
    4480:	bf 4d       	sbci	r27, 0xDF	; 223
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    4482:	ec 2f       	mov	r30, r28
    4484:	ef 70       	andi	r30, 0x0F	; 15
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	e0 5e       	subi	r30, 0xE0	; 224
    448a:	ff 4d       	sbci	r31, 0xDF	; 223
    448c:	d0 96       	adiw	r26, 0x30	; 48
    448e:	8c 91       	ld	r24, X
    4490:	20 89       	ldd	r18, Z+16	; 0x10
    4492:	82 2b       	or	r24, r18
    * can simply be ORed together to produce the resulting
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    4494:	e0 91 dc 28 	lds	r30, 0x28DC
    4498:	e2 95       	swap	r30
    449a:	ef 70       	andi	r30, 0x0F	; 15
    449c:	f0 e0       	ldi	r31, 0x00	; 0
    449e:	e0 5e       	subi	r30, 0xE0	; 224
    44a0:	ff 4d       	sbci	r31, 0xDF	; 223
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    Sum |= TableAB[2][(StateOdd[1] >> 4) & 0x0F];
    44a2:	20 81       	ld	r18, Z
    44a4:	82 2b       	or	r24, r18
    44a6:	c2 95       	swap	r28
    44a8:	cf 70       	andi	r28, 0x0F	; 15
    44aa:	d0 e0       	ldi	r29, 0x00	; 0
    44ac:	c0 5e       	subi	r28, 0xE0	; 224
    44ae:	df 4d       	sbci	r29, 0xDF	; 223
    Sum |= TableAB[3][(StateOdd[2] >> 0) & 0x0F];
    44b0:	28 a1       	ldd	r18, Y+32	; 0x20
    44b2:	82 2b       	or	r24, r18
    Sum |= TableAB[4][(StateOdd[2] >> 4) & 0x0F];
    44b4:	92 95       	swap	r25
    44b6:	9f 70       	andi	r25, 0x0F	; 15
    44b8:	a9 2f       	mov	r26, r25
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	a0 5a       	subi	r26, 0xA0	; 160
    44be:	bf 4d       	sbci	r27, 0xDF	; 223
    44c0:	9c 91       	ld	r25, X
    44c2:	89 2b       	or	r24, r25

    return TableC[Sum];
    44c4:	e8 2f       	mov	r30, r24
    44c6:	f0 e0       	ldi	r31, 0x00	; 0
    44c8:	e0 59       	subi	r30, 0x90	; 144
    44ca:	ff 4d       	sbci	r31, 0xDF	; 223
}
    44cc:	80 81       	ld	r24, Z
    44ce:	df 91       	pop	r29
    44d0:	cf 91       	pop	r28
    44d2:	08 95       	ret

000044d4 <Crypto1Setup>:

void Crypto1Setup(uint8_t Key[6], uint8_t Uid[4], uint8_t CardNonce[4])
{
    44d4:	cf 92       	push	r12
    44d6:	df 92       	push	r13
    44d8:	ef 92       	push	r14
    44da:	ff 92       	push	r15
    44dc:	0f 93       	push	r16
    44de:	1f 93       	push	r17
    44e0:	cf 93       	push	r28
    44e2:	df 93       	push	r29
    44e4:	fc 01       	movw	r30, r24
    44e6:	db 01       	movw	r26, r22
    44e8:	ea 01       	movw	r28, r20
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    44ea:	91 81       	ldd	r25, Z+1	; 0x01
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	20 81       	ld	r18, Z
    44f0:	82 2b       	or	r24, r18
    44f2:	80 fd       	sbrc	r24, 0
    44f4:	8d c1       	rjmp	.+794    	; 0x4810 <Crypto1Setup+0x33c>
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	81 fd       	sbrc	r24, 1
    44fa:	88 c1       	rjmp	.+784    	; 0x480c <Crypto1Setup+0x338>
    44fc:	20 e0       	ldi	r18, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    44fe:	96 95       	lsr	r25
    4500:	87 95       	ror	r24
    4502:	96 95       	lsr	r25
    4504:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    4506:	43 2f       	mov	r20, r19
    4508:	40 68       	ori	r20, 0x80	; 128
    450a:	80 fd       	sbrc	r24, 0
    450c:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    450e:	42 2f       	mov	r20, r18
    4510:	40 68       	ori	r20, 0x80	; 128
    4512:	81 fd       	sbrc	r24, 1
    4514:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    4516:	96 95       	lsr	r25
    4518:	87 95       	ror	r24
    451a:	96 95       	lsr	r25
    451c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    451e:	36 95       	lsr	r19
            OddByte >>= 1;
    4520:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    4522:	43 2f       	mov	r20, r19
    4524:	40 68       	ori	r20, 0x80	; 128
    4526:	80 fd       	sbrc	r24, 0
    4528:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    452a:	42 2f       	mov	r20, r18
    452c:	40 68       	ori	r20, 0x80	; 128
    452e:	81 fd       	sbrc	r24, 1
    4530:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    4532:	96 95       	lsr	r25
    4534:	87 95       	ror	r24
    4536:	96 95       	lsr	r25
    4538:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    453a:	36 95       	lsr	r19
            OddByte >>= 1;
    453c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    453e:	43 2f       	mov	r20, r19
    4540:	40 68       	ori	r20, 0x80	; 128
    4542:	80 fd       	sbrc	r24, 0
    4544:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    4546:	42 2f       	mov	r20, r18
    4548:	40 68       	ori	r20, 0x80	; 128
    454a:	81 fd       	sbrc	r24, 1
    454c:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    454e:	96 95       	lsr	r25
    4550:	87 95       	ror	r24
    4552:	96 95       	lsr	r25
    4554:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    4556:	36 95       	lsr	r19
            OddByte >>= 1;
    4558:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    455a:	43 2f       	mov	r20, r19
    455c:	40 68       	ori	r20, 0x80	; 128
    455e:	80 fd       	sbrc	r24, 0
    4560:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    4562:	42 2f       	mov	r20, r18
    4564:	40 68       	ori	r20, 0x80	; 128
    4566:	81 fd       	sbrc	r24, 1
    4568:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    456a:	96 95       	lsr	r25
    456c:	87 95       	ror	r24
    456e:	96 95       	lsr	r25
    4570:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    4572:	36 95       	lsr	r19
            OddByte >>= 1;
    4574:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    4576:	43 2f       	mov	r20, r19
    4578:	40 68       	ori	r20, 0x80	; 128
    457a:	80 fd       	sbrc	r24, 0
    457c:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    457e:	42 2f       	mov	r20, r18
    4580:	40 68       	ori	r20, 0x80	; 128
    4582:	81 fd       	sbrc	r24, 1
    4584:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    4586:	96 95       	lsr	r25
    4588:	87 95       	ror	r24
    458a:	96 95       	lsr	r25
    458c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    458e:	36 95       	lsr	r19
            OddByte >>= 1;
    4590:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    4592:	43 2f       	mov	r20, r19
    4594:	40 68       	ori	r20, 0x80	; 128
    4596:	80 fd       	sbrc	r24, 0
    4598:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    459a:	42 2f       	mov	r20, r18
    459c:	40 68       	ori	r20, 0x80	; 128
    459e:	81 fd       	sbrc	r24, 1
    45a0:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    45a2:	96 95       	lsr	r25
    45a4:	87 95       	ror	r24
    45a6:	96 95       	lsr	r25
    45a8:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    45aa:	36 95       	lsr	r19
            OddByte >>= 1;
    45ac:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    45ae:	53 2f       	mov	r21, r19
    45b0:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    45b2:	42 2f       	mov	r20, r18
    45b4:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    45b6:	80 fd       	sbrc	r24, 0
    45b8:	35 2f       	mov	r19, r21
    45ba:	30 93 df 28 	sts	0x28DF, r19
        StateOdd[i] = OddByte;
    45be:	81 fd       	sbrc	r24, 1
    45c0:	24 2f       	mov	r18, r20
    45c2:	20 93 dc 28 	sts	0x28DC, r18
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    45c6:	93 81       	ldd	r25, Z+3	; 0x03
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	22 81       	ldd	r18, Z+2	; 0x02
    45cc:	82 2b       	or	r24, r18
    45ce:	80 fd       	sbrc	r24, 0
    45d0:	1b c1       	rjmp	.+566    	; 0x4808 <Crypto1Setup+0x334>
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	81 fd       	sbrc	r24, 1
    45d6:	16 c1       	rjmp	.+556    	; 0x4804 <Crypto1Setup+0x330>
    45d8:	20 e0       	ldi	r18, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    45da:	96 95       	lsr	r25
    45dc:	87 95       	ror	r24
    45de:	96 95       	lsr	r25
    45e0:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    45e2:	43 2f       	mov	r20, r19
    45e4:	40 68       	ori	r20, 0x80	; 128
    45e6:	80 fd       	sbrc	r24, 0
    45e8:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    45ea:	42 2f       	mov	r20, r18
    45ec:	40 68       	ori	r20, 0x80	; 128
    45ee:	81 fd       	sbrc	r24, 1
    45f0:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    45f2:	96 95       	lsr	r25
    45f4:	87 95       	ror	r24
    45f6:	96 95       	lsr	r25
    45f8:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    45fa:	36 95       	lsr	r19
            OddByte >>= 1;
    45fc:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    45fe:	43 2f       	mov	r20, r19
    4600:	40 68       	ori	r20, 0x80	; 128
    4602:	80 fd       	sbrc	r24, 0
    4604:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    4606:	42 2f       	mov	r20, r18
    4608:	40 68       	ori	r20, 0x80	; 128
    460a:	81 fd       	sbrc	r24, 1
    460c:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    460e:	96 95       	lsr	r25
    4610:	87 95       	ror	r24
    4612:	96 95       	lsr	r25
    4614:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    4616:	36 95       	lsr	r19
            OddByte >>= 1;
    4618:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    461a:	43 2f       	mov	r20, r19
    461c:	40 68       	ori	r20, 0x80	; 128
    461e:	80 fd       	sbrc	r24, 0
    4620:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    4622:	42 2f       	mov	r20, r18
    4624:	40 68       	ori	r20, 0x80	; 128
    4626:	81 fd       	sbrc	r24, 1
    4628:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    462a:	96 95       	lsr	r25
    462c:	87 95       	ror	r24
    462e:	96 95       	lsr	r25
    4630:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    4632:	36 95       	lsr	r19
            OddByte >>= 1;
    4634:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    4636:	43 2f       	mov	r20, r19
    4638:	40 68       	ori	r20, 0x80	; 128
    463a:	80 fd       	sbrc	r24, 0
    463c:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    463e:	42 2f       	mov	r20, r18
    4640:	40 68       	ori	r20, 0x80	; 128
    4642:	81 fd       	sbrc	r24, 1
    4644:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    4646:	96 95       	lsr	r25
    4648:	87 95       	ror	r24
    464a:	96 95       	lsr	r25
    464c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    464e:	36 95       	lsr	r19
            OddByte >>= 1;
    4650:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    4652:	43 2f       	mov	r20, r19
    4654:	40 68       	ori	r20, 0x80	; 128
    4656:	80 fd       	sbrc	r24, 0
    4658:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    465a:	42 2f       	mov	r20, r18
    465c:	40 68       	ori	r20, 0x80	; 128
    465e:	81 fd       	sbrc	r24, 1
    4660:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    4662:	96 95       	lsr	r25
    4664:	87 95       	ror	r24
    4666:	96 95       	lsr	r25
    4668:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    466a:	36 95       	lsr	r19
            OddByte >>= 1;
    466c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    466e:	43 2f       	mov	r20, r19
    4670:	40 68       	ori	r20, 0x80	; 128
    4672:	80 fd       	sbrc	r24, 0
    4674:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    4676:	42 2f       	mov	r20, r18
    4678:	40 68       	ori	r20, 0x80	; 128
    467a:	81 fd       	sbrc	r24, 1
    467c:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    467e:	96 95       	lsr	r25
    4680:	87 95       	ror	r24
    4682:	96 95       	lsr	r25
    4684:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    4686:	36 95       	lsr	r19
            OddByte >>= 1;
    4688:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    468a:	53 2f       	mov	r21, r19
    468c:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    468e:	42 2f       	mov	r20, r18
    4690:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    4692:	80 fd       	sbrc	r24, 0
    4694:	35 2f       	mov	r19, r21
    4696:	30 93 e0 28 	sts	0x28E0, r19
        StateOdd[i] = OddByte;
    469a:	81 fd       	sbrc	r24, 1
    469c:	24 2f       	mov	r18, r20
    469e:	20 93 dd 28 	sts	0x28DD, r18
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    46a2:	95 81       	ldd	r25, Z+5	; 0x05
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	24 81       	ldd	r18, Z+4	; 0x04
    46a8:	82 2b       	or	r24, r18
    46aa:	80 fd       	sbrc	r24, 0
    46ac:	a9 c0       	rjmp	.+338    	; 0x4800 <Crypto1Setup+0x32c>
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	81 fd       	sbrc	r24, 1
    46b2:	a4 c0       	rjmp	.+328    	; 0x47fc <Crypto1Setup+0x328>
    46b4:	20 e0       	ldi	r18, 0x00	; 0

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    46b6:	96 95       	lsr	r25
    46b8:	87 95       	ror	r24
    46ba:	96 95       	lsr	r25
    46bc:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    46be:	43 2f       	mov	r20, r19
    46c0:	40 68       	ori	r20, 0x80	; 128
    46c2:	80 fd       	sbrc	r24, 0
    46c4:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    46c6:	42 2f       	mov	r20, r18
    46c8:	40 68       	ori	r20, 0x80	; 128
    46ca:	81 fd       	sbrc	r24, 1
    46cc:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    46ce:	96 95       	lsr	r25
    46d0:	87 95       	ror	r24
    46d2:	96 95       	lsr	r25
    46d4:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    46d6:	36 95       	lsr	r19
            OddByte >>= 1;
    46d8:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    46da:	43 2f       	mov	r20, r19
    46dc:	40 68       	ori	r20, 0x80	; 128
    46de:	80 fd       	sbrc	r24, 0
    46e0:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    46e2:	42 2f       	mov	r20, r18
    46e4:	40 68       	ori	r20, 0x80	; 128
    46e6:	81 fd       	sbrc	r24, 1
    46e8:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    46ea:	96 95       	lsr	r25
    46ec:	87 95       	ror	r24
    46ee:	96 95       	lsr	r25
    46f0:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    46f2:	36 95       	lsr	r19
            OddByte >>= 1;
    46f4:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    46f6:	43 2f       	mov	r20, r19
    46f8:	40 68       	ori	r20, 0x80	; 128
    46fa:	80 fd       	sbrc	r24, 0
    46fc:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    46fe:	42 2f       	mov	r20, r18
    4700:	40 68       	ori	r20, 0x80	; 128
    4702:	81 fd       	sbrc	r24, 1
    4704:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    4706:	96 95       	lsr	r25
    4708:	87 95       	ror	r24
    470a:	96 95       	lsr	r25
    470c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    470e:	36 95       	lsr	r19
            OddByte >>= 1;
    4710:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    4712:	43 2f       	mov	r20, r19
    4714:	40 68       	ori	r20, 0x80	; 128
    4716:	80 fd       	sbrc	r24, 0
    4718:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    471a:	42 2f       	mov	r20, r18
    471c:	40 68       	ori	r20, 0x80	; 128
    471e:	81 fd       	sbrc	r24, 1
    4720:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    4722:	96 95       	lsr	r25
    4724:	87 95       	ror	r24
    4726:	96 95       	lsr	r25
    4728:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    472a:	36 95       	lsr	r19
            OddByte >>= 1;
    472c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    472e:	43 2f       	mov	r20, r19
    4730:	40 68       	ori	r20, 0x80	; 128
    4732:	80 fd       	sbrc	r24, 0
    4734:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    4736:	42 2f       	mov	r20, r18
    4738:	40 68       	ori	r20, 0x80	; 128
    473a:	81 fd       	sbrc	r24, 1
    473c:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    473e:	96 95       	lsr	r25
    4740:	87 95       	ror	r24
    4742:	96 95       	lsr	r25
    4744:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    4746:	36 95       	lsr	r19
            OddByte >>= 1;
    4748:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    474a:	43 2f       	mov	r20, r19
    474c:	40 68       	ori	r20, 0x80	; 128
    474e:	80 fd       	sbrc	r24, 0
    4750:	34 2f       	mov	r19, r20
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    4752:	42 2f       	mov	r20, r18
    4754:	40 68       	ori	r20, 0x80	; 128
    4756:	81 fd       	sbrc	r24, 1
    4758:	24 2f       	mov	r18, r20
            }

            KeyWord >>= 2;
    475a:	96 95       	lsr	r25
    475c:	87 95       	ror	r24
    475e:	96 95       	lsr	r25
    4760:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    4762:	36 95       	lsr	r19
            OddByte >>= 1;
    4764:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    4766:	53 2f       	mov	r21, r19
    4768:	50 68       	ori	r21, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    476a:	42 2f       	mov	r20, r18
    476c:	40 68       	ori	r20, 0x80	; 128
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    476e:	80 fd       	sbrc	r24, 0
    4770:	35 2f       	mov	r19, r21
    4772:	30 93 e1 28 	sts	0x28E1, r19
        StateOdd[i] = OddByte;
    4776:	81 fd       	sbrc	r24, 1
    4778:	24 2f       	mov	r18, r20
    477a:	20 93 de 28 	sts	0x28DE, r18
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    477e:	89 81       	ldd	r24, Y+1	; 0x01
    4780:	11 96       	adiw	r26, 0x01	; 1
    4782:	9c 91       	ld	r25, X
    4784:	11 97       	sbiw	r26, 0x01	; 1
    4786:	89 27       	eor	r24, r25
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    4788:	ca 80       	ldd	r12, Y+2	; 0x02
    478a:	12 96       	adiw	r26, 0x02	; 2
    478c:	9c 91       	ld	r25, X
    478e:	12 97       	sbiw	r26, 0x02	; 2
    4790:	c9 26       	eor	r12, r25
    4792:	d1 2c       	mov	r13, r1
    4794:	e1 2c       	mov	r14, r1
    4796:	f1 2c       	mov	r15, r1
    4798:	76 01       	movw	r14, r12
    479a:	dd 24       	eor	r13, r13
    479c:	cc 24       	eor	r12, r12
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    479e:	d8 2a       	or	r13, r24

    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    47a0:	88 81       	ld	r24, Y
    47a2:	9c 91       	ld	r25, X
    47a4:	89 27       	eor	r24, r25
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    47a6:	c8 2a       	or	r12, r24
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;
    47a8:	8b 81       	ldd	r24, Y+3	; 0x03
    47aa:	13 96       	adiw	r26, 0x03	; 3
    47ac:	9c 91       	ld	r25, X
    47ae:	89 27       	eor	r24, r25
    47b0:	f8 2a       	or	r15, r24
    47b2:	10 e2       	ldi	r17, 0x20	; 32

    for (i=0; i<32; i++) {
        uint8_t Out = Crypto1FilterOutput();
    47b4:	5b de       	rcall	.-842    	; 0x446c <Crypto1FilterOutput>
    47b6:	08 2f       	mov	r16, r24

        Crypto1LFSR(Temp & 0x01);
    47b8:	8c 2d       	mov	r24, r12
    47ba:	81 70       	andi	r24, 0x01	; 1
    47bc:	11 de       	rcall	.-990    	; 0x43e0 <Crypto1LFSR>
        Temp >>= 1;
    47be:	f6 94       	lsr	r15
    47c0:	e7 94       	ror	r14
    47c2:	d7 94       	ror	r13
    47c4:	c7 94       	ror	r12

        /* Store the keystream for later use */
        if (Out) {
    47c6:	00 23       	and	r16, r16
    47c8:	11 f0       	breq	.+4      	; 0x47ce <Crypto1Setup+0x2fa>
            Temp |= (uint32_t) 1 << 31;
    47ca:	68 94       	set
    47cc:	f7 f8       	bld	r15, 7
    47ce:	11 50       	subi	r17, 0x01	; 1
    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;

    for (i=0; i<32; i++) {
    47d0:	89 f7       	brne	.-30     	; 0x47b4 <Crypto1Setup+0x2e0>
    }

    /* Crypto1 state register is now set up to be used for authentication.
    * In case of nested authentication, we need to use the produced keystream
    * to encrypt the CardNonce. For this case we do the encryption in-place. */
    CardNonce[0] ^= (uint8_t) (Temp >> 0);
    47d2:	88 81       	ld	r24, Y
    47d4:	8c 25       	eor	r24, r12
    47d6:	88 83       	st	Y, r24
    CardNonce[1] ^= (uint8_t) (Temp >> 8);
    47d8:	89 81       	ldd	r24, Y+1	; 0x01
    47da:	8d 25       	eor	r24, r13
    47dc:	89 83       	std	Y+1, r24	; 0x01
    CardNonce[2] ^= (uint8_t) (Temp >> 16);
    47de:	8a 81       	ldd	r24, Y+2	; 0x02
    47e0:	8e 25       	eor	r24, r14
    47e2:	8a 83       	std	Y+2, r24	; 0x02
    CardNonce[3] ^= (uint8_t) (Temp >> 24);
    47e4:	8b 81       	ldd	r24, Y+3	; 0x03
    47e6:	8f 25       	eor	r24, r15
    47e8:	8b 83       	std	Y+3, r24	; 0x03
}
    47ea:	df 91       	pop	r29
    47ec:	cf 91       	pop	r28
    47ee:	1f 91       	pop	r17
    47f0:	0f 91       	pop	r16
    47f2:	ff 90       	pop	r15
    47f4:	ef 90       	pop	r14
    47f6:	df 90       	pop	r13
    47f8:	cf 90       	pop	r12
    47fa:	08 95       	ret
    47fc:	20 e4       	ldi	r18, 0x40	; 64
    47fe:	5b cf       	rjmp	.-330    	; 0x46b6 <Crypto1Setup+0x1e2>
    4800:	30 e4       	ldi	r19, 0x40	; 64
    4802:	56 cf       	rjmp	.-340    	; 0x46b0 <Crypto1Setup+0x1dc>
    4804:	20 e4       	ldi	r18, 0x40	; 64
    4806:	e9 ce       	rjmp	.-558    	; 0x45da <Crypto1Setup+0x106>
    4808:	30 e4       	ldi	r19, 0x40	; 64
    480a:	e4 ce       	rjmp	.-568    	; 0x45d4 <Crypto1Setup+0x100>
    480c:	20 e4       	ldi	r18, 0x40	; 64
    480e:	77 ce       	rjmp	.-786    	; 0x44fe <Crypto1Setup+0x2a>
    4810:	30 e4       	ldi	r19, 0x40	; 64
    4812:	72 ce       	rjmp	.-796    	; 0x44f8 <Crypto1Setup+0x24>

00004814 <Crypto1Auth>:

void Crypto1Auth(uint8_t EncryptedReaderNonce[4])
{
    4814:	cf 92       	push	r12
    4816:	df 92       	push	r13
    4818:	ef 92       	push	r14
    481a:	ff 92       	push	r15
    481c:	cf 93       	push	r28
    481e:	fc 01       	movw	r30, r24
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    4820:	81 81       	ldd	r24, Z+1	; 0x01
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    4822:	c2 80       	ldd	r12, Z+2	; 0x02
    4824:	d1 2c       	mov	r13, r1
    4826:	e1 2c       	mov	r14, r1
    4828:	f1 2c       	mov	r15, r1
    482a:	76 01       	movw	r14, r12
    482c:	dd 24       	eor	r13, r13
    482e:	cc 24       	eor	r12, r12
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    4830:	d8 2a       	or	r13, r24
{
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    4832:	80 81       	ld	r24, Z
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    4834:	c8 2a       	or	r12, r24
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;
    4836:	83 81       	ldd	r24, Z+3	; 0x03
    4838:	f8 2a       	or	r15, r24
    483a:	c0 e2       	ldi	r28, 0x20	; 32
    uint8_t i;

    for (i=0; i<32; i++) {
        /* Decrypt one output bit of the given encrypted nonce using the
        * filter output as keystream. */
        uint8_t Out = Crypto1FilterOutput();
    483c:	17 de       	rcall	.-978    	; 0x446c <Crypto1FilterOutput>
        uint8_t Bit = Out ^ (Temp & 0x01);
    483e:	b7 01       	movw	r22, r14
    4840:	a6 01       	movw	r20, r12
    4842:	41 70       	andi	r20, 0x01	; 1
    4844:	55 27       	eor	r21, r21
    4846:	66 27       	eor	r22, r22
    4848:	77 27       	eor	r23, r23

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
    484a:	84 27       	eor	r24, r20
    484c:	c9 dd       	rcall	.-1134   	; 0x43e0 <Crypto1LFSR>
        Temp >>= 1;
    484e:	f6 94       	lsr	r15
    4850:	e7 94       	ror	r14
    4852:	d7 94       	ror	r13
    4854:	c7 94       	ror	r12
    4856:	c1 50       	subi	r28, 0x01	; 1
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;

    uint8_t i;

    for (i=0; i<32; i++) {
    4858:	89 f7       	brne	.-30     	; 0x483c <Crypto1Auth+0x28>

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
        Temp >>= 1;
    }
}
    485a:	cf 91       	pop	r28
    485c:	ff 90       	pop	r15
    485e:	ef 90       	pop	r14
    4860:	df 90       	pop	r13
    4862:	cf 90       	pop	r12
    4864:	08 95       	ret

00004866 <Crypto1Byte>:

uint8_t Crypto1Byte(void)
{
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    486a:	00 de       	rcall	.-1024   	; 0x446c <Crypto1FilterOutput>
    486c:	c8 2f       	mov	r28, r24
        Crypto1LFSR(0);
    486e:	80 e0       	ldi	r24, 0x00	; 0
    4870:	b7 dd       	rcall	.-1170   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;

        if (Out) {
    4872:	cc 23       	and	r28, r28
    4874:	09 f4       	brne	.+2      	; 0x4878 <Crypto1Byte+0x12>
    4876:	36 c0       	rjmp	.+108    	; 0x48e4 <Crypto1Byte+0x7e>
            KeyStream |= (1<<7);
    4878:	c0 e8       	ldi	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    487a:	f8 dd       	rcall	.-1040   	; 0x446c <Crypto1FilterOutput>
    487c:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    487e:	80 e0       	ldi	r24, 0x00	; 0
    4880:	af dd       	rcall	.-1186   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    4882:	c6 95       	lsr	r28

        if (Out) {
    4884:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    4886:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    4888:	f1 dd       	rcall	.-1054   	; 0x446c <Crypto1FilterOutput>
    488a:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	a8 dd       	rcall	.-1200   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    4890:	c6 95       	lsr	r28

        if (Out) {
    4892:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    4894:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    4896:	ea dd       	rcall	.-1068   	; 0x446c <Crypto1FilterOutput>
    4898:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    489a:	80 e0       	ldi	r24, 0x00	; 0
    489c:	a1 dd       	rcall	.-1214   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    489e:	c6 95       	lsr	r28

        if (Out) {
    48a0:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    48a2:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    48a4:	e3 dd       	rcall	.-1082   	; 0x446c <Crypto1FilterOutput>
    48a6:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	9a dd       	rcall	.-1228   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    48ac:	c6 95       	lsr	r28

        if (Out) {
    48ae:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    48b0:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    48b2:	dc dd       	rcall	.-1096   	; 0x446c <Crypto1FilterOutput>
    48b4:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	93 dd       	rcall	.-1242   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    48ba:	c6 95       	lsr	r28

        if (Out) {
    48bc:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    48be:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    48c0:	d5 dd       	rcall	.-1110   	; 0x446c <Crypto1FilterOutput>
    48c2:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	8c dd       	rcall	.-1256   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    48c8:	c6 95       	lsr	r28

        if (Out) {
    48ca:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    48cc:	c0 68       	ori	r28, 0x80	; 128
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    48ce:	ce dd       	rcall	.-1124   	; 0x446c <Crypto1FilterOutput>
    48d0:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	85 dd       	rcall	.-1270   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    48d6:	8c 2f       	mov	r24, r28
    48d8:	86 95       	lsr	r24

        if (Out) {
    48da:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<7);
    48dc:	80 68       	ori	r24, 0x80	; 128
        }
    }

    return KeyStream;
}
    48de:	df 91       	pop	r29
    48e0:	cf 91       	pop	r28
    48e2:	08 95       	ret
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
        Crypto1LFSR(0);

        /* Store keystream bit */
        KeyStream >>= 1;
    48e4:	c0 e0       	ldi	r28, 0x00	; 0
    48e6:	c9 cf       	rjmp	.-110    	; 0x487a <Crypto1Byte+0x14>

000048e8 <Crypto1Nibble>:

    return KeyStream;
}

uint8_t Crypto1Nibble(void)
{
    48e8:	cf 93       	push	r28
    48ea:	df 93       	push	r29
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    48ec:	bf dd       	rcall	.-1154   	; 0x446c <Crypto1FilterOutput>
    48ee:	c8 2f       	mov	r28, r24
        Crypto1LFSR(0);
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	76 dd       	rcall	.-1300   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;

        if (Out) {
    48f4:	cc 23       	and	r28, r28
    48f6:	d1 f0       	breq	.+52     	; 0x492c <Crypto1Nibble+0x44>
            KeyStream |= (1<<3);
    48f8:	c8 e0       	ldi	r28, 0x08	; 8
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    48fa:	b8 dd       	rcall	.-1168   	; 0x446c <Crypto1FilterOutput>
    48fc:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	6f dd       	rcall	.-1314   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    4902:	c6 95       	lsr	r28

        if (Out) {
    4904:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<3);
    4906:	c8 60       	ori	r28, 0x08	; 8
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    4908:	b1 dd       	rcall	.-1182   	; 0x446c <Crypto1FilterOutput>
    490a:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	68 dd       	rcall	.-1328   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    4910:	c6 95       	lsr	r28

        if (Out) {
    4912:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<3);
    4914:	c8 60       	ori	r28, 0x08	; 8
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    4916:	aa dd       	rcall	.-1196   	; 0x446c <Crypto1FilterOutput>
    4918:	d8 2f       	mov	r29, r24
        Crypto1LFSR(0);
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	61 dd       	rcall	.-1342   	; 0x43e0 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    491e:	8c 2f       	mov	r24, r28
    4920:	86 95       	lsr	r24

        if (Out) {
    4922:	d1 11       	cpse	r29, r1
            KeyStream |= (1<<3);
    4924:	88 60       	ori	r24, 0x08	; 8
        }
    }

    return KeyStream;
}
    4926:	df 91       	pop	r29
    4928:	cf 91       	pop	r28
    492a:	08 95       	ret
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
        Crypto1LFSR(0);

        /* Store keystream bit */
        KeyStream >>= 1;
    492c:	c0 e0       	ldi	r28, 0x00	; 0
    492e:	e5 cf       	rjmp	.-54     	; 0x48fa <Crypto1Nibble+0x12>

00004930 <Crypto1PRNG>:

    return KeyStream;
}

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    4930:	6f 92       	push	r6
    4932:	7f 92       	push	r7
    4934:	8f 92       	push	r8
    4936:	9f 92       	push	r9
    4938:	af 92       	push	r10
    493a:	bf 92       	push	r11
    493c:	cf 92       	push	r12
    493e:	df 92       	push	r13
    4940:	ef 92       	push	r14
    4942:	ff 92       	push	r15
    4944:	0f 93       	push	r16
    4946:	1f 93       	push	r17
    4948:	cf 93       	push	r28
    494a:	df 93       	push	r29
    494c:	3c 01       	movw	r6, r24
    while(ClockCount--) {
    494e:	cb 01       	movw	r24, r22
    4950:	01 97       	sbiw	r24, 0x01	; 1
    4952:	67 2b       	or	r22, r23
    4954:	c9 f1       	breq	.+114    	; 0x49c8 <Crypto1PRNG+0x98>
    4956:	f3 01       	movw	r30, r6
    4958:	a2 81       	ldd	r26, Z+2	; 0x02
    495a:	c0 81       	ld	r28, Z
    495c:	b1 81       	ldd	r27, Z+1	; 0x01
    495e:	d3 81       	ldd	r29, Z+3	; 0x03
        * XOR all tapped bits to a single feedback bit. */
        uint8_t Feedback = 0;

        Feedback ^= State[0] & (uint8_t) (PRNG_MASK >> 0);
        Feedback ^= State[1] & (uint8_t) (PRNG_MASK >> 8);
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
    4960:	2a 2f       	mov	r18, r26
    4962:	2d 72       	andi	r18, 0x2D	; 45
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
    4964:	32 2f       	mov	r19, r18
    4966:	32 95       	swap	r19
    4968:	3f 70       	andi	r19, 0x0F	; 15
    496a:	32 27       	eor	r19, r18
        Feedback ^= Feedback >> 2;
    496c:	23 2f       	mov	r18, r19
    496e:	26 95       	lsr	r18
    4970:	26 95       	lsr	r18
    4972:	23 27       	eor	r18, r19
        Feedback ^= Feedback >> 1;
    4974:	32 2f       	mov	r19, r18
    4976:	36 95       	lsr	r19
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
        Temp |= (uint32_t) State[2] << 16;
        Temp |= (uint32_t) State[3] << 24;
    4978:	4d 2f       	mov	r20, r29
    497a:	50 e0       	ldi	r21, 0x00	; 0
    497c:	60 e0       	ldi	r22, 0x00	; 0
    497e:	70 e0       	ldi	r23, 0x00	; 0
    4980:	74 2f       	mov	r23, r20
    4982:	66 27       	eor	r22, r22
    4984:	55 27       	eor	r21, r21
    4986:	44 27       	eor	r20, r20

        /* For ease of processing convert the state into a 32 bit integer first */
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
    4988:	5b 2b       	or	r21, r27
        Temp |= (uint32_t) State[2] << 16;
    498a:	4c 2b       	or	r20, r28
        Temp |= (uint32_t) State[3] << 24;
    498c:	6a 2b       	or	r22, r26

        /* Cycle LFSR and feed back. */
        Temp >>= 1;
    498e:	76 95       	lsr	r23
    4990:	67 95       	ror	r22
    4992:	57 95       	ror	r21
    4994:	47 95       	ror	r20
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
        Feedback ^= Feedback >> 2;
        Feedback ^= Feedback >> 1;
    4996:	32 27       	eor	r19, r18
        Temp |= (uint32_t) State[3] << 24;

        /* Cycle LFSR and feed back. */
        Temp >>= 1;

        if (Feedback & 0x01) {
    4998:	30 fd       	sbrc	r19, 0
            Temp |= (uint32_t) 1 << (8 * PRNG_SIZE - 1);
    499a:	70 68       	ori	r23, 0x80	; 128
        }

        /* Store back state */
        State[0] = (uint8_t) (Temp >> 0);
    499c:	c4 2f       	mov	r28, r20
        State[1] = (uint8_t) (Temp >> 8);
    499e:	85 2e       	mov	r8, r21
    49a0:	96 2e       	mov	r9, r22
    49a2:	a7 2e       	mov	r10, r23
    49a4:	bb 24       	eor	r11, r11
    49a6:	b8 2d       	mov	r27, r8
        State[2] = (uint8_t) (Temp >> 16);
    49a8:	6b 01       	movw	r12, r22
    49aa:	ee 24       	eor	r14, r14
    49ac:	ff 24       	eor	r15, r15
    49ae:	ac 2d       	mov	r26, r12
        State[3] = (uint8_t) (Temp >> 24);
    49b0:	07 2f       	mov	r16, r23
    49b2:	11 27       	eor	r17, r17
    49b4:	22 27       	eor	r18, r18
    49b6:	33 27       	eor	r19, r19
    49b8:	d0 2f       	mov	r29, r16
    return KeyStream;
}

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    while(ClockCount--) {
    49ba:	01 97       	sbiw	r24, 0x01	; 1
    49bc:	88 f6       	brcc	.-94     	; 0x4960 <Crypto1PRNG+0x30>
    49be:	f3 01       	movw	r30, r6
    49c0:	40 83       	st	Z, r20
    49c2:	81 82       	std	Z+1, r8	; 0x01
    49c4:	c2 82       	std	Z+2, r12	; 0x02
    49c6:	03 83       	std	Z+3, r16	; 0x03
        State[2] = (uint8_t) (Temp >> 16);
        State[3] = (uint8_t) (Temp >> 24);
    }


}
    49c8:	df 91       	pop	r29
    49ca:	cf 91       	pop	r28
    49cc:	1f 91       	pop	r17
    49ce:	0f 91       	pop	r16
    49d0:	ff 90       	pop	r15
    49d2:	ef 90       	pop	r14
    49d4:	df 90       	pop	r13
    49d6:	cf 90       	pop	r12
    49d8:	bf 90       	pop	r11
    49da:	af 90       	pop	r10
    49dc:	9f 90       	pop	r9
    49de:	8f 90       	pop	r8
    49e0:	7f 90       	pop	r7
    49e2:	6f 90       	pop	r6
    49e4:	08 95       	ret

000049e6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    49e6:	0f 93       	push	r16
    49e8:	1f 93       	push	r17
    49ea:	cf 93       	push	r28
    49ec:	df 93       	push	r29
    49ee:	cd b7       	in	r28, 0x3d	; 61
    49f0:	de b7       	in	r29, 0x3e	; 62
    49f2:	ec 97       	sbiw	r28, 0x3c	; 60
    49f4:	cd bf       	out	0x3d, r28	; 61
    49f6:	de bf       	out	0x3e, r29	; 62
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    49f8:	2b d3       	rcall	.+1622   	; 0x5050 <Endpoint_Read_8>
    49fa:	80 93 41 2b 	sts	0x2B41, r24
    49fe:	28 d3       	rcall	.+1616   	; 0x5050 <Endpoint_Read_8>
    4a00:	80 93 42 2b 	sts	0x2B42, r24
    4a04:	25 d3       	rcall	.+1610   	; 0x5050 <Endpoint_Read_8>
    4a06:	80 93 43 2b 	sts	0x2B43, r24
    4a0a:	22 d3       	rcall	.+1604   	; 0x5050 <Endpoint_Read_8>
    4a0c:	80 93 44 2b 	sts	0x2B44, r24
    4a10:	1f d3       	rcall	.+1598   	; 0x5050 <Endpoint_Read_8>
    4a12:	80 93 45 2b 	sts	0x2B45, r24
    4a16:	1c d3       	rcall	.+1592   	; 0x5050 <Endpoint_Read_8>
    4a18:	80 93 46 2b 	sts	0x2B46, r24
    4a1c:	19 d3       	rcall	.+1586   	; 0x5050 <Endpoint_Read_8>
    4a1e:	80 93 47 2b 	sts	0x2B47, r24
    4a22:	16 d3       	rcall	.+1580   	; 0x5050 <Endpoint_Read_8>
    4a24:	80 93 48 2b 	sts	0x2B48, r24
	#endif

	EVENT_USB_Device_ControlRequest();
    4a28:	0e 94 4b 11 	call	0x2296	; 0x2296 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    4a2c:	b0 d3       	rcall	.+1888   	; 0x518e <Endpoint_IsSETUPReceived>
    4a2e:	88 23       	and	r24, r24
    4a30:	89 f0       	breq	.+34     	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    4a32:	90 91 41 2b 	lds	r25, 0x2B41

		switch (USB_ControlRequest.bRequest)
    4a36:	80 91 42 2b 	lds	r24, 0x2B42
    4a3a:	85 30       	cpi	r24, 0x05	; 5
    4a3c:	09 f4       	brne	.+2      	; 0x4a40 <USB_Device_ProcessControlRequest+0x5a>
    4a3e:	52 c0       	rjmp	.+164    	; 0x4ae4 <USB_Device_ProcessControlRequest+0xfe>
    4a40:	b0 f0       	brcs	.+44     	; 0x4a6e <USB_Device_ProcessControlRequest+0x88>
    4a42:	88 30       	cpi	r24, 0x08	; 8
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <USB_Device_ProcessControlRequest+0x62>
    4a46:	b3 c0       	rjmp	.+358    	; 0x4bae <USB_Device_ProcessControlRequest+0x1c8>
    4a48:	89 30       	cpi	r24, 0x09	; 9
    4a4a:	09 f4       	brne	.+2      	; 0x4a4e <USB_Device_ProcessControlRequest+0x68>
    4a4c:	98 c0       	rjmp	.+304    	; 0x4b7e <USB_Device_ProcessControlRequest+0x198>
    4a4e:	86 30       	cpi	r24, 0x06	; 6
    4a50:	09 f4       	brne	.+2      	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
    4a52:	5a c0       	rjmp	.+180    	; 0x4b08 <USB_Device_ProcessControlRequest+0x122>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    4a54:	9c d3       	rcall	.+1848   	; 0x518e <Endpoint_IsSETUPReceived>
    4a56:	88 23       	and	r24, r24
    4a58:	11 f0       	breq	.+4      	; 0x4a5e <USB_Device_ProcessControlRequest+0x78>
	{
		Endpoint_ClearSETUP();
    4a5a:	6d d3       	rcall	.+1754   	; 0x5136 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    4a5c:	50 d3       	rcall	.+1696   	; 0x50fe <Endpoint_StallTransaction>
	}
}
    4a5e:	ec 96       	adiw	r28, 0x3c	; 60
    4a60:	cd bf       	out	0x3d, r28	; 61
    4a62:	de bf       	out	0x3e, r29	; 62
    4a64:	df 91       	pop	r29
    4a66:	cf 91       	pop	r28
    4a68:	1f 91       	pop	r17
    4a6a:	0f 91       	pop	r16
    4a6c:	08 95       	ret

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
    4a6e:	81 30       	cpi	r24, 0x01	; 1
    4a70:	21 f0       	breq	.+8      	; 0x4a7a <USB_Device_ProcessControlRequest+0x94>
    4a72:	08 f4       	brcc	.+2      	; 0x4a76 <USB_Device_ProcessControlRequest+0x90>
    4a74:	68 c0       	rjmp	.+208    	; 0x4b46 <USB_Device_ProcessControlRequest+0x160>
    4a76:	83 30       	cpi	r24, 0x03	; 3
    4a78:	69 f7       	brne	.-38     	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4a7a:	99 23       	and	r25, r25
    4a7c:	09 f4       	brne	.+2      	; 0x4a80 <USB_Device_ProcessControlRequest+0x9a>
    4a7e:	a1 c0       	rjmp	.+322    	; 0x4bc2 <USB_Device_ProcessControlRequest+0x1dc>
    4a80:	92 30       	cpi	r25, 0x02	; 2
    4a82:	41 f7       	brne	.-48     	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    4a84:	80 91 43 2b 	lds	r24, 0x2B43
    4a88:	81 11       	cpse	r24, r1
    4a8a:	27 c0       	rjmp	.+78     	; 0x4ada <USB_Device_ProcessControlRequest+0xf4>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    4a8c:	00 91 45 2b 	lds	r16, 0x2B45
    4a90:	10 91 46 2b 	lds	r17, 0x2B46
    4a94:	0f 70       	andi	r16, 0x0F	; 15
    4a96:	11 27       	eor	r17, r17

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    4a98:	01 15       	cp	r16, r1
    4a9a:	11 05       	cpc	r17, r1
    4a9c:	d9 f2       	breq	.-74     	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    4a9e:	80 2f       	mov	r24, r16
    4aa0:	f5 d2       	rcall	.+1514   	; 0x508c <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    4aa2:	80 91 42 2b 	lds	r24, 0x2B42
    4aa6:	83 30       	cpi	r24, 0x03	; 3
    4aa8:	09 f4       	brne	.+2      	; 0x4aac <USB_Device_ProcessControlRequest+0xc6>
    4aaa:	e6 c0       	rjmp	.+460    	; 0x4c78 <USB_Device_ProcessControlRequest+0x292>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    4aac:	e0 91 4b 2b 	lds	r30, 0x2B4B
    4ab0:	f0 91 4c 2b 	lds	r31, 0x2B4C
    4ab4:	81 81       	ldd	r24, Z+1	; 0x01
    4ab6:	8b 7f       	andi	r24, 0xFB	; 251
    4ab8:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    4aba:	84 e8       	ldi	r24, 0x84	; 132
    4abc:	80 9f       	mul	r24, r16
    4abe:	f0 01       	movw	r30, r0
    4ac0:	81 9f       	mul	r24, r17
    4ac2:	f0 0d       	add	r31, r0
    4ac4:	11 24       	eor	r1, r1
    4ac6:	e1 57       	subi	r30, 0x71	; 113
    4ac8:	f4 4d       	sbci	r31, 0xD4	; 212
    4aca:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    4acc:	e0 91 4b 2b 	lds	r30, 0x2B4B
    4ad0:	f0 91 4c 2b 	lds	r31, 0x2B4C
    4ad4:	80 81       	ld	r24, Z
    4ad6:	8e 7f       	andi	r24, 0xFE	; 254
    4ad8:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    4ada:	80 e0       	ldi	r24, 0x00	; 0
    4adc:	d7 d2       	rcall	.+1454   	; 0x508c <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    4ade:	2b d3       	rcall	.+1622   	; 0x5136 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    4ae0:	8f d4       	rcall	.+2334   	; 0x5400 <Endpoint_ClearStatusStage>
    4ae2:	b8 cf       	rjmp	.-144    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    4ae4:	91 11       	cpse	r25, r1
    4ae6:	b6 cf       	rjmp	.-148    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    4ae8:	10 91 43 2b 	lds	r17, 0x2B43
    4aec:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    4aee:	23 d3       	rcall	.+1606   	; 0x5136 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    4af0:	87 d4       	rcall	.+2318   	; 0x5400 <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    4af2:	7f d3       	rcall	.+1790   	; 0x51f2 <Endpoint_IsINReady>
    4af4:	88 23       	and	r24, r24
    4af6:	e9 f3       	breq	.-6      	; 0x4af2 <USB_Device_ProcessControlRequest+0x10c>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    4af8:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    4afc:	11 11       	cpse	r17, r1
    4afe:	76 c0       	rjmp	.+236    	; 0x4bec <USB_Device_ProcessControlRequest+0x206>
    4b00:	82 e0       	ldi	r24, 0x02	; 2
    4b02:	80 93 40 2b 	sts	0x2B40, r24
    4b06:	a6 cf       	rjmp	.-180    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4b08:	90 58       	subi	r25, 0x80	; 128
    4b0a:	92 30       	cpi	r25, 0x02	; 2
    4b0c:	08 f0       	brcs	.+2      	; 0x4b10 <USB_Device_ProcessControlRequest+0x12a>
    4b0e:	a2 cf       	rjmp	.-188    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    4b10:	80 91 43 2b 	lds	r24, 0x2B43
    4b14:	90 91 44 2b 	lds	r25, 0x2B44
    4b18:	8c 3d       	cpi	r24, 0xDC	; 220
    4b1a:	23 e0       	ldi	r18, 0x03	; 3
    4b1c:	92 07       	cpc	r25, r18
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <USB_Device_ProcessControlRequest+0x13c>
    4b20:	67 c0       	rjmp	.+206    	; 0x4bf0 <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    4b22:	ae 01       	movw	r20, r28
    4b24:	45 5c       	subi	r20, 0xC5	; 197
    4b26:	5f 4f       	sbci	r21, 0xFF	; 255
    4b28:	60 91 45 2b 	lds	r22, 0x2B45
    4b2c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <CALLBACK_USB_GetDescriptor>
    4b30:	8c 01       	movw	r16, r24
    4b32:	00 97       	sbiw	r24, 0x00	; 0
    4b34:	09 f4       	brne	.+2      	; 0x4b38 <USB_Device_ProcessControlRequest+0x152>
    4b36:	8e cf       	rjmp	.-228    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    4b38:	fe d2       	rcall	.+1532   	; 0x5136 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    4b3a:	b8 01       	movw	r22, r16
    4b3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b40:	c0 d1       	rcall	.+896    	; 0x4ec2 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    4b42:	77 d2       	rcall	.+1262   	; 0x5032 <Endpoint_ClearOUT>
    4b44:	87 cf       	rjmp	.-242    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4b46:	90 38       	cpi	r25, 0x80	; 128
    4b48:	09 f4       	brne	.+2      	; 0x4b4c <USB_Device_ProcessControlRequest+0x166>
    4b4a:	47 c0       	rjmp	.+142    	; 0x4bda <USB_Device_ProcessControlRequest+0x1f4>
    4b4c:	92 38       	cpi	r25, 0x82	; 130
    4b4e:	09 f0       	breq	.+2      	; 0x4b52 <USB_Device_ProcessControlRequest+0x16c>
    4b50:	81 cf       	rjmp	.-254    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    4b52:	80 91 45 2b 	lds	r24, 0x2B45
    4b56:	8f 70       	andi	r24, 0x0F	; 15
    4b58:	99 d2       	rcall	.+1330   	; 0x508c <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    4b5a:	e0 91 4b 2b 	lds	r30, 0x2B4B
    4b5e:	f0 91 4c 2b 	lds	r31, 0x2B4C
    4b62:	11 81       	ldd	r17, Z+1	; 0x01
    4b64:	12 fb       	bst	r17, 2
    4b66:	11 27       	eor	r17, r17
    4b68:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	8f d2       	rcall	.+1310   	; 0x508c <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    4b6e:	e3 d2       	rcall	.+1478   	; 0x5136 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    4b70:	81 2f       	mov	r24, r17
    4b72:	7d d2       	rcall	.+1274   	; 0x506e <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	7b d2       	rcall	.+1270   	; 0x506e <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    4b78:	43 d2       	rcall	.+1158   	; 0x5000 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    4b7a:	42 d4       	rcall	.+2180   	; 0x5400 <Endpoint_ClearStatusStage>
    4b7c:	6b cf       	rjmp	.-298    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    4b7e:	91 11       	cpse	r25, r1
    4b80:	69 cf       	rjmp	.-302    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    4b82:	80 91 43 2b 	lds	r24, 0x2B43
    4b86:	82 30       	cpi	r24, 0x02	; 2
    4b88:	08 f0       	brcs	.+2      	; 0x4b8c <USB_Device_ProcessControlRequest+0x1a6>
    4b8a:	64 cf       	rjmp	.-312    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    4b8c:	d4 d2       	rcall	.+1448   	; 0x5136 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    4b8e:	80 91 43 2b 	lds	r24, 0x2B43
    4b92:	80 93 3c 2b 	sts	0x2B3C, r24

	Endpoint_ClearStatusStage();
    4b96:	34 d4       	rcall	.+2152   	; 0x5400 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    4b98:	80 91 3c 2b 	lds	r24, 0x2B3C
    4b9c:	88 23       	and	r24, r24
    4b9e:	09 f4       	brne	.+2      	; 0x4ba2 <USB_Device_ProcessControlRequest+0x1bc>
    4ba0:	61 c0       	rjmp	.+194    	; 0x4c64 <USB_Device_ProcessControlRequest+0x27e>
	  USB_DeviceState = DEVICE_STATE_Configured;
    4ba2:	84 e0       	ldi	r24, 0x04	; 4
    4ba4:	80 93 40 2b 	sts	0x2B40, r24
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;

	EVENT_USB_Device_ConfigurationChanged();
    4ba8:	0e 94 47 11 	call	0x228e	; 0x228e <EVENT_USB_Device_ConfigurationChanged>
    4bac:	53 cf       	rjmp	.-346    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    4bae:	90 38       	cpi	r25, 0x80	; 128
    4bb0:	09 f0       	breq	.+2      	; 0x4bb4 <USB_Device_ProcessControlRequest+0x1ce>
    4bb2:	50 cf       	rjmp	.-352    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    4bb4:	c0 d2       	rcall	.+1408   	; 0x5136 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    4bb6:	80 91 3c 2b 	lds	r24, 0x2B3C
    4bba:	59 d2       	rcall	.+1202   	; 0x506e <Endpoint_Write_8>
	Endpoint_ClearIN();
    4bbc:	21 d2       	rcall	.+1090   	; 0x5000 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    4bbe:	20 d4       	rcall	.+2112   	; 0x5400 <Endpoint_ClearStatusStage>
    4bc0:	49 cf       	rjmp	.-366    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    4bc2:	90 91 43 2b 	lds	r25, 0x2B43
    4bc6:	91 30       	cpi	r25, 0x01	; 1
    4bc8:	09 f0       	breq	.+2      	; 0x4bcc <USB_Device_ProcessControlRequest+0x1e6>
    4bca:	44 cf       	rjmp	.-376    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    4bcc:	91 e0       	ldi	r25, 0x01	; 1
    4bce:	83 30       	cpi	r24, 0x03	; 3
    4bd0:	09 f0       	breq	.+2      	; 0x4bd4 <USB_Device_ProcessControlRequest+0x1ee>
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	90 93 3e 2b 	sts	0x2B3E, r25
    4bd8:	80 cf       	rjmp	.-256    	; 0x4ada <USB_Device_ProcessControlRequest+0xf4>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    4bda:	10 91 3d 2b 	lds	r17, 0x2B3D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    4bde:	80 91 3e 2b 	lds	r24, 0x2B3E
    4be2:	88 23       	and	r24, r24
    4be4:	09 f4       	brne	.+2      	; 0x4be8 <USB_Device_ProcessControlRequest+0x202>
    4be6:	c3 cf       	rjmp	.-122    	; 0x4b6e <USB_Device_ProcessControlRequest+0x188>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    4be8:	12 60       	ori	r17, 0x02	; 2
    4bea:	c1 cf       	rjmp	.-126    	; 0x4b6e <USB_Device_ProcessControlRequest+0x188>

	while (!(Endpoint_IsINReady()));

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    4bec:	83 e0       	ldi	r24, 0x03	; 3
    4bee:	89 cf       	rjmp	.-238    	; 0x4b02 <USB_Device_ProcessControlRequest+0x11c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    4bf0:	83 e0       	ldi	r24, 0x03	; 3
    4bf2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    4bf4:	8a e3       	ldi	r24, 0x3A	; 58
    4bf6:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    4bf8:	5f b7       	in	r21, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    4bfa:	f8 94       	cli

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    4bfc:	82 e0       	ldi	r24, 0x02	; 2
    4bfe:	80 93 ca 01 	sts	0x01CA, r24
					SerialByte = pgm_read_byte(SigReadAddress);
    4c02:	e8 e0       	ldi	r30, 0x08	; 8
    4c04:	f0 e0       	ldi	r31, 0x00	; 0
    4c06:	e4 91       	lpm	r30, Z
					NVM.CMD    = 0;
    4c08:	10 92 ca 01 	sts	0x01CA, r1

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    4c0c:	de 01       	movw	r26, r28
    4c0e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    4c10:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    4c12:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    4c14:	42 e0       	ldi	r20, 0x02	; 2
					{
						SerialByte >>= 4;
						SigReadAddress++;
					}

					SerialByte &= 0x0F;
    4c16:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    4c18:	8e 2f       	mov	r24, r30
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	ea 30       	cpi	r30, 0x0A	; 10
    4c1e:	b8 f0       	brcs	.+46     	; 0x4c4e <USB_Device_ProcessControlRequest+0x268>
    4c20:	c7 96       	adiw	r24, 0x37	; 55
    4c22:	8d 93       	st	X+, r24
    4c24:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    4c26:	2f 5f       	subi	r18, 0xFF	; 255
    4c28:	2c 31       	cpi	r18, 0x1C	; 28
    4c2a:	99 f0       	breq	.+38     	; 0x4c52 <USB_Device_ProcessControlRequest+0x26c>
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    4c2c:	40 93 ca 01 	sts	0x01CA, r20
					SerialByte = pgm_read_byte(SigReadAddress);
    4c30:	e3 2f       	mov	r30, r19
    4c32:	f0 e0       	ldi	r31, 0x00	; 0
    4c34:	e4 91       	lpm	r30, Z
					NVM.CMD    = 0;
    4c36:	10 92 ca 01 	sts	0x01CA, r1

					if (SerialCharNum & 0x01)
    4c3a:	20 ff       	sbrs	r18, 0
    4c3c:	ec cf       	rjmp	.-40     	; 0x4c16 <USB_Device_ProcessControlRequest+0x230>
					{
						SerialByte >>= 4;
    4c3e:	e2 95       	swap	r30
    4c40:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    4c42:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    4c44:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    4c46:	8e 2f       	mov	r24, r30
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	ea 30       	cpi	r30, 0x0A	; 10
    4c4c:	48 f7       	brcc	.-46     	; 0x4c20 <USB_Device_ProcessControlRequest+0x23a>
    4c4e:	c0 96       	adiw	r24, 0x30	; 48
    4c50:	e8 cf       	rjmp	.-48     	; 0x4c22 <USB_Device_ProcessControlRequest+0x23c>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    4c52:	5f bf       	out	0x3f, r21	; 63

	Endpoint_ClearSETUP();
    4c54:	70 d2       	rcall	.+1248   	; 0x5136 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    4c56:	6a e3       	ldi	r22, 0x3A	; 58
    4c58:	70 e0       	ldi	r23, 0x00	; 0
    4c5a:	ce 01       	movw	r24, r28
    4c5c:	01 96       	adiw	r24, 0x01	; 1
    4c5e:	90 d0       	rcall	.+288    	; 0x4d80 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    4c60:	e8 d1       	rcall	.+976    	; 0x5032 <Endpoint_ClearOUT>
    4c62:	f8 ce       	rjmp	.-528    	; 0x4a54 <USB_Device_ProcessControlRequest+0x6e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    4c64:	80 91 c3 04 	lds	r24, 0x04C3
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    4c68:	88 23       	and	r24, r24
    4c6a:	21 f0       	breq	.+8      	; 0x4c74 <USB_Device_ProcessControlRequest+0x28e>
    4c6c:	84 e0       	ldi	r24, 0x04	; 4
    4c6e:	80 93 40 2b 	sts	0x2B40, r24
    4c72:	9a cf       	rjmp	.-204    	; 0x4ba8 <USB_Device_ProcessControlRequest+0x1c2>
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	fb cf       	rjmp	.-10     	; 0x4c6e <USB_Device_ProcessControlRequest+0x288>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
					{
						Endpoint_StallTransaction();
    4c78:	42 d2       	rcall	.+1156   	; 0x50fe <Endpoint_StallTransaction>
    4c7a:	2f cf       	rjmp	.-418    	; 0x4ada <USB_Device_ProcessControlRequest+0xf4>

00004c7c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    4c7c:	08 95       	ret

00004c7e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    4c7e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    4c80:	80 91 40 2b 	lds	r24, 0x2B40
    4c84:	81 11       	cpse	r24, r1
    4c86:	02 c0       	rjmp	.+4      	; 0x4c8c <USB_USBTask+0xe>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    4c88:	cf 91       	pop	r28
    4c8a:	08 95       	ret
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    4c8c:	c0 91 4d 2b 	lds	r28, 0x2B4D
	if (USB_DeviceState == DEVICE_STATE_Unattached)
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	fc d1       	rcall	.+1016   	; 0x508c <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    4c94:	7c d2       	rcall	.+1272   	; 0x518e <Endpoint_IsSETUPReceived>
    4c96:	81 11       	cpse	r24, r1
    4c98:	03 c0       	rjmp	.+6      	; 0x4ca0 <USB_USBTask+0x22>
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    4c9a:	8c 2f       	mov	r24, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    4c9c:	cf 91       	pop	r28
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    4c9e:	f6 c1       	rjmp	.+1004   	; 0x508c <Endpoint_SelectEndpoint>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    4ca0:	a2 de       	rcall	.-700    	; 0x49e6 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    4ca2:	8c 2f       	mov	r24, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    4ca4:	cf 91       	pop	r28
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    4ca6:	f2 c1       	rjmp	.+996    	; 0x508c <Endpoint_SelectEndpoint>

00004ca8 <Endpoint_Write_Stream_LE>:
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    4ca8:	af 92       	push	r10
    4caa:	bf 92       	push	r11
    4cac:	df 92       	push	r13
    4cae:	ef 92       	push	r14
    4cb0:	ff 92       	push	r15
    4cb2:	0f 93       	push	r16
    4cb4:	1f 93       	push	r17
    4cb6:	cf 93       	push	r28
    4cb8:	df 93       	push	r29
    4cba:	8c 01       	movw	r16, r24
    4cbc:	eb 01       	movw	r28, r22
    4cbe:	7a 01       	movw	r14, r20
    4cc0:	b5 d3       	rcall	.+1898   	; 0x542c <Endpoint_WaitUntilReady>
    4cc2:	d8 2e       	mov	r13, r24
    4cc4:	81 11       	cpse	r24, r1
    4cc6:	27 c0       	rjmp	.+78     	; 0x4d16 <Endpoint_Write_Stream_LE+0x6e>
    4cc8:	e1 14       	cp	r14, r1
    4cca:	f1 04       	cpc	r15, r1
    4ccc:	a1 f1       	breq	.+104    	; 0x4d36 <Endpoint_Write_Stream_LE+0x8e>
    4cce:	f7 01       	movw	r30, r14
    4cd0:	20 81       	ld	r18, Z
    4cd2:	31 81       	ldd	r19, Z+1	; 0x01
    4cd4:	c2 1b       	sub	r28, r18
    4cd6:	d3 0b       	sbc	r29, r19
    4cd8:	02 0f       	add	r16, r18
    4cda:	13 1f       	adc	r17, r19
    4cdc:	20 97       	sbiw	r28, 0x00	; 0
    4cde:	d9 f0       	breq	.+54     	; 0x4d16 <Endpoint_Write_Stream_LE+0x6e>
    4ce0:	a1 2c       	mov	r10, r1
    4ce2:	b1 2c       	mov	r11, r1
    4ce4:	80 91 49 2b 	lds	r24, 0x2B49
    4ce8:	90 91 4a 2b 	lds	r25, 0x2B4A
    4cec:	fc 01       	movw	r30, r24
    4cee:	ef 5b       	subi	r30, 0xBF	; 191
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	20 81       	ld	r18, Z
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	e0 5c       	subi	r30, 0xC0	; 192
    4cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfa:	80 81       	ld	r24, Z
    4cfc:	28 17       	cp	r18, r24
    4cfe:	90 f1       	brcs	.+100    	; 0x4d64 <Endpoint_Write_Stream_LE+0xbc>
    4d00:	7f d1       	rcall	.+766    	; 0x5000 <Endpoint_ClearIN>
    4d02:	bd df       	rcall	.-134    	; 0x4c7e <USB_USBTask>
    4d04:	f7 01       	movw	r30, r14
    4d06:	80 81       	ld	r24, Z
    4d08:	91 81       	ldd	r25, Z+1	; 0x01
    4d0a:	8a 0d       	add	r24, r10
    4d0c:	9b 1d       	adc	r25, r11
    4d0e:	80 83       	st	Z, r24
    4d10:	91 83       	std	Z+1, r25	; 0x01
    4d12:	25 e0       	ldi	r18, 0x05	; 5
    4d14:	d2 2e       	mov	r13, r18
    4d16:	8d 2d       	mov	r24, r13
    4d18:	df 91       	pop	r29
    4d1a:	cf 91       	pop	r28
    4d1c:	1f 91       	pop	r17
    4d1e:	0f 91       	pop	r16
    4d20:	ff 90       	pop	r15
    4d22:	ef 90       	pop	r14
    4d24:	df 90       	pop	r13
    4d26:	bf 90       	pop	r11
    4d28:	af 90       	pop	r10
    4d2a:	08 95       	ret
    4d2c:	69 d1       	rcall	.+722    	; 0x5000 <Endpoint_ClearIN>
    4d2e:	a7 df       	rcall	.-178    	; 0x4c7e <USB_USBTask>
    4d30:	7d d3       	rcall	.+1786   	; 0x542c <Endpoint_WaitUntilReady>
    4d32:	81 11       	cpse	r24, r1
    4d34:	23 c0       	rjmp	.+70     	; 0x4d7c <Endpoint_Write_Stream_LE+0xd4>
    4d36:	20 97       	sbiw	r28, 0x00	; 0
    4d38:	71 f3       	breq	.-36     	; 0x4d16 <Endpoint_Write_Stream_LE+0x6e>
    4d3a:	20 91 49 2b 	lds	r18, 0x2B49
    4d3e:	30 91 4a 2b 	lds	r19, 0x2B4A
    4d42:	f9 01       	movw	r30, r18
    4d44:	ef 5b       	subi	r30, 0xBF	; 191
    4d46:	ff 4f       	sbci	r31, 0xFF	; 255
    4d48:	90 81       	ld	r25, Z
    4d4a:	f9 01       	movw	r30, r18
    4d4c:	e0 5c       	subi	r30, 0xC0	; 192
    4d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d50:	80 81       	ld	r24, Z
    4d52:	98 17       	cp	r25, r24
    4d54:	58 f7       	brcc	.-42     	; 0x4d2c <Endpoint_Write_Stream_LE+0x84>
    4d56:	f8 01       	movw	r30, r16
    4d58:	81 91       	ld	r24, Z+
    4d5a:	8f 01       	movw	r16, r30
    4d5c:	88 d1       	rcall	.+784    	; 0x506e <Endpoint_Write_8>
    4d5e:	21 97       	sbiw	r28, 0x01	; 1
    4d60:	61 f7       	brne	.-40     	; 0x4d3a <Endpoint_Write_Stream_LE+0x92>
    4d62:	d9 cf       	rjmp	.-78     	; 0x4d16 <Endpoint_Write_Stream_LE+0x6e>
    4d64:	f8 01       	movw	r30, r16
    4d66:	81 91       	ld	r24, Z+
    4d68:	8f 01       	movw	r16, r30
    4d6a:	81 d1       	rcall	.+770    	; 0x506e <Endpoint_Write_8>
    4d6c:	ff ef       	ldi	r31, 0xFF	; 255
    4d6e:	af 1a       	sub	r10, r31
    4d70:	bf 0a       	sbc	r11, r31
    4d72:	ca 15       	cp	r28, r10
    4d74:	db 05       	cpc	r29, r11
    4d76:	09 f0       	breq	.+2      	; 0x4d7a <Endpoint_Write_Stream_LE+0xd2>
    4d78:	b5 cf       	rjmp	.-150    	; 0x4ce4 <Endpoint_Write_Stream_LE+0x3c>
    4d7a:	cd cf       	rjmp	.-102    	; 0x4d16 <Endpoint_Write_Stream_LE+0x6e>
    4d7c:	d8 2e       	mov	r13, r24
    4d7e:	cb cf       	rjmp	.-106    	; 0x4d16 <Endpoint_Write_Stream_LE+0x6e>

00004d80 <Endpoint_Write_Control_Stream_LE>:
    4d80:	cf 92       	push	r12
    4d82:	df 92       	push	r13
    4d84:	ef 92       	push	r14
    4d86:	ff 92       	push	r15
    4d88:	0f 93       	push	r16
    4d8a:	1f 93       	push	r17
    4d8c:	cf 93       	push	r28
    4d8e:	df 93       	push	r29
    4d90:	6c 01       	movw	r12, r24
    4d92:	eb 01       	movw	r28, r22
    4d94:	80 91 4d 2b 	lds	r24, 0x2B4D
    4d98:	80 68       	ori	r24, 0x80	; 128
    4d9a:	78 d1       	rcall	.+752    	; 0x508c <Endpoint_SelectEndpoint>
    4d9c:	00 91 47 2b 	lds	r16, 0x2B47
    4da0:	10 91 48 2b 	lds	r17, 0x2B48
    4da4:	0c 17       	cp	r16, r28
    4da6:	1d 07       	cpc	r17, r29
    4da8:	20 f0       	brcs	.+8      	; 0x4db2 <Endpoint_Write_Control_Stream_LE+0x32>
    4daa:	20 97       	sbiw	r28, 0x00	; 0
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <Endpoint_Write_Control_Stream_LE+0x30>
    4dae:	83 c0       	rjmp	.+262    	; 0x4eb6 <Endpoint_Write_Control_Stream_LE+0x136>
    4db0:	8e 01       	movw	r16, r28
    4db2:	c0 e0       	ldi	r28, 0x00	; 0
    4db4:	01 15       	cp	r16, r1
    4db6:	11 05       	cpc	r17, r1
    4db8:	09 f0       	breq	.+2      	; 0x4dbc <Endpoint_Write_Control_Stream_LE+0x3c>
    4dba:	4a c0       	rjmp	.+148    	; 0x4e50 <Endpoint_Write_Control_Stream_LE+0xd0>
    4dbc:	cc 23       	and	r28, r28
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <Endpoint_Write_Control_Stream_LE+0x42>
    4dc0:	5c c0       	rjmp	.+184    	; 0x4e7a <Endpoint_Write_Control_Stream_LE+0xfa>
    4dc2:	80 91 40 2b 	lds	r24, 0x2B40
    4dc6:	88 23       	and	r24, r24
    4dc8:	09 f4       	brne	.+2      	; 0x4dcc <Endpoint_Write_Control_Stream_LE+0x4c>
    4dca:	55 c0       	rjmp	.+170    	; 0x4e76 <Endpoint_Write_Control_Stream_LE+0xf6>
    4dcc:	85 30       	cpi	r24, 0x05	; 5
    4dce:	09 f4       	brne	.+2      	; 0x4dd2 <Endpoint_Write_Control_Stream_LE+0x52>
    4dd0:	5d c0       	rjmp	.+186    	; 0x4e8c <Endpoint_Write_Control_Stream_LE+0x10c>
    4dd2:	dd d1       	rcall	.+954    	; 0x518e <Endpoint_IsSETUPReceived>
    4dd4:	81 11       	cpse	r24, r1
    4dd6:	6d c0       	rjmp	.+218    	; 0x4eb2 <Endpoint_Write_Control_Stream_LE+0x132>
    4dd8:	f3 d1       	rcall	.+998    	; 0x51c0 <Endpoint_IsOUTReceived>
    4dda:	81 11       	cpse	r24, r1
    4ddc:	4e c0       	rjmp	.+156    	; 0x4e7a <Endpoint_Write_Control_Stream_LE+0xfa>
    4dde:	09 d2       	rcall	.+1042   	; 0x51f2 <Endpoint_IsINReady>
    4de0:	88 23       	and	r24, r24
    4de2:	79 f3       	breq	.-34     	; 0x4dc2 <Endpoint_Write_Control_Stream_LE+0x42>
    4de4:	80 91 4d 2b 	lds	r24, 0x2B4D
    4de8:	87 fd       	sbrc	r24, 7
    4dea:	5a c0       	rjmp	.+180    	; 0x4ea0 <Endpoint_Write_Control_Stream_LE+0x120>
    4dec:	20 91 49 2b 	lds	r18, 0x2B49
    4df0:	30 91 4a 2b 	lds	r19, 0x2B4A
    4df4:	f9 01       	movw	r30, r18
    4df6:	e0 5c       	subi	r30, 0xC0	; 192
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	e0 80       	ld	r14, Z
    4dfc:	f9 01       	movw	r30, r18
    4dfe:	ef 5b       	subi	r30, 0xBF	; 191
    4e00:	ff 4f       	sbci	r31, 0xFF	; 255
    4e02:	80 81       	ld	r24, Z
    4e04:	f1 2c       	mov	r15, r1
    4e06:	e8 1a       	sub	r14, r24
    4e08:	f1 08       	sbc	r15, r1
    4e0a:	01 15       	cp	r16, r1
    4e0c:	11 05       	cpc	r17, r1
    4e0e:	a9 f0       	breq	.+42     	; 0x4e3a <Endpoint_Write_Control_Stream_LE+0xba>
    4e10:	88 e0       	ldi	r24, 0x08	; 8
    4e12:	e8 16       	cp	r14, r24
    4e14:	f1 04       	cpc	r15, r1
    4e16:	88 f4       	brcc	.+34     	; 0x4e3a <Endpoint_Write_Control_Stream_LE+0xba>
    4e18:	e6 01       	movw	r28, r12
    4e1a:	04 c0       	rjmp	.+8      	; 0x4e24 <Endpoint_Write_Control_Stream_LE+0xa4>
    4e1c:	88 e0       	ldi	r24, 0x08	; 8
    4e1e:	e8 16       	cp	r14, r24
    4e20:	f1 04       	cpc	r15, r1
    4e22:	59 f0       	breq	.+22     	; 0x4e3a <Endpoint_Write_Control_Stream_LE+0xba>
    4e24:	89 91       	ld	r24, Y+
    4e26:	23 d1       	rcall	.+582    	; 0x506e <Endpoint_Write_8>
    4e28:	6e 01       	movw	r12, r28
    4e2a:	01 50       	subi	r16, 0x01	; 1
    4e2c:	11 09       	sbc	r17, r1
    4e2e:	8f ef       	ldi	r24, 0xFF	; 255
    4e30:	e8 1a       	sub	r14, r24
    4e32:	f8 0a       	sbc	r15, r24
    4e34:	01 15       	cp	r16, r1
    4e36:	11 05       	cpc	r17, r1
    4e38:	89 f7       	brne	.-30     	; 0x4e1c <Endpoint_Write_Control_Stream_LE+0x9c>
    4e3a:	c1 e0       	ldi	r28, 0x01	; 1
    4e3c:	88 e0       	ldi	r24, 0x08	; 8
    4e3e:	e8 16       	cp	r14, r24
    4e40:	f1 04       	cpc	r15, r1
    4e42:	09 f0       	breq	.+2      	; 0x4e46 <Endpoint_Write_Control_Stream_LE+0xc6>
    4e44:	c0 e0       	ldi	r28, 0x00	; 0
    4e46:	dc d0       	rcall	.+440    	; 0x5000 <Endpoint_ClearIN>
    4e48:	01 15       	cp	r16, r1
    4e4a:	11 05       	cpc	r17, r1
    4e4c:	09 f4       	brne	.+2      	; 0x4e50 <Endpoint_Write_Control_Stream_LE+0xd0>
    4e4e:	b6 cf       	rjmp	.-148    	; 0x4dbc <Endpoint_Write_Control_Stream_LE+0x3c>
    4e50:	80 91 40 2b 	lds	r24, 0x2B40
    4e54:	88 23       	and	r24, r24
    4e56:	79 f0       	breq	.+30     	; 0x4e76 <Endpoint_Write_Control_Stream_LE+0xf6>
    4e58:	85 30       	cpi	r24, 0x05	; 5
    4e5a:	c1 f0       	breq	.+48     	; 0x4e8c <Endpoint_Write_Control_Stream_LE+0x10c>
    4e5c:	98 d1       	rcall	.+816    	; 0x518e <Endpoint_IsSETUPReceived>
    4e5e:	81 11       	cpse	r24, r1
    4e60:	28 c0       	rjmp	.+80     	; 0x4eb2 <Endpoint_Write_Control_Stream_LE+0x132>
    4e62:	ae d1       	rcall	.+860    	; 0x51c0 <Endpoint_IsOUTReceived>
    4e64:	81 11       	cpse	r24, r1
    4e66:	09 c0       	rjmp	.+18     	; 0x4e7a <Endpoint_Write_Control_Stream_LE+0xfa>
    4e68:	c4 d1       	rcall	.+904    	; 0x51f2 <Endpoint_IsINReady>
    4e6a:	81 11       	cpse	r24, r1
    4e6c:	bb cf       	rjmp	.-138    	; 0x4de4 <Endpoint_Write_Control_Stream_LE+0x64>
    4e6e:	80 91 40 2b 	lds	r24, 0x2B40
    4e72:	81 11       	cpse	r24, r1
    4e74:	f1 cf       	rjmp	.-30     	; 0x4e58 <Endpoint_Write_Control_Stream_LE+0xd8>
    4e76:	82 e0       	ldi	r24, 0x02	; 2
    4e78:	0a c0       	rjmp	.+20     	; 0x4e8e <Endpoint_Write_Control_Stream_LE+0x10e>
    4e7a:	a2 d1       	rcall	.+836    	; 0x51c0 <Endpoint_IsOUTReceived>
    4e7c:	81 11       	cpse	r24, r1
    4e7e:	1f c0       	rjmp	.+62     	; 0x4ebe <Endpoint_Write_Control_Stream_LE+0x13e>
    4e80:	80 91 40 2b 	lds	r24, 0x2B40
    4e84:	88 23       	and	r24, r24
    4e86:	b9 f3       	breq	.-18     	; 0x4e76 <Endpoint_Write_Control_Stream_LE+0xf6>
    4e88:	85 30       	cpi	r24, 0x05	; 5
    4e8a:	b9 f7       	brne	.-18     	; 0x4e7a <Endpoint_Write_Control_Stream_LE+0xfa>
    4e8c:	83 e0       	ldi	r24, 0x03	; 3
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	1f 91       	pop	r17
    4e94:	0f 91       	pop	r16
    4e96:	ff 90       	pop	r15
    4e98:	ef 90       	pop	r14
    4e9a:	df 90       	pop	r13
    4e9c:	cf 90       	pop	r12
    4e9e:	08 95       	ret
    4ea0:	e0 91 49 2b 	lds	r30, 0x2B49
    4ea4:	f0 91 4a 2b 	lds	r31, 0x2B4A
    4ea8:	ef 5b       	subi	r30, 0xBF	; 191
    4eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4eac:	e0 80       	ld	r14, Z
    4eae:	f1 2c       	mov	r15, r1
    4eb0:	ac cf       	rjmp	.-168    	; 0x4e0a <Endpoint_Write_Control_Stream_LE+0x8a>
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	ec cf       	rjmp	.-40     	; 0x4e8e <Endpoint_Write_Control_Stream_LE+0x10e>
    4eb6:	a4 d0       	rcall	.+328    	; 0x5000 <Endpoint_ClearIN>
    4eb8:	00 e0       	ldi	r16, 0x00	; 0
    4eba:	10 e0       	ldi	r17, 0x00	; 0
    4ebc:	7a cf       	rjmp	.-268    	; 0x4db2 <Endpoint_Write_Control_Stream_LE+0x32>
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	e6 cf       	rjmp	.-52     	; 0x4e8e <Endpoint_Write_Control_Stream_LE+0x10e>

00004ec2 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    4ec2:	cf 92       	push	r12
    4ec4:	df 92       	push	r13
    4ec6:	ef 92       	push	r14
    4ec8:	ff 92       	push	r15
    4eca:	0f 93       	push	r16
    4ecc:	1f 93       	push	r17
    4ece:	cf 93       	push	r28
    4ed0:	df 93       	push	r29
    4ed2:	d8 2e       	mov	r13, r24
    4ed4:	c9 2e       	mov	r12, r25
    4ed6:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    4ed8:	80 91 4d 2b 	lds	r24, 0x2B4D
    4edc:	80 68       	ori	r24, 0x80	; 128
    4ede:	d6 d0       	rcall	.+428    	; 0x508c <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    4ee0:	c0 91 47 2b 	lds	r28, 0x2B47
    4ee4:	d0 91 48 2b 	lds	r29, 0x2B48
    4ee8:	c0 17       	cp	r28, r16
    4eea:	d1 07       	cpc	r29, r17
    4eec:	28 f0       	brcs	.+10     	; 0x4ef8 <Endpoint_Write_Control_PStream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    4eee:	01 15       	cp	r16, r1
    4ef0:	11 05       	cpc	r17, r1
    4ef2:	09 f4       	brne	.+2      	; 0x4ef6 <Endpoint_Write_Control_PStream_LE+0x34>
    4ef4:	7f c0       	rjmp	.+254    	; 0x4ff4 <Endpoint_Write_Control_PStream_LE+0x132>
    4ef6:	e8 01       	movw	r28, r16
    4ef8:	ed 2c       	mov	r14, r13
    4efa:	fc 2c       	mov	r15, r12
    4efc:	d1 2c       	mov	r13, r1
    4efe:	20 97       	sbiw	r28, 0x00	; 0
    4f00:	09 f0       	breq	.+2      	; 0x4f04 <Endpoint_Write_Control_PStream_LE+0x42>
    4f02:	45 c0       	rjmp	.+138    	; 0x4f8e <Endpoint_Write_Control_PStream_LE+0xcc>
    4f04:	dd 20       	and	r13, r13
    4f06:	09 f4       	brne	.+2      	; 0x4f0a <Endpoint_Write_Control_PStream_LE+0x48>
    4f08:	57 c0       	rjmp	.+174    	; 0x4fb8 <Endpoint_Write_Control_PStream_LE+0xf6>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4f0a:	80 91 40 2b 	lds	r24, 0x2B40

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4f0e:	88 23       	and	r24, r24
    4f10:	09 f4       	brne	.+2      	; 0x4f14 <Endpoint_Write_Control_PStream_LE+0x52>
    4f12:	50 c0       	rjmp	.+160    	; 0x4fb4 <Endpoint_Write_Control_PStream_LE+0xf2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4f14:	85 30       	cpi	r24, 0x05	; 5
    4f16:	09 f4       	brne	.+2      	; 0x4f1a <Endpoint_Write_Control_PStream_LE+0x58>
    4f18:	58 c0       	rjmp	.+176    	; 0x4fca <Endpoint_Write_Control_PStream_LE+0x108>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    4f1a:	39 d1       	rcall	.+626    	; 0x518e <Endpoint_IsSETUPReceived>
    4f1c:	81 11       	cpse	r24, r1
    4f1e:	68 c0       	rjmp	.+208    	; 0x4ff0 <Endpoint_Write_Control_PStream_LE+0x12e>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    4f20:	4f d1       	rcall	.+670    	; 0x51c0 <Endpoint_IsOUTReceived>
    4f22:	81 11       	cpse	r24, r1
    4f24:	49 c0       	rjmp	.+146    	; 0x4fb8 <Endpoint_Write_Control_PStream_LE+0xf6>
		  break;

		if (Endpoint_IsINReady())
    4f26:	65 d1       	rcall	.+714    	; 0x51f2 <Endpoint_IsINReady>
    4f28:	88 23       	and	r24, r24
    4f2a:	79 f3       	breq	.-34     	; 0x4f0a <Endpoint_Write_Control_PStream_LE+0x48>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    4f2c:	80 91 4d 2b 	lds	r24, 0x2B4D
    4f30:	87 fd       	sbrc	r24, 7
    4f32:	55 c0       	rjmp	.+170    	; 0x4fde <Endpoint_Write_Control_PStream_LE+0x11c>
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    4f34:	80 91 49 2b 	lds	r24, 0x2B49
    4f38:	90 91 4a 2b 	lds	r25, 0x2B4A
    4f3c:	fc 01       	movw	r30, r24
    4f3e:	e0 5c       	subi	r30, 0xC0	; 192
    4f40:	ff 4f       	sbci	r31, 0xFF	; 255
    4f42:	00 81       	ld	r16, Z
    4f44:	fc 01       	movw	r30, r24
    4f46:	ef 5b       	subi	r30, 0xBF	; 191
    4f48:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4a:	80 81       	ld	r24, Z
    4f4c:	10 e0       	ldi	r17, 0x00	; 0
    4f4e:	08 1b       	sub	r16, r24
    4f50:	11 09       	sbc	r17, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4f52:	20 97       	sbiw	r28, 0x00	; 0
    4f54:	91 f0       	breq	.+36     	; 0x4f7a <Endpoint_Write_Control_PStream_LE+0xb8>
    4f56:	08 30       	cpi	r16, 0x08	; 8
    4f58:	11 05       	cpc	r17, r1
    4f5a:	20 f0       	brcs	.+8      	; 0x4f64 <Endpoint_Write_Control_PStream_LE+0xa2>
    4f5c:	0e c0       	rjmp	.+28     	; 0x4f7a <Endpoint_Write_Control_PStream_LE+0xb8>
    4f5e:	08 30       	cpi	r16, 0x08	; 8
    4f60:	11 05       	cpc	r17, r1
    4f62:	59 f0       	breq	.+22     	; 0x4f7a <Endpoint_Write_Control_PStream_LE+0xb8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    4f64:	f7 01       	movw	r30, r14
    4f66:	84 91       	lpm	r24, Z
    4f68:	82 d0       	rcall	.+260    	; 0x506e <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    4f6a:	ff ef       	ldi	r31, 0xFF	; 255
    4f6c:	ef 1a       	sub	r14, r31
    4f6e:	ff 0a       	sbc	r15, r31
				Length--;
    4f70:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    4f72:	0f 5f       	subi	r16, 0xFF	; 255
    4f74:	1f 4f       	sbci	r17, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4f76:	20 97       	sbiw	r28, 0x00	; 0
    4f78:	91 f7       	brne	.-28     	; 0x4f5e <Endpoint_Write_Control_PStream_LE+0x9c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4f7a:	dd 24       	eor	r13, r13
    4f7c:	d3 94       	inc	r13
    4f7e:	08 30       	cpi	r16, 0x08	; 8
    4f80:	11 05       	cpc	r17, r1
    4f82:	09 f0       	breq	.+2      	; 0x4f86 <Endpoint_Write_Control_PStream_LE+0xc4>
    4f84:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    4f86:	3c d0       	rcall	.+120    	; 0x5000 <Endpoint_ClearIN>
    4f88:	20 97       	sbiw	r28, 0x00	; 0
    4f8a:	09 f4       	brne	.+2      	; 0x4f8e <Endpoint_Write_Control_PStream_LE+0xcc>
    4f8c:	bb cf       	rjmp	.-138    	; 0x4f04 <Endpoint_Write_Control_PStream_LE+0x42>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4f8e:	80 91 40 2b 	lds	r24, 0x2B40

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4f92:	88 23       	and	r24, r24
    4f94:	79 f0       	breq	.+30     	; 0x4fb4 <Endpoint_Write_Control_PStream_LE+0xf2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4f96:	85 30       	cpi	r24, 0x05	; 5
    4f98:	c1 f0       	breq	.+48     	; 0x4fca <Endpoint_Write_Control_PStream_LE+0x108>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    4f9a:	f9 d0       	rcall	.+498    	; 0x518e <Endpoint_IsSETUPReceived>
    4f9c:	81 11       	cpse	r24, r1
    4f9e:	28 c0       	rjmp	.+80     	; 0x4ff0 <Endpoint_Write_Control_PStream_LE+0x12e>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    4fa0:	0f d1       	rcall	.+542    	; 0x51c0 <Endpoint_IsOUTReceived>
    4fa2:	81 11       	cpse	r24, r1
    4fa4:	09 c0       	rjmp	.+18     	; 0x4fb8 <Endpoint_Write_Control_PStream_LE+0xf6>
		  break;

		if (Endpoint_IsINReady())
    4fa6:	25 d1       	rcall	.+586    	; 0x51f2 <Endpoint_IsINReady>
    4fa8:	81 11       	cpse	r24, r1
    4faa:	c0 cf       	rjmp	.-128    	; 0x4f2c <Endpoint_Write_Control_PStream_LE+0x6a>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4fac:	80 91 40 2b 	lds	r24, 0x2B40

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4fb0:	81 11       	cpse	r24, r1
    4fb2:	f1 cf       	rjmp	.-30     	; 0x4f96 <Endpoint_Write_Control_PStream_LE+0xd4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4fb4:	82 e0       	ldi	r24, 0x02	; 2
    4fb6:	0a c0       	rjmp	.+20     	; 0x4fcc <Endpoint_Write_Control_PStream_LE+0x10a>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    4fb8:	03 d1       	rcall	.+518    	; 0x51c0 <Endpoint_IsOUTReceived>
    4fba:	81 11       	cpse	r24, r1
    4fbc:	1f c0       	rjmp	.+62     	; 0x4ffc <Endpoint_Write_Control_PStream_LE+0x13a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4fbe:	80 91 40 2b 	lds	r24, 0x2B40

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4fc2:	88 23       	and	r24, r24
    4fc4:	b9 f3       	breq	.-18     	; 0x4fb4 <Endpoint_Write_Control_PStream_LE+0xf2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4fc6:	85 30       	cpi	r24, 0x05	; 5
    4fc8:	b9 f7       	brne	.-18     	; 0x4fb8 <Endpoint_Write_Control_PStream_LE+0xf6>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4fca:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	1f 91       	pop	r17
    4fd2:	0f 91       	pop	r16
    4fd4:	ff 90       	pop	r15
    4fd6:	ef 90       	pop	r14
    4fd8:	df 90       	pop	r13
    4fda:	cf 90       	pop	r12
    4fdc:	08 95       	ret
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    4fde:	e0 91 49 2b 	lds	r30, 0x2B49
    4fe2:	f0 91 4a 2b 	lds	r31, 0x2B4A
    4fe6:	ef 5b       	subi	r30, 0xBF	; 191
    4fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fea:	00 81       	ld	r16, Z
    4fec:	10 e0       	ldi	r17, 0x00	; 0
    4fee:	b1 cf       	rjmp	.-158    	; 0x4f52 <Endpoint_Write_Control_PStream_LE+0x90>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4ff0:	81 e0       	ldi	r24, 0x01	; 1
    4ff2:	ec cf       	rjmp	.-40     	; 0x4fcc <Endpoint_Write_Control_PStream_LE+0x10a>
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();
    4ff4:	05 d0       	rcall	.+10     	; 0x5000 <Endpoint_ClearIN>
    4ff6:	c0 e0       	ldi	r28, 0x00	; 0
    4ff8:	d0 e0       	ldi	r29, 0x00	; 0
    4ffa:	7e cf       	rjmp	.-260    	; 0x4ef8 <Endpoint_Write_Control_PStream_LE+0x36>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	e6 cf       	rjmp	.-52     	; 0x4fcc <Endpoint_Write_Control_PStream_LE+0x10a>

00005000 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    5000:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5004:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5008:	a0 91 49 2b 	lds	r26, 0x2B49
    500c:	b0 91 4a 2b 	lds	r27, 0x2B4A
    5010:	af 5b       	subi	r26, 0xBF	; 191
    5012:	bf 4f       	sbci	r27, 0xFF	; 255
    5014:	8c 91       	ld	r24, X
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	82 83       	std	Z+2, r24	; 0x02
    501a:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    501c:	80 81       	ld	r24, Z
    501e:	8d 79       	andi	r24, 0x9D	; 157
    5020:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    5022:	e0 91 49 2b 	lds	r30, 0x2B49
    5026:	f0 91 4a 2b 	lds	r31, 0x2B4A
    502a:	ef 5b       	subi	r30, 0xBF	; 191
    502c:	ff 4f       	sbci	r31, 0xFF	; 255
    502e:	10 82       	st	Z, r1
    5030:	08 95       	ret

00005032 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    5032:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5036:	f0 91 4c 2b 	lds	r31, 0x2B4C
    503a:	80 81       	ld	r24, Z
    503c:	8d 79       	andi	r24, 0x9D	; 157
    503e:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    5040:	e0 91 49 2b 	lds	r30, 0x2B49
    5044:	f0 91 4a 2b 	lds	r31, 0x2B4A
    5048:	ef 5b       	subi	r30, 0xBF	; 191
    504a:	ff 4f       	sbci	r31, 0xFF	; 255
    504c:	10 82       	st	Z, r1
    504e:	08 95       	ret

00005050 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    5050:	80 91 49 2b 	lds	r24, 0x2B49
    5054:	90 91 4a 2b 	lds	r25, 0x2B4A
    5058:	fc 01       	movw	r30, r24
    505a:	ef 5b       	subi	r30, 0xBF	; 191
    505c:	ff 4f       	sbci	r31, 0xFF	; 255
    505e:	20 81       	ld	r18, Z
    5060:	dc 01       	movw	r26, r24
    5062:	a2 0f       	add	r26, r18
    5064:	b1 1d       	adc	r27, r1
    5066:	8c 91       	ld	r24, X
    5068:	2f 5f       	subi	r18, 0xFF	; 255
    506a:	20 83       	st	Z, r18
}
    506c:	08 95       	ret

0000506e <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    506e:	20 91 49 2b 	lds	r18, 0x2B49
    5072:	30 91 4a 2b 	lds	r19, 0x2B4A
    5076:	f9 01       	movw	r30, r18
    5078:	ef 5b       	subi	r30, 0xBF	; 191
    507a:	ff 4f       	sbci	r31, 0xFF	; 255
    507c:	90 81       	ld	r25, Z
    507e:	d9 01       	movw	r26, r18
    5080:	a9 0f       	add	r26, r25
    5082:	b1 1d       	adc	r27, r1
    5084:	8c 93       	st	X, r24
    5086:	9f 5f       	subi	r25, 0xFF	; 255
    5088:	90 83       	st	Z, r25
    508a:	08 95       	ret

0000508c <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    508c:	80 93 4d 2b 	sts	0x2B4D, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    5090:	28 2f       	mov	r18, r24
    5092:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    5094:	62 2f       	mov	r22, r18
    5096:	70 e0       	ldi	r23, 0x00	; 0
    5098:	94 e8       	ldi	r25, 0x84	; 132
    509a:	29 9f       	mul	r18, r25
    509c:	90 01       	movw	r18, r0
    509e:	11 24       	eor	r1, r1
    50a0:	22 5b       	subi	r18, 0xB2	; 178
    50a2:	34 4d       	sbci	r19, 0xD4	; 212
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    50a4:	40 91 c6 04 	lds	r20, 0x04C6
    50a8:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    50ac:	87 fd       	sbrc	r24, 7
    50ae:	12 c0       	rjmp	.+36     	; 0x50d4 <Endpoint_SelectEndpoint+0x48>
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    50b0:	20 93 49 2b 	sts	0x2B49, r18
    50b4:	30 93 4a 2b 	sts	0x2B4A, r19
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    50b8:	cb 01       	movw	r24, r22
    50ba:	82 95       	swap	r24
    50bc:	92 95       	swap	r25
    50be:	90 7f       	andi	r25, 0xF0	; 240
    50c0:	98 27       	eor	r25, r24
    50c2:	80 7f       	andi	r24, 0xF0	; 240
    50c4:	98 27       	eor	r25, r24
    50c6:	84 0f       	add	r24, r20
    50c8:	95 1f       	adc	r25, r21
    50ca:	80 93 4b 2b 	sts	0x2B4B, r24
    50ce:	90 93 4c 2b 	sts	0x2B4C, r25
    50d2:	08 95       	ret
	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;

	if (Address & ENDPOINT_DIR_IN)
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    50d4:	2e 5b       	subi	r18, 0xBE	; 190
    50d6:	3f 4f       	sbci	r19, 0xFF	; 255
    50d8:	20 93 49 2b 	sts	0x2B49, r18
    50dc:	30 93 4a 2b 	sts	0x2B4A, r19
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    50e0:	62 95       	swap	r22
    50e2:	72 95       	swap	r23
    50e4:	70 7f       	andi	r23, 0xF0	; 240
    50e6:	76 27       	eor	r23, r22
    50e8:	60 7f       	andi	r22, 0xF0	; 240
    50ea:	76 27       	eor	r23, r22
    50ec:	68 5f       	subi	r22, 0xF8	; 248
    50ee:	7f 4f       	sbci	r23, 0xFF	; 255
    50f0:	64 0f       	add	r22, r20
    50f2:	75 1f       	adc	r23, r21
    50f4:	60 93 4b 2b 	sts	0x2B4B, r22
    50f8:	70 93 4c 2b 	sts	0x2B4C, r23
    50fc:	08 95       	ret

000050fe <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    50fe:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5102:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5106:	81 81       	ldd	r24, Z+1	; 0x01
    5108:	84 60       	ori	r24, 0x04	; 4
    510a:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    510c:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5110:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5114:	81 81       	ldd	r24, Z+1	; 0x01
    5116:	80 7c       	andi	r24, 0xC0	; 192
    5118:	80 34       	cpi	r24, 0x40	; 64
    511a:	09 f0       	breq	.+2      	; 0x511e <Endpoint_StallTransaction+0x20>
    511c:	08 95       	ret
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    511e:	80 91 4d 2b 	lds	r24, 0x2B4D
    5122:	80 58       	subi	r24, 0x80	; 128
    5124:	b3 df       	rcall	.-154    	; 0x508c <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    5126:	e0 91 4b 2b 	lds	r30, 0x2B4B
    512a:	f0 91 4c 2b 	lds	r31, 0x2B4C
    512e:	81 81       	ldd	r24, Z+1	; 0x01
    5130:	84 60       	ori	r24, 0x04	; 4
    5132:	81 83       	std	Z+1, r24	; 0x01
    5134:	08 95       	ret

00005136 <Endpoint_ClearSETUP>:
	return false;
}

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    5136:	80 91 4d 2b 	lds	r24, 0x2B4D
    513a:	8f 77       	andi	r24, 0x7F	; 127
    513c:	a7 df       	rcall	.-178    	; 0x508c <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    513e:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5142:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5146:	80 81       	ld	r24, Z
    5148:	8d 78       	andi	r24, 0x8D	; 141
    514a:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    514c:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5150:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5154:	80 81       	ld	r24, Z
    5156:	81 60       	ori	r24, 0x01	; 1
    5158:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    515a:	e0 91 49 2b 	lds	r30, 0x2B49
    515e:	f0 91 4a 2b 	lds	r31, 0x2B4A
    5162:	ef 5b       	subi	r30, 0xBF	; 191
    5164:	ff 4f       	sbci	r31, 0xFF	; 255
    5166:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    5168:	80 91 4d 2b 	lds	r24, 0x2B4D
    516c:	80 68       	ori	r24, 0x80	; 128
    516e:	8e df       	rcall	.-228    	; 0x508c <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    5170:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5174:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5178:	80 81       	ld	r24, Z
    517a:	81 60       	ori	r24, 0x01	; 1
    517c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    517e:	e0 91 49 2b 	lds	r30, 0x2B49
    5182:	f0 91 4a 2b 	lds	r31, 0x2B4A
    5186:	ef 5b       	subi	r30, 0xBF	; 191
    5188:	ff 4f       	sbci	r31, 0xFF	; 255
    518a:	10 82       	st	Z, r1
    518c:	08 95       	ret

0000518e <Endpoint_IsSETUPReceived>:
	return false;
}

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    518e:	80 91 4d 2b 	lds	r24, 0x2B4D
    5192:	8f 77       	andi	r24, 0x7F	; 127
    5194:	7b df       	rcall	.-266    	; 0x508c <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    5196:	e0 91 4b 2b 	lds	r30, 0x2B4B
    519a:	f0 91 4c 2b 	lds	r31, 0x2B4C
    519e:	80 81       	ld	r24, Z
    51a0:	84 ff       	sbrs	r24, 4
    51a2:	0c c0       	rjmp	.+24     	; 0x51bc <Endpoint_IsSETUPReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    51a4:	20 91 49 2b 	lds	r18, 0x2B49
    51a8:	30 91 4a 2b 	lds	r19, 0x2B4A
    51ac:	82 81       	ldd	r24, Z+2	; 0x02
    51ae:	93 81       	ldd	r25, Z+3	; 0x03
    51b0:	f9 01       	movw	r30, r18
    51b2:	e0 5c       	subi	r30, 0xC0	; 192
    51b4:	ff 4f       	sbci	r31, 0xFF	; 255
    51b6:	80 83       	st	Z, r24
		return true;
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	08 95       	ret
	}

	return false;
    51bc:	80 e0       	ldi	r24, 0x00	; 0
}
    51be:	08 95       	ret

000051c0 <Endpoint_IsOUTReceived>:
	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
}

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    51c0:	80 91 4d 2b 	lds	r24, 0x2B4D
    51c4:	8f 77       	andi	r24, 0x7F	; 127
    51c6:	62 df       	rcall	.-316    	; 0x508c <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    51c8:	e0 91 4b 2b 	lds	r30, 0x2B4B
    51cc:	f0 91 4c 2b 	lds	r31, 0x2B4C
    51d0:	80 81       	ld	r24, Z
    51d2:	85 ff       	sbrs	r24, 5
    51d4:	0c c0       	rjmp	.+24     	; 0x51ee <Endpoint_IsOUTReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    51d6:	20 91 49 2b 	lds	r18, 0x2B49
    51da:	30 91 4a 2b 	lds	r19, 0x2B4A
    51de:	82 81       	ldd	r24, Z+2	; 0x02
    51e0:	93 81       	ldd	r25, Z+3	; 0x03
    51e2:	f9 01       	movw	r30, r18
    51e4:	e0 5c       	subi	r30, 0xC0	; 192
    51e6:	ff 4f       	sbci	r31, 0xFF	; 255
    51e8:	80 83       	st	Z, r24
		return true;
    51ea:	81 e0       	ldi	r24, 0x01	; 1
    51ec:	08 95       	ret
	}

	return false;
    51ee:	80 e0       	ldi	r24, 0x00	; 0
}
    51f0:	08 95       	ret

000051f2 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    51f2:	80 91 4d 2b 	lds	r24, 0x2B4D
    51f6:	80 68       	ori	r24, 0x80	; 128
    51f8:	49 df       	rcall	.-366    	; 0x508c <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    51fa:	e0 91 4b 2b 	lds	r30, 0x2B4B
    51fe:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5202:	80 81       	ld	r24, Z
}
    5204:	86 95       	lsr	r24
    5206:	81 70       	andi	r24, 0x01	; 1
    5208:	08 95       	ret

0000520a <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    520a:	1f 93       	push	r17
    520c:	cf 93       	push	r28
    520e:	df 93       	push	r29
    5210:	00 d0       	rcall	.+0      	; 0x5212 <Endpoint_ConfigureEndpoint_PRV+0x8>
    5212:	cd b7       	in	r28, 0x3d	; 61
    5214:	de b7       	in	r29, 0x3e	; 62
    5216:	18 2f       	mov	r17, r24
	Endpoint_SelectEndpoint(Address);
    5218:	4a 83       	std	Y+2, r20	; 0x02
    521a:	69 83       	std	Y+1, r22	; 0x01
    521c:	37 df       	rcall	.-402    	; 0x508c <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    521e:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5222:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5226:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    5228:	e0 91 4b 2b 	lds	r30, 0x2B4B
    522c:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5230:	4a 81       	ldd	r20, Y+2	; 0x02
    5232:	69 81       	ldd	r22, Y+1	; 0x01
    5234:	17 fd       	sbrc	r17, 7
    5236:	22 c0       	rjmp	.+68     	; 0x527c <Endpoint_ConfigureEndpoint_PRV+0x72>
    5238:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    523a:	e0 91 4b 2b 	lds	r30, 0x2B4B
    523e:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5242:	61 83       	std	Z+1, r22	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    5244:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5248:	f0 91 4c 2b 	lds	r31, 0x2B4C
    524c:	12 82       	std	Z+2, r1	; 0x02
    524e:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    5250:	80 91 49 2b 	lds	r24, 0x2B49
    5254:	90 91 4a 2b 	lds	r25, 0x2B4A
    5258:	84 83       	std	Z+4, r24	; 0x04
    525a:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    525c:	40 e0       	ldi	r20, 0x00	; 0
    525e:	fc 01       	movw	r30, r24
    5260:	e0 5c       	subi	r30, 0xC0	; 192
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    5266:	fc 01       	movw	r30, r24
    5268:	ef 5b       	subi	r30, 0xBF	; 191
    526a:	ff 4f       	sbci	r31, 0xFF	; 255
    526c:	10 82       	st	Z, r1

	return true;
}
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	0f 90       	pop	r0
    5272:	0f 90       	pop	r0
    5274:	df 91       	pop	r29
    5276:	cf 91       	pop	r28
    5278:	1f 91       	pop	r17
    527a:	08 95       	ret
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    527c:	82 e0       	ldi	r24, 0x02	; 2
    527e:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    5280:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5284:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5288:	61 83       	std	Z+1, r22	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    528a:	e0 91 4b 2b 	lds	r30, 0x2B4B
    528e:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5292:	12 82       	std	Z+2, r1	; 0x02
    5294:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    5296:	80 91 49 2b 	lds	r24, 0x2B49
    529a:	90 91 4a 2b 	lds	r25, 0x2B4A
    529e:	84 83       	std	Z+4, r24	; 0x04
    52a0:	95 83       	std	Z+5, r25	; 0x05
    52a2:	dd cf       	rjmp	.-70     	; 0x525e <Endpoint_ConfigureEndpoint_PRV+0x54>

000052a4 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    52a4:	af 92       	push	r10
    52a6:	bf 92       	push	r11
    52a8:	df 92       	push	r13
    52aa:	ef 92       	push	r14
    52ac:	ff 92       	push	r15
    52ae:	0f 93       	push	r16
    52b0:	1f 93       	push	r17
    52b2:	cf 93       	push	r28
    52b4:	df 93       	push	r29
    52b6:	00 d0       	rcall	.+0      	; 0x52b8 <Endpoint_ConfigureEndpointTable+0x14>
    52b8:	cd b7       	in	r28, 0x3d	; 61
    52ba:	de b7       	in	r29, 0x3e	; 62
    52bc:	e6 2e       	mov	r14, r22
	for (uint8_t i = 0; i < Entries; i++)
    52be:	66 23       	and	r22, r22
    52c0:	09 f4       	brne	.+2      	; 0x52c4 <Endpoint_ConfigureEndpointTable+0x20>
    52c2:	4a c0       	rjmp	.+148    	; 0x5358 <Endpoint_ConfigureEndpointTable+0xb4>
    52c4:	5c 01       	movw	r10, r24
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
    52c6:	8c 01       	movw	r16, r24
    52c8:	0c 5f       	subi	r16, 0xFC	; 252
    52ca:	1f 4f       	sbci	r17, 0xFF	; 255
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    52cc:	f1 2c       	mov	r15, r1
	{
		if (!(Table[i].Address))
    52ce:	d5 01       	movw	r26, r10
    52d0:	5c 91       	ld	r21, X
    52d2:	55 23       	and	r21, r21
    52d4:	c9 f1       	breq	.+114    	; 0x5348 <Endpoint_ConfigureEndpointTable+0xa4>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    52d6:	d5 01       	movw	r26, r10
    52d8:	11 96       	adiw	r26, 0x01	; 1
    52da:	ed 91       	ld	r30, X+
    52dc:	fc 91       	ld	r31, X
    52de:	12 97       	sbiw	r26, 0x02	; 2
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
    52e0:	d8 01       	movw	r26, r16
    52e2:	11 97       	sbiw	r26, 0x01	; 1
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    52e4:	4c 91       	ld	r20, X
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    52e6:	d8 01       	movw	r26, r16
    52e8:	8c 91       	ld	r24, X
    52ea:	82 30       	cpi	r24, 0x02	; 2
    52ec:	08 f4       	brcc	.+2      	; 0x52f0 <Endpoint_ConfigureEndpointTable+0x4c>
    52ee:	43 c0       	rjmp	.+134    	; 0x5376 <Endpoint_ConfigureEndpointTable+0xd2>
    52f0:	98 e1       	ldi	r25, 0x18	; 24
    52f2:	88 e1       	ldi	r24, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    52f4:	e9 30       	cpi	r30, 0x09	; 9
    52f6:	f1 05       	cpc	r31, r1
    52f8:	50 f0       	brcs	.+20     	; 0x530e <Endpoint_ConfigureEndpointTable+0x6a>
    52fa:	28 e0       	ldi	r18, 0x08	; 8
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    5300:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    5302:	22 0f       	add	r18, r18
    5304:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    5306:	2e 17       	cp	r18, r30
    5308:	3f 07       	cpc	r19, r31
    530a:	d0 f3       	brcs	.-12     	; 0x5300 <Endpoint_ConfigureEndpointTable+0x5c>
    530c:	98 2b       	or	r25, r24
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    530e:	25 2f       	mov	r18, r21
    5310:	2f 70       	andi	r18, 0x0F	; 15
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	26 30       	cpi	r18, 0x06	; 6
    5316:	31 05       	cpc	r19, r1
    5318:	64 f5       	brge	.+88     	; 0x5372 <Endpoint_ConfigureEndpointTable+0xce>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
				if (Size > 64)
    531a:	e1 34       	cpi	r30, 0x41	; 65
    531c:	f1 05       	cpc	r31, r1
    531e:	48 f5       	brcc	.+82     	; 0x5372 <Endpoint_ConfigureEndpointTable+0xce>

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    5320:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
				  return false;

				switch (Type)
    5322:	41 11       	cpse	r20, r1
    5324:	2b c0       	rjmp	.+86     	; 0x537c <Endpoint_ConfigureEndpointTable+0xd8>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    5326:	90 64       	ori	r25, 0x40	; 64
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    5328:	de 2e       	mov	r13, r30
    532a:	4e 2f       	mov	r20, r30
    532c:	69 2f       	mov	r22, r25
    532e:	85 2f       	mov	r24, r21
    5330:	80 58       	subi	r24, 0x80	; 128
    5332:	59 83       	std	Y+1, r21	; 0x01
    5334:	9a 83       	std	Y+2, r25	; 0x02
    5336:	69 df       	rcall	.-302    	; 0x520a <Endpoint_ConfigureEndpoint_PRV>
    5338:	9a 81       	ldd	r25, Y+2	; 0x02
    533a:	59 81       	ldd	r21, Y+1	; 0x01

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    533c:	4d 2d       	mov	r20, r13
    533e:	69 2f       	mov	r22, r25
    5340:	85 2f       	mov	r24, r21
    5342:	63 df       	rcall	.-314    	; 0x520a <Endpoint_ConfigureEndpoint_PRV>
    5344:	88 23       	and	r24, r24
    5346:	a9 f0       	breq	.+42     	; 0x5372 <Endpoint_ConfigureEndpointTable+0xce>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    5348:	f3 94       	inc	r15
    534a:	b5 e0       	ldi	r27, 0x05	; 5
    534c:	ab 0e       	add	r10, r27
    534e:	b1 1c       	adc	r11, r1
    5350:	0b 5f       	subi	r16, 0xFB	; 251
    5352:	1f 4f       	sbci	r17, 0xFF	; 255
    5354:	fe 10       	cpse	r15, r14
    5356:	bb cf       	rjmp	.-138    	; 0x52ce <Endpoint_ConfigureEndpointTable+0x2a>
		{
			return false;
		}
	}

	return true;
    5358:	81 e0       	ldi	r24, 0x01	; 1
}
    535a:	0f 90       	pop	r0
    535c:	0f 90       	pop	r0
    535e:	df 91       	pop	r29
    5360:	cf 91       	pop	r28
    5362:	1f 91       	pop	r17
    5364:	0f 91       	pop	r16
    5366:	ff 90       	pop	r15
    5368:	ef 90       	pop	r14
    536a:	df 90       	pop	r13
    536c:	bf 90       	pop	r11
    536e:	af 90       	pop	r10
    5370:	08 95       	ret
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    5372:	80 e0       	ldi	r24, 0x00	; 0
    5374:	f2 cf       	rjmp	.-28     	; 0x535a <Endpoint_ConfigureEndpointTable+0xb6>
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    5376:	98 e0       	ldi	r25, 0x08	; 8
    5378:	88 e0       	ldi	r24, 0x08	; 8
    537a:	bc cf       	rjmp	.-136    	; 0x52f4 <Endpoint_ConfigureEndpointTable+0x50>
				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
				if (Size > 64)
				  return false;

				switch (Type)
    537c:	41 30       	cpi	r20, 0x01	; 1
    537e:	29 f0       	breq	.+10     	; 0x538a <Endpoint_ConfigureEndpointTable+0xe6>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    5380:	90 68       	ori	r25, 0x80	; 128
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    5382:	44 23       	and	r20, r20
    5384:	89 f2       	breq	.-94     	; 0x5328 <Endpoint_ConfigureEndpointTable+0x84>
    5386:	de 2e       	mov	r13, r30
    5388:	d9 cf       	rjmp	.-78     	; 0x533c <Endpoint_ConfigureEndpointTable+0x98>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    538a:	90 6c       	ori	r25, 0xC0	; 192
    538c:	de 2e       	mov	r13, r30
    538e:	d6 cf       	rjmp	.-84     	; 0x533c <Endpoint_ConfigureEndpointTable+0x98>

00005390 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    5390:	e0 ec       	ldi	r30, 0xC0	; 192
    5392:	f4 e0       	ldi	r31, 0x04	; 4
    5394:	a6 81       	ldd	r26, Z+6	; 0x06
    5396:	b7 81       	ldd	r27, Z+7	; 0x07
    5398:	19 96       	adiw	r26, 0x09	; 9
    539a:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    539c:	a6 81       	ldd	r26, Z+6	; 0x06
    539e:	b7 81       	ldd	r27, Z+7	; 0x07
    53a0:	11 96       	adiw	r26, 0x01	; 1
    53a2:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    53a4:	a6 81       	ldd	r26, Z+6	; 0x06
    53a6:	b7 81       	ldd	r27, Z+7	; 0x07
    53a8:	59 96       	adiw	r26, 0x19	; 25
    53aa:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    53ac:	a6 81       	ldd	r26, Z+6	; 0x06
    53ae:	b7 81       	ldd	r27, Z+7	; 0x07
    53b0:	51 96       	adiw	r26, 0x11	; 17
    53b2:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    53b4:	a6 81       	ldd	r26, Z+6	; 0x06
    53b6:	b7 81       	ldd	r27, Z+7	; 0x07
    53b8:	99 96       	adiw	r26, 0x29	; 41
    53ba:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    53bc:	a6 81       	ldd	r26, Z+6	; 0x06
    53be:	b7 81       	ldd	r27, Z+7	; 0x07
    53c0:	91 96       	adiw	r26, 0x21	; 33
    53c2:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    53c4:	a6 81       	ldd	r26, Z+6	; 0x06
    53c6:	b7 81       	ldd	r27, Z+7	; 0x07
    53c8:	d9 96       	adiw	r26, 0x39	; 57
    53ca:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    53cc:	a6 81       	ldd	r26, Z+6	; 0x06
    53ce:	b7 81       	ldd	r27, Z+7	; 0x07
    53d0:	d1 96       	adiw	r26, 0x31	; 49
    53d2:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    53d4:	a6 81       	ldd	r26, Z+6	; 0x06
    53d6:	b7 81       	ldd	r27, Z+7	; 0x07
    53d8:	a7 5b       	subi	r26, 0xB7	; 183
    53da:	bf 4f       	sbci	r27, 0xFF	; 255
    53dc:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    53de:	a6 81       	ldd	r26, Z+6	; 0x06
    53e0:	b7 81       	ldd	r27, Z+7	; 0x07
    53e2:	af 5b       	subi	r26, 0xBF	; 191
    53e4:	bf 4f       	sbci	r27, 0xFF	; 255
    53e6:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    53e8:	a6 81       	ldd	r26, Z+6	; 0x06
    53ea:	b7 81       	ldd	r27, Z+7	; 0x07
    53ec:	a7 5a       	subi	r26, 0xA7	; 167
    53ee:	bf 4f       	sbci	r27, 0xFF	; 255
    53f0:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    53f2:	06 80       	ldd	r0, Z+6	; 0x06
    53f4:	f7 81       	ldd	r31, Z+7	; 0x07
    53f6:	e0 2d       	mov	r30, r0
    53f8:	ef 5a       	subi	r30, 0xAF	; 175
    53fa:	ff 4f       	sbci	r31, 0xFF	; 255
    53fc:	10 82       	st	Z, r1
    53fe:	08 95       	ret

00005400 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    5400:	80 91 41 2b 	lds	r24, 0x2B41
    5404:	87 fd       	sbrc	r24, 7
    5406:	08 c0       	rjmp	.+16     	; 0x5418 <Endpoint_ClearStatusStage+0x18>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    5408:	f4 de       	rcall	.-536    	; 0x51f2 <Endpoint_IsINReady>
    540a:	81 11       	cpse	r24, r1
    540c:	0d c0       	rjmp	.+26     	; 0x5428 <Endpoint_ClearStatusStage+0x28>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    540e:	80 91 40 2b 	lds	r24, 0x2B40
    5412:	81 11       	cpse	r24, r1
    5414:	f9 cf       	rjmp	.-14     	; 0x5408 <Endpoint_ClearStatusStage+0x8>
    5416:	08 95       	ret

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    5418:	d3 de       	rcall	.-602    	; 0x51c0 <Endpoint_IsOUTReceived>
    541a:	81 11       	cpse	r24, r1
    541c:	06 c0       	rjmp	.+12     	; 0x542a <Endpoint_ClearStatusStage+0x2a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    541e:	80 91 40 2b 	lds	r24, 0x2B40
    5422:	81 11       	cpse	r24, r1
    5424:	f9 cf       	rjmp	.-14     	; 0x5418 <Endpoint_ClearStatusStage+0x18>
    5426:	08 95       	ret
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    5428:	eb cd       	rjmp	.-1066   	; 0x5000 <Endpoint_ClearIN>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    542a:	03 ce       	rjmp	.-1018   	; 0x5032 <Endpoint_ClearOUT>

0000542c <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    542c:	1f 93       	push	r17
    542e:	cf 93       	push	r28
    5430:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    5432:	e0 91 c6 04 	lds	r30, 0x04C6
    5436:	f0 91 c7 04 	lds	r31, 0x04C7
    543a:	e0 5a       	subi	r30, 0xA0	; 160
    543c:	ff 4f       	sbci	r31, 0xFF	; 255
    543e:	c0 81       	ld	r28, Z
    5440:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    5442:	14 e6       	ldi	r17, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    5444:	80 91 4d 2b 	lds	r24, 0x2B4D
    5448:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    544a:	80 38       	cpi	r24, 0x80	; 128
    544c:	31 f1       	breq	.+76     	; 0x549a <Endpoint_WaitUntilReady+0x6e>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    544e:	b8 de       	rcall	.-656    	; 0x51c0 <Endpoint_IsOUTReceived>
    5450:	81 11       	cpse	r24, r1
    5452:	26 c0       	rjmp	.+76     	; 0x54a0 <Endpoint_WaitUntilReady+0x74>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5454:	80 91 40 2b 	lds	r24, 0x2B40

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5458:	88 23       	and	r24, r24
    545a:	39 f1       	breq	.+78     	; 0x54aa <Endpoint_WaitUntilReady+0x7e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    545c:	85 30       	cpi	r24, 0x05	; 5
    545e:	51 f1       	breq	.+84     	; 0x54b4 <Endpoint_WaitUntilReady+0x88>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    5460:	e0 91 4b 2b 	lds	r30, 0x2B4B
    5464:	f0 91 4c 2b 	lds	r31, 0x2B4C
    5468:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    546a:	82 fd       	sbrc	r24, 2
    546c:	28 c0       	rjmp	.+80     	; 0x54be <Endpoint_WaitUntilReady+0x92>
    546e:	e0 91 c6 04 	lds	r30, 0x04C6
    5472:	f0 91 c7 04 	lds	r31, 0x04C7
    5476:	e0 5a       	subi	r30, 0xA0	; 160
    5478:	ff 4f       	sbci	r31, 0xFF	; 255
    547a:	80 81       	ld	r24, Z
    547c:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    547e:	c8 17       	cp	r28, r24
    5480:	d9 07       	cpc	r29, r25
    5482:	01 f3       	breq	.-64     	; 0x5444 <Endpoint_WaitUntilReady+0x18>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    5484:	21 2f       	mov	r18, r17
    5486:	21 50       	subi	r18, 0x01	; 1
    5488:	11 23       	and	r17, r17
    548a:	f1 f0       	breq	.+60     	; 0x54c8 <Endpoint_WaitUntilReady+0x9c>
    548c:	ec 01       	movw	r28, r24
    548e:	12 2f       	mov	r17, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    5490:	80 91 4d 2b 	lds	r24, 0x2B4D
    5494:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    5496:	80 38       	cpi	r24, 0x80	; 128
    5498:	d1 f6       	brne	.-76     	; 0x544e <Endpoint_WaitUntilReady+0x22>
		{
			if (Endpoint_IsINReady())
    549a:	ab de       	rcall	.-682    	; 0x51f2 <Endpoint_IsINReady>
    549c:	88 23       	and	r24, r24
    549e:	d1 f2       	breq	.-76     	; 0x5454 <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_NoError;
    54a0:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    54a2:	df 91       	pop	r29
    54a4:	cf 91       	pop	r28
    54a6:	1f 91       	pop	r17
    54a8:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    54aa:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    54ac:	df 91       	pop	r29
    54ae:	cf 91       	pop	r28
    54b0:	1f 91       	pop	r17
    54b2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    54b4:	83 e0       	ldi	r24, 0x03	; 3

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    54be:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    54c0:	df 91       	pop	r29
    54c2:	cf 91       	pop	r28
    54c4:	1f 91       	pop	r17
    54c6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    54c8:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
    54ca:	df 91       	pop	r29
    54cc:	cf 91       	pop	r28
    54ce:	1f 91       	pop	r17
    54d0:	08 95       	ret

000054d2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    54d2:	63 d0       	rcall	.+198    	; 0x559a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    54d4:	69 d0       	rcall	.+210    	; 0x55a8 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    54d6:	e0 ec       	ldi	r30, 0xC0	; 192
    54d8:	f4 e0       	ldi	r31, 0x04	; 4
    54da:	81 81       	ldd	r24, Z+1	; 0x01
    54dc:	8e 7f       	andi	r24, 0xFE	; 254
    54de:	81 83       	std	Z+1, r24	; 0x01
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    54e0:	80 81       	ld	r24, Z
    54e2:	8f 77       	andi	r24, 0x7F	; 127
    54e4:	80 83       	st	Z, r24

	USB_Detach();
	USB_Controller_Disable();

	USB_IsInitialized = false;
    54e6:	10 92 3f 2b 	sts	0x2B3F, r1
    54ea:	08 95       	ret

000054ec <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    54ec:	cf 93       	push	r28
    54ee:	df 93       	push	r29
	#if defined(USB_DEVICE_OPT_FULLSPEED)
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	else
	  CLK.USBCTRL = (((F_USB / 48000000) - 1) << CLK_USBPSDIV_gp);
    54f0:	e0 e4       	ldi	r30, 0x40	; 64
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	14 82       	std	Z+4, r1	; 0x04
	#else
	CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	#endif

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
    54f6:	84 81       	ldd	r24, Z+4	; 0x04
    54f8:	81 60       	ori	r24, 0x01	; 1
    54fa:	84 83       	std	Z+4, r24	; 0x04
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    54fc:	4e d0       	rcall	.+156    	; 0x559a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    54fe:	54 d0       	rcall	.+168    	; 0x55a8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    5500:	c0 ec       	ldi	r28, 0xC0	; 192
    5502:	d4 e0       	ldi	r29, 0x04	; 4
    5504:	88 81       	ld	r24, Y
    5506:	8f 77       	andi	r24, 0x7F	; 127
    5508:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    550a:	88 81       	ld	r24, Y
    550c:	80 68       	ori	r24, 0x80	; 128
    550e:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    5510:	10 92 40 2b 	sts	0x2B40, r1
	USB_Device_ConfigurationNumber  = 0;
    5514:	10 92 3c 2b 	sts	0x2B3C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    5518:	10 92 3e 2b 	sts	0x2B3E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    551c:	10 92 3d 2b 	sts	0x2B3D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    5520:	88 81       	ld	r24, Y
    5522:	80 64       	ori	r24, 0x40	; 64
    5524:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    5526:	48 e0       	ldi	r20, 0x08	; 8
    5528:	68 e4       	ldi	r22, 0x48	; 72
    552a:	80 e8       	ldi	r24, 0x80	; 128
    552c:	6e de       	rcall	.-804    	; 0x520a <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    552e:	48 e0       	ldi	r20, 0x08	; 8
    5530:	68 e4       	ldi	r22, 0x48	; 72
    5532:	80 e0       	ldi	r24, 0x00	; 0
    5534:	6a de       	rcall	.-812    	; 0x520a <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    5536:	88 85       	ldd	r24, Y+8	; 0x08
    5538:	80 64       	ori	r24, 0x40	; 64
    553a:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    553c:	89 81       	ldd	r24, Y+1	; 0x01
    553e:	81 60       	ori	r24, 0x01	; 1
    5540:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	08 95       	ret

00005548 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    5548:	cf 93       	push	r28
    554a:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    554c:	3f b7       	in	r19, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    554e:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    5550:	c0 ec       	ldi	r28, 0xC0	; 192
    5552:	d1 e0       	ldi	r29, 0x01	; 1
    5554:	22 e0       	ldi	r18, 0x02	; 2
    5556:	2a 87       	std	Y+10, r18	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    5558:	ea e1       	ldi	r30, 0x1A	; 26
    555a:	f0 e0       	ldi	r31, 0x00	; 0
    555c:	e4 91       	lpm	r30, Z
    555e:	a0 ec       	ldi	r26, 0xC0	; 192
    5560:	b4 e0       	ldi	r27, 0x04	; 4
    5562:	da 96       	adiw	r26, 0x3a	; 58
    5564:	ec 93       	st	X, r30
    5566:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    5568:	eb e1       	ldi	r30, 0x1B	; 27
    556a:	f0 e0       	ldi	r31, 0x00	; 0
    556c:	e4 91       	lpm	r30, Z
    556e:	db 96       	adiw	r26, 0x3b	; 59
    5570:	ec 93       	st	X, r30
    5572:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    5574:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    5576:	87 e6       	ldi	r24, 0x67	; 103
    5578:	9e e2       	ldi	r25, 0x2E	; 46
    557a:	8e 7f       	andi	r24, 0xFE	; 254
    557c:	16 96       	adiw	r26, 0x06	; 6
    557e:	8d 93       	st	X+, r24
    5580:	9c 93       	st	X, r25
    5582:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    5584:	85 e1       	ldi	r24, 0x15	; 21
    5586:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
	else if ((USB_Options & USB_OPT_BUSEVENT_PRIMED) == USB_OPT_BUSEVENT_PRIMED)
	  USB.INTCTRLA = (2 << USB_INTLVL_gp);
    5588:	18 96       	adiw	r26, 0x08	; 8
    558a:	2c 93       	st	X, r18
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    558c:	3f bf       	out	0x3f, r19	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    558e:	81 e0       	ldi	r24, 0x01	; 1
    5590:	80 93 3f 2b 	sts	0x2B3F, r24

	USB_ResetInterface();
}
    5594:	df 91       	pop	r29
    5596:	cf 91       	pop	r28
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;

	USB_ResetInterface();
    5598:	a9 cf       	rjmp	.-174    	; 0x54ec <USB_ResetInterface>

0000559a <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    559a:	e0 ec       	ldi	r30, 0xC0	; 192
    559c:	f4 e0       	ldi	r31, 0x04	; 4
    559e:	80 85       	ldd	r24, Z+8	; 0x08
    55a0:	83 70       	andi	r24, 0x03	; 3
    55a2:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    55a4:	11 86       	std	Z+9, r1	; 0x09
    55a6:	08 95       	ret

000055a8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    55a8:	e0 ec       	ldi	r30, 0xC0	; 192
    55aa:	f4 e0       	ldi	r31, 0x04	; 4
    55ac:	8f ef       	ldi	r24, 0xFF	; 255
    55ae:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    55b0:	84 87       	std	Z+12, r24	; 0x0c
    55b2:	08 95       	ret

000055b4 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    55b4:	1f 92       	push	r1
    55b6:	0f 92       	push	r0
    55b8:	0f b6       	in	r0, 0x3f	; 63
    55ba:	0f 92       	push	r0
    55bc:	11 24       	eor	r1, r1
    55be:	2f 93       	push	r18
    55c0:	3f 93       	push	r19
    55c2:	4f 93       	push	r20
    55c4:	5f 93       	push	r21
    55c6:	6f 93       	push	r22
    55c8:	7f 93       	push	r23
    55ca:	8f 93       	push	r24
    55cc:	9f 93       	push	r25
    55ce:	af 93       	push	r26
    55d0:	bf 93       	push	r27
    55d2:	ef 93       	push	r30
    55d4:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    55d6:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    55da:	87 fd       	sbrc	r24, 7
    55dc:	4d c0       	rjmp	.+154    	; 0x5678 <__vector_125+0xc4>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    55de:	80 91 ca 04 	lds	r24, 0x04CA

		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    55e2:	86 fd       	sbrc	r24, 6
    55e4:	41 c0       	rjmp	.+130    	; 0x5668 <__vector_125+0xb4>
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    55e6:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    55ea:	85 ff       	sbrs	r24, 5
    55ec:	0c c0       	rjmp	.+24     	; 0x5606 <__vector_125+0x52>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    55ee:	80 e2       	ldi	r24, 0x20	; 32
    55f0:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    55f4:	80 91 3c 2b 	lds	r24, 0x2B3C
    55f8:	88 23       	and	r24, r24
    55fa:	71 f1       	breq	.+92     	; 0x5658 <__vector_125+0xa4>
		  USB_DeviceState = DEVICE_STATE_Configured;
    55fc:	84 e0       	ldi	r24, 0x04	; 4
    55fe:	80 93 40 2b 	sts	0x2B40, r24
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    5602:	0e 94 41 11 	call	0x2282	; 0x2282 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    5606:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    560a:	84 ff       	sbrs	r24, 4
    560c:	14 c0       	rjmp	.+40     	; 0x5636 <__vector_125+0x82>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    560e:	80 e1       	ldi	r24, 0x10	; 16
    5610:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    5614:	82 e0       	ldi	r24, 0x02	; 2
    5616:	80 93 40 2b 	sts	0x2B40, r24
		USB_Device_ConfigurationNumber = 0;
    561a:	10 92 3c 2b 	sts	0x2B3C, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    561e:	10 92 c3 04 	sts	0x04C3, r1

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    5622:	b6 de       	rcall	.-660    	; 0x5390 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    5624:	48 e0       	ldi	r20, 0x08	; 8
    5626:	68 e4       	ldi	r22, 0x48	; 72
    5628:	80 e8       	ldi	r24, 0x80	; 128
    562a:	ef dd       	rcall	.-1058   	; 0x520a <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    562c:	48 e0       	ldi	r20, 0x08	; 8
    562e:	68 e4       	ldi	r22, 0x48	; 72
    5630:	80 e0       	ldi	r24, 0x00	; 0
    5632:	eb dd       	rcall	.-1066   	; 0x520a <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    5634:	23 db       	rcall	.-2490   	; 0x4c7c <USB_Event_Stub>
	}
}
    5636:	ff 91       	pop	r31
    5638:	ef 91       	pop	r30
    563a:	bf 91       	pop	r27
    563c:	af 91       	pop	r26
    563e:	9f 91       	pop	r25
    5640:	8f 91       	pop	r24
    5642:	7f 91       	pop	r23
    5644:	6f 91       	pop	r22
    5646:	5f 91       	pop	r21
    5648:	4f 91       	pop	r20
    564a:	3f 91       	pop	r19
    564c:	2f 91       	pop	r18
    564e:	0f 90       	pop	r0
    5650:	0f be       	out	0x3f, r0	; 63
    5652:	0f 90       	pop	r0
    5654:	1f 90       	pop	r1
    5656:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    5658:	80 91 c3 04 	lds	r24, 0x04C3
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    565c:	81 11       	cpse	r24, r1
    565e:	15 c0       	rjmp	.+42     	; 0x568a <__vector_125+0xd6>
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	80 93 40 2b 	sts	0x2B40, r24
    5666:	cd cf       	rjmp	.-102    	; 0x5602 <__vector_125+0x4e>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    5668:	80 e4       	ldi	r24, 0x40	; 64
    566a:	80 93 ca 04 	sts	0x04CA, r24
	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    566e:	10 92 40 2b 	sts	0x2B40, r1
		EVENT_USB_Device_Disconnect();
    5672:	0e 94 44 11 	call	0x2288	; 0x2288 <EVENT_USB_Device_Disconnect>
    5676:	b7 cf       	rjmp	.-146    	; 0x55e6 <__vector_125+0x32>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    5678:	80 91 c8 04 	lds	r24, 0x04C8
}

ISR(USB_BUSEVENT_vect)
{
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    567c:	87 ff       	sbrs	r24, 7
    567e:	af cf       	rjmp	.-162    	; 0x55de <__vector_125+0x2a>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    5680:	80 e8       	ldi	r24, 0x80	; 128
    5682:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    5686:	fa da       	rcall	.-2572   	; 0x4c7c <USB_Event_Stub>
    5688:	aa cf       	rjmp	.-172    	; 0x55de <__vector_125+0x2a>
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    568a:	83 e0       	ldi	r24, 0x03	; 3
    568c:	ea cf       	rjmp	.-44     	; 0x5662 <__vector_125+0xae>

0000568e <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    568e:	cf 93       	push	r28
    5690:	df 93       	push	r29
    5692:	ec 01       	movw	r28, r24
    5694:	40 96       	adiw	r24, 0x10	; 16
    5696:	fc 01       	movw	r30, r24
    5698:	8b e0       	ldi	r24, 0x0B	; 11
    569a:	df 01       	movw	r26, r30
    569c:	1d 92       	st	X+, r1
    569e:	8a 95       	dec	r24
    56a0:	e9 f7       	brne	.-6      	; 0x569c <CDC_Device_ConfigureEndpoints+0xe>
    56a2:	82 e0       	ldi	r24, 0x02	; 2
    56a4:	8c 83       	std	Y+4, r24	; 0x04
    56a6:	89 87       	std	Y+9, r24	; 0x09
    56a8:	83 e0       	ldi	r24, 0x03	; 3
    56aa:	8e 87       	std	Y+14, r24	; 0x0e
    56ac:	61 e0       	ldi	r22, 0x01	; 1
    56ae:	ce 01       	movw	r24, r28
    56b0:	01 96       	adiw	r24, 0x01	; 1
    56b2:	f8 dd       	rcall	.-1040   	; 0x52a4 <Endpoint_ConfigureEndpointTable>
    56b4:	81 11       	cpse	r24, r1
    56b6:	04 c0       	rjmp	.+8      	; 0x56c0 <CDC_Device_ConfigureEndpoints+0x32>
    56b8:	80 e0       	ldi	r24, 0x00	; 0
    56ba:	df 91       	pop	r29
    56bc:	cf 91       	pop	r28
    56be:	08 95       	ret
    56c0:	61 e0       	ldi	r22, 0x01	; 1
    56c2:	ce 01       	movw	r24, r28
    56c4:	06 96       	adiw	r24, 0x06	; 6
    56c6:	ee dd       	rcall	.-1060   	; 0x52a4 <Endpoint_ConfigureEndpointTable>
    56c8:	88 23       	and	r24, r24
    56ca:	b1 f3       	breq	.-20     	; 0x56b8 <CDC_Device_ConfigureEndpoints+0x2a>
    56cc:	61 e0       	ldi	r22, 0x01	; 1
    56ce:	ce 01       	movw	r24, r28
    56d0:	0b 96       	adiw	r24, 0x0b	; 11
    56d2:	df 91       	pop	r29
    56d4:	cf 91       	pop	r28
    56d6:	e6 cd       	rjmp	.-1076   	; 0x52a4 <Endpoint_ConfigureEndpointTable>

000056d8 <CDC_Device_SendString>:
    56d8:	cf 93       	push	r28
    56da:	df 93       	push	r29
    56dc:	d6 2f       	mov	r29, r22
    56de:	c7 2f       	mov	r28, r23
    56e0:	20 91 40 2b 	lds	r18, 0x2B40
    56e4:	24 30       	cpi	r18, 0x04	; 4
    56e6:	21 f0       	breq	.+8      	; 0x56f0 <CDC_Device_SendString+0x18>
    56e8:	82 e0       	ldi	r24, 0x02	; 2
    56ea:	df 91       	pop	r29
    56ec:	cf 91       	pop	r28
    56ee:	08 95       	ret
    56f0:	fc 01       	movw	r30, r24
    56f2:	44 89       	ldd	r20, Z+20	; 0x14
    56f4:	55 89       	ldd	r21, Z+21	; 0x15
    56f6:	66 89       	ldd	r22, Z+22	; 0x16
    56f8:	77 89       	ldd	r23, Z+23	; 0x17
    56fa:	45 2b       	or	r20, r21
    56fc:	46 2b       	or	r20, r22
    56fe:	47 2b       	or	r20, r23
    5700:	99 f3       	breq	.-26     	; 0x56e8 <CDC_Device_SendString+0x10>
    5702:	81 81       	ldd	r24, Z+1	; 0x01
    5704:	c3 dc       	rcall	.-1658   	; 0x508c <Endpoint_SelectEndpoint>
    5706:	ad 2f       	mov	r26, r29
    5708:	bc 2f       	mov	r27, r28
    570a:	fd 01       	movw	r30, r26
    570c:	01 90       	ld	r0, Z+
    570e:	00 20       	and	r0, r0
    5710:	e9 f7       	brne	.-6      	; 0x570c <CDC_Device_SendString+0x34>
    5712:	bf 01       	movw	r22, r30
    5714:	61 50       	subi	r22, 0x01	; 1
    5716:	71 09       	sbc	r23, r1
    5718:	6a 1b       	sub	r22, r26
    571a:	7b 0b       	sbc	r23, r27
    571c:	40 e0       	ldi	r20, 0x00	; 0
    571e:	50 e0       	ldi	r21, 0x00	; 0
    5720:	8d 2f       	mov	r24, r29
    5722:	9c 2f       	mov	r25, r28
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	bf ca       	rjmp	.-2690   	; 0x4ca8 <Endpoint_Write_Stream_LE>

0000572a <CDC_Device_SendData>:
    572a:	ef 92       	push	r14
    572c:	ff 92       	push	r15
    572e:	0f 93       	push	r16
    5730:	1f 93       	push	r17
    5732:	cf 93       	push	r28
    5734:	df 93       	push	r29
    5736:	eb 01       	movw	r28, r22
    5738:	7a 01       	movw	r14, r20
    573a:	20 91 40 2b 	lds	r18, 0x2B40
    573e:	24 30       	cpi	r18, 0x04	; 4
    5740:	41 f0       	breq	.+16     	; 0x5752 <CDC_Device_SendData+0x28>
    5742:	82 e0       	ldi	r24, 0x02	; 2
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	1f 91       	pop	r17
    574a:	0f 91       	pop	r16
    574c:	ff 90       	pop	r15
    574e:	ef 90       	pop	r14
    5750:	08 95       	ret
    5752:	fc 01       	movw	r30, r24
    5754:	04 89       	ldd	r16, Z+20	; 0x14
    5756:	15 89       	ldd	r17, Z+21	; 0x15
    5758:	26 89       	ldd	r18, Z+22	; 0x16
    575a:	37 89       	ldd	r19, Z+23	; 0x17
    575c:	01 2b       	or	r16, r17
    575e:	02 2b       	or	r16, r18
    5760:	03 2b       	or	r16, r19
    5762:	79 f3       	breq	.-34     	; 0x5742 <CDC_Device_SendData+0x18>
    5764:	81 81       	ldd	r24, Z+1	; 0x01
    5766:	92 dc       	rcall	.-1756   	; 0x508c <Endpoint_SelectEndpoint>
    5768:	40 e0       	ldi	r20, 0x00	; 0
    576a:	50 e0       	ldi	r21, 0x00	; 0
    576c:	b7 01       	movw	r22, r14
    576e:	ce 01       	movw	r24, r28
    5770:	df 91       	pop	r29
    5772:	cf 91       	pop	r28
    5774:	1f 91       	pop	r17
    5776:	0f 91       	pop	r16
    5778:	ff 90       	pop	r15
    577a:	ef 90       	pop	r14
    577c:	95 ca       	rjmp	.-2774   	; 0x4ca8 <Endpoint_Write_Stream_LE>

0000577e <CDC_Device_SendByte>:
    577e:	0f 93       	push	r16
    5780:	1f 93       	push	r17
    5782:	cf 93       	push	r28
    5784:	df 93       	push	r29
    5786:	1f 92       	push	r1
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62
    578c:	20 91 40 2b 	lds	r18, 0x2B40
    5790:	24 30       	cpi	r18, 0x04	; 4
    5792:	39 f0       	breq	.+14     	; 0x57a2 <CDC_Device_SendByte+0x24>
    5794:	82 e0       	ldi	r24, 0x02	; 2
    5796:	0f 90       	pop	r0
    5798:	df 91       	pop	r29
    579a:	cf 91       	pop	r28
    579c:	1f 91       	pop	r17
    579e:	0f 91       	pop	r16
    57a0:	08 95       	ret
    57a2:	fc 01       	movw	r30, r24
    57a4:	04 89       	ldd	r16, Z+20	; 0x14
    57a6:	15 89       	ldd	r17, Z+21	; 0x15
    57a8:	26 89       	ldd	r18, Z+22	; 0x16
    57aa:	37 89       	ldd	r19, Z+23	; 0x17
    57ac:	01 2b       	or	r16, r17
    57ae:	02 2b       	or	r16, r18
    57b0:	03 2b       	or	r16, r19
    57b2:	81 f3       	breq	.-32     	; 0x5794 <CDC_Device_SendByte+0x16>
    57b4:	81 81       	ldd	r24, Z+1	; 0x01
    57b6:	69 83       	std	Y+1, r22	; 0x01
    57b8:	69 dc       	rcall	.-1838   	; 0x508c <Endpoint_SelectEndpoint>
    57ba:	20 91 49 2b 	lds	r18, 0x2B49
    57be:	30 91 4a 2b 	lds	r19, 0x2B4A
    57c2:	f9 01       	movw	r30, r18
    57c4:	ef 5b       	subi	r30, 0xBF	; 191
    57c6:	ff 4f       	sbci	r31, 0xFF	; 255
    57c8:	90 81       	ld	r25, Z
    57ca:	f9 01       	movw	r30, r18
    57cc:	e0 5c       	subi	r30, 0xC0	; 192
    57ce:	ff 4f       	sbci	r31, 0xFF	; 255
    57d0:	80 81       	ld	r24, Z
    57d2:	69 81       	ldd	r22, Y+1	; 0x01
    57d4:	98 17       	cp	r25, r24
    57d6:	30 f0       	brcs	.+12     	; 0x57e4 <CDC_Device_SendByte+0x66>
    57d8:	69 83       	std	Y+1, r22	; 0x01
    57da:	12 dc       	rcall	.-2012   	; 0x5000 <Endpoint_ClearIN>
    57dc:	27 de       	rcall	.-946    	; 0x542c <Endpoint_WaitUntilReady>
    57de:	69 81       	ldd	r22, Y+1	; 0x01
    57e0:	81 11       	cpse	r24, r1
    57e2:	d9 cf       	rjmp	.-78     	; 0x5796 <CDC_Device_SendByte+0x18>
    57e4:	86 2f       	mov	r24, r22
    57e6:	43 dc       	rcall	.-1914   	; 0x506e <Endpoint_Write_8>
    57e8:	80 e0       	ldi	r24, 0x00	; 0
    57ea:	d5 cf       	rjmp	.-86     	; 0x5796 <CDC_Device_SendByte+0x18>

000057ec <CDC_Device_Flush>:
    57ec:	0f 93       	push	r16
    57ee:	1f 93       	push	r17
    57f0:	cf 93       	push	r28
    57f2:	df 93       	push	r29
    57f4:	1f 92       	push	r1
    57f6:	cd b7       	in	r28, 0x3d	; 61
    57f8:	de b7       	in	r29, 0x3e	; 62
    57fa:	20 91 40 2b 	lds	r18, 0x2B40
    57fe:	24 30       	cpi	r18, 0x04	; 4
    5800:	39 f0       	breq	.+14     	; 0x5810 <CDC_Device_Flush+0x24>
    5802:	82 e0       	ldi	r24, 0x02	; 2
    5804:	0f 90       	pop	r0
    5806:	df 91       	pop	r29
    5808:	cf 91       	pop	r28
    580a:	1f 91       	pop	r17
    580c:	0f 91       	pop	r16
    580e:	08 95       	ret
    5810:	fc 01       	movw	r30, r24
    5812:	44 89       	ldd	r20, Z+20	; 0x14
    5814:	55 89       	ldd	r21, Z+21	; 0x15
    5816:	66 89       	ldd	r22, Z+22	; 0x16
    5818:	77 89       	ldd	r23, Z+23	; 0x17
    581a:	45 2b       	or	r20, r21
    581c:	46 2b       	or	r20, r22
    581e:	47 2b       	or	r20, r23
    5820:	81 f3       	breq	.-32     	; 0x5802 <CDC_Device_Flush+0x16>
    5822:	81 81       	ldd	r24, Z+1	; 0x01
    5824:	33 dc       	rcall	.-1946   	; 0x508c <Endpoint_SelectEndpoint>
    5826:	80 91 4d 2b 	lds	r24, 0x2B4D
    582a:	20 91 49 2b 	lds	r18, 0x2B49
    582e:	30 91 4a 2b 	lds	r19, 0x2B4A
    5832:	f9 01       	movw	r30, r18
    5834:	87 fd       	sbrc	r24, 7
    5836:	1d c0       	rjmp	.+58     	; 0x5872 <CDC_Device_Flush+0x86>
    5838:	e0 5c       	subi	r30, 0xC0	; 192
    583a:	ff 4f       	sbci	r31, 0xFF	; 255
    583c:	80 81       	ld	r24, Z
    583e:	f9 01       	movw	r30, r18
    5840:	ef 5b       	subi	r30, 0xBF	; 191
    5842:	ff 4f       	sbci	r31, 0xFF	; 255
    5844:	40 81       	ld	r20, Z
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	84 1b       	sub	r24, r20
    584a:	91 09       	sbc	r25, r1
    584c:	89 2b       	or	r24, r25
    584e:	11 f4       	brne	.+4      	; 0x5854 <CDC_Device_Flush+0x68>
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	d8 cf       	rjmp	.-80     	; 0x5804 <CDC_Device_Flush+0x18>
    5854:	00 81       	ld	r16, Z
    5856:	f9 01       	movw	r30, r18
    5858:	e0 5c       	subi	r30, 0xC0	; 192
    585a:	ff 4f       	sbci	r31, 0xFF	; 255
    585c:	10 81       	ld	r17, Z
    585e:	d0 db       	rcall	.-2144   	; 0x5000 <Endpoint_ClearIN>
    5860:	01 17       	cp	r16, r17
    5862:	b0 f3       	brcs	.-20     	; 0x5850 <CDC_Device_Flush+0x64>
    5864:	e3 dd       	rcall	.-1082   	; 0x542c <Endpoint_WaitUntilReady>
    5866:	81 11       	cpse	r24, r1
    5868:	cd cf       	rjmp	.-102    	; 0x5804 <CDC_Device_Flush+0x18>
    586a:	89 83       	std	Y+1, r24	; 0x01
    586c:	c9 db       	rcall	.-2158   	; 0x5000 <Endpoint_ClearIN>
    586e:	89 81       	ldd	r24, Y+1	; 0x01
    5870:	c9 cf       	rjmp	.-110    	; 0x5804 <CDC_Device_Flush+0x18>
    5872:	ef 5b       	subi	r30, 0xBF	; 191
    5874:	ff 4f       	sbci	r31, 0xFF	; 255
    5876:	80 81       	ld	r24, Z
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	e8 cf       	rjmp	.-48     	; 0x584c <CDC_Device_Flush+0x60>

0000587c <CDC_Device_USBTask>:
    587c:	cf 93       	push	r28
    587e:	df 93       	push	r29
    5880:	ec 01       	movw	r28, r24
    5882:	80 91 40 2b 	lds	r24, 0x2B40
    5886:	84 30       	cpi	r24, 0x04	; 4
    5888:	19 f0       	breq	.+6      	; 0x5890 <CDC_Device_USBTask+0x14>
    588a:	df 91       	pop	r29
    588c:	cf 91       	pop	r28
    588e:	08 95       	ret
    5890:	4c 89       	ldd	r20, Y+20	; 0x14
    5892:	5d 89       	ldd	r21, Y+21	; 0x15
    5894:	6e 89       	ldd	r22, Y+22	; 0x16
    5896:	7f 89       	ldd	r23, Y+23	; 0x17
    5898:	45 2b       	or	r20, r21
    589a:	46 2b       	or	r20, r22
    589c:	47 2b       	or	r20, r23
    589e:	a9 f3       	breq	.-22     	; 0x588a <CDC_Device_USBTask+0xe>
    58a0:	89 81       	ldd	r24, Y+1	; 0x01
    58a2:	f4 db       	rcall	.-2072   	; 0x508c <Endpoint_SelectEndpoint>
    58a4:	a6 dc       	rcall	.-1716   	; 0x51f2 <Endpoint_IsINReady>
    58a6:	88 23       	and	r24, r24
    58a8:	81 f3       	breq	.-32     	; 0x588a <CDC_Device_USBTask+0xe>
    58aa:	ce 01       	movw	r24, r28
    58ac:	df 91       	pop	r29
    58ae:	cf 91       	pop	r28
    58b0:	9d cf       	rjmp	.-198    	; 0x57ec <CDC_Device_Flush>

000058b2 <CDC_Device_ReceiveByte>:
    58b2:	cf 93       	push	r28
    58b4:	df 93       	push	r29
    58b6:	20 91 40 2b 	lds	r18, 0x2B40
    58ba:	24 30       	cpi	r18, 0x04	; 4
    58bc:	c1 f5       	brne	.+112    	; 0x592e <CDC_Device_ReceiveByte+0x7c>
    58be:	fc 01       	movw	r30, r24
    58c0:	44 89       	ldd	r20, Z+20	; 0x14
    58c2:	55 89       	ldd	r21, Z+21	; 0x15
    58c4:	66 89       	ldd	r22, Z+22	; 0x16
    58c6:	77 89       	ldd	r23, Z+23	; 0x17
    58c8:	45 2b       	or	r20, r21
    58ca:	46 2b       	or	r20, r22
    58cc:	47 2b       	or	r20, r23
    58ce:	79 f1       	breq	.+94     	; 0x592e <CDC_Device_ReceiveByte+0x7c>
    58d0:	86 81       	ldd	r24, Z+6	; 0x06
    58d2:	dc db       	rcall	.-2120   	; 0x508c <Endpoint_SelectEndpoint>
    58d4:	75 dc       	rcall	.-1814   	; 0x51c0 <Endpoint_IsOUTReceived>
    58d6:	88 23       	and	r24, r24
    58d8:	51 f1       	breq	.+84     	; 0x592e <CDC_Device_ReceiveByte+0x7c>
    58da:	80 91 4d 2b 	lds	r24, 0x2B4D
    58de:	87 fd       	sbrc	r24, 7
    58e0:	3d c0       	rjmp	.+122    	; 0x595c <CDC_Device_ReceiveByte+0xaa>
    58e2:	80 91 49 2b 	lds	r24, 0x2B49
    58e6:	90 91 4a 2b 	lds	r25, 0x2B4A
    58ea:	fc 01       	movw	r30, r24
    58ec:	e0 5c       	subi	r30, 0xC0	; 192
    58ee:	ff 4f       	sbci	r31, 0xFF	; 255
    58f0:	20 81       	ld	r18, Z
    58f2:	fc 01       	movw	r30, r24
    58f4:	ef 5b       	subi	r30, 0xBF	; 191
    58f6:	ff 4f       	sbci	r31, 0xFF	; 255
    58f8:	40 81       	ld	r20, Z
    58fa:	30 e0       	ldi	r19, 0x00	; 0
    58fc:	24 1b       	sub	r18, r20
    58fe:	31 09       	sbc	r19, r1
    5900:	23 2b       	or	r18, r19
    5902:	d9 f4       	brne	.+54     	; 0x593a <CDC_Device_ReceiveByte+0x88>
    5904:	cf ef       	ldi	r28, 0xFF	; 255
    5906:	df ef       	ldi	r29, 0xFF	; 255
    5908:	20 91 4d 2b 	lds	r18, 0x2B4D
    590c:	27 fd       	sbrc	r18, 7
    590e:	23 c0       	rjmp	.+70     	; 0x5956 <CDC_Device_ReceiveByte+0xa4>
    5910:	dc 01       	movw	r26, r24
    5912:	a0 5c       	subi	r26, 0xC0	; 192
    5914:	bf 4f       	sbci	r27, 0xFF	; 255
    5916:	8c 91       	ld	r24, X
    5918:	20 81       	ld	r18, Z
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	82 1b       	sub	r24, r18
    591e:	91 09       	sbc	r25, r1
    5920:	89 2b       	or	r24, r25
    5922:	39 f4       	brne	.+14     	; 0x5932 <CDC_Device_ReceiveByte+0x80>
    5924:	86 db       	rcall	.-2292   	; 0x5032 <Endpoint_ClearOUT>
    5926:	ce 01       	movw	r24, r28
    5928:	df 91       	pop	r29
    592a:	cf 91       	pop	r28
    592c:	08 95       	ret
    592e:	cf ef       	ldi	r28, 0xFF	; 255
    5930:	df ef       	ldi	r29, 0xFF	; 255
    5932:	ce 01       	movw	r24, r28
    5934:	df 91       	pop	r29
    5936:	cf 91       	pop	r28
    5938:	08 95       	ret
    593a:	8a db       	rcall	.-2284   	; 0x5050 <Endpoint_Read_8>
    593c:	c8 2f       	mov	r28, r24
    593e:	d0 e0       	ldi	r29, 0x00	; 0
    5940:	80 91 49 2b 	lds	r24, 0x2B49
    5944:	90 91 4a 2b 	lds	r25, 0x2B4A
    5948:	fc 01       	movw	r30, r24
    594a:	ef 5b       	subi	r30, 0xBF	; 191
    594c:	ff 4f       	sbci	r31, 0xFF	; 255
    594e:	20 91 4d 2b 	lds	r18, 0x2B4D
    5952:	27 ff       	sbrs	r18, 7
    5954:	dd cf       	rjmp	.-70     	; 0x5910 <CDC_Device_ReceiveByte+0x5e>
    5956:	80 81       	ld	r24, Z
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	e2 cf       	rjmp	.-60     	; 0x5920 <CDC_Device_ReceiveByte+0x6e>
    595c:	80 91 49 2b 	lds	r24, 0x2B49
    5960:	90 91 4a 2b 	lds	r25, 0x2B4A
    5964:	fc 01       	movw	r30, r24
    5966:	ef 5b       	subi	r30, 0xBF	; 191
    5968:	ff 4f       	sbci	r31, 0xFF	; 255
    596a:	20 81       	ld	r18, Z
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	c8 cf       	rjmp	.-112    	; 0x5900 <CDC_Device_ReceiveByte+0x4e>

00005970 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    5970:	08 95       	ret

00005972 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    5972:	ff 92       	push	r15
    5974:	0f 93       	push	r16
    5976:	1f 93       	push	r17
    5978:	cf 93       	push	r28
    597a:	df 93       	push	r29
    597c:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    597e:	07 dc       	rcall	.-2034   	; 0x518e <Endpoint_IsSETUPReceived>
    5980:	88 23       	and	r24, r24
    5982:	49 f0       	breq	.+18     	; 0x5996 <CDC_Device_ProcessControlRequest+0x24>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    5984:	88 81       	ld	r24, Y
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	20 91 45 2b 	lds	r18, 0x2B45
    598c:	30 91 46 2b 	lds	r19, 0x2B46
    5990:	28 17       	cp	r18, r24
    5992:	39 07       	cpc	r19, r25
    5994:	31 f0       	breq	.+12     	; 0x59a2 <CDC_Device_ProcessControlRequest+0x30>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    5996:	df 91       	pop	r29
    5998:	cf 91       	pop	r28
    599a:	1f 91       	pop	r17
    599c:	0f 91       	pop	r16
    599e:	ff 90       	pop	r15
    59a0:	08 95       	ret
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    59a2:	80 91 42 2b 	lds	r24, 0x2B42
    59a6:	81 32       	cpi	r24, 0x21	; 33
    59a8:	09 f4       	brne	.+2      	; 0x59ac <CDC_Device_ProcessControlRequest+0x3a>
    59aa:	4b c0       	rjmp	.+150    	; 0x5a42 <CDC_Device_ProcessControlRequest+0xd0>
    59ac:	08 f0       	brcs	.+2      	; 0x59b0 <CDC_Device_ProcessControlRequest+0x3e>
    59ae:	33 c0       	rjmp	.+102    	; 0x5a16 <CDC_Device_ProcessControlRequest+0xa4>
    59b0:	80 32       	cpi	r24, 0x20	; 32
    59b2:	89 f7       	brne	.-30     	; 0x5996 <CDC_Device_ProcessControlRequest+0x24>
				Endpoint_ClearStatusStage();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    59b4:	80 91 41 2b 	lds	r24, 0x2B41
    59b8:	81 32       	cpi	r24, 0x21	; 33
    59ba:	69 f7       	brne	.-38     	; 0x5996 <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    59bc:	bc db       	rcall	.-2184   	; 0x5136 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    59be:	04 c0       	rjmp	.+8      	; 0x59c8 <CDC_Device_ProcessControlRequest+0x56>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    59c0:	80 91 40 2b 	lds	r24, 0x2B40
    59c4:	88 23       	and	r24, r24
    59c6:	39 f3       	breq	.-50     	; 0x5996 <CDC_Device_ProcessControlRequest+0x24>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    59c8:	fb db       	rcall	.-2058   	; 0x51c0 <Endpoint_IsOUTReceived>
    59ca:	88 23       	and	r24, r24
    59cc:	c9 f3       	breq	.-14     	; 0x59c0 <CDC_Device_ProcessControlRequest+0x4e>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    59ce:	40 db       	rcall	.-2432   	; 0x5050 <Endpoint_Read_8>
    59d0:	08 2f       	mov	r16, r24
				uint32_t Byte1 = Endpoint_Read_8();
    59d2:	3e db       	rcall	.-2436   	; 0x5050 <Endpoint_Read_8>
    59d4:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    59d6:	3c db       	rcall	.-2440   	; 0x5050 <Endpoint_Read_8>
    59d8:	f8 2e       	mov	r15, r24
				uint32_t Byte3 = Endpoint_Read_8();
    59da:	3a db       	rcall	.-2444   	; 0x5050 <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    59dc:	4f 2d       	mov	r20, r15
    59de:	50 e0       	ldi	r21, 0x00	; 0
    59e0:	60 e0       	ldi	r22, 0x00	; 0
    59e2:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    59e4:	ba 01       	movw	r22, r20
    59e6:	55 27       	eor	r21, r21
    59e8:	44 27       	eor	r20, r20
    59ea:	78 2b       	or	r23, r24
    59ec:	40 2b       	or	r20, r16
    59ee:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    59f0:	4c 8b       	std	Y+20, r20	; 0x14
    59f2:	5d 8b       	std	Y+21, r21	; 0x15
    59f4:	6e 8b       	std	Y+22, r22	; 0x16
    59f6:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    59f8:	2b db       	rcall	.-2474   	; 0x5050 <Endpoint_Read_8>
    59fa:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    59fc:	29 db       	rcall	.-2478   	; 0x5050 <Endpoint_Read_8>
    59fe:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    5a00:	27 db       	rcall	.-2482   	; 0x5050 <Endpoint_Read_8>
    5a02:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    5a04:	16 db       	rcall	.-2516   	; 0x5032 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    5a06:	fc dc       	rcall	.-1544   	; 0x5400 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    5a08:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    5a0a:	df 91       	pop	r29
    5a0c:	cf 91       	pop	r28
    5a0e:	1f 91       	pop	r17
    5a10:	0f 91       	pop	r16
    5a12:	ff 90       	pop	r15
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    5a14:	ad cf       	rjmp	.-166    	; 0x5970 <CDC_Device_Event_Stub>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    5a16:	82 32       	cpi	r24, 0x22	; 34
    5a18:	09 f4       	brne	.+2      	; 0x5a1c <CDC_Device_ProcessControlRequest+0xaa>
    5a1a:	34 c0       	rjmp	.+104    	; 0x5a84 <CDC_Device_ProcessControlRequest+0x112>
    5a1c:	83 32       	cpi	r24, 0x23	; 35
    5a1e:	09 f0       	breq	.+2      	; 0x5a22 <CDC_Device_ProcessControlRequest+0xb0>
    5a20:	ba cf       	rjmp	.-140    	; 0x5996 <CDC_Device_ProcessControlRequest+0x24>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5a22:	80 91 41 2b 	lds	r24, 0x2B41
    5a26:	81 32       	cpi	r24, 0x21	; 33
    5a28:	09 f0       	breq	.+2      	; 0x5a2c <CDC_Device_ProcessControlRequest+0xba>
    5a2a:	b5 cf       	rjmp	.-150    	; 0x5996 <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    5a2c:	84 db       	rcall	.-2296   	; 0x5136 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    5a2e:	e8 dc       	rcall	.-1584   	; 0x5400 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    5a30:	60 91 43 2b 	lds	r22, 0x2B43
    5a34:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    5a36:	df 91       	pop	r29
    5a38:	cf 91       	pop	r28
    5a3a:	1f 91       	pop	r17
    5a3c:	0f 91       	pop	r16
    5a3e:	ff 90       	pop	r15
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    5a40:	97 cf       	rjmp	.-210    	; 0x5970 <CDC_Device_Event_Stub>
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5a42:	80 91 41 2b 	lds	r24, 0x2B41
    5a46:	81 3a       	cpi	r24, 0xA1	; 161
    5a48:	09 f0       	breq	.+2      	; 0x5a4c <CDC_Device_ProcessControlRequest+0xda>
    5a4a:	a5 cf       	rjmp	.-182    	; 0x5996 <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    5a4c:	74 db       	rcall	.-2328   	; 0x5136 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    5a4e:	d1 db       	rcall	.-2142   	; 0x51f2 <Endpoint_IsINReady>
    5a50:	88 23       	and	r24, r24
    5a52:	e9 f3       	breq	.-6      	; 0x5a4e <CDC_Device_ProcessControlRequest+0xdc>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    5a54:	8c 89       	ldd	r24, Y+20	; 0x14
    5a56:	fd 88       	ldd	r15, Y+21	; 0x15
    5a58:	0e 89       	ldd	r16, Y+22	; 0x16
    5a5a:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    5a5c:	08 db       	rcall	.-2544   	; 0x506e <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    5a5e:	8f 2d       	mov	r24, r15
    5a60:	06 db       	rcall	.-2548   	; 0x506e <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    5a62:	80 2f       	mov	r24, r16
    5a64:	04 db       	rcall	.-2552   	; 0x506e <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    5a66:	81 2f       	mov	r24, r17
    5a68:	02 db       	rcall	.-2556   	; 0x506e <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    5a6a:	88 8d       	ldd	r24, Y+24	; 0x18
    5a6c:	00 db       	rcall	.-2560   	; 0x506e <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    5a6e:	89 8d       	ldd	r24, Y+25	; 0x19
    5a70:	fe da       	rcall	.-2564   	; 0x506e <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    5a72:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5a74:	fc da       	rcall	.-2568   	; 0x506e <Endpoint_Write_8>

				Endpoint_ClearIN();
    5a76:	c4 da       	rcall	.-2680   	; 0x5000 <Endpoint_ClearIN>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    5a78:	df 91       	pop	r29
    5a7a:	cf 91       	pop	r28
    5a7c:	1f 91       	pop	r17
    5a7e:	0f 91       	pop	r16
    5a80:	ff 90       	pop	r15
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    5a82:	be cc       	rjmp	.-1668   	; 0x5400 <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5a84:	80 91 41 2b 	lds	r24, 0x2B41
    5a88:	81 32       	cpi	r24, 0x21	; 33
    5a8a:	09 f0       	breq	.+2      	; 0x5a8e <CDC_Device_ProcessControlRequest+0x11c>
    5a8c:	84 cf       	rjmp	.-248    	; 0x5996 <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    5a8e:	53 db       	rcall	.-2394   	; 0x5136 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    5a90:	b7 dc       	rcall	.-1682   	; 0x5400 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    5a92:	80 91 43 2b 	lds	r24, 0x2B43
    5a96:	90 91 44 2b 	lds	r25, 0x2B44
    5a9a:	88 8b       	std	Y+16, r24	; 0x10
    5a9c:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    5a9e:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    5aa0:	df 91       	pop	r29
    5aa2:	cf 91       	pop	r28
    5aa4:	1f 91       	pop	r17
    5aa6:	0f 91       	pop	r16
    5aa8:	ff 90       	pop	r15
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    5aaa:	62 cf       	rjmp	.-316    	; 0x5970 <CDC_Device_Event_Stub>

00005aac <__mulshisi3>:
    5aac:	b7 ff       	sbrs	r27, 7
    5aae:	04 c0       	rjmp	.+8      	; 0x5ab8 <__muluhisi3>

00005ab0 <__mulohisi3>:
    5ab0:	03 d0       	rcall	.+6      	; 0x5ab8 <__muluhisi3>
    5ab2:	82 1b       	sub	r24, r18
    5ab4:	93 0b       	sbc	r25, r19
    5ab6:	08 95       	ret

00005ab8 <__muluhisi3>:
    5ab8:	09 d0       	rcall	.+18     	; 0x5acc <__umulhisi3>
    5aba:	a5 9f       	mul	r26, r21
    5abc:	90 0d       	add	r25, r0
    5abe:	b4 9f       	mul	r27, r20
    5ac0:	90 0d       	add	r25, r0
    5ac2:	a4 9f       	mul	r26, r20
    5ac4:	80 0d       	add	r24, r0
    5ac6:	91 1d       	adc	r25, r1
    5ac8:	11 24       	eor	r1, r1
    5aca:	08 95       	ret

00005acc <__umulhisi3>:
    5acc:	a2 9f       	mul	r26, r18
    5ace:	b0 01       	movw	r22, r0
    5ad0:	b3 9f       	mul	r27, r19
    5ad2:	c0 01       	movw	r24, r0
    5ad4:	a3 9f       	mul	r26, r19
    5ad6:	01 d0       	rcall	.+2      	; 0x5ada <__umulhisi3+0xe>
    5ad8:	b2 9f       	mul	r27, r18
    5ada:	70 0d       	add	r23, r0
    5adc:	81 1d       	adc	r24, r1
    5ade:	11 24       	eor	r1, r1
    5ae0:	91 1d       	adc	r25, r1
    5ae2:	08 95       	ret

00005ae4 <do_rand>:
    5ae4:	8f 92       	push	r8
    5ae6:	9f 92       	push	r9
    5ae8:	af 92       	push	r10
    5aea:	bf 92       	push	r11
    5aec:	cf 92       	push	r12
    5aee:	df 92       	push	r13
    5af0:	ef 92       	push	r14
    5af2:	ff 92       	push	r15
    5af4:	cf 93       	push	r28
    5af6:	df 93       	push	r29
    5af8:	ec 01       	movw	r28, r24
    5afa:	68 81       	ld	r22, Y
    5afc:	79 81       	ldd	r23, Y+1	; 0x01
    5afe:	8a 81       	ldd	r24, Y+2	; 0x02
    5b00:	9b 81       	ldd	r25, Y+3	; 0x03
    5b02:	61 15       	cp	r22, r1
    5b04:	71 05       	cpc	r23, r1
    5b06:	81 05       	cpc	r24, r1
    5b08:	91 05       	cpc	r25, r1
    5b0a:	21 f4       	brne	.+8      	; 0x5b14 <do_rand+0x30>
    5b0c:	64 e2       	ldi	r22, 0x24	; 36
    5b0e:	79 ed       	ldi	r23, 0xD9	; 217
    5b10:	8b e5       	ldi	r24, 0x5B	; 91
    5b12:	97 e0       	ldi	r25, 0x07	; 7
    5b14:	2d e1       	ldi	r18, 0x1D	; 29
    5b16:	33 ef       	ldi	r19, 0xF3	; 243
    5b18:	41 e0       	ldi	r20, 0x01	; 1
    5b1a:	50 e0       	ldi	r21, 0x00	; 0
    5b1c:	48 d3       	rcall	.+1680   	; 0x61ae <__divmodsi4>
    5b1e:	49 01       	movw	r8, r18
    5b20:	5a 01       	movw	r10, r20
    5b22:	9b 01       	movw	r18, r22
    5b24:	ac 01       	movw	r20, r24
    5b26:	a7 ea       	ldi	r26, 0xA7	; 167
    5b28:	b1 e4       	ldi	r27, 0x41	; 65
    5b2a:	c6 df       	rcall	.-116    	; 0x5ab8 <__muluhisi3>
    5b2c:	6b 01       	movw	r12, r22
    5b2e:	7c 01       	movw	r14, r24
    5b30:	ac ee       	ldi	r26, 0xEC	; 236
    5b32:	b4 ef       	ldi	r27, 0xF4	; 244
    5b34:	a5 01       	movw	r20, r10
    5b36:	94 01       	movw	r18, r8
    5b38:	bb df       	rcall	.-138    	; 0x5ab0 <__mulohisi3>
    5b3a:	c6 0e       	add	r12, r22
    5b3c:	d7 1e       	adc	r13, r23
    5b3e:	e8 1e       	adc	r14, r24
    5b40:	f9 1e       	adc	r15, r25
    5b42:	f7 fe       	sbrs	r15, 7
    5b44:	06 c0       	rjmp	.+12     	; 0x5b52 <do_rand+0x6e>
    5b46:	81 e0       	ldi	r24, 0x01	; 1
    5b48:	c8 1a       	sub	r12, r24
    5b4a:	d1 08       	sbc	r13, r1
    5b4c:	e1 08       	sbc	r14, r1
    5b4e:	80 e8       	ldi	r24, 0x80	; 128
    5b50:	f8 0a       	sbc	r15, r24
    5b52:	c8 82       	st	Y, r12
    5b54:	d9 82       	std	Y+1, r13	; 0x01
    5b56:	ea 82       	std	Y+2, r14	; 0x02
    5b58:	fb 82       	std	Y+3, r15	; 0x03
    5b5a:	e8 94       	clt
    5b5c:	d7 f8       	bld	r13, 7
    5b5e:	ee 24       	eor	r14, r14
    5b60:	ff 24       	eor	r15, r15
    5b62:	c6 01       	movw	r24, r12
    5b64:	df 91       	pop	r29
    5b66:	cf 91       	pop	r28
    5b68:	ff 90       	pop	r15
    5b6a:	ef 90       	pop	r14
    5b6c:	df 90       	pop	r13
    5b6e:	cf 90       	pop	r12
    5b70:	bf 90       	pop	r11
    5b72:	af 90       	pop	r10
    5b74:	9f 90       	pop	r9
    5b76:	8f 90       	pop	r8
    5b78:	08 95       	ret

00005b7a <rand_r>:
    5b7a:	b4 cf       	rjmp	.-152    	; 0x5ae4 <do_rand>

00005b7c <rand>:
    5b7c:	8c e1       	ldi	r24, 0x1C	; 28
    5b7e:	90 e2       	ldi	r25, 0x20	; 32
    5b80:	b1 cf       	rjmp	.-158    	; 0x5ae4 <do_rand>

00005b82 <srand>:
    5b82:	a0 e0       	ldi	r26, 0x00	; 0
    5b84:	b0 e0       	ldi	r27, 0x00	; 0
    5b86:	80 93 1c 20 	sts	0x201C, r24
    5b8a:	90 93 1d 20 	sts	0x201D, r25
    5b8e:	a0 93 1e 20 	sts	0x201E, r26
    5b92:	b0 93 1f 20 	sts	0x201F, r27
    5b96:	08 95       	ret

00005b98 <memcpy_P>:
    5b98:	fb 01       	movw	r30, r22
    5b9a:	dc 01       	movw	r26, r24
    5b9c:	02 c0       	rjmp	.+4      	; 0x5ba2 <memcpy_P+0xa>
    5b9e:	05 90       	lpm	r0, Z+
    5ba0:	0d 92       	st	X+, r0
    5ba2:	41 50       	subi	r20, 0x01	; 1
    5ba4:	50 40       	sbci	r21, 0x00	; 0
    5ba6:	d8 f7       	brcc	.-10     	; 0x5b9e <memcpy_P+0x6>
    5ba8:	08 95       	ret

00005baa <strcmp_P>:
    5baa:	fb 01       	movw	r30, r22
    5bac:	dc 01       	movw	r26, r24
    5bae:	8d 91       	ld	r24, X+
    5bb0:	05 90       	lpm	r0, Z+
    5bb2:	80 19       	sub	r24, r0
    5bb4:	01 10       	cpse	r0, r1
    5bb6:	d9 f3       	breq	.-10     	; 0x5bae <strcmp_P+0x4>
    5bb8:	99 0b       	sbc	r25, r25
    5bba:	08 95       	ret

00005bbc <strncat_P>:
    5bbc:	fb 01       	movw	r30, r22
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	0d 90       	ld	r0, X+
    5bc2:	00 20       	and	r0, r0
    5bc4:	e9 f7       	brne	.-6      	; 0x5bc0 <strncat_P+0x4>
    5bc6:	11 97       	sbiw	r26, 0x01	; 1
    5bc8:	41 50       	subi	r20, 0x01	; 1
    5bca:	50 40       	sbci	r21, 0x00	; 0
    5bcc:	28 f0       	brcs	.+10     	; 0x5bd8 <strncat_P+0x1c>
    5bce:	05 90       	lpm	r0, Z+
    5bd0:	00 20       	and	r0, r0
    5bd2:	0d 92       	st	X+, r0
    5bd4:	c9 f7       	brne	.-14     	; 0x5bc8 <strncat_P+0xc>
    5bd6:	08 95       	ret
    5bd8:	1c 92       	st	X, r1
    5bda:	08 95       	ret

00005bdc <strncpy_P>:
    5bdc:	fb 01       	movw	r30, r22
    5bde:	dc 01       	movw	r26, r24
    5be0:	41 50       	subi	r20, 0x01	; 1
    5be2:	50 40       	sbci	r21, 0x00	; 0
    5be4:	48 f0       	brcs	.+18     	; 0x5bf8 <strncpy_P+0x1c>
    5be6:	05 90       	lpm	r0, Z+
    5be8:	0d 92       	st	X+, r0
    5bea:	00 20       	and	r0, r0
    5bec:	c9 f7       	brne	.-14     	; 0x5be0 <strncpy_P+0x4>
    5bee:	01 c0       	rjmp	.+2      	; 0x5bf2 <strncpy_P+0x16>
    5bf0:	1d 92       	st	X+, r1
    5bf2:	41 50       	subi	r20, 0x01	; 1
    5bf4:	50 40       	sbci	r21, 0x00	; 0
    5bf6:	e0 f7       	brcc	.-8      	; 0x5bf0 <strncpy_P+0x14>
    5bf8:	08 95       	ret

00005bfa <memcpy>:
    5bfa:	fb 01       	movw	r30, r22
    5bfc:	dc 01       	movw	r26, r24
    5bfe:	02 c0       	rjmp	.+4      	; 0x5c04 <memcpy+0xa>
    5c00:	01 90       	ld	r0, Z+
    5c02:	0d 92       	st	X+, r0
    5c04:	41 50       	subi	r20, 0x01	; 1
    5c06:	50 40       	sbci	r21, 0x00	; 0
    5c08:	d8 f7       	brcc	.-10     	; 0x5c00 <memcpy+0x6>
    5c0a:	08 95       	ret

00005c0c <snprintf_P>:
    5c0c:	ae e0       	ldi	r26, 0x0E	; 14
    5c0e:	b0 e0       	ldi	r27, 0x00	; 0
    5c10:	eb e0       	ldi	r30, 0x0B	; 11
    5c12:	fe e2       	ldi	r31, 0x2E	; 46
    5c14:	f5 c2       	rjmp	.+1514   	; 0x6200 <__prologue_saves__+0x1c>
    5c16:	0d 89       	ldd	r16, Y+21	; 0x15
    5c18:	1e 89       	ldd	r17, Y+22	; 0x16
    5c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    5c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    5c1e:	2e e0       	ldi	r18, 0x0E	; 14
    5c20:	2c 83       	std	Y+4, r18	; 0x04
    5c22:	09 83       	std	Y+1, r16	; 0x01
    5c24:	1a 83       	std	Y+2, r17	; 0x02
    5c26:	97 ff       	sbrs	r25, 7
    5c28:	02 c0       	rjmp	.+4      	; 0x5c2e <snprintf_P+0x22>
    5c2a:	80 e0       	ldi	r24, 0x00	; 0
    5c2c:	90 e8       	ldi	r25, 0x80	; 128
    5c2e:	01 97       	sbiw	r24, 0x01	; 1
    5c30:	8d 83       	std	Y+5, r24	; 0x05
    5c32:	9e 83       	std	Y+6, r25	; 0x06
    5c34:	ce 01       	movw	r24, r28
    5c36:	4b 96       	adiw	r24, 0x1b	; 27
    5c38:	ac 01       	movw	r20, r24
    5c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    5c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c3e:	ce 01       	movw	r24, r28
    5c40:	01 96       	adiw	r24, 0x01	; 1
    5c42:	11 d0       	rcall	.+34     	; 0x5c66 <vfprintf>
    5c44:	4d 81       	ldd	r20, Y+5	; 0x05
    5c46:	5e 81       	ldd	r21, Y+6	; 0x06
    5c48:	57 fd       	sbrc	r21, 7
    5c4a:	0a c0       	rjmp	.+20     	; 0x5c60 <snprintf_P+0x54>
    5c4c:	2f 81       	ldd	r18, Y+7	; 0x07
    5c4e:	38 85       	ldd	r19, Y+8	; 0x08
    5c50:	42 17       	cp	r20, r18
    5c52:	53 07       	cpc	r21, r19
    5c54:	0c f4       	brge	.+2      	; 0x5c58 <snprintf_P+0x4c>
    5c56:	9a 01       	movw	r18, r20
    5c58:	f8 01       	movw	r30, r16
    5c5a:	e2 0f       	add	r30, r18
    5c5c:	f3 1f       	adc	r31, r19
    5c5e:	10 82       	st	Z, r1
    5c60:	2e 96       	adiw	r28, 0x0e	; 14
    5c62:	e4 e0       	ldi	r30, 0x04	; 4
    5c64:	e6 c2       	rjmp	.+1484   	; 0x6232 <__epilogue_restores__+0x1c>

00005c66 <vfprintf>:
    5c66:	ac e0       	ldi	r26, 0x0C	; 12
    5c68:	b0 e0       	ldi	r27, 0x00	; 0
    5c6a:	e8 e3       	ldi	r30, 0x38	; 56
    5c6c:	fe e2       	ldi	r31, 0x2E	; 46
    5c6e:	ba c2       	rjmp	.+1396   	; 0x61e4 <__prologue_saves__>
    5c70:	7c 01       	movw	r14, r24
    5c72:	6b 01       	movw	r12, r22
    5c74:	8a 01       	movw	r16, r20
    5c76:	fc 01       	movw	r30, r24
    5c78:	16 82       	std	Z+6, r1	; 0x06
    5c7a:	17 82       	std	Z+7, r1	; 0x07
    5c7c:	83 81       	ldd	r24, Z+3	; 0x03
    5c7e:	81 ff       	sbrs	r24, 1
    5c80:	b9 c1       	rjmp	.+882    	; 0x5ff4 <vfprintf+0x38e>
    5c82:	88 24       	eor	r8, r8
    5c84:	83 94       	inc	r8
    5c86:	91 2c       	mov	r9, r1
    5c88:	8c 0e       	add	r8, r28
    5c8a:	9d 1e       	adc	r9, r29
    5c8c:	f7 01       	movw	r30, r14
    5c8e:	93 81       	ldd	r25, Z+3	; 0x03
    5c90:	f6 01       	movw	r30, r12
    5c92:	93 fd       	sbrc	r25, 3
    5c94:	85 91       	lpm	r24, Z+
    5c96:	93 ff       	sbrs	r25, 3
    5c98:	81 91       	ld	r24, Z+
    5c9a:	6f 01       	movw	r12, r30
    5c9c:	88 23       	and	r24, r24
    5c9e:	09 f4       	brne	.+2      	; 0x5ca2 <vfprintf+0x3c>
    5ca0:	a5 c1       	rjmp	.+842    	; 0x5fec <vfprintf+0x386>
    5ca2:	85 32       	cpi	r24, 0x25	; 37
    5ca4:	39 f4       	brne	.+14     	; 0x5cb4 <vfprintf+0x4e>
    5ca6:	93 fd       	sbrc	r25, 3
    5ca8:	85 91       	lpm	r24, Z+
    5caa:	93 ff       	sbrs	r25, 3
    5cac:	81 91       	ld	r24, Z+
    5cae:	6f 01       	movw	r12, r30
    5cb0:	85 32       	cpi	r24, 0x25	; 37
    5cb2:	21 f4       	brne	.+8      	; 0x5cbc <vfprintf+0x56>
    5cb4:	b7 01       	movw	r22, r14
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	f0 d1       	rcall	.+992    	; 0x609a <fputc>
    5cba:	e8 cf       	rjmp	.-48     	; 0x5c8c <vfprintf+0x26>
    5cbc:	51 2c       	mov	r5, r1
    5cbe:	31 2c       	mov	r3, r1
    5cc0:	20 e0       	ldi	r18, 0x00	; 0
    5cc2:	20 32       	cpi	r18, 0x20	; 32
    5cc4:	a8 f4       	brcc	.+42     	; 0x5cf0 <vfprintf+0x8a>
    5cc6:	8b 32       	cpi	r24, 0x2B	; 43
    5cc8:	61 f0       	breq	.+24     	; 0x5ce2 <vfprintf+0x7c>
    5cca:	28 f4       	brcc	.+10     	; 0x5cd6 <vfprintf+0x70>
    5ccc:	80 32       	cpi	r24, 0x20	; 32
    5cce:	51 f0       	breq	.+20     	; 0x5ce4 <vfprintf+0x7e>
    5cd0:	83 32       	cpi	r24, 0x23	; 35
    5cd2:	71 f4       	brne	.+28     	; 0x5cf0 <vfprintf+0x8a>
    5cd4:	0b c0       	rjmp	.+22     	; 0x5cec <vfprintf+0x86>
    5cd6:	8d 32       	cpi	r24, 0x2D	; 45
    5cd8:	39 f0       	breq	.+14     	; 0x5ce8 <vfprintf+0x82>
    5cda:	80 33       	cpi	r24, 0x30	; 48
    5cdc:	49 f4       	brne	.+18     	; 0x5cf0 <vfprintf+0x8a>
    5cde:	21 60       	ori	r18, 0x01	; 1
    5ce0:	28 c0       	rjmp	.+80     	; 0x5d32 <vfprintf+0xcc>
    5ce2:	22 60       	ori	r18, 0x02	; 2
    5ce4:	24 60       	ori	r18, 0x04	; 4
    5ce6:	25 c0       	rjmp	.+74     	; 0x5d32 <vfprintf+0xcc>
    5ce8:	28 60       	ori	r18, 0x08	; 8
    5cea:	23 c0       	rjmp	.+70     	; 0x5d32 <vfprintf+0xcc>
    5cec:	20 61       	ori	r18, 0x10	; 16
    5cee:	21 c0       	rjmp	.+66     	; 0x5d32 <vfprintf+0xcc>
    5cf0:	27 fd       	sbrc	r18, 7
    5cf2:	27 c0       	rjmp	.+78     	; 0x5d42 <vfprintf+0xdc>
    5cf4:	38 2f       	mov	r19, r24
    5cf6:	30 53       	subi	r19, 0x30	; 48
    5cf8:	3a 30       	cpi	r19, 0x0A	; 10
    5cfa:	78 f4       	brcc	.+30     	; 0x5d1a <vfprintf+0xb4>
    5cfc:	26 ff       	sbrs	r18, 6
    5cfe:	06 c0       	rjmp	.+12     	; 0x5d0c <vfprintf+0xa6>
    5d00:	fa e0       	ldi	r31, 0x0A	; 10
    5d02:	5f 9e       	mul	r5, r31
    5d04:	30 0d       	add	r19, r0
    5d06:	11 24       	eor	r1, r1
    5d08:	53 2e       	mov	r5, r19
    5d0a:	13 c0       	rjmp	.+38     	; 0x5d32 <vfprintf+0xcc>
    5d0c:	8a e0       	ldi	r24, 0x0A	; 10
    5d0e:	38 9e       	mul	r3, r24
    5d10:	30 0d       	add	r19, r0
    5d12:	11 24       	eor	r1, r1
    5d14:	33 2e       	mov	r3, r19
    5d16:	20 62       	ori	r18, 0x20	; 32
    5d18:	0c c0       	rjmp	.+24     	; 0x5d32 <vfprintf+0xcc>
    5d1a:	8e 32       	cpi	r24, 0x2E	; 46
    5d1c:	21 f4       	brne	.+8      	; 0x5d26 <vfprintf+0xc0>
    5d1e:	26 fd       	sbrc	r18, 6
    5d20:	65 c1       	rjmp	.+714    	; 0x5fec <vfprintf+0x386>
    5d22:	20 64       	ori	r18, 0x40	; 64
    5d24:	06 c0       	rjmp	.+12     	; 0x5d32 <vfprintf+0xcc>
    5d26:	8c 36       	cpi	r24, 0x6C	; 108
    5d28:	11 f4       	brne	.+4      	; 0x5d2e <vfprintf+0xc8>
    5d2a:	20 68       	ori	r18, 0x80	; 128
    5d2c:	02 c0       	rjmp	.+4      	; 0x5d32 <vfprintf+0xcc>
    5d2e:	88 36       	cpi	r24, 0x68	; 104
    5d30:	41 f4       	brne	.+16     	; 0x5d42 <vfprintf+0xdc>
    5d32:	f6 01       	movw	r30, r12
    5d34:	93 fd       	sbrc	r25, 3
    5d36:	85 91       	lpm	r24, Z+
    5d38:	93 ff       	sbrs	r25, 3
    5d3a:	81 91       	ld	r24, Z+
    5d3c:	6f 01       	movw	r12, r30
    5d3e:	81 11       	cpse	r24, r1
    5d40:	c0 cf       	rjmp	.-128    	; 0x5cc2 <vfprintf+0x5c>
    5d42:	98 2f       	mov	r25, r24
    5d44:	95 54       	subi	r25, 0x45	; 69
    5d46:	93 30       	cpi	r25, 0x03	; 3
    5d48:	18 f0       	brcs	.+6      	; 0x5d50 <vfprintf+0xea>
    5d4a:	90 52       	subi	r25, 0x20	; 32
    5d4c:	93 30       	cpi	r25, 0x03	; 3
    5d4e:	28 f4       	brcc	.+10     	; 0x5d5a <vfprintf+0xf4>
    5d50:	0c 5f       	subi	r16, 0xFC	; 252
    5d52:	1f 4f       	sbci	r17, 0xFF	; 255
    5d54:	ff e3       	ldi	r31, 0x3F	; 63
    5d56:	f9 83       	std	Y+1, r31	; 0x01
    5d58:	0d c0       	rjmp	.+26     	; 0x5d74 <vfprintf+0x10e>
    5d5a:	83 36       	cpi	r24, 0x63	; 99
    5d5c:	31 f0       	breq	.+12     	; 0x5d6a <vfprintf+0x104>
    5d5e:	83 37       	cpi	r24, 0x73	; 115
    5d60:	71 f0       	breq	.+28     	; 0x5d7e <vfprintf+0x118>
    5d62:	83 35       	cpi	r24, 0x53	; 83
    5d64:	09 f0       	breq	.+2      	; 0x5d68 <vfprintf+0x102>
    5d66:	5a c0       	rjmp	.+180    	; 0x5e1c <vfprintf+0x1b6>
    5d68:	22 c0       	rjmp	.+68     	; 0x5dae <vfprintf+0x148>
    5d6a:	f8 01       	movw	r30, r16
    5d6c:	80 81       	ld	r24, Z
    5d6e:	89 83       	std	Y+1, r24	; 0x01
    5d70:	0e 5f       	subi	r16, 0xFE	; 254
    5d72:	1f 4f       	sbci	r17, 0xFF	; 255
    5d74:	44 24       	eor	r4, r4
    5d76:	43 94       	inc	r4
    5d78:	51 2c       	mov	r5, r1
    5d7a:	54 01       	movw	r10, r8
    5d7c:	14 c0       	rjmp	.+40     	; 0x5da6 <vfprintf+0x140>
    5d7e:	38 01       	movw	r6, r16
    5d80:	f2 e0       	ldi	r31, 0x02	; 2
    5d82:	6f 0e       	add	r6, r31
    5d84:	71 1c       	adc	r7, r1
    5d86:	f8 01       	movw	r30, r16
    5d88:	a0 80       	ld	r10, Z
    5d8a:	b1 80       	ldd	r11, Z+1	; 0x01
    5d8c:	26 ff       	sbrs	r18, 6
    5d8e:	03 c0       	rjmp	.+6      	; 0x5d96 <vfprintf+0x130>
    5d90:	65 2d       	mov	r22, r5
    5d92:	70 e0       	ldi	r23, 0x00	; 0
    5d94:	02 c0       	rjmp	.+4      	; 0x5d9a <vfprintf+0x134>
    5d96:	6f ef       	ldi	r22, 0xFF	; 255
    5d98:	7f ef       	ldi	r23, 0xFF	; 255
    5d9a:	c5 01       	movw	r24, r10
    5d9c:	2c 87       	std	Y+12, r18	; 0x0c
    5d9e:	72 d1       	rcall	.+740    	; 0x6084 <strnlen>
    5da0:	2c 01       	movw	r4, r24
    5da2:	83 01       	movw	r16, r6
    5da4:	2c 85       	ldd	r18, Y+12	; 0x0c
    5da6:	6f e7       	ldi	r22, 0x7F	; 127
    5da8:	26 2e       	mov	r2, r22
    5daa:	22 22       	and	r2, r18
    5dac:	17 c0       	rjmp	.+46     	; 0x5ddc <vfprintf+0x176>
    5dae:	38 01       	movw	r6, r16
    5db0:	f2 e0       	ldi	r31, 0x02	; 2
    5db2:	6f 0e       	add	r6, r31
    5db4:	71 1c       	adc	r7, r1
    5db6:	f8 01       	movw	r30, r16
    5db8:	a0 80       	ld	r10, Z
    5dba:	b1 80       	ldd	r11, Z+1	; 0x01
    5dbc:	26 ff       	sbrs	r18, 6
    5dbe:	03 c0       	rjmp	.+6      	; 0x5dc6 <vfprintf+0x160>
    5dc0:	65 2d       	mov	r22, r5
    5dc2:	70 e0       	ldi	r23, 0x00	; 0
    5dc4:	02 c0       	rjmp	.+4      	; 0x5dca <vfprintf+0x164>
    5dc6:	6f ef       	ldi	r22, 0xFF	; 255
    5dc8:	7f ef       	ldi	r23, 0xFF	; 255
    5dca:	c5 01       	movw	r24, r10
    5dcc:	2c 87       	std	Y+12, r18	; 0x0c
    5dce:	4f d1       	rcall	.+670    	; 0x606e <strnlen_P>
    5dd0:	2c 01       	movw	r4, r24
    5dd2:	2c 85       	ldd	r18, Y+12	; 0x0c
    5dd4:	50 e8       	ldi	r21, 0x80	; 128
    5dd6:	25 2e       	mov	r2, r21
    5dd8:	22 2a       	or	r2, r18
    5dda:	83 01       	movw	r16, r6
    5ddc:	23 fc       	sbrc	r2, 3
    5dde:	1a c0       	rjmp	.+52     	; 0x5e14 <vfprintf+0x1ae>
    5de0:	05 c0       	rjmp	.+10     	; 0x5dec <vfprintf+0x186>
    5de2:	b7 01       	movw	r22, r14
    5de4:	80 e2       	ldi	r24, 0x20	; 32
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	58 d1       	rcall	.+688    	; 0x609a <fputc>
    5dea:	3a 94       	dec	r3
    5dec:	83 2d       	mov	r24, r3
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	48 16       	cp	r4, r24
    5df2:	59 06       	cpc	r5, r25
    5df4:	b0 f3       	brcs	.-20     	; 0x5de2 <vfprintf+0x17c>
    5df6:	0e c0       	rjmp	.+28     	; 0x5e14 <vfprintf+0x1ae>
    5df8:	f5 01       	movw	r30, r10
    5dfa:	27 fc       	sbrc	r2, 7
    5dfc:	85 91       	lpm	r24, Z+
    5dfe:	27 fe       	sbrs	r2, 7
    5e00:	81 91       	ld	r24, Z+
    5e02:	5f 01       	movw	r10, r30
    5e04:	b7 01       	movw	r22, r14
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	48 d1       	rcall	.+656    	; 0x609a <fputc>
    5e0a:	31 10       	cpse	r3, r1
    5e0c:	3a 94       	dec	r3
    5e0e:	f1 e0       	ldi	r31, 0x01	; 1
    5e10:	4f 1a       	sub	r4, r31
    5e12:	51 08       	sbc	r5, r1
    5e14:	41 14       	cp	r4, r1
    5e16:	51 04       	cpc	r5, r1
    5e18:	79 f7       	brne	.-34     	; 0x5df8 <vfprintf+0x192>
    5e1a:	e5 c0       	rjmp	.+458    	; 0x5fe6 <vfprintf+0x380>
    5e1c:	84 36       	cpi	r24, 0x64	; 100
    5e1e:	11 f0       	breq	.+4      	; 0x5e24 <vfprintf+0x1be>
    5e20:	89 36       	cpi	r24, 0x69	; 105
    5e22:	39 f5       	brne	.+78     	; 0x5e72 <vfprintf+0x20c>
    5e24:	f8 01       	movw	r30, r16
    5e26:	27 ff       	sbrs	r18, 7
    5e28:	07 c0       	rjmp	.+14     	; 0x5e38 <vfprintf+0x1d2>
    5e2a:	60 81       	ld	r22, Z
    5e2c:	71 81       	ldd	r23, Z+1	; 0x01
    5e2e:	82 81       	ldd	r24, Z+2	; 0x02
    5e30:	93 81       	ldd	r25, Z+3	; 0x03
    5e32:	0c 5f       	subi	r16, 0xFC	; 252
    5e34:	1f 4f       	sbci	r17, 0xFF	; 255
    5e36:	08 c0       	rjmp	.+16     	; 0x5e48 <vfprintf+0x1e2>
    5e38:	60 81       	ld	r22, Z
    5e3a:	71 81       	ldd	r23, Z+1	; 0x01
    5e3c:	88 27       	eor	r24, r24
    5e3e:	77 fd       	sbrc	r23, 7
    5e40:	80 95       	com	r24
    5e42:	98 2f       	mov	r25, r24
    5e44:	0e 5f       	subi	r16, 0xFE	; 254
    5e46:	1f 4f       	sbci	r17, 0xFF	; 255
    5e48:	4f e6       	ldi	r20, 0x6F	; 111
    5e4a:	b4 2e       	mov	r11, r20
    5e4c:	b2 22       	and	r11, r18
    5e4e:	97 ff       	sbrs	r25, 7
    5e50:	09 c0       	rjmp	.+18     	; 0x5e64 <vfprintf+0x1fe>
    5e52:	90 95       	com	r25
    5e54:	80 95       	com	r24
    5e56:	70 95       	com	r23
    5e58:	61 95       	neg	r22
    5e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e60:	f0 e8       	ldi	r31, 0x80	; 128
    5e62:	bf 2a       	or	r11, r31
    5e64:	2a e0       	ldi	r18, 0x0A	; 10
    5e66:	30 e0       	ldi	r19, 0x00	; 0
    5e68:	a4 01       	movw	r20, r8
    5e6a:	43 d1       	rcall	.+646    	; 0x60f2 <__ultoa_invert>
    5e6c:	a8 2e       	mov	r10, r24
    5e6e:	a8 18       	sub	r10, r8
    5e70:	42 c0       	rjmp	.+132    	; 0x5ef6 <vfprintf+0x290>
    5e72:	85 37       	cpi	r24, 0x75	; 117
    5e74:	31 f4       	brne	.+12     	; 0x5e82 <vfprintf+0x21c>
    5e76:	3f ee       	ldi	r19, 0xEF	; 239
    5e78:	b3 2e       	mov	r11, r19
    5e7a:	b2 22       	and	r11, r18
    5e7c:	2a e0       	ldi	r18, 0x0A	; 10
    5e7e:	30 e0       	ldi	r19, 0x00	; 0
    5e80:	24 c0       	rjmp	.+72     	; 0x5eca <vfprintf+0x264>
    5e82:	99 ef       	ldi	r25, 0xF9	; 249
    5e84:	b9 2e       	mov	r11, r25
    5e86:	b2 22       	and	r11, r18
    5e88:	8f 36       	cpi	r24, 0x6F	; 111
    5e8a:	b9 f0       	breq	.+46     	; 0x5eba <vfprintf+0x254>
    5e8c:	20 f4       	brcc	.+8      	; 0x5e96 <vfprintf+0x230>
    5e8e:	88 35       	cpi	r24, 0x58	; 88
    5e90:	09 f0       	breq	.+2      	; 0x5e94 <vfprintf+0x22e>
    5e92:	ac c0       	rjmp	.+344    	; 0x5fec <vfprintf+0x386>
    5e94:	0d c0       	rjmp	.+26     	; 0x5eb0 <vfprintf+0x24a>
    5e96:	80 37       	cpi	r24, 0x70	; 112
    5e98:	21 f0       	breq	.+8      	; 0x5ea2 <vfprintf+0x23c>
    5e9a:	88 37       	cpi	r24, 0x78	; 120
    5e9c:	09 f0       	breq	.+2      	; 0x5ea0 <vfprintf+0x23a>
    5e9e:	a6 c0       	rjmp	.+332    	; 0x5fec <vfprintf+0x386>
    5ea0:	02 c0       	rjmp	.+4      	; 0x5ea6 <vfprintf+0x240>
    5ea2:	20 e1       	ldi	r18, 0x10	; 16
    5ea4:	b2 2a       	or	r11, r18
    5ea6:	b4 fe       	sbrs	r11, 4
    5ea8:	0b c0       	rjmp	.+22     	; 0x5ec0 <vfprintf+0x25a>
    5eaa:	84 e0       	ldi	r24, 0x04	; 4
    5eac:	b8 2a       	or	r11, r24
    5eae:	08 c0       	rjmp	.+16     	; 0x5ec0 <vfprintf+0x25a>
    5eb0:	24 ff       	sbrs	r18, 4
    5eb2:	09 c0       	rjmp	.+18     	; 0x5ec6 <vfprintf+0x260>
    5eb4:	e6 e0       	ldi	r30, 0x06	; 6
    5eb6:	be 2a       	or	r11, r30
    5eb8:	06 c0       	rjmp	.+12     	; 0x5ec6 <vfprintf+0x260>
    5eba:	28 e0       	ldi	r18, 0x08	; 8
    5ebc:	30 e0       	ldi	r19, 0x00	; 0
    5ebe:	05 c0       	rjmp	.+10     	; 0x5eca <vfprintf+0x264>
    5ec0:	20 e1       	ldi	r18, 0x10	; 16
    5ec2:	30 e0       	ldi	r19, 0x00	; 0
    5ec4:	02 c0       	rjmp	.+4      	; 0x5eca <vfprintf+0x264>
    5ec6:	20 e1       	ldi	r18, 0x10	; 16
    5ec8:	32 e0       	ldi	r19, 0x02	; 2
    5eca:	f8 01       	movw	r30, r16
    5ecc:	b7 fe       	sbrs	r11, 7
    5ece:	07 c0       	rjmp	.+14     	; 0x5ede <vfprintf+0x278>
    5ed0:	60 81       	ld	r22, Z
    5ed2:	71 81       	ldd	r23, Z+1	; 0x01
    5ed4:	82 81       	ldd	r24, Z+2	; 0x02
    5ed6:	93 81       	ldd	r25, Z+3	; 0x03
    5ed8:	0c 5f       	subi	r16, 0xFC	; 252
    5eda:	1f 4f       	sbci	r17, 0xFF	; 255
    5edc:	06 c0       	rjmp	.+12     	; 0x5eea <vfprintf+0x284>
    5ede:	60 81       	ld	r22, Z
    5ee0:	71 81       	ldd	r23, Z+1	; 0x01
    5ee2:	80 e0       	ldi	r24, 0x00	; 0
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	0e 5f       	subi	r16, 0xFE	; 254
    5ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    5eea:	a4 01       	movw	r20, r8
    5eec:	02 d1       	rcall	.+516    	; 0x60f2 <__ultoa_invert>
    5eee:	a8 2e       	mov	r10, r24
    5ef0:	a8 18       	sub	r10, r8
    5ef2:	ff e7       	ldi	r31, 0x7F	; 127
    5ef4:	bf 22       	and	r11, r31
    5ef6:	b6 fe       	sbrs	r11, 6
    5ef8:	0b c0       	rjmp	.+22     	; 0x5f10 <vfprintf+0x2aa>
    5efa:	2b 2d       	mov	r18, r11
    5efc:	2e 7f       	andi	r18, 0xFE	; 254
    5efe:	a5 14       	cp	r10, r5
    5f00:	50 f4       	brcc	.+20     	; 0x5f16 <vfprintf+0x2b0>
    5f02:	b4 fe       	sbrs	r11, 4
    5f04:	0a c0       	rjmp	.+20     	; 0x5f1a <vfprintf+0x2b4>
    5f06:	b2 fc       	sbrc	r11, 2
    5f08:	08 c0       	rjmp	.+16     	; 0x5f1a <vfprintf+0x2b4>
    5f0a:	2b 2d       	mov	r18, r11
    5f0c:	2e 7e       	andi	r18, 0xEE	; 238
    5f0e:	05 c0       	rjmp	.+10     	; 0x5f1a <vfprintf+0x2b4>
    5f10:	7a 2c       	mov	r7, r10
    5f12:	2b 2d       	mov	r18, r11
    5f14:	03 c0       	rjmp	.+6      	; 0x5f1c <vfprintf+0x2b6>
    5f16:	7a 2c       	mov	r7, r10
    5f18:	01 c0       	rjmp	.+2      	; 0x5f1c <vfprintf+0x2b6>
    5f1a:	75 2c       	mov	r7, r5
    5f1c:	24 ff       	sbrs	r18, 4
    5f1e:	0d c0       	rjmp	.+26     	; 0x5f3a <vfprintf+0x2d4>
    5f20:	fe 01       	movw	r30, r28
    5f22:	ea 0d       	add	r30, r10
    5f24:	f1 1d       	adc	r31, r1
    5f26:	80 81       	ld	r24, Z
    5f28:	80 33       	cpi	r24, 0x30	; 48
    5f2a:	11 f4       	brne	.+4      	; 0x5f30 <vfprintf+0x2ca>
    5f2c:	29 7e       	andi	r18, 0xE9	; 233
    5f2e:	09 c0       	rjmp	.+18     	; 0x5f42 <vfprintf+0x2dc>
    5f30:	22 ff       	sbrs	r18, 2
    5f32:	06 c0       	rjmp	.+12     	; 0x5f40 <vfprintf+0x2da>
    5f34:	73 94       	inc	r7
    5f36:	73 94       	inc	r7
    5f38:	04 c0       	rjmp	.+8      	; 0x5f42 <vfprintf+0x2dc>
    5f3a:	82 2f       	mov	r24, r18
    5f3c:	86 78       	andi	r24, 0x86	; 134
    5f3e:	09 f0       	breq	.+2      	; 0x5f42 <vfprintf+0x2dc>
    5f40:	73 94       	inc	r7
    5f42:	23 fd       	sbrc	r18, 3
    5f44:	13 c0       	rjmp	.+38     	; 0x5f6c <vfprintf+0x306>
    5f46:	20 ff       	sbrs	r18, 0
    5f48:	0e c0       	rjmp	.+28     	; 0x5f66 <vfprintf+0x300>
    5f4a:	5a 2c       	mov	r5, r10
    5f4c:	73 14       	cp	r7, r3
    5f4e:	58 f4       	brcc	.+22     	; 0x5f66 <vfprintf+0x300>
    5f50:	53 0c       	add	r5, r3
    5f52:	57 18       	sub	r5, r7
    5f54:	73 2c       	mov	r7, r3
    5f56:	07 c0       	rjmp	.+14     	; 0x5f66 <vfprintf+0x300>
    5f58:	b7 01       	movw	r22, r14
    5f5a:	80 e2       	ldi	r24, 0x20	; 32
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	2c 87       	std	Y+12, r18	; 0x0c
    5f60:	9c d0       	rcall	.+312    	; 0x609a <fputc>
    5f62:	73 94       	inc	r7
    5f64:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f66:	73 14       	cp	r7, r3
    5f68:	b8 f3       	brcs	.-18     	; 0x5f58 <vfprintf+0x2f2>
    5f6a:	04 c0       	rjmp	.+8      	; 0x5f74 <vfprintf+0x30e>
    5f6c:	73 14       	cp	r7, r3
    5f6e:	10 f4       	brcc	.+4      	; 0x5f74 <vfprintf+0x30e>
    5f70:	37 18       	sub	r3, r7
    5f72:	01 c0       	rjmp	.+2      	; 0x5f76 <vfprintf+0x310>
    5f74:	31 2c       	mov	r3, r1
    5f76:	24 ff       	sbrs	r18, 4
    5f78:	11 c0       	rjmp	.+34     	; 0x5f9c <vfprintf+0x336>
    5f7a:	b7 01       	movw	r22, r14
    5f7c:	80 e3       	ldi	r24, 0x30	; 48
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	2c 87       	std	Y+12, r18	; 0x0c
    5f82:	8b d0       	rcall	.+278    	; 0x609a <fputc>
    5f84:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f86:	22 ff       	sbrs	r18, 2
    5f88:	1c c0       	rjmp	.+56     	; 0x5fc2 <vfprintf+0x35c>
    5f8a:	21 ff       	sbrs	r18, 1
    5f8c:	03 c0       	rjmp	.+6      	; 0x5f94 <vfprintf+0x32e>
    5f8e:	88 e5       	ldi	r24, 0x58	; 88
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	02 c0       	rjmp	.+4      	; 0x5f98 <vfprintf+0x332>
    5f94:	88 e7       	ldi	r24, 0x78	; 120
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	b7 01       	movw	r22, r14
    5f9a:	0c c0       	rjmp	.+24     	; 0x5fb4 <vfprintf+0x34e>
    5f9c:	82 2f       	mov	r24, r18
    5f9e:	86 78       	andi	r24, 0x86	; 134
    5fa0:	81 f0       	breq	.+32     	; 0x5fc2 <vfprintf+0x35c>
    5fa2:	21 fd       	sbrc	r18, 1
    5fa4:	02 c0       	rjmp	.+4      	; 0x5faa <vfprintf+0x344>
    5fa6:	80 e2       	ldi	r24, 0x20	; 32
    5fa8:	01 c0       	rjmp	.+2      	; 0x5fac <vfprintf+0x346>
    5faa:	8b e2       	ldi	r24, 0x2B	; 43
    5fac:	27 fd       	sbrc	r18, 7
    5fae:	8d e2       	ldi	r24, 0x2D	; 45
    5fb0:	b7 01       	movw	r22, r14
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	72 d0       	rcall	.+228    	; 0x609a <fputc>
    5fb6:	05 c0       	rjmp	.+10     	; 0x5fc2 <vfprintf+0x35c>
    5fb8:	b7 01       	movw	r22, r14
    5fba:	80 e3       	ldi	r24, 0x30	; 48
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	6d d0       	rcall	.+218    	; 0x609a <fputc>
    5fc0:	5a 94       	dec	r5
    5fc2:	a5 14       	cp	r10, r5
    5fc4:	c8 f3       	brcs	.-14     	; 0x5fb8 <vfprintf+0x352>
    5fc6:	aa 94       	dec	r10
    5fc8:	f4 01       	movw	r30, r8
    5fca:	ea 0d       	add	r30, r10
    5fcc:	f1 1d       	adc	r31, r1
    5fce:	b7 01       	movw	r22, r14
    5fd0:	80 81       	ld	r24, Z
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	62 d0       	rcall	.+196    	; 0x609a <fputc>
    5fd6:	a1 10       	cpse	r10, r1
    5fd8:	f6 cf       	rjmp	.-20     	; 0x5fc6 <vfprintf+0x360>
    5fda:	05 c0       	rjmp	.+10     	; 0x5fe6 <vfprintf+0x380>
    5fdc:	b7 01       	movw	r22, r14
    5fde:	80 e2       	ldi	r24, 0x20	; 32
    5fe0:	90 e0       	ldi	r25, 0x00	; 0
    5fe2:	5b d0       	rcall	.+182    	; 0x609a <fputc>
    5fe4:	3a 94       	dec	r3
    5fe6:	31 10       	cpse	r3, r1
    5fe8:	f9 cf       	rjmp	.-14     	; 0x5fdc <vfprintf+0x376>
    5fea:	50 ce       	rjmp	.-864    	; 0x5c8c <vfprintf+0x26>
    5fec:	f7 01       	movw	r30, r14
    5fee:	26 81       	ldd	r18, Z+6	; 0x06
    5ff0:	37 81       	ldd	r19, Z+7	; 0x07
    5ff2:	02 c0       	rjmp	.+4      	; 0x5ff8 <vfprintf+0x392>
    5ff4:	2f ef       	ldi	r18, 0xFF	; 255
    5ff6:	3f ef       	ldi	r19, 0xFF	; 255
    5ff8:	c9 01       	movw	r24, r18
    5ffa:	2c 96       	adiw	r28, 0x0c	; 12
    5ffc:	e2 e1       	ldi	r30, 0x12	; 18
    5ffe:	0b c1       	rjmp	.+534    	; 0x6216 <__epilogue_restores__>

00006000 <__eerd_block_x32a4u>:
    6000:	e0 ec       	ldi	r30, 0xC0	; 192
    6002:	f1 e0       	ldi	r31, 0x01	; 1
    6004:	a7 85       	ldd	r26, Z+15	; 0x0f
    6006:	a7 fd       	sbrc	r26, 7
    6008:	fd cf       	rjmp	.-6      	; 0x6004 <__eerd_block_x32a4u+0x4>
    600a:	a4 85       	ldd	r26, Z+12	; 0x0c
    600c:	a8 60       	ori	r26, 0x08	; 8
    600e:	a4 87       	std	Z+12, r26	; 0x0c
    6010:	60 50       	subi	r22, 0x00	; 0
    6012:	70 4f       	sbci	r23, 0xF0	; 240
    6014:	f2 cd       	rjmp	.-1052   	; 0x5bfa <memcpy>

00006016 <__eewr_block_x32a4u>:
    6016:	dc 01       	movw	r26, r24
    6018:	cb 01       	movw	r24, r22
    601a:	02 c0       	rjmp	.+4      	; 0x6020 <__eewr_block_x32a4u+0xa>
    601c:	2d 91       	ld	r18, X+
    601e:	05 d0       	rcall	.+10     	; 0x602a <__eewr_r18_x32a4u>
    6020:	41 50       	subi	r20, 0x01	; 1
    6022:	50 40       	sbci	r21, 0x00	; 0
    6024:	d8 f7       	brcc	.-10     	; 0x601c <__eewr_block_x32a4u+0x6>
    6026:	08 95       	ret

00006028 <__eewr_byte_x32a4u>:
    6028:	26 2f       	mov	r18, r22

0000602a <__eewr_r18_x32a4u>:
    602a:	e0 ec       	ldi	r30, 0xC0	; 192
    602c:	f1 e0       	ldi	r31, 0x01	; 1
    602e:	37 85       	ldd	r19, Z+15	; 0x0f
    6030:	37 fd       	sbrc	r19, 7
    6032:	fd cf       	rjmp	.-6      	; 0x602e <__eewr_r18_x32a4u+0x4>
    6034:	34 85       	ldd	r19, Z+12	; 0x0c
    6036:	37 7f       	andi	r19, 0xF7	; 247
    6038:	34 87       	std	Z+12, r19	; 0x0c
    603a:	37 85       	ldd	r19, Z+15	; 0x0f
    603c:	31 ff       	sbrs	r19, 1
    603e:	09 c0       	rjmp	.+18     	; 0x6052 <__eewr_r18_x32a4u+0x28>
    6040:	36 e3       	ldi	r19, 0x36	; 54
    6042:	32 87       	std	Z+10, r19	; 0x0a
    6044:	38 ed       	ldi	r19, 0xD8	; 216
    6046:	34 bf       	out	0x34, r19	; 52
    6048:	31 e0       	ldi	r19, 0x01	; 1
    604a:	33 87       	std	Z+11, r19	; 0x0b
    604c:	37 85       	ldd	r19, Z+15	; 0x0f
    604e:	37 fd       	sbrc	r19, 7
    6050:	fd cf       	rjmp	.-6      	; 0x604c <__eewr_r18_x32a4u+0x22>
    6052:	33 e3       	ldi	r19, 0x33	; 51
    6054:	32 87       	std	Z+10, r19	; 0x0a
    6056:	80 83       	st	Z, r24
    6058:	91 83       	std	Z+1, r25	; 0x01
    605a:	12 82       	std	Z+2, r1	; 0x02
    605c:	24 83       	std	Z+4, r18	; 0x04
    605e:	25 e3       	ldi	r18, 0x35	; 53
    6060:	22 87       	std	Z+10, r18	; 0x0a
    6062:	28 ed       	ldi	r18, 0xD8	; 216
    6064:	31 e0       	ldi	r19, 0x01	; 1
    6066:	24 bf       	out	0x34, r18	; 52
    6068:	33 87       	std	Z+11, r19	; 0x0b
    606a:	01 96       	adiw	r24, 0x01	; 1
    606c:	08 95       	ret

0000606e <strnlen_P>:
    606e:	fc 01       	movw	r30, r24
    6070:	05 90       	lpm	r0, Z+
    6072:	61 50       	subi	r22, 0x01	; 1
    6074:	70 40       	sbci	r23, 0x00	; 0
    6076:	01 10       	cpse	r0, r1
    6078:	d8 f7       	brcc	.-10     	; 0x6070 <strnlen_P+0x2>
    607a:	80 95       	com	r24
    607c:	90 95       	com	r25
    607e:	8e 0f       	add	r24, r30
    6080:	9f 1f       	adc	r25, r31
    6082:	08 95       	ret

00006084 <strnlen>:
    6084:	fc 01       	movw	r30, r24
    6086:	61 50       	subi	r22, 0x01	; 1
    6088:	70 40       	sbci	r23, 0x00	; 0
    608a:	01 90       	ld	r0, Z+
    608c:	01 10       	cpse	r0, r1
    608e:	d8 f7       	brcc	.-10     	; 0x6086 <strnlen+0x2>
    6090:	80 95       	com	r24
    6092:	90 95       	com	r25
    6094:	8e 0f       	add	r24, r30
    6096:	9f 1f       	adc	r25, r31
    6098:	08 95       	ret

0000609a <fputc>:
    609a:	0f 93       	push	r16
    609c:	1f 93       	push	r17
    609e:	cf 93       	push	r28
    60a0:	df 93       	push	r29
    60a2:	8c 01       	movw	r16, r24
    60a4:	eb 01       	movw	r28, r22
    60a6:	8b 81       	ldd	r24, Y+3	; 0x03
    60a8:	81 fd       	sbrc	r24, 1
    60aa:	03 c0       	rjmp	.+6      	; 0x60b2 <fputc+0x18>
    60ac:	0f ef       	ldi	r16, 0xFF	; 255
    60ae:	1f ef       	ldi	r17, 0xFF	; 255
    60b0:	1a c0       	rjmp	.+52     	; 0x60e6 <fputc+0x4c>
    60b2:	82 ff       	sbrs	r24, 2
    60b4:	0d c0       	rjmp	.+26     	; 0x60d0 <fputc+0x36>
    60b6:	2e 81       	ldd	r18, Y+6	; 0x06
    60b8:	3f 81       	ldd	r19, Y+7	; 0x07
    60ba:	8c 81       	ldd	r24, Y+4	; 0x04
    60bc:	9d 81       	ldd	r25, Y+5	; 0x05
    60be:	28 17       	cp	r18, r24
    60c0:	39 07       	cpc	r19, r25
    60c2:	64 f4       	brge	.+24     	; 0x60dc <fputc+0x42>
    60c4:	e8 81       	ld	r30, Y
    60c6:	f9 81       	ldd	r31, Y+1	; 0x01
    60c8:	01 93       	st	Z+, r16
    60ca:	e8 83       	st	Y, r30
    60cc:	f9 83       	std	Y+1, r31	; 0x01
    60ce:	06 c0       	rjmp	.+12     	; 0x60dc <fputc+0x42>
    60d0:	e8 85       	ldd	r30, Y+8	; 0x08
    60d2:	f9 85       	ldd	r31, Y+9	; 0x09
    60d4:	80 2f       	mov	r24, r16
    60d6:	09 95       	icall
    60d8:	89 2b       	or	r24, r25
    60da:	41 f7       	brne	.-48     	; 0x60ac <fputc+0x12>
    60dc:	8e 81       	ldd	r24, Y+6	; 0x06
    60de:	9f 81       	ldd	r25, Y+7	; 0x07
    60e0:	01 96       	adiw	r24, 0x01	; 1
    60e2:	8e 83       	std	Y+6, r24	; 0x06
    60e4:	9f 83       	std	Y+7, r25	; 0x07
    60e6:	c8 01       	movw	r24, r16
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	08 95       	ret

000060f2 <__ultoa_invert>:
    60f2:	fa 01       	movw	r30, r20
    60f4:	aa 27       	eor	r26, r26
    60f6:	28 30       	cpi	r18, 0x08	; 8
    60f8:	51 f1       	breq	.+84     	; 0x614e <__ultoa_invert+0x5c>
    60fa:	20 31       	cpi	r18, 0x10	; 16
    60fc:	81 f1       	breq	.+96     	; 0x615e <__ultoa_invert+0x6c>
    60fe:	e8 94       	clt
    6100:	6f 93       	push	r22
    6102:	6e 7f       	andi	r22, 0xFE	; 254
    6104:	6e 5f       	subi	r22, 0xFE	; 254
    6106:	7f 4f       	sbci	r23, 0xFF	; 255
    6108:	8f 4f       	sbci	r24, 0xFF	; 255
    610a:	9f 4f       	sbci	r25, 0xFF	; 255
    610c:	af 4f       	sbci	r26, 0xFF	; 255
    610e:	b1 e0       	ldi	r27, 0x01	; 1
    6110:	3e d0       	rcall	.+124    	; 0x618e <__ultoa_invert+0x9c>
    6112:	b4 e0       	ldi	r27, 0x04	; 4
    6114:	3c d0       	rcall	.+120    	; 0x618e <__ultoa_invert+0x9c>
    6116:	67 0f       	add	r22, r23
    6118:	78 1f       	adc	r23, r24
    611a:	89 1f       	adc	r24, r25
    611c:	9a 1f       	adc	r25, r26
    611e:	a1 1d       	adc	r26, r1
    6120:	68 0f       	add	r22, r24
    6122:	79 1f       	adc	r23, r25
    6124:	8a 1f       	adc	r24, r26
    6126:	91 1d       	adc	r25, r1
    6128:	a1 1d       	adc	r26, r1
    612a:	6a 0f       	add	r22, r26
    612c:	71 1d       	adc	r23, r1
    612e:	81 1d       	adc	r24, r1
    6130:	91 1d       	adc	r25, r1
    6132:	a1 1d       	adc	r26, r1
    6134:	20 d0       	rcall	.+64     	; 0x6176 <__ultoa_invert+0x84>
    6136:	09 f4       	brne	.+2      	; 0x613a <__ultoa_invert+0x48>
    6138:	68 94       	set
    613a:	3f 91       	pop	r19
    613c:	2a e0       	ldi	r18, 0x0A	; 10
    613e:	26 9f       	mul	r18, r22
    6140:	11 24       	eor	r1, r1
    6142:	30 19       	sub	r19, r0
    6144:	30 5d       	subi	r19, 0xD0	; 208
    6146:	31 93       	st	Z+, r19
    6148:	de f6       	brtc	.-74     	; 0x6100 <__ultoa_invert+0xe>
    614a:	cf 01       	movw	r24, r30
    614c:	08 95       	ret
    614e:	46 2f       	mov	r20, r22
    6150:	47 70       	andi	r20, 0x07	; 7
    6152:	40 5d       	subi	r20, 0xD0	; 208
    6154:	41 93       	st	Z+, r20
    6156:	b3 e0       	ldi	r27, 0x03	; 3
    6158:	0f d0       	rcall	.+30     	; 0x6178 <__ultoa_invert+0x86>
    615a:	c9 f7       	brne	.-14     	; 0x614e <__ultoa_invert+0x5c>
    615c:	f6 cf       	rjmp	.-20     	; 0x614a <__ultoa_invert+0x58>
    615e:	46 2f       	mov	r20, r22
    6160:	4f 70       	andi	r20, 0x0F	; 15
    6162:	40 5d       	subi	r20, 0xD0	; 208
    6164:	4a 33       	cpi	r20, 0x3A	; 58
    6166:	18 f0       	brcs	.+6      	; 0x616e <__ultoa_invert+0x7c>
    6168:	49 5d       	subi	r20, 0xD9	; 217
    616a:	31 fd       	sbrc	r19, 1
    616c:	40 52       	subi	r20, 0x20	; 32
    616e:	41 93       	st	Z+, r20
    6170:	02 d0       	rcall	.+4      	; 0x6176 <__ultoa_invert+0x84>
    6172:	a9 f7       	brne	.-22     	; 0x615e <__ultoa_invert+0x6c>
    6174:	ea cf       	rjmp	.-44     	; 0x614a <__ultoa_invert+0x58>
    6176:	b4 e0       	ldi	r27, 0x04	; 4
    6178:	a6 95       	lsr	r26
    617a:	97 95       	ror	r25
    617c:	87 95       	ror	r24
    617e:	77 95       	ror	r23
    6180:	67 95       	ror	r22
    6182:	ba 95       	dec	r27
    6184:	c9 f7       	brne	.-14     	; 0x6178 <__ultoa_invert+0x86>
    6186:	00 97       	sbiw	r24, 0x00	; 0
    6188:	61 05       	cpc	r22, r1
    618a:	71 05       	cpc	r23, r1
    618c:	08 95       	ret
    618e:	9b 01       	movw	r18, r22
    6190:	ac 01       	movw	r20, r24
    6192:	0a 2e       	mov	r0, r26
    6194:	06 94       	lsr	r0
    6196:	57 95       	ror	r21
    6198:	47 95       	ror	r20
    619a:	37 95       	ror	r19
    619c:	27 95       	ror	r18
    619e:	ba 95       	dec	r27
    61a0:	c9 f7       	brne	.-14     	; 0x6194 <__ultoa_invert+0xa2>
    61a2:	62 0f       	add	r22, r18
    61a4:	73 1f       	adc	r23, r19
    61a6:	84 1f       	adc	r24, r20
    61a8:	95 1f       	adc	r25, r21
    61aa:	a0 1d       	adc	r26, r0
    61ac:	08 95       	ret

000061ae <__divmodsi4>:
    61ae:	05 2e       	mov	r0, r21
    61b0:	97 fb       	bst	r25, 7
    61b2:	16 f4       	brtc	.+4      	; 0x61b8 <__divmodsi4+0xa>
    61b4:	00 94       	com	r0
    61b6:	06 d0       	rcall	.+12     	; 0x61c4 <__divmodsi4_neg1>
    61b8:	57 fd       	sbrc	r21, 7
    61ba:	0c d0       	rcall	.+24     	; 0x61d4 <__divmodsi4_neg2>
    61bc:	44 d0       	rcall	.+136    	; 0x6246 <__udivmodsi4>
    61be:	07 fc       	sbrc	r0, 7
    61c0:	09 d0       	rcall	.+18     	; 0x61d4 <__divmodsi4_neg2>
    61c2:	7e f4       	brtc	.+30     	; 0x61e2 <__divmodsi4_exit>

000061c4 <__divmodsi4_neg1>:
    61c4:	90 95       	com	r25
    61c6:	80 95       	com	r24
    61c8:	70 95       	com	r23
    61ca:	61 95       	neg	r22
    61cc:	7f 4f       	sbci	r23, 0xFF	; 255
    61ce:	8f 4f       	sbci	r24, 0xFF	; 255
    61d0:	9f 4f       	sbci	r25, 0xFF	; 255
    61d2:	08 95       	ret

000061d4 <__divmodsi4_neg2>:
    61d4:	50 95       	com	r21
    61d6:	40 95       	com	r20
    61d8:	30 95       	com	r19
    61da:	21 95       	neg	r18
    61dc:	3f 4f       	sbci	r19, 0xFF	; 255
    61de:	4f 4f       	sbci	r20, 0xFF	; 255
    61e0:	5f 4f       	sbci	r21, 0xFF	; 255

000061e2 <__divmodsi4_exit>:
    61e2:	08 95       	ret

000061e4 <__prologue_saves__>:
    61e4:	2f 92       	push	r2
    61e6:	3f 92       	push	r3
    61e8:	4f 92       	push	r4
    61ea:	5f 92       	push	r5
    61ec:	6f 92       	push	r6
    61ee:	7f 92       	push	r7
    61f0:	8f 92       	push	r8
    61f2:	9f 92       	push	r9
    61f4:	af 92       	push	r10
    61f6:	bf 92       	push	r11
    61f8:	cf 92       	push	r12
    61fa:	df 92       	push	r13
    61fc:	ef 92       	push	r14
    61fe:	ff 92       	push	r15
    6200:	0f 93       	push	r16
    6202:	1f 93       	push	r17
    6204:	cf 93       	push	r28
    6206:	df 93       	push	r29
    6208:	cd b7       	in	r28, 0x3d	; 61
    620a:	de b7       	in	r29, 0x3e	; 62
    620c:	ca 1b       	sub	r28, r26
    620e:	db 0b       	sbc	r29, r27
    6210:	cd bf       	out	0x3d, r28	; 61
    6212:	de bf       	out	0x3e, r29	; 62
    6214:	09 94       	ijmp

00006216 <__epilogue_restores__>:
    6216:	2a 88       	ldd	r2, Y+18	; 0x12
    6218:	39 88       	ldd	r3, Y+17	; 0x11
    621a:	48 88       	ldd	r4, Y+16	; 0x10
    621c:	5f 84       	ldd	r5, Y+15	; 0x0f
    621e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6220:	7d 84       	ldd	r7, Y+13	; 0x0d
    6222:	8c 84       	ldd	r8, Y+12	; 0x0c
    6224:	9b 84       	ldd	r9, Y+11	; 0x0b
    6226:	aa 84       	ldd	r10, Y+10	; 0x0a
    6228:	b9 84       	ldd	r11, Y+9	; 0x09
    622a:	c8 84       	ldd	r12, Y+8	; 0x08
    622c:	df 80       	ldd	r13, Y+7	; 0x07
    622e:	ee 80       	ldd	r14, Y+6	; 0x06
    6230:	fd 80       	ldd	r15, Y+5	; 0x05
    6232:	0c 81       	ldd	r16, Y+4	; 0x04
    6234:	1b 81       	ldd	r17, Y+3	; 0x03
    6236:	aa 81       	ldd	r26, Y+2	; 0x02
    6238:	b9 81       	ldd	r27, Y+1	; 0x01
    623a:	ce 0f       	add	r28, r30
    623c:	d1 1d       	adc	r29, r1
    623e:	cd bf       	out	0x3d, r28	; 61
    6240:	de bf       	out	0x3e, r29	; 62
    6242:	ed 01       	movw	r28, r26
    6244:	08 95       	ret

00006246 <__udivmodsi4>:
    6246:	a1 e2       	ldi	r26, 0x21	; 33
    6248:	1a 2e       	mov	r1, r26
    624a:	aa 1b       	sub	r26, r26
    624c:	bb 1b       	sub	r27, r27
    624e:	fd 01       	movw	r30, r26
    6250:	0d c0       	rjmp	.+26     	; 0x626c <__udivmodsi4_ep>

00006252 <__udivmodsi4_loop>:
    6252:	aa 1f       	adc	r26, r26
    6254:	bb 1f       	adc	r27, r27
    6256:	ee 1f       	adc	r30, r30
    6258:	ff 1f       	adc	r31, r31
    625a:	a2 17       	cp	r26, r18
    625c:	b3 07       	cpc	r27, r19
    625e:	e4 07       	cpc	r30, r20
    6260:	f5 07       	cpc	r31, r21
    6262:	20 f0       	brcs	.+8      	; 0x626c <__udivmodsi4_ep>
    6264:	a2 1b       	sub	r26, r18
    6266:	b3 0b       	sbc	r27, r19
    6268:	e4 0b       	sbc	r30, r20
    626a:	f5 0b       	sbc	r31, r21

0000626c <__udivmodsi4_ep>:
    626c:	66 1f       	adc	r22, r22
    626e:	77 1f       	adc	r23, r23
    6270:	88 1f       	adc	r24, r24
    6272:	99 1f       	adc	r25, r25
    6274:	1a 94       	dec	r1
    6276:	69 f7       	brne	.-38     	; 0x6252 <__udivmodsi4_loop>
    6278:	60 95       	com	r22
    627a:	70 95       	com	r23
    627c:	80 95       	com	r24
    627e:	90 95       	com	r25
    6280:	9b 01       	movw	r18, r22
    6282:	ac 01       	movw	r20, r24
    6284:	bd 01       	movw	r22, r26
    6286:	cf 01       	movw	r24, r30
    6288:	08 95       	ret

0000628a <_exit>:
    628a:	f8 94       	cli

0000628c <__stop_program>:
    628c:	ff cf       	rjmp	.-2      	; 0x628c <__stop_program>
