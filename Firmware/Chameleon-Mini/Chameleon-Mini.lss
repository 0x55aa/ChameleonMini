
Chameleon-Mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e9a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00802000  00004e9a  00004f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a0b  00802092  00802092  00004fe0  2**0
                  ALLOC
  3 .eeprom       00000013  00810000  00810000  00004fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00004ff3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000b50  00000000  00000000  0000504f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000189de  00000000  00000000  00005b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000553d  00000000  00000000  0001e57d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a17f  00000000  00000000  00023aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d28  00000000  00000000  0002dc3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000076e1  00000000  00000000  0002f964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c84e  00000000  00000000  00037045  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016c8  00000000  00000000  00043893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c3       	rjmp	.+1782   	; 0x6f8 <__ctors_end>
       2:	00 00       	nop
       4:	95 c3       	rjmp	.+1834   	; 0x730 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c3       	rjmp	.+1830   	; 0x730 <__bad_interrupt>
       a:	00 00       	nop
       c:	91 c3       	rjmp	.+1826   	; 0x730 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c3       	rjmp	.+1822   	; 0x730 <__bad_interrupt>
      12:	00 00       	nop
      14:	8d c3       	rjmp	.+1818   	; 0x730 <__bad_interrupt>
      16:	00 00       	nop
      18:	8b c3       	rjmp	.+1814   	; 0x730 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	89 c3       	rjmp	.+1810   	; 0x730 <__bad_interrupt>
      1e:	00 00       	nop
      20:	87 c3       	rjmp	.+1806   	; 0x730 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c3       	rjmp	.+1802   	; 0x730 <__bad_interrupt>
      26:	00 00       	nop
      28:	83 c3       	rjmp	.+1798   	; 0x730 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	81 c3       	rjmp	.+1794   	; 0x730 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c3       	rjmp	.+1790   	; 0x730 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c3       	rjmp	.+1786   	; 0x730 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c3       	rjmp	.+1782   	; 0x730 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c3       	rjmp	.+1778   	; 0x730 <__bad_interrupt>
      3e:	00 00       	nop
      40:	77 c3       	rjmp	.+1774   	; 0x730 <__bad_interrupt>
      42:	00 00       	nop
      44:	75 c3       	rjmp	.+1770   	; 0x730 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c3       	rjmp	.+1766   	; 0x730 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	71 c3       	rjmp	.+1762   	; 0x730 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c3       	rjmp	.+1758   	; 0x730 <__bad_interrupt>
      52:	00 00       	nop
      54:	6d c3       	rjmp	.+1754   	; 0x730 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_22>
      5c:	69 c3       	rjmp	.+1746   	; 0x730 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c3       	rjmp	.+1742   	; 0x730 <__bad_interrupt>
      62:	00 00       	nop
      64:	65 c3       	rjmp	.+1738   	; 0x730 <__bad_interrupt>
      66:	00 00       	nop
      68:	63 c3       	rjmp	.+1734   	; 0x730 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	61 c3       	rjmp	.+1730   	; 0x730 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c3       	rjmp	.+1726   	; 0x730 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c3       	rjmp	.+1722   	; 0x730 <__bad_interrupt>
      76:	00 00       	nop
      78:	5b c3       	rjmp	.+1718   	; 0x730 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	59 c3       	rjmp	.+1714   	; 0x730 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c3       	rjmp	.+1710   	; 0x730 <__bad_interrupt>
      82:	00 00       	nop
      84:	55 c3       	rjmp	.+1706   	; 0x730 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_34>
      8c:	51 c3       	rjmp	.+1698   	; 0x730 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4f c3       	rjmp	.+1694   	; 0x730 <__bad_interrupt>
      92:	00 00       	nop
      94:	4d c3       	rjmp	.+1690   	; 0x730 <__bad_interrupt>
      96:	00 00       	nop
      98:	4b c3       	rjmp	.+1686   	; 0x730 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	49 c3       	rjmp	.+1682   	; 0x730 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	47 c3       	rjmp	.+1678   	; 0x730 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	45 c3       	rjmp	.+1674   	; 0x730 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	43 c3       	rjmp	.+1670   	; 0x730 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	41 c3       	rjmp	.+1666   	; 0x730 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3f c3       	rjmp	.+1662   	; 0x730 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3d c3       	rjmp	.+1658   	; 0x730 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3b c3       	rjmp	.+1654   	; 0x730 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	39 c3       	rjmp	.+1650   	; 0x730 <__bad_interrupt>
      be:	00 00       	nop
      c0:	37 c3       	rjmp	.+1646   	; 0x730 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	35 c3       	rjmp	.+1642   	; 0x730 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	33 c3       	rjmp	.+1638   	; 0x730 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	31 c3       	rjmp	.+1634   	; 0x730 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2f c3       	rjmp	.+1630   	; 0x730 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2d c3       	rjmp	.+1626   	; 0x730 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2b c3       	rjmp	.+1622   	; 0x730 <__bad_interrupt>
      da:	00 00       	nop
      dc:	29 c3       	rjmp	.+1618   	; 0x730 <__bad_interrupt>
      de:	00 00       	nop
      e0:	27 c3       	rjmp	.+1614   	; 0x730 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	25 c3       	rjmp	.+1610   	; 0x730 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	23 c3       	rjmp	.+1606   	; 0x730 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	21 c3       	rjmp	.+1602   	; 0x730 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	1f c3       	rjmp	.+1598   	; 0x730 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	1d c3       	rjmp	.+1594   	; 0x730 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1b c3       	rjmp	.+1590   	; 0x730 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	19 c3       	rjmp	.+1586   	; 0x730 <__bad_interrupt>
      fe:	00 00       	nop
     100:	17 c3       	rjmp	.+1582   	; 0x730 <__bad_interrupt>
     102:	00 00       	nop
     104:	15 c3       	rjmp	.+1578   	; 0x730 <__bad_interrupt>
     106:	00 00       	nop
     108:	13 c3       	rjmp	.+1574   	; 0x730 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	11 c3       	rjmp	.+1570   	; 0x730 <__bad_interrupt>
     10e:	00 00       	nop
     110:	0f c3       	rjmp	.+1566   	; 0x730 <__bad_interrupt>
     112:	00 00       	nop
     114:	0d c3       	rjmp	.+1562   	; 0x730 <__bad_interrupt>
     116:	00 00       	nop
     118:	0b c3       	rjmp	.+1558   	; 0x730 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	09 c3       	rjmp	.+1554   	; 0x730 <__bad_interrupt>
     11e:	00 00       	nop
     120:	07 c3       	rjmp	.+1550   	; 0x730 <__bad_interrupt>
     122:	00 00       	nop
     124:	05 c3       	rjmp	.+1546   	; 0x730 <__bad_interrupt>
     126:	00 00       	nop
     128:	03 c3       	rjmp	.+1542   	; 0x730 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	01 c3       	rjmp	.+1538   	; 0x730 <__bad_interrupt>
     12e:	00 00       	nop
     130:	ff c2       	rjmp	.+1534   	; 0x730 <__bad_interrupt>
     132:	00 00       	nop
     134:	fd c2       	rjmp	.+1530   	; 0x730 <__bad_interrupt>
     136:	00 00       	nop
     138:	fb c2       	rjmp	.+1526   	; 0x730 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	f9 c2       	rjmp	.+1522   	; 0x730 <__bad_interrupt>
     13e:	00 00       	nop
     140:	f7 c2       	rjmp	.+1518   	; 0x730 <__bad_interrupt>
     142:	00 00       	nop
     144:	f5 c2       	rjmp	.+1514   	; 0x730 <__bad_interrupt>
     146:	00 00       	nop
     148:	f3 c2       	rjmp	.+1510   	; 0x730 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__vector_83>
     150:	ef c2       	rjmp	.+1502   	; 0x730 <__bad_interrupt>
     152:	00 00       	nop
     154:	ed c2       	rjmp	.+1498   	; 0x730 <__bad_interrupt>
     156:	00 00       	nop
     158:	eb c2       	rjmp	.+1494   	; 0x730 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	e9 c2       	rjmp	.+1490   	; 0x730 <__bad_interrupt>
     15e:	00 00       	nop
     160:	e7 c2       	rjmp	.+1486   	; 0x730 <__bad_interrupt>
     162:	00 00       	nop
     164:	e5 c2       	rjmp	.+1482   	; 0x730 <__bad_interrupt>
     166:	00 00       	nop
     168:	e3 c2       	rjmp	.+1478   	; 0x730 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e1 c2       	rjmp	.+1474   	; 0x730 <__bad_interrupt>
     16e:	00 00       	nop
     170:	df c2       	rjmp	.+1470   	; 0x730 <__bad_interrupt>
     172:	00 00       	nop
     174:	dd c2       	rjmp	.+1466   	; 0x730 <__bad_interrupt>
     176:	00 00       	nop
     178:	db c2       	rjmp	.+1462   	; 0x730 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	d9 c2       	rjmp	.+1458   	; 0x730 <__bad_interrupt>
     17e:	00 00       	nop
     180:	d7 c2       	rjmp	.+1454   	; 0x730 <__bad_interrupt>
     182:	00 00       	nop
     184:	d5 c2       	rjmp	.+1450   	; 0x730 <__bad_interrupt>
     186:	00 00       	nop
     188:	d3 c2       	rjmp	.+1446   	; 0x730 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d1 c2       	rjmp	.+1442   	; 0x730 <__bad_interrupt>
     18e:	00 00       	nop
     190:	cf c2       	rjmp	.+1438   	; 0x730 <__bad_interrupt>
     192:	00 00       	nop
     194:	cd c2       	rjmp	.+1434   	; 0x730 <__bad_interrupt>
     196:	00 00       	nop
     198:	cb c2       	rjmp	.+1430   	; 0x730 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	c9 c2       	rjmp	.+1426   	; 0x730 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	c7 c2       	rjmp	.+1422   	; 0x730 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c5 c2       	rjmp	.+1418   	; 0x730 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c3 c2       	rjmp	.+1414   	; 0x730 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c1 c2       	rjmp	.+1410   	; 0x730 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	bf c2       	rjmp	.+1406   	; 0x730 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	bd c2       	rjmp	.+1402   	; 0x730 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	bb c2       	rjmp	.+1398   	; 0x730 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	b9 c2       	rjmp	.+1394   	; 0x730 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	b7 c2       	rjmp	.+1390   	; 0x730 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b5 c2       	rjmp	.+1386   	; 0x730 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b3 c2       	rjmp	.+1382   	; 0x730 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b1 c2       	rjmp	.+1378   	; 0x730 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	af c2       	rjmp	.+1374   	; 0x730 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	ad c2       	rjmp	.+1370   	; 0x730 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ab c2       	rjmp	.+1366   	; 0x730 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	a9 c2       	rjmp	.+1362   	; 0x730 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	a7 c2       	rjmp	.+1358   	; 0x730 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a5 c2       	rjmp	.+1354   	; 0x730 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a3 c2       	rjmp	.+1350   	; 0x730 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a1 c2       	rjmp	.+1346   	; 0x730 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	9f c2       	rjmp	.+1342   	; 0x730 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__vector_125>
     1f8:	9b c2       	rjmp	.+1334   	; 0x730 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	66 0f       	add	r22, r22
     1fe:	66 0f       	add	r22, r22
     200:	4e 0f       	add	r20, r30
     202:	57 0f       	add	r21, r23
     204:	70 0f       	add	r23, r16
     206:	24 0f       	add	r18, r20
     208:	3e 0f       	add	r19, r30
     20a:	41 0f       	add	r20, r17
     20c:	38 0f       	add	r19, r24
     20e:	29 14       	cp	r2, r9
     210:	b5 13       	cpse	r27, r21
     212:	be 13       	cpse	r27, r30
     214:	c5 13       	cpse	r28, r21
     216:	d3 13       	cpse	r29, r19
     218:	de 13       	cpse	r29, r30
     21a:	03 14       	cp	r0, r3
     21c:	7d 13       	cpse	r23, r29
     21e:	11 14       	cp	r1, r1
     220:	18 14       	cp	r1, r8
     222:	1f 14       	cp	r1, r15
     224:	81 15       	cp	r24, r1
     226:	81 15       	cp	r24, r1
     228:	95 15       	cp	r25, r5
     22a:	50 16       	cp	r5, r16
     22c:	a7 15       	cp	r26, r7
     22e:	c5 15       	cp	r28, r5
     230:	45 15       	cp	r20, r5
     232:	69 15       	cp	r22, r9
     234:	69 15       	cp	r22, r9
     236:	69 15       	cp	r22, r9
     238:	0e 1c       	adc	r0, r14
     23a:	db 1b       	sub	r29, r27
     23c:	7a 1b       	sub	r23, r26
     23e:	db 1b       	sub	r29, r27
     240:	7a 1b       	sub	r23, r26
     242:	c9 1b       	sub	r28, r25
     244:	ab 1b       	sub	r26, r27
     246:	7a 1b       	sub	r23, r26
     248:	a2 1b       	sub	r26, r18
     24a:	8b 1b       	sub	r24, r27

0000024c <ProductString>:
     24c:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     25c:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000026a <ManufacturerString>:
     26a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     27a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000284 <LanguageString>:
     284:	04 03 09 04                                         ....

00000288 <ConfigurationDescriptor>:
     288:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     298:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     2a8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     2b8:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000002c6 <DeviceDescriptor>:
     2c6:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     2d6:	dc 01                                               ..

000002d8 <ConfigurationTable>:
     2d8:	00 4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00     .NONE...........
     2e8:	00 89 04 8a 04 8b 04 8c 04 8d 04 8e 04 91 04 92     ................
     2f8:	04 00 00 00 01 01 4d 46 5f 43 4c 41 53 53 49 43     ......MF_CLASSIC
     308:	5f 31 4b 00 00 00 43 14 7a 14 f5 14 0f 15 13 15     _1K...C.z.......
     318:	14 15 e7 18 ed 18 00 04 04 00 02 4d 46 5f 43 4c     ...........MF_CL
     328:	41 53 53 49 43 5f 34 4b 00 00 00 43 14 7a 14 02     ASSIC_4K...C.z..
     338:	15 0f 15 13 15 14 15 e7 18 ed 18 00 10 04 00        ...............

00000347 <ButtonActionTable>:
     347:	4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00 00     NONE............
     357:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     367:	55 49 44 5f 52 41 4e 44 4f 4d 00 00 00 00 00 00     UID_RANDOM......
     377:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     387:	55 49 44 5f 4c 45 46 54 5f 49 4e 43 52 45 4d 45     UID_LEFT_INCREME
     397:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     3a7:	55 49 44 5f 52 49 47 48 54 5f 49 4e 43 52 45 4d     UID_RIGHT_INCREM
     3b7:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     3c7:	55 49 44 5f 4c 45 46 54 5f 44 45 43 52 45 4d 45     UID_LEFT_DECREME
     3d7:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     3e7:	55 49 44 5f 52 49 47 48 54 5f 44 45 43 52 45 4d     UID_RIGHT_DECREM
     3f7:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     407:	43 59 43 4c 45 5f 53 45 54 54 49 4e 47 53 00 00     CYCLE_SETTINGS..
     417:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     427:	53 54 4f 52 45 5f 4d 45 4d 00 00 00 00 00 00 00     STORE_MEM.......
     437:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     447:	52 45 43 41 4c 4c 5f 4d 45 4d 00 00 00 00 00 00     RECALL_MEM......
     457:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00000467 <__c.6505>:
     467:	25 35 75 20 6d 56 00                                %5u mV.

0000046e <__c.6466>:
     46e:	25 75 00                                            %u.

00000471 <__c.6461>:
     471:	25 75 00                                            %u.

00000474 <__c.6434>:
     474:	52 41 4e 44 4f 4d 00                                RANDOM.

0000047b <__c.6416>:
     47b:	25 73 00                                            %s.

0000047e <__c.6405>:
     47e:	43 68 61 6d 65 6c 65 6f 6e 2d 4d 69 6e 69 20 25     Chameleon-Mini %
     48e:	53 20 75 73 69 6e 67 20 4c 55 46 41 20 25 53 20     S using LUFA %S 
     49e:	63 6f 6d 70 69 6c 65 64 20 77 69 74 68 20 41 56     compiled with AV
     4ae:	52 2d 47 43 43 20 25 53 00                          R-GCC %S.

000004b7 <__c.6407>:
     4b7:	31 34 30 39 32 34 00                                140924.

000004be <__c.6409>:
     4be:	31 33 30 39 30 31 00                                130901.

000004c5 <__c.6411>:
     4c5:	34 2e 38 2e 31 00                                   4.8.1.

000004cb <__c.6197>:
     4cb:	0d 0a 00                                            ...

000004ce <__c.6195>:
     4ce:	0d 0a 00                                            ...

000004d1 <StatusTable>:
     4d1:	64 31 30 30 3a 4f 4b 00 00 00 00 00 00 00 00 00     d100:OK.........
     4e1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4f1:	00 65 31 30 31 3a 4f 4b 20 57 49 54 48 20 54 45     .e101:OK WITH TE
     501:	58 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     XT..............
     511:	00 00 6e 31 31 30 3a 57 41 49 54 49 4e 47 20 46     ..n110:WAITING F
     521:	4f 52 20 58 4d 4f 44 45 4d 00 00 00 00 00 00 00     OR XMODEM.......
     531:	00 00 00 c8 32 30 30 3a 55 4e 4b 4e 4f 57 4e 20     ....200:UNKNOWN 
     541:	43 4f 4d 4d 41 4e 44 00 00 00 00 00 00 00 00 00     COMMAND.........
     551:	00 00 00 00 c9 32 30 31 3a 49 4e 56 41 4c 49 44     .....201:INVALID
     561:	20 43 4f 4d 4d 41 4e 44 20 55 53 41 47 45 00 00      COMMAND USAGE..
     571:	00 00 00 00 00 ca 32 30 32 3a 49 4e 56 41 4c 49     ......202:INVALI
     581:	44 20 50 41 52 41 4d 45 54 45 52 00 00 00 00 00     D PARAMETER.....
     591:	00 00 00 00 00 00                                   ......

00000597 <CommandTable>:
     597:	56 45 52 53 49 4f 4e 00 00 00 00 00 00 00 00 00     VERSION.........
     5a7:	00 00 00 00 14 0d 43 4f 4e 46 49 47 00 00 00 00     ......CONFIG....
     5b7:	00 00 00 00 00 00 51 0d 48 0d 32 0d 55 49 44 00     ......Q.H.2.UID.
     5c7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 81 0d     ................
     5d7:	57 0d 52 45 41 44 4f 4e 4c 59 00 00 00 00 00 00     W.READONLY......
     5e7:	00 00 00 00 e5 0d d3 0d 55 50 4c 4f 41 44 00 00     ........UPLOAD..
     5f7:	00 00 00 00 00 00 00 00 f9 0d 00 00 00 00 44 4f     ..............DO
     607:	57 4e 4c 4f 41 44 00 00 00 00 00 00 00 00 fe 0d     WNLOAD..........
     617:	00 00 00 00 52 45 53 45 54 00 00 00 00 00 00 00     ....RESET.......
     627:	00 00 00 00 03 0e 00 00 00 00 55 50 47 52 41 44     ..........UPGRAD
     637:	45 00 00 00 00 00 00 00 00 00 0e 0e 00 00 00 00     E...............
     647:	4d 45 4d 53 49 5a 45 00 00 00 00 00 00 00 00 00     MEMSIZE.........
     657:	00 00 00 00 19 0e 55 49 44 53 49 5a 45 00 00 00     ......UIDSIZE...
     667:	00 00 00 00 00 00 00 00 00 00 31 0e 42 55 54 54     ..........1.BUTT
     677:	4f 4e 00 00 00 00 00 00 00 00 00 00 47 0e 51 0e     ON..........G.Q.
     687:	4c 0e 53 45 54 54 49 4e 47 00 00 00 00 00 00 00     L.SETTING.......
     697:	00 00 00 00 5e 0e 59 0e 43 4c 45 41 52 00 00 00     ....^.Y.CLEAR...
     6a7:	00 00 00 00 00 00 00 00 66 0e 00 00 00 00 48 45     ........f.....HE
     6b7:	4c 50 00 00 00 00 00 00 00 00 00 00 00 00 6a 0e     LP............j.
     6c7:	00 00 00 00 52 53 53 49 00 00 00 00 00 00 00 00     ....RSSI........
     6d7:	00 00 00 00 00 00 00 00 b4 0e 00 00 00 00 00 00     ................
     6e7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6f7:	00                                                  .

000006f8 <__ctors_end>:
     6f8:	11 24       	eor	r1, r1
     6fa:	1f be       	out	0x3f, r1	; 63
     6fc:	cf ef       	ldi	r28, 0xFF	; 255
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df e2       	ldi	r29, 0x2F	; 47
     702:	de bf       	out	0x3e, r29	; 62

00000704 <__do_copy_data>:
     704:	10 e2       	ldi	r17, 0x20	; 32
     706:	a0 e0       	ldi	r26, 0x00	; 0
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	ea e9       	ldi	r30, 0x9A	; 154
     70c:	fe e4       	ldi	r31, 0x4E	; 78
     70e:	02 c0       	rjmp	.+4      	; 0x714 <__do_copy_data+0x10>
     710:	05 90       	lpm	r0, Z+
     712:	0d 92       	st	X+, r0
     714:	a2 39       	cpi	r26, 0x92	; 146
     716:	b1 07       	cpc	r27, r17
     718:	d9 f7       	brne	.-10     	; 0x710 <__do_copy_data+0xc>

0000071a <__do_clear_bss>:
     71a:	2a e2       	ldi	r18, 0x2A	; 42
     71c:	a2 e9       	ldi	r26, 0x92	; 146
     71e:	b0 e2       	ldi	r27, 0x20	; 32
     720:	01 c0       	rjmp	.+2      	; 0x724 <.do_clear_bss_start>

00000722 <.do_clear_bss_loop>:
     722:	1d 92       	st	X+, r1

00000724 <.do_clear_bss_start>:
     724:	ad 39       	cpi	r26, 0x9D	; 157
     726:	b2 07       	cpc	r27, r18
     728:	e1 f7       	brne	.-8      	; 0x722 <.do_clear_bss_loop>
     72a:	03 d0       	rcall	.+6      	; 0x732 <main>
     72c:	0c 94 4b 27 	jmp	0x4e96	; 0x4e96 <_exit>

00000730 <__bad_interrupt>:
     730:	79 c0       	rjmp	.+242    	; 0x824 <__vector_default>

00000732 <main>:

#include "Chameleon-Mini.h"

int main(void)
{
    SystemInit();
     732:	7e d0       	rcall	.+252    	; 0x830 <SystemInit>
    SettingsLoad();
     734:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <SettingsLoad>

extern uint8_t LEDPulseMask;

static inline
void LEDInit(void) {
    LED_PORT.DIRSET = LED_MASK;
     738:	80 e3       	ldi	r24, 0x30	; 48
     73a:	80 93 01 06 	sts	0x0601, r24
    LEDInit();
    MemoryInit();
     73e:	e4 d2       	rcall	.+1480   	; 0xd08 <MemoryInit>
    ConfigurationInit();
     740:	0d d1       	rcall	.+538    	; 0x95c <ConfigurationInit>
    TerminalInit();
     742:	0e 94 9e 0c 	call	0x193c	; 0x193c <TerminalInit>
    RandomInit();
     746:	87 d1       	rcall	.+782    	; 0xa56 <RandomInit>
    ButtonInit();
     748:	a0 d6       	rcall	.+3392   	; 0x148a <ButtonInit>
#define ANTENNA_LEVEL_DENOMINATOR (ANTENNA_LEVEL_SCALE)

static inline
void AntennaLevelInit(void)
{
	ADCA.CTRLA = ADC_ENABLE_bm;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 00 02 	sts	0x0200, r24
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc;
     750:	10 92 01 02 	sts	0x0201, r1
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc | ADC_BANDGAP_bm;
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	90 93 02 02 	sts	0x0202, r25
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	90 93 04 02 	sts	0x0204, r25
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     760:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;
     764:	88 e3       	ldi	r24, 0x38	; 56
     766:	80 93 21 02 	sts	0x0221, r24
    AntennaLevelInit();

    SystemInterruptInit();
     76a:	cd d0       	rcall	.+410    	; 0x906 <SystemInterruptInit>
}

INLINE bool SystemTick100ms(void)
{
    if (TCE0.INTFLAGS & TC0_OVFIF_bm) {
        TCE0.INTFLAGS = TC0_OVFIF_bm;
     76c:	c1 e0       	ldi	r28, 0x01	; 1

    while(1) {
        TerminalTask();
     76e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <TerminalTask>
INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
}

INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
     772:	e0 91 eb 24 	lds	r30, 0x24EB
     776:	f0 91 ec 24 	lds	r31, 0x24EC
     77a:	09 95       	icall
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
}

INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
     77c:	e0 91 f1 24 	lds	r30, 0x24F1
     780:	f0 91 f2 24 	lds	r31, 0x24F2
     784:	09 95       	icall
    return RTC.CNT;
}

INLINE bool SystemTick100ms(void)
{
    if (TCE0.INTFLAGS & TC0_OVFIF_bm) {
     786:	80 91 0c 0a 	lds	r24, 0x0A0C
     78a:	80 ff       	sbrs	r24, 0
     78c:	f0 cf       	rjmp	.-32     	; 0x76e <main+0x3c>
        TCE0.INTFLAGS = TC0_OVFIF_bm;
     78e:	c0 93 0c 0a 	sts	0x0A0C, r28
        CodecTask();
        ApplicationTask();

        if (SystemTick100ms()) {
            RandomTick();
     792:	75 d1       	rcall	.+746    	; 0xa7e <RandomTick>
            TerminalTick();
     794:	0e 94 c2 0c 	call	0x1984	; 0x1984 <TerminalTick>
            ButtonTick();
     798:	7f d6       	rcall	.+3326   	; 0x1498 <ButtonTick>
	LED_PORT.OUTSET = Mask;
}

static inline
void LEDTick(void) {
	LED_PORT.OUTCLR = LEDPulseMask;
     79a:	80 91 93 24 	lds	r24, 0x2493
     79e:	80 93 06 06 	sts	0x0606, r24
	LEDPulseMask = 0;
     7a2:	10 92 93 24 	sts	0x2493, r1
     7a6:	e3 cf       	rjmp	.-58     	; 0x76e <main+0x3c>

000007a8 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
     7a8:	29 2f       	mov	r18, r25
     7aa:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     7ac:	22 30       	cpi	r18, 0x02	; 2
     7ae:	31 05       	cpc	r19, r1
     7b0:	29 f1       	breq	.+74     	; 0x7fc <CALLBACK_USB_GetDescriptor+0x54>
     7b2:	23 30       	cpi	r18, 0x03	; 3
     7b4:	31 05       	cpc	r19, r1
     7b6:	99 f0       	breq	.+38     	; 0x7de <CALLBACK_USB_GetDescriptor+0x36>
     7b8:	21 30       	cpi	r18, 0x01	; 1
     7ba:	31 05       	cpc	r19, r1
     7bc:	41 f0       	breq	.+16     	; 0x7ce <CALLBACK_USB_GetDescriptor+0x26>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
     7c6:	fa 01       	movw	r30, r20
     7c8:	20 83       	st	Z, r18
     7ca:	31 83       	std	Z+1, r19	; 0x01
    return Size;
}
     7cc:	08 95       	ret

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     7ce:	82 e1       	ldi	r24, 0x12	; 18
     7d0:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     7d2:	26 ec       	ldi	r18, 0xC6	; 198
     7d4:	32 e0       	ldi	r19, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     7d6:	fa 01       	movw	r30, r20
     7d8:	20 83       	st	Z, r18
     7da:	31 83       	std	Z+1, r19	; 0x01
    return Size;
}
     7dc:	08 95       	ret
     7de:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	91 05       	cpc	r25, r1
     7e4:	99 f0       	breq	.+38     	; 0x80c <CALLBACK_USB_GetDescriptor+0x64>
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	91 05       	cpc	r25, r1
     7ea:	b1 f0       	breq	.+44     	; 0x818 <CALLBACK_USB_GetDescriptor+0x70>
     7ec:	89 2b       	or	r24, r25
     7ee:	39 f7       	brne	.-50     	; 0x7be <CALLBACK_USB_GetDescriptor+0x16>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     7f0:	e4 e8       	ldi	r30, 0x84	; 132
     7f2:	f2 e0       	ldi	r31, 0x02	; 2
     7f4:	84 91       	lpm	r24, Z
     7f6:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
            {
                case 0x00:
                    Address = &LanguageString;
     7f8:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
     7fa:	e5 cf       	rjmp	.-54     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x1e>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     7fc:	8e e3       	ldi	r24, 0x3E	; 62
     7fe:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     800:	28 e8       	ldi	r18, 0x88	; 136
     802:	32 e0       	ldi	r19, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     804:	fa 01       	movw	r30, r20
     806:	20 83       	st	Z, r18
     808:	31 83       	std	Z+1, r19	; 0x01
    return Size;
}
     80a:	08 95       	ret
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     80c:	ea e6       	ldi	r30, 0x6A	; 106
     80e:	f2 e0       	ldi	r31, 0x02	; 2
     810:	84 91       	lpm	r24, Z
     812:	90 e0       	ldi	r25, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
     814:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
     816:	d7 cf       	rjmp	.-82     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x1e>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     818:	ec e4       	ldi	r30, 0x4C	; 76
     81a:	f2 e0       	ldi	r31, 0x02	; 2
     81c:	84 91       	lpm	r24, Z
     81e:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     820:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     822:	d1 cf       	rjmp	.-94     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x1e>

00000824 <__vector_default>:

#include "System.h"
#include "LED.h"

ISR(BADISR_vect)
{
     824:	1f 92       	push	r1
     826:	0f 92       	push	r0
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	0f 92       	push	r0
     82c:	11 24       	eor	r1, r1
     82e:	ff cf       	rjmp	.-2      	; 0x82e <__vector_default+0xa>

00000830 <SystemInit>:
    while(1);
}

void SystemInit(void)
{
    if (RST.STATUS & RST_WDRF_bm) {
     830:	80 91 78 00 	lds	r24, 0x0078
     834:	83 ff       	sbrs	r24, 3
     836:	0a c0       	rjmp	.+20     	; 0x84c <SystemInit+0x1c>
        /* On Watchdog reset clear WDRF bit, disable watchdog
        * and jump into bootloader */
        RST.STATUS = RST_WDRF_bm;
     838:	88 e0       	ldi	r24, 0x08	; 8
     83a:	80 93 78 00 	sts	0x0078, r24

        CCP = CCP_IOREG_gc;
     83e:	88 ed       	ldi	r24, 0xD8	; 216
     840:	84 bf       	out	0x34, r24	; 52
        WDT.CTRL = WDT_CEN_bm;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 80 00 	sts	0x0080, r24

        asm volatile ("jmp %0"::"i" (BOOT_SECTION_START + 0x1FC));
     848:	fd 95 fe c0 	jmp	0x7f81fc	; 0x7f81fc <__data_load_end+0x7f32d0>
    }

    /* 32MHz system clock using internal RC and 32K DFLL*/
    OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;
     84c:	80 91 50 00 	lds	r24, 0x0050
     850:	86 60       	ori	r24, 0x06	; 6
     852:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm))
     856:	80 91 51 00 	lds	r24, 0x0051
     85a:	81 ff       	sbrs	r24, 1
     85c:	fc cf       	rjmp	.-8      	; 0x856 <SystemInit+0x26>
        ;
    while(!(OSC.STATUS & OSC_RC32KRDY_bm))
     85e:	80 91 51 00 	lds	r24, 0x0051
     862:	82 ff       	sbrs	r24, 2
     864:	fc cf       	rjmp	.-8      	; 0x85e <SystemInit+0x2e>
        ;

    OSC.DFLLCTRL = OSC_RC32MCREF_RC32K_gc;
     866:	10 92 56 00 	sts	0x0056, r1
    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	20 93 60 00 	sts	0x0060, r18

    CCP = CCP_IOREG_gc;
     870:	88 ed       	ldi	r24, 0xD8	; 216
     872:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     874:	20 93 40 00 	sts	0x0040, r18

    /* Use TCE0 as system tick */
    TCE0.PER = F_CPU / 256 / SYSTEM_TICK_FREQ - 1;
     878:	83 ed       	ldi	r24, 0xD3	; 211
     87a:	90 e3       	ldi	r25, 0x30	; 48
     87c:	80 93 26 0a 	sts	0x0A26, r24
     880:	90 93 27 0a 	sts	0x0A27, r25
    TCE0.CTRLA = TC_CLKSEL_DIV256_gc;
     884:	86 e0       	ldi	r24, 0x06	; 6
     886:	80 93 00 0a 	sts	0x0A00, r24

    /* Enable RTC with roughly 1kHz clock */
    CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm;
     88a:	20 93 43 00 	sts	0x0043, r18
    RTC.CTRL = RTC_PRESCALER_DIV1_gc;
     88e:	20 93 00 04 	sts	0x0400, r18

    /* Enable EEPROM data memory mapping */
    NVM.CTRLB |= NVM_EEMAPEN_bm;
     892:	80 91 cc 01 	lds	r24, 0x01CC
     896:	88 60       	ori	r24, 0x08	; 8
     898:	80 93 cc 01 	sts	0x01CC, r24
     89c:	08 95       	ret

0000089e <SystemReset>:
}

void SystemReset(void)
{
    CCP = CCP_IOREG_gc;
     89e:	88 ed       	ldi	r24, 0xD8	; 216
     8a0:	84 bf       	out	0x34, r24	; 52
    RST.CTRL = RST_SWRST_bm;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	e8 e7       	ldi	r30, 0x78	; 120
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	81 83       	std	Z+1, r24	; 0x01
     8aa:	08 95       	ret

000008ac <SystemEnterBootloader>:
}

void SystemEnterBootloader(void)
{
    /* Use Watchdog timer to reset into bootloader. */
    CCP = CCP_IOREG_gc;
     8ac:	88 ed       	ldi	r24, 0xD8	; 216
     8ae:	84 bf       	out	0x34, r24	; 52
    WDT.CTRL = WDT_PER_512CLK_gc | WDT_ENABLE_bm | WDT_CEN_bm;
     8b0:	8b e1       	ldi	r24, 0x1B	; 27
     8b2:	80 93 80 00 	sts	0x0080, r24
     8b6:	08 95       	ret

000008b8 <SystemStartUSBClock>:


void SystemStartUSBClock(void)
{
    /* 48MHz USB Clock using 12MHz XTAL */
    OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     8b8:	8b ec       	ldi	r24, 0xCB	; 203
     8ba:	80 93 52 00 	sts	0x0052, r24
    OSC.CTRL |= OSC_XOSCEN_bm;
     8be:	80 91 50 00 	lds	r24, 0x0050
     8c2:	88 60       	ori	r24, 0x08	; 8
     8c4:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_XOSCRDY_bm))
     8c8:	80 91 51 00 	lds	r24, 0x0051
     8cc:	83 ff       	sbrs	r24, 3
     8ce:	fc cf       	rjmp	.-8      	; 0x8c8 <SystemStartUSBClock+0x10>
        ;

    OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (4 << OSC_PLLFAC_gp);
     8d0:	84 ec       	ldi	r24, 0xC4	; 196
     8d2:	80 93 55 00 	sts	0x0055, r24

    OSC.CTRL |= OSC_PLLEN_bm;
     8d6:	80 91 50 00 	lds	r24, 0x0050
     8da:	80 61       	ori	r24, 0x10	; 16
     8dc:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_PLLRDY_bm))
     8e0:	80 91 51 00 	lds	r24, 0x0051
     8e4:	84 ff       	sbrs	r24, 4
     8e6:	fc cf       	rjmp	.-8      	; 0x8e0 <SystemStartUSBClock+0x28>
        ;
}
     8e8:	08 95       	ret

000008ea <SystemStopUSBClock>:

void SystemStopUSBClock(void)
{
    /* Disable USB Clock to minimize power consumption */
    CLK.USBCTRL &= ~CLK_USBSEN_bm;
     8ea:	e0 e4       	ldi	r30, 0x40	; 64
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	84 81       	ldd	r24, Z+4	; 0x04
     8f0:	8e 7f       	andi	r24, 0xFE	; 254
     8f2:	84 83       	std	Z+4, r24	; 0x04
    OSC.CTRL &= ~OSC_PLLEN_bm;
     8f4:	e0 e5       	ldi	r30, 0x50	; 80
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	8f 7e       	andi	r24, 0xEF	; 239
     8fc:	80 83       	st	Z, r24
    OSC.CTRL &= ~OSC_XOSCEN_bm;
     8fe:	80 81       	ld	r24, Z
     900:	87 7f       	andi	r24, 0xF7	; 247
     902:	80 83       	st	Z, r24
     904:	08 95       	ret

00000906 <SystemInterruptInit>:
}

void SystemInterruptInit(void)
{
    /* Enable all interrupt levels */
    PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	e0 ea       	ldi	r30, 0xA0	; 160
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	82 83       	std	Z+2, r24	; 0x02
    sei();
     90e:	78 94       	sei
     910:	08 95       	ret

00000912 <CodecInitDummy>:

/* Include all Codecs and Applications */
#include "Codec/Codec.h"
#include "Application/Application.h"

static void CodecInitDummy(void) { }
     912:	08 95       	ret

00000914 <CodecTaskDummy>:
static void CodecTaskDummy(void) { }
     914:	08 95       	ret

00000916 <ApplicationInitDummy>:
static void ApplicationInitDummy(void) {}
     916:	08 95       	ret

00000918 <ApplicationResetDummy>:
static void ApplicationResetDummy(void) {}
     918:	08 95       	ret

0000091a <ApplicationTaskDummy>:
static void ApplicationTaskDummy(void) {}
     91a:	08 95       	ret

0000091c <ApplicationProcessDummy>:
static uint16_t ApplicationProcessDummy(uint8_t* ByteBuffer, uint16_t ByteCount) { return 0; }
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	08 95       	ret

00000922 <ApplicationGetUidDummy>:
static void ApplicationGetUidDummy(ConfigurationUidType Uid) { }
     922:	08 95       	ret

00000924 <ApplicationSetUidDummy>:
static void ApplicationSetUidDummy(ConfigurationUidType Uid) { }
     924:	08 95       	ret

00000926 <ConfigurationSetById>:
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
}

void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;
     926:	e0 91 fe 24 	lds	r30, 0x24FE
     92a:	f0 91 ff 24 	lds	r31, 0x24FF
     92e:	81 83       	std	Z+1, r24	; 0x01

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
            &ConfigurationTable[Configuration], sizeof(ConfigurationType));
     930:	95 e2       	ldi	r25, 0x25	; 37
     932:	89 9f       	mul	r24, r25
     934:	b0 01       	movw	r22, r0
     936:	11 24       	eor	r1, r1
     938:	68 52       	subi	r22, 0x28	; 40
     93a:	7d 4f       	sbci	r23, 0xFD	; 253
void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
     93c:	45 e2       	ldi	r20, 0x25	; 37
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	88 ed       	ldi	r24, 0xD8	; 216
     942:	94 e2       	ldi	r25, 0x24	; 36
     944:	0e 94 e5 23 	call	0x47ca	; 0x47ca <memcpy_P>
/* Applications */
#include "MifareClassic.h"

/* Function wrappers */
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
     948:	e0 91 ed 24 	lds	r30, 0x24ED
     94c:	f0 91 ee 24 	lds	r31, 0x24EE
     950:	09 95       	icall
#define CODEC_CARRIER_FREQ          13560000

extern uint8_t CodecBuffer[CODEC_BUFFER_SIZE];

INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
     952:	e0 91 e9 24 	lds	r30, 0x24E9
     956:	f0 91 ea 24 	lds	r31, 0x24EA
     95a:	09 94       	ijmp

0000095c <ConfigurationInit>:

ConfigurationType ActiveConfiguration;

void ConfigurationInit(void)
{
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
     95c:	e0 91 fe 24 	lds	r30, 0x24FE
     960:	f0 91 ff 24 	lds	r31, 0x24FF
     964:	81 81       	ldd	r24, Z+1	; 0x01
     966:	df cf       	rjmp	.-66     	; 0x926 <ConfigurationSetById>

00000968 <ConfigurationSetByName>:
    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
{
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	49 ed       	ldi	r20, 0xD9	; 217
     972:	52 e0       	ldi	r21, 0x02	; 2
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
     974:	10 e0       	ldi	r17, 0x00	; 0
     976:	bc 01       	movw	r22, r24
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
     97c:	9a 01       	movw	r18, r20
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);
     97e:	fa 01       	movw	r30, r20
     980:	c4 91       	lpm	r28, Z

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     982:	c1 11       	cpse	r28, r1
     984:	0f c0       	rjmp	.+30     	; 0x9a4 <ConfigurationSetByName+0x3c>
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
        const char* pRequestedConfigName = ConfigurationName;
     986:	ec 01       	movw	r28, r24
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     988:	28 81       	ld	r18, Y
     98a:	22 23       	and	r18, r18
     98c:	11 f1       	breq	.+68     	; 0x9d2 <ConfigurationSetByName+0x6a>
bool ConfigurationSetByName(const char* ConfigurationName)
{
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
     98e:	1f 5f       	subi	r17, 0xFF	; 255
     990:	4b 5d       	subi	r20, 0xDB	; 219
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	13 30       	cpi	r17, 0x03	; 3
     996:	91 f7       	brne	.-28     	; 0x97c <ConfigurationSetByName+0x14>
            ConfigurationSetById(i);
            return true;
        }
    }

    return false;
     998:	80 e0       	ldi	r24, 0x00	; 0
}
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	08 95       	ret
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     9a4:	dc 01       	movw	r26, r24
     9a6:	fc 91       	ld	r31, X
     9a8:	ff 23       	and	r31, r31
     9aa:	89 f3       	breq	.-30     	; 0x98e <ConfigurationSetByName+0x26>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     9ac:	cf 13       	cpse	r28, r31
     9ae:	ef cf       	rjmp	.-34     	; 0x98e <ConfigurationSetByName+0x26>
     9b0:	db 01       	movw	r26, r22
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <ConfigurationSetByName+0x56>
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     9b4:	fd 91       	ld	r31, X+
     9b6:	ff 23       	and	r31, r31
     9b8:	51 f3       	breq	.-44     	; 0x98e <ConfigurationSetByName+0x26>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     9ba:	f0 13       	cpse	r31, r16
     9bc:	e8 cf       	rjmp	.-48     	; 0x98e <ConfigurationSetByName+0x26>
                StringMismatch = true;
                break;
            }

            /* Proceed to next character */
            pTableConfigName++;
     9be:	2f 5f       	subi	r18, 0xFF	; 255
     9c0:	3f 4f       	sbci	r19, 0xFF	; 255
            pRequestedConfigName++;
     9c2:	ed 01       	movw	r28, r26

            c = pgm_read_byte(pTableConfigName);
     9c4:	f9 01       	movw	r30, r18
     9c6:	04 91       	lpm	r16, Z
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     9c8:	01 11       	cpse	r16, r1
     9ca:	f4 cf       	rjmp	.-24     	; 0x9b4 <ConfigurationSetByName+0x4c>
     9cc:	28 81       	ld	r18, Y
     9ce:	21 11       	cpse	r18, r1
     9d0:	de cf       	rjmp	.-68     	; 0x98e <ConfigurationSetByName+0x26>
            c = pgm_read_byte(pTableConfigName);
        }

        if (!StringMismatch) {
            /* Configuration found */
            ConfigurationSetById(i);
     9d2:	81 2f       	mov	r24, r17
     9d4:	a8 df       	rcall	.-176    	; 0x926 <ConfigurationSetById>
            return true;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return false;
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	08 95       	ret

000009e2 <ConfigurationGetList>:

void ConfigurationGetList(char* ConfigListOut, uint16_t ByteCount)
{
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
    uint8_t i;

    /* Account for '\0' */
    ByteCount--;
     9ea:	61 50       	subi	r22, 0x01	; 1
     9ec:	71 09       	sbc	r23, r1
     9ee:	49 ed       	ldi	r20, 0xD9	; 217
     9f0:	52 e0       	ldi	r21, 0x02	; 2
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     9f2:	1c e2       	ldi	r17, 0x2C	; 44

    /* Account for '\0' */
    ByteCount--;

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
     9f4:	9a 01       	movw	r18, r20
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     9f6:	fa 01       	movw	r30, r20
     9f8:	04 91       	lpm	r16, Z
     9fa:	00 23       	and	r16, r16
     9fc:	51 f1       	breq	.+84     	; 0xa52 <ConfigurationGetList+0x70>
     9fe:	61 31       	cpi	r22, 0x11	; 17
     a00:	71 05       	cpc	r23, r1
     a02:	20 f4       	brcc	.+8      	; 0xa0c <ConfigurationGetList+0x2a>
     a04:	26 c0       	rjmp	.+76     	; 0xa52 <ConfigurationGetList+0x70>
     a06:	60 31       	cpi	r22, 0x10	; 16
     a08:	71 05       	cpc	r23, r1
     a0a:	61 f0       	breq	.+24     	; 0xa24 <ConfigurationGetList+0x42>
     a0c:	dc 01       	movw	r26, r24
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	ec 01       	movw	r28, r24
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ConfigListOut++ = c;
     a12:	0c 93       	st	X, r16
            ConfigName++;
     a14:	2f 5f       	subi	r18, 0xFF	; 255
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
            ByteCount--;
     a18:	61 50       	subi	r22, 0x01	; 1
     a1a:	71 09       	sbc	r23, r1

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     a1c:	f9 01       	movw	r30, r18
     a1e:	04 91       	lpm	r16, Z
     a20:	01 11       	cpse	r16, r1
     a22:	f1 cf       	rjmp	.-30     	; 0xa06 <ConfigurationGetList+0x24>
            *ConfigListOut++ = c;
            ConfigName++;
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
     a24:	f3 e0       	ldi	r31, 0x03	; 3
     a26:	43 32       	cpi	r20, 0x23	; 35
     a28:	5f 07       	cpc	r21, r31
     a2a:	31 f4       	brne	.+12     	; 0xa38 <ConfigurationGetList+0x56>
            *ConfigListOut++ = ',';
            ByteCount--;
        }
    }

    *ConfigListOut = '\0';
     a2c:	18 82       	st	Y, r1
}
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	08 95       	ret
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     a38:	ce 01       	movw	r24, r28
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	18 83       	st	Y, r17
            ByteCount--;
     a3e:	61 50       	subi	r22, 0x01	; 1
     a40:	71 09       	sbc	r23, r1
     a42:	4b 5d       	subi	r20, 0xDB	; 219
     a44:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;

    /* Account for '\0' */
    ByteCount--;

    for (i=0; i<CONFIG_COUNT; i++) {
     a46:	23 e0       	ldi	r18, 0x03	; 3
     a48:	48 34       	cpi	r20, 0x48	; 72
     a4a:	52 07       	cpc	r21, r18
     a4c:	99 f6       	brne	.-90     	; 0x9f4 <ConfigurationGetList+0x12>
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     a4e:	ec 01       	movw	r28, r24
     a50:	ed cf       	rjmp	.-38     	; 0xa2c <ConfigurationGetList+0x4a>

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     a52:	ec 01       	movw	r28, r24
     a54:	e7 cf       	rjmp	.-50     	; 0xa24 <ConfigurationGetList+0x42>

00000a56 <RandomInit>:
#include "Random.h"

#include <stdlib.h>

void RandomInit(void)
{
     a56:	08 95       	ret

00000a58 <RandomGetByte>:

}

uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
     a58:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <rand>
}
     a5c:	08 95       	ret

00000a5e <RandomGetBuffer>:

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     a64:	66 23       	and	r22, r22
     a66:	39 f0       	breq	.+14     	; 0xa76 <RandomGetBuffer+0x18>
     a68:	ec 01       	movw	r28, r24
     a6a:	16 2f       	mov	r17, r22

}

uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
     a6c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <rand>
     a70:	89 93       	st	Y+, r24
     a72:	11 50       	subi	r17, 0x01	; 1

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     a74:	d9 f7       	brne	.-10     	; 0xa6c <RandomGetBuffer+0xe>
        *BufferPtr++ = RandomGetByte();
    }
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	08 95       	ret

00000a7e <RandomTick>:

void RandomTick(void)
{
    rand();
     a7e:	0e 94 d7 23 	call	0x47ae	; 0x47ae <rand>
    rand();
     a82:	0e 94 d7 23 	call	0x47ae	; 0x47ae <rand>
    rand();
     a86:	0e 94 d7 23 	call	0x47ae	; 0x47ae <rand>
    rand();
     a8a:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <rand>

00000a8e <BufferToHexString>:
 */

#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	dc 01       	movw	r26, r24
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;
     a94:	61 50       	subi	r22, 0x01	; 1
     a96:	71 09       	sbc	r23, r1

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a98:	21 15       	cp	r18, r1
     a9a:	31 05       	cpc	r19, r1
     a9c:	a9 f1       	breq	.+106    	; 0xb08 <BufferToHexString+0x7a>
     a9e:	62 30       	cpi	r22, 0x02	; 2
     aa0:	71 05       	cpc	r23, r1
     aa2:	90 f1       	brcs	.+100    	; 0xb08 <BufferToHexString+0x7a>
     aa4:	fa 01       	movw	r30, r20
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	31 09       	sbc	r19, r1
     aaa:	24 0f       	add	r18, r20
     aac:	35 1f       	adc	r19, r21
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	17 c0       	rjmp	.+46     	; 0xae2 <BufferToHexString+0x54>
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
        uint8_t Byte = *ByteBuffer;

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     ab4:	d0 5d       	subi	r29, 0xD0	; 208
     ab6:	dc 93       	st	X, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     ab8:	cf 70       	andi	r28, 0x0F	; 15
     aba:	4c 2f       	mov	r20, r28
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	4a 30       	cpi	r20, 0x0A	; 10
     ac0:	51 05       	cpc	r21, r1
     ac2:	04 f5       	brge	.+64     	; 0xb04 <BufferToHexString+0x76>
     ac4:	c0 5d       	subi	r28, 0xD0	; 208
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	cc 93       	st	X, r28
     aca:	11 97       	sbiw	r26, 0x01	; 1

        HexOut += 2;
     acc:	12 96       	adiw	r26, 0x02	; 2
        MaxChars -= 2;
     ace:	62 50       	subi	r22, 0x02	; 2
     ad0:	71 09       	sbc	r23, r1
        CharCount += 2;
     ad2:	02 96       	adiw	r24, 0x02	; 2
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     ad4:	e2 17       	cp	r30, r18
     ad6:	f3 07       	cpc	r31, r19
     ad8:	c9 f0       	breq	.+50     	; 0xb0c <BufferToHexString+0x7e>
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	62 30       	cpi	r22, 0x02	; 2
     ade:	71 05       	cpc	r23, r1
     ae0:	a8 f0       	brcs	.+42     	; 0xb0c <BufferToHexString+0x7e>
        uint8_t Byte = *ByteBuffer;
     ae2:	c0 81       	ld	r28, Z

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     ae4:	dc 2f       	mov	r29, r28
     ae6:	d2 95       	swap	r29
     ae8:	df 70       	andi	r29, 0x0F	; 15
     aea:	4d 2f       	mov	r20, r29
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	4a 30       	cpi	r20, 0x0A	; 10
     af0:	51 05       	cpc	r21, r1
     af2:	04 f3       	brlt	.-64     	; 0xab4 <BufferToHexString+0x26>
     af4:	d9 5c       	subi	r29, 0xC9	; 201
     af6:	dc 93       	st	X, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     af8:	cf 70       	andi	r28, 0x0F	; 15
     afa:	4c 2f       	mov	r20, r28
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	4a 30       	cpi	r20, 0x0A	; 10
     b00:	51 05       	cpc	r21, r1
     b02:	04 f3       	brlt	.-64     	; 0xac4 <BufferToHexString+0x36>
     b04:	c9 5c       	subi	r28, 0xC9	; 201
     b06:	df cf       	rjmp	.-66     	; 0xac6 <BufferToHexString+0x38>
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
        CharCount += 2;
        ByteBuffer++;
        ByteCount -= 1;
    }

    *HexOut = '\0';
     b0c:	1c 92       	st	X, r1

    return CharCount;
}
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <HexStringToBuffer>:

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
     b14:	dc 01       	movw	r26, r24
     b16:	fa 01       	movw	r30, r20
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     b18:	80 81       	ld	r24, Z
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <HexStringToBuffer+0xc>
     b1e:	41 c0       	rjmp	.+130    	; 0xba2 <HexStringToBuffer+0x8e>
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	99 23       	and	r25, r25
     b24:	d9 f1       	breq	.+118    	; 0xb9c <HexStringToBuffer+0x88>
}

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     b2a:	61 15       	cp	r22, r1
     b2c:	71 05       	cpc	r23, r1
     b2e:	a1 f4       	brne	.+40     	; 0xb58 <HexStringToBuffer+0x44>
     b30:	33 c0       	rjmp	.+102    	; 0xb98 <HexStringToBuffer+0x84>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     b32:	82 95       	swap	r24
     b34:	80 7f       	andi	r24, 0xF0	; 240
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     b36:	91 34       	cpi	r25, 0x41	; 65
     b38:	30 f5       	brcc	.+76     	; 0xb86 <HexStringToBuffer+0x72>
     b3a:	94 2f       	mov	r25, r20
     b3c:	89 2b       	or	r24, r25

            *ByteBuffer = Byte;
     b3e:	8d 93       	st	X+, r24

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     b40:	2f 5f       	subi	r18, 0xFF	; 255
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
            HexIn += 2;
     b44:	32 96       	adiw	r30, 0x02	; 2
uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     b46:	80 81       	ld	r24, Z
     b48:	88 23       	and	r24, r24
     b4a:	31 f1       	breq	.+76     	; 0xb98 <HexStringToBuffer+0x84>
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	99 23       	and	r25, r25
     b50:	29 f1       	breq	.+74     	; 0xb9c <HexStringToBuffer+0x88>
     b52:	62 17       	cp	r22, r18
     b54:	73 07       	cpc	r23, r19
     b56:	01 f1       	breq	.+64     	; 0xb98 <HexStringToBuffer+0x84>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
     b58:	40 ed       	ldi	r20, 0xD0	; 208
     b5a:	48 0f       	add	r20, r24
     b5c:	4a 30       	cpi	r20, 0x0A	; 10
     b5e:	20 f0       	brcs	.+8      	; 0xb68 <HexStringToBuffer+0x54>
     b60:	4f eb       	ldi	r20, 0xBF	; 191
     b62:	48 0f       	add	r20, r24
     b64:	46 30       	cpi	r20, 0x06	; 6
     b66:	d0 f4       	brcc	.+52     	; 0xb9c <HexStringToBuffer+0x88>
     b68:	40 ed       	ldi	r20, 0xD0	; 208
     b6a:	49 0f       	add	r20, r25
     b6c:	4a 30       	cpi	r20, 0x0A	; 10
     b6e:	20 f0       	brcs	.+8      	; 0xb78 <HexStringToBuffer+0x64>
     b70:	5f eb       	ldi	r21, 0xBF	; 191
     b72:	59 0f       	add	r21, r25
     b74:	56 30       	cpi	r21, 0x06	; 6
     b76:	90 f4       	brcc	.+36     	; 0xb9c <HexStringToBuffer+0x88>
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     b78:	81 34       	cpi	r24, 0x41	; 65
     b7a:	d8 f2       	brcs	.-74     	; 0xb32 <HexStringToBuffer+0x1e>
     b7c:	82 95       	swap	r24
     b7e:	80 7f       	andi	r24, 0xF0	; 240
     b80:	80 57       	subi	r24, 0x70	; 112
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     b82:	91 34       	cpi	r25, 0x41	; 65
     b84:	d0 f2       	brcs	.-76     	; 0xb3a <HexStringToBuffer+0x26>
     b86:	97 53       	subi	r25, 0x37	; 55
     b88:	89 2b       	or	r24, r25

            *ByteBuffer = Byte;
     b8a:	8d 93       	st	X+, r24

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
            HexIn += 2;
     b90:	32 96       	adiw	r30, 0x02	; 2
uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     b92:	80 81       	ld	r24, Z
     b94:	81 11       	cpse	r24, r1
     b96:	da cf       	rjmp	.-76     	; 0xb4c <HexStringToBuffer+0x38>
    if ( (HexIn[0] != '\0') && (HexIn[1] == '\0') ) {
        /* Odd number of characters */
        return 0;
    }

    return ByteCount;
     b98:	c9 01       	movw	r24, r18
     b9a:	08 95       	ret
        }
    }

    if ( (HexIn[0] != '\0') && (HexIn[1] == '\0') ) {
        /* Odd number of characters */
        return 0;
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
    }

    return ByteCount;
}
     ba0:	08 95       	ret
}

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	f8 cf       	rjmp	.-16     	; 0xb98 <HexStringToBuffer+0x84>

00000ba8 <MemoryReadBlock>:
	MemoryRecall();
}

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint8_t* SrcPtr = &Memory[Address];
     ba8:	fb 01       	movw	r30, r22
     baa:	ee 56       	subi	r30, 0x6E	; 110
     bac:	ff 4d       	sbci	r31, 0xDF	; 223
	uint8_t* DstPtr = (uint8_t*) Buffer;

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	34 e0       	ldi	r19, 0x04	; 4
     bb2:	26 1b       	sub	r18, r22
     bb4:	37 0b       	sbc	r19, r23
     bb6:	42 17       	cp	r20, r18
     bb8:	53 07       	cpc	r21, r19
     bba:	08 f4       	brcc	.+2      	; 0xbbe <MemoryReadBlock+0x16>
     bbc:	9a 01       	movw	r18, r20

	while(ByteCount--) {
     bbe:	21 15       	cp	r18, r1
     bc0:	31 05       	cpc	r19, r1
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <MemoryReadBlock+0x2e>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cf 01       	movw	r24, r30
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
		*DstPtr++ = *SrcPtr++;
     bcc:	21 91       	ld	r18, Z+
     bce:	2d 93       	st	X+, r18
	uint8_t* DstPtr = (uint8_t*) Buffer;

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
     bd0:	e8 17       	cp	r30, r24
     bd2:	f9 07       	cpc	r31, r25
     bd4:	d9 f7       	brne	.-10     	; 0xbcc <MemoryReadBlock+0x24>
     bd6:	08 95       	ret

00000bd8 <MemoryWriteBlock>:
}

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint8_t* SrcPtr = (uint8_t*) Buffer;
	uint8_t* DstPtr = &Memory[Address];
     bd8:	db 01       	movw	r26, r22
     bda:	ae 56       	subi	r26, 0x6E	; 110
     bdc:	bf 4d       	sbci	r27, 0xDF	; 223

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	34 e0       	ldi	r19, 0x04	; 4
     be2:	26 1b       	sub	r18, r22
     be4:	37 0b       	sbc	r19, r23
     be6:	42 17       	cp	r20, r18
     be8:	53 07       	cpc	r21, r19
     bea:	08 f4       	brcc	.+2      	; 0xbee <MemoryWriteBlock+0x16>
     bec:	9a 01       	movw	r18, r20

	while(ByteCount--) {
     bee:	21 15       	cp	r18, r1
     bf0:	31 05       	cpc	r19, r1
     bf2:	41 f0       	breq	.+16     	; 0xc04 <MemoryWriteBlock+0x2c>
     bf4:	fc 01       	movw	r30, r24
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
		*DstPtr++ = *SrcPtr++;
     bfa:	21 91       	ld	r18, Z+
     bfc:	2d 93       	st	X+, r18
	uint8_t* DstPtr = &Memory[Address];

	/* Prevent Buf Ovfs */
	ByteCount = MIN(ByteCount, MEMORY_SIZE_PER_SETTING - Address);

	while(ByteCount--) {
     bfe:	e8 17       	cp	r30, r24
     c00:	f9 07       	cpc	r31, r25
     c02:	d9 f7       	brne	.-10     	; 0xbfa <MemoryWriteBlock+0x22>
     c04:	08 95       	ret

00000c06 <MemoryClear>:
		*DstPtr++ = *SrcPtr++;
	}
}

void MemoryClear(void)
{
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	94 e0       	ldi	r25, 0x04	; 4
     c0a:	e2 e9       	ldi	r30, 0x92	; 146
     c0c:	f0 e2       	ldi	r31, 0x20	; 32
     c0e:	df 01       	movw	r26, r30
     c10:	9c 01       	movw	r18, r24
     c12:	1d 92       	st	X+, r1
     c14:	21 50       	subi	r18, 0x01	; 1
     c16:	30 40       	sbci	r19, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <MemoryClear+0xc>
     c1a:	08 95       	ret

00000c1c <MemoryRecall>:
}

void MemoryRecall(void)
{
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
     c1c:	80 91 fd 24 	lds	r24, 0x24FD
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	a0 e0       	ldi	r26, 0x00	; 0
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	4a e0       	ldi	r20, 0x0A	; 10
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	aa 1f       	adc	r26, r26
     c2e:	bb 1f       	adc	r27, r27
     c30:	4a 95       	dec	r20
     c32:	d1 f7       	brne	.-12     	; 0xc28 <MemoryRecall+0xc>

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c34:	40 e1       	ldi	r20, 0x10	; 16

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c36:	57 ed       	ldi	r21, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c38:	30 e4       	ldi	r19, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c3a:	40 93 66 06 	sts	0x0666, r20

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c3e:	50 93 a0 09 	sts	0x09A0, r21

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c42:	20 91 a1 09 	lds	r18, 0x09A1
     c46:	26 ff       	sbrs	r18, 6
     c48:	fc cf       	rjmp	.-8      	; 0xc42 <MemoryRecall+0x26>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c4a:	30 93 a1 09 	sts	0x09A1, r19

	return MEMORY_FLASH_USART.DATA;
     c4e:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c52:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c56:	20 91 a1 09 	lds	r18, 0x09A1
     c5a:	26 ff       	sbrs	r18, 6
     c5c:	fc cf       	rjmp	.-8      	; 0xc56 <MemoryRecall+0x3a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c5e:	30 93 a1 09 	sts	0x09A1, r19

	return MEMORY_FLASH_USART.DATA;
     c62:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     c66:	40 93 65 06 	sts	0x0665, r20
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashRead(void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     c6a:	27 ff       	sbrs	r18, 7
     c6c:	e6 cf       	rjmp	.-52     	; 0xc3a <MemoryRecall+0x1e>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c6e:	20 e1       	ldi	r18, 0x10	; 16
     c70:	20 93 66 06 	sts	0x0666, r18

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c74:	23 e0       	ldi	r18, 0x03	; 3
     c76:	20 93 a0 09 	sts	0x09A0, r18

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c7a:	20 91 a1 09 	lds	r18, 0x09A1
     c7e:	26 ff       	sbrs	r18, 6
     c80:	fc cf       	rjmp	.-8      	; 0xc7a <MemoryRecall+0x5e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c82:	20 e4       	ldi	r18, 0x40	; 64
     c84:	20 93 a1 09 	sts	0x09A1, r18

	return MEMORY_FLASH_USART.DATA;
     c88:	20 91 a0 09 	lds	r18, 0x09A0
{
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
     c8c:	ad 01       	movw	r20, r26
     c8e:	66 27       	eor	r22, r22
     c90:	77 27       	eor	r23, r23

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c92:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c96:	20 91 a1 09 	lds	r18, 0x09A1
     c9a:	26 ff       	sbrs	r18, 6
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <MemoryRecall+0x7a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c9e:	20 e4       	ldi	r18, 0x40	; 64
     ca0:	20 93 a1 09 	sts	0x09A1, r18

	return MEMORY_FLASH_USART.DATA;
     ca4:	20 91 a0 09 	lds	r18, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
     ca8:	89 2f       	mov	r24, r25
     caa:	9a 2f       	mov	r25, r26
     cac:	ab 2f       	mov	r26, r27
     cae:	bb 27       	eor	r27, r27

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     cb0:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cb4:	80 91 a1 09 	lds	r24, 0x09A1
     cb8:	86 ff       	sbrs	r24, 6
     cba:	fc cf       	rjmp	.-8      	; 0xcb4 <MemoryRecall+0x98>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cbc:	80 e4       	ldi	r24, 0x40	; 64
     cbe:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     cc2:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     cc6:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cca:	80 91 a1 09 	lds	r24, 0x09A1
     cce:	86 ff       	sbrs	r24, 6
     cd0:	fc cf       	rjmp	.-8      	; 0xcca <MemoryRecall+0xae>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cd2:	80 e4       	ldi	r24, 0x40	; 64
     cd4:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     cd8:	80 91 a0 09 	lds	r24, 0x09A0
     cdc:	e2 e9       	ldi	r30, 0x92	; 146
     cde:	f0 e2       	ldi	r31, 0x20	; 32
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = 0;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ce0:	90 e4       	ldi	r25, 0x40	; 64
INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = 0;
     ce2:	10 92 a0 09 	sts	0x09A0, r1
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ce6:	80 91 a1 09 	lds	r24, 0x09A1
     cea:	86 ff       	sbrs	r24, 6
     cec:	fc cf       	rjmp	.-8      	; 0xce6 <MemoryRecall+0xca>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cee:	90 93 a1 09 	sts	0x09A1, r25
		*ByteBuffer++ = MEMORY_FLASH_USART.DATA;
     cf2:	80 91 a0 09 	lds	r24, 0x09A0
     cf6:	81 93       	st	Z+, r24

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     cf8:	84 e2       	ldi	r24, 0x24	; 36
     cfa:	e2 39       	cpi	r30, 0x92	; 146
     cfc:	f8 07       	cpc	r31, r24
     cfe:	89 f7       	brne	.-30     	; 0xce2 <MemoryRecall+0xc6>
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
	SPITransferByte( (Address >> 0) & 0xFF );
	SPIReadBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     d00:	80 e1       	ldi	r24, 0x10	; 16
     d02:	80 93 65 06 	sts	0x0665, r24
     d06:	08 95       	ret

00000d08 <MemoryInit>:
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

void MemoryInit(void)
{
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <MemoryInit+0x6>
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <MemoryInit+0x8>
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	/* Configure MEMORY_FLASH_USART for SPI master mode 0 with maximum clock frequency */
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     d14:	80 e1       	ldi	r24, 0x10	; 16
     d16:	80 93 65 06 	sts	0x0665, r24
	
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_SCK;
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	90 93 66 06 	sts	0x0666, r25
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_MOSI;
     d20:	98 e0       	ldi	r25, 0x08	; 8
     d22:	90 93 65 06 	sts	0x0665, r25
	
	MEMORY_FLASH_PORT.DIRSET = MEMORY_FLASH_SCK | MEMORY_FLASH_MOSI | MEMORY_FLASH_CS;
     d26:	9a e1       	ldi	r25, 0x1A	; 26
     d28:	90 93 61 06 	sts	0x0661, r25

    MEMORY_FLASH_USART.BAUDCTRLA = 0;
     d2c:	10 92 a6 09 	sts	0x09A6, r1
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
     d30:	10 92 a7 09 	sts	0x09A7, r1
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc;
     d34:	90 ec       	ldi	r25, 0xC0	; 192
     d36:	90 93 a5 09 	sts	0x09A5, r25
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     d3a:	98 e1       	ldi	r25, 0x18	; 24
     d3c:	90 93 a4 09 	sts	0x09A4, r25

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     d40:	80 93 66 06 	sts	0x0666, r24

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d44:	87 ed       	ldi	r24, 0xD7	; 215
     d46:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d4a:	80 91 a1 09 	lds	r24, 0x09A1
     d4e:	86 ff       	sbrs	r24, 6
     d50:	fc cf       	rjmp	.-8      	; 0xd4a <MemoryInit+0x42>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d52:	80 e4       	ldi	r24, 0x40	; 64
     d54:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     d58:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d5c:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d60:	80 91 a1 09 	lds	r24, 0x09A1
     d64:	86 ff       	sbrs	r24, 6
     d66:	fc cf       	rjmp	.-8      	; 0xd60 <MemoryInit+0x58>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d68:	80 e4       	ldi	r24, 0x40	; 64
     d6a:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     d6e:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     d72:	90 e1       	ldi	r25, 0x10	; 16
     d74:	90 93 65 06 	sts	0x0665, r25
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc;
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;


	if ( !(FlashReadStatusRegister() & FLASH_STATUS_REG_PAGESIZE_BIT) ) {
     d78:	80 fd       	sbrc	r24, 0
     d7a:	3e c0       	rjmp	.+124    	; 0xdf8 <MemoryInit+0xf0>
	return !(FlashReadStatusRegister() & FLASH_STATUS_REG_READY_BIT);
}

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};
     d7c:	8d e3       	ldi	r24, 0x3D	; 61
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	8a e2       	ldi	r24, 0x2A	; 42
     d82:	8a 83       	std	Y+2, r24	; 0x02
     d84:	80 e8       	ldi	r24, 0x80	; 128
     d86:	8b 83       	std	Y+3, r24	; 0x03
     d88:	86 ea       	ldi	r24, 0xA6	; 166
     d8a:	8c 83       	std	Y+4, r24	; 0x04

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     d8c:	20 e1       	ldi	r18, 0x10	; 16

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d8e:	37 ed       	ldi	r19, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d90:	90 e4       	ldi	r25, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     d92:	20 93 66 06 	sts	0x0666, r18

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d96:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d9a:	80 91 a1 09 	lds	r24, 0x09A1
     d9e:	86 ff       	sbrs	r24, 6
     da0:	fc cf       	rjmp	.-8      	; 0xd9a <MemoryInit+0x92>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     da2:	90 93 a1 09 	sts	0x09A1, r25

	return MEMORY_FLASH_USART.DATA;
     da6:	80 91 a0 09 	lds	r24, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     daa:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     dae:	80 91 a1 09 	lds	r24, 0x09A1
     db2:	86 ff       	sbrs	r24, 6
     db4:	fc cf       	rjmp	.-8      	; 0xdae <MemoryInit+0xa6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     db6:	90 93 a1 09 	sts	0x09A1, r25

	return MEMORY_FLASH_USART.DATA;
     dba:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     dbe:	20 93 65 06 	sts	0x0665, r18

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};

	while(FlashIsBusy());
     dc2:	87 ff       	sbrs	r24, 7
     dc4:	e6 cf       	rjmp	.-52     	; 0xd92 <MemoryInit+0x8a>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     dc6:	80 e1       	ldi	r24, 0x10	; 16
     dc8:	80 93 66 06 	sts	0x0666, r24
     dcc:	fe 01       	movw	r30, r28
     dce:	31 96       	adiw	r30, 0x01	; 1
     dd0:	ce 01       	movw	r24, r28
     dd2:	05 96       	adiw	r24, 0x05	; 5
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     dd4:	30 e4       	ldi	r19, 0x40	; 64
INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     dd6:	21 91       	ld	r18, Z+
     dd8:	20 93 a0 09 	sts	0x09A0, r18
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ddc:	20 91 a1 09 	lds	r18, 0x09A1
     de0:	26 ff       	sbrs	r18, 6
     de2:	fc cf       	rjmp	.-8      	; 0xddc <MemoryInit+0xd4>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     de4:	30 93 a1 09 	sts	0x09A1, r19
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
     de8:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     dec:	e8 17       	cp	r30, r24
     dee:	f9 07       	cpc	r31, r25
     df0:	91 f7       	brne	.-28     	; 0xdd6 <MemoryInit+0xce>

	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPIWriteBlock(Sequence, sizeof(Sequence));
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     df2:	80 e1       	ldi	r24, 0x10	; 16
     df4:	80 93 65 06 	sts	0x0665, r24
		FlashConfigurePageSize();
	}
    
	/* Load permanent flash contents to memory at startup */
	MemoryRecall();
}
     df8:	24 96       	adiw	r28, 0x04	; 4
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
		/* Configure for 256 byte Dataflash if not already done. */
		FlashConfigurePageSize();
	}
    
	/* Load permanent flash contents to memory at startup */
	MemoryRecall();
     e02:	0c cf       	rjmp	.-488    	; 0xc1c <MemoryRecall>

00000e04 <MemoryStore>:
	/* Recall memory from permanent flash */
	FlashRead(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}

void MemoryStore(void)
{
     e04:	5f 92       	push	r5
     e06:	6f 92       	push	r6
     e08:	7f 92       	push	r7
     e0a:	8f 92       	push	r8
     e0c:	9f 92       	push	r9
     e0e:	af 92       	push	r10
     e10:	bf 92       	push	r11
     e12:	cf 92       	push	r12
     e14:	df 92       	push	r13
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
     e22:	80 91 fd 24 	lds	r24, 0x24FD
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	6a e0       	ldi	r22, 0x0A	; 10
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	aa 1f       	adc	r26, r26
     e34:	bb 1f       	adc	r27, r27
     e36:	6a 95       	dec	r22
     e38:	d1 f7       	brne	.-12     	; 0xe2e <MemoryStore+0x2a>
     e3a:	00 e0       	ldi	r16, 0x00	; 0
     e3c:	14 e0       	ldi	r17, 0x04	; 4
INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
     e3e:	e1 2c       	mov	r14, r1
     e40:	ff 24       	eor	r15, r15
     e42:	f3 94       	inc	r15

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e44:	e0 e1       	ldi	r30, 0x10	; 16
     e46:	ce 2e       	mov	r12, r30

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e48:	f7 ed       	ldi	r31, 0xD7	; 215
     e4a:	bf 2e       	mov	r11, r31

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e4c:	c0 e4       	ldi	r28, 0x40	; 64
     e4e:	dc 2e       	mov	r13, r28

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e50:	d0 e1       	ldi	r29, 0x10	; 16
     e52:	ad 2e       	mov	r10, r29

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e54:	27 ed       	ldi	r18, 0xD7	; 215
     e56:	92 2e       	mov	r9, r18
     e58:	33 e5       	ldi	r19, 0x53	; 83
     e5a:	63 2e       	mov	r6, r19
     e5c:	44 e8       	ldi	r20, 0x84	; 132
     e5e:	74 2e       	mov	r7, r20
     e60:	53 e8       	ldi	r21, 0x83	; 131
     e62:	85 2e       	mov	r8, r21
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
     e64:	49 2f       	mov	r20, r25
     e66:	5a 2f       	mov	r21, r26
     e68:	6b 2f       	mov	r22, r27
     e6a:	77 27       	eor	r23, r23
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
     e6c:	38 2f       	mov	r19, r24
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
     e6e:	e7 01       	movw	r28, r14
     e70:	c8 1b       	sub	r28, r24
     e72:	d1 09       	sbc	r29, r1
     e74:	0c 17       	cp	r16, r28
     e76:	1d 07       	cpc	r17, r29
     e78:	08 f4       	brcc	.+2      	; 0xe7c <MemoryStore+0x78>
     e7a:	e8 01       	movw	r28, r16

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e7c:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e80:	90 92 a0 09 	sts	0x09A0, r9

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e84:	20 91 a1 09 	lds	r18, 0x09A1
     e88:	26 ff       	sbrs	r18, 6
     e8a:	fc cf       	rjmp	.-8      	; 0xe84 <MemoryStore+0x80>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e8c:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     e90:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e94:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e98:	20 91 a1 09 	lds	r18, 0x09A1
     e9c:	26 ff       	sbrs	r18, 6
     e9e:	fc cf       	rjmp	.-8      	; 0xe98 <MemoryStore+0x94>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ea0:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     ea4:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     ea8:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashMemoryToBuffer(uint16_t PageAddress)
{
	while(FlashIsBusy());
     eac:	27 ff       	sbrs	r18, 7
     eae:	e6 cf       	rjmp	.-52     	; 0xe7c <MemoryStore+0x78>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     eb0:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     eb4:	60 92 a0 09 	sts	0x09A0, r6

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     eb8:	20 91 a1 09 	lds	r18, 0x09A1
     ebc:	26 ff       	sbrs	r18, 6
     ebe:	fc cf       	rjmp	.-8      	; 0xeb8 <MemoryStore+0xb4>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ec0:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     ec4:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ec8:	50 93 a0 09 	sts	0x09A0, r21

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ecc:	20 91 a1 09 	lds	r18, 0x09A1
     ed0:	26 ff       	sbrs	r18, 6
     ed2:	fc cf       	rjmp	.-8      	; 0xecc <MemoryStore+0xc8>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ed4:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     ed8:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     edc:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ee0:	20 91 a1 09 	lds	r18, 0x09A1
     ee4:	26 ff       	sbrs	r18, 6
     ee6:	fc cf       	rjmp	.-8      	; 0xee0 <MemoryStore+0xdc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ee8:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     eec:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ef0:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ef4:	20 91 a1 09 	lds	r18, 0x09A1
     ef8:	26 ff       	sbrs	r18, 6
     efa:	fc cf       	rjmp	.-8      	; 0xef4 <MemoryStore+0xf0>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     efc:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f00:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f04:	c0 92 65 06 	sts	0x0665, r12

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f08:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f0c:	b0 92 a0 09 	sts	0x09A0, r11

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f10:	20 91 a1 09 	lds	r18, 0x09A1
     f14:	26 ff       	sbrs	r18, 6
     f16:	fc cf       	rjmp	.-8      	; 0xf10 <MemoryStore+0x10c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f18:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f1c:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f20:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f24:	20 91 a1 09 	lds	r18, 0x09A1
     f28:	26 ff       	sbrs	r18, 6
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <MemoryStore+0x120>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f2c:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f30:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f34:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWriteBuffer(const void* Buffer, uint8_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     f38:	27 ff       	sbrs	r18, 7
     f3a:	e6 cf       	rjmp	.-52     	; 0xf08 <MemoryStore+0x104>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f3c:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f40:	70 92 a0 09 	sts	0x09A0, r7

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f44:	20 91 a1 09 	lds	r18, 0x09A1
     f48:	26 ff       	sbrs	r18, 6
     f4a:	fc cf       	rjmp	.-8      	; 0xf44 <MemoryStore+0x140>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f4c:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f50:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f54:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f58:	20 91 a1 09 	lds	r18, 0x09A1
     f5c:	26 ff       	sbrs	r18, 6
     f5e:	fc cf       	rjmp	.-8      	; 0xf58 <MemoryStore+0x154>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f60:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f64:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f68:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f6c:	20 91 a1 09 	lds	r18, 0x09A1
     f70:	26 ff       	sbrs	r18, 6
     f72:	fc cf       	rjmp	.-8      	; 0xf6c <MemoryStore+0x168>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f74:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f78:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f7c:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f80:	20 91 a1 09 	lds	r18, 0x09A1
     f84:	26 ff       	sbrs	r18, 6
     f86:	fc cf       	rjmp	.-8      	; 0xf80 <MemoryStore+0x17c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f88:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     f8c:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     f90:	20 97       	sbiw	r28, 0x00	; 0
     f92:	99 f0       	breq	.+38     	; 0xfba <MemoryStore+0x1b6>
     f94:	e2 e9       	ldi	r30, 0x92	; 146
     f96:	f0 e2       	ldi	r31, 0x20	; 32
     f98:	9e 01       	movw	r18, r28
     f9a:	2e 56       	subi	r18, 0x6E	; 110
     f9c:	3f 4d       	sbci	r19, 0xDF	; 223
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     f9e:	51 90       	ld	r5, Z+
     fa0:	50 92 a0 09 	sts	0x09A0, r5
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fa4:	50 90 a1 09 	lds	r5, 0x09A1
     fa8:	56 fe       	sbrs	r5, 6
     faa:	fc cf       	rjmp	.-8      	; 0xfa4 <MemoryStore+0x1a0>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fac:	d0 92 a1 09 	sts	0x09A1, r13
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
     fb0:	50 90 a0 09 	lds	r5, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     fb4:	e2 17       	cp	r30, r18
     fb6:	f3 07       	cpc	r31, r19
     fb8:	91 f7       	brne	.-28     	; 0xf9e <MemoryStore+0x19a>
	SPITransferByte(FLASH_CMD_BUF1_WRITE);
	SPITransferByte( 0 );
	SPITransferByte( 0 );
	SPITransferByte( Address );
	SPIWriteBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     fba:	c0 92 65 06 	sts	0x0665, r12

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     fbe:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     fc2:	b0 92 a0 09 	sts	0x09A0, r11

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fc6:	20 91 a1 09 	lds	r18, 0x09A1
     fca:	26 ff       	sbrs	r18, 6
     fcc:	fc cf       	rjmp	.-8      	; 0xfc6 <MemoryStore+0x1c2>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fce:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     fd2:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     fd6:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     fda:	20 91 a1 09 	lds	r18, 0x09A1
     fde:	26 ff       	sbrs	r18, 6
     fe0:	fc cf       	rjmp	.-8      	; 0xfda <MemoryStore+0x1d6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     fe2:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
     fe6:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     fea:	c0 92 65 06 	sts	0x0665, r12
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashBufferToMemory(uint16_t PageAddress)
{
	while(FlashIsBusy());
     fee:	27 ff       	sbrs	r18, 7
     ff0:	e6 cf       	rjmp	.-52     	; 0xfbe <MemoryStore+0x1ba>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     ff2:	a0 92 66 06 	sts	0x0666, r10

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ff6:	80 92 a0 09 	sts	0x09A0, r8

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ffa:	20 91 a1 09 	lds	r18, 0x09A1
     ffe:	26 ff       	sbrs	r18, 6
    1000:	fc cf       	rjmp	.-8      	; 0xffa <MemoryStore+0x1f6>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1002:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1006:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    100a:	50 93 a0 09 	sts	0x09A0, r21

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    100e:	20 91 a1 09 	lds	r18, 0x09A1
    1012:	26 ff       	sbrs	r18, 6
    1014:	fc cf       	rjmp	.-8      	; 0x100e <MemoryStore+0x20a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1016:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    101a:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    101e:	40 93 a0 09 	sts	0x09A0, r20

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1022:	20 91 a1 09 	lds	r18, 0x09A1
    1026:	26 ff       	sbrs	r18, 6
    1028:	fc cf       	rjmp	.-8      	; 0x1022 <MemoryStore+0x21e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    102a:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    102e:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1032:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1036:	20 91 a1 09 	lds	r18, 0x09A1
    103a:	26 ff       	sbrs	r18, 6
    103c:	fc cf       	rjmp	.-8      	; 0x1036 <MemoryStore+0x232>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    103e:	d0 92 a1 09 	sts	0x09A1, r13

	return MEMORY_FLASH_USART.DATA;
    1042:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_BUF1_TO_MEM_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1046:	c0 92 65 06 	sts	0x0665, r12

		FlashMemoryToBuffer(PageAddress);
		FlashWriteBuffer(Buffer, ByteAddress, PageBytes);
		FlashBufferToMemory(PageAddress);

		ByteCount -= PageBytes;
    104a:	0c 1b       	sub	r16, r28
    104c:	1d 0b       	sbc	r17, r29
		Address += PageBytes;
    104e:	8c 0f       	add	r24, r28
    1050:	9d 1f       	adc	r25, r29
    1052:	a1 1d       	adc	r26, r1
    1054:	b1 1d       	adc	r27, r1
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
    1056:	01 15       	cp	r16, r1
    1058:	11 05       	cpc	r17, r1
    105a:	09 f0       	breq	.+2      	; 0x105e <MemoryStore+0x25a>
    105c:	03 cf       	rjmp	.-506    	; 0xe64 <MemoryStore+0x60>

void MemoryStore(void)
{
	/* Store current memory into permanent flash */
	FlashWrite(Memory, (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING, MEMORY_SIZE_PER_SETTING);
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	df 90       	pop	r13
    106c:	cf 90       	pop	r12
    106e:	bf 90       	pop	r11
    1070:	af 90       	pop	r10
    1072:	9f 90       	pop	r9
    1074:	8f 90       	pop	r8
    1076:	7f 90       	pop	r7
    1078:	6f 90       	pop	r6
    107a:	5f 90       	pop	r5
    107c:	08 95       	ret

0000107e <MemoryUploadBlock>:

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    107e:	2f 92       	push	r2
    1080:	3f 92       	push	r3
    1082:	4f 92       	push	r4
    1084:	5f 92       	push	r5
    1086:	6f 92       	push	r6
    1088:	7f 92       	push	r7
    108a:	8f 92       	push	r8
    108c:	9f 92       	push	r9
    108e:	af 92       	push	r10
    1090:	bf 92       	push	r11
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2a 97       	sbiw	r28, 0x0a	; 10
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	8c 01       	movw	r16, r24
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    10ae:	41 15       	cp	r20, r1
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	58 07       	cpc	r21, r24
    10b4:	61 05       	cpc	r22, r1
    10b6:	71 05       	cpc	r23, r1
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <MemoryUploadBlock+0x3e>
    10ba:	8e c1       	rjmp	.+796    	; 0x13d8 <MemoryUploadBlock+0x35a>
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    10bc:	80 91 fd 24 	lds	r24, 0x24FD
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ea e0       	ldi	r30, 0x0A	; 10
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	aa 1f       	adc	r26, r26
    10ce:	bb 1f       	adc	r27, r27
    10d0:	ea 95       	dec	r30
    10d2:	d1 f7       	brne	.-12     	; 0x10c8 <MemoryUploadBlock+0x4a>
    10d4:	84 0f       	add	r24, r20
    10d6:	95 1f       	adc	r25, r21
    10d8:	a6 1f       	adc	r26, r22
    10da:	b7 1f       	adc	r27, r23
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    10dc:	81 2c       	mov	r8, r1
    10de:	f4 e0       	ldi	r31, 0x04	; 4
    10e0:	9f 2e       	mov	r9, r31
    10e2:	a1 2c       	mov	r10, r1
    10e4:	b1 2c       	mov	r11, r1
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    10e6:	69 01       	movw	r12, r18
    10e8:	e1 2c       	mov	r14, r1
    10ea:	f1 2c       	mov	r15, r1
    10ec:	84 1a       	sub	r8, r20
    10ee:	95 0a       	sbc	r9, r21
    10f0:	a6 0a       	sbc	r10, r22
    10f2:	b7 0a       	sbc	r11, r23
    10f4:	89 82       	std	Y+1, r8	; 0x01
    10f6:	9a 82       	std	Y+2, r9	; 0x02
    10f8:	ab 82       	std	Y+3, r10	; 0x03
    10fa:	bc 82       	std	Y+4, r11	; 0x04
    10fc:	c8 14       	cp	r12, r8
    10fe:	d9 04       	cpc	r13, r9
    1100:	ea 04       	cpc	r14, r10
    1102:	fb 04       	cpc	r15, r11
    1104:	08 f4       	brcc	.+2      	; 0x1108 <MemoryUploadBlock+0x8a>
    1106:	7f c1       	rjmp	.+766    	; 0x1406 <MemoryUploadBlock+0x388>
    1108:	29 81       	ldd	r18, Y+1	; 0x01
    110a:	3a 81       	ldd	r19, Y+2	; 0x02
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <MemoryUploadBlock+0x96>
    1112:	62 c1       	rjmp	.+708    	; 0x13d8 <MemoryUploadBlock+0x35a>
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
    1114:	e1 2c       	mov	r14, r1
    1116:	ff 24       	eor	r15, r15
    1118:	f3 94       	inc	r15

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    111a:	e0 e1       	ldi	r30, 0x10	; 16
    111c:	7e 2e       	mov	r7, r30

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    111e:	f7 ed       	ldi	r31, 0xD7	; 215
    1120:	df 2e       	mov	r13, r31

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1122:	e0 e4       	ldi	r30, 0x40	; 64
    1124:	4e 2e       	mov	r4, r30

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1126:	f0 e1       	ldi	r31, 0x10	; 16
    1128:	cf 2e       	mov	r12, r31

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    112a:	e7 ed       	ldi	r30, 0xD7	; 215
    112c:	3e 2e       	mov	r3, r30
    112e:	f3 e5       	ldi	r31, 0x53	; 83
    1130:	5f 2e       	mov	r5, r31
    1132:	e4 e8       	ldi	r30, 0x84	; 132
    1134:	6e 2e       	mov	r6, r30
    1136:	f3 e8       	ldi	r31, 0x83	; 131
    1138:	2f 2e       	mov	r2, r31
    113a:	29 87       	std	Y+9, r18	; 0x09
    113c:	3a 87       	std	Y+10, r19	; 0x0a
    113e:	4d 83       	std	Y+5, r20	; 0x05
    1140:	5e 83       	std	Y+6, r21	; 0x06
    1142:	6f 83       	std	Y+7, r22	; 0x07
    1144:	78 87       	std	Y+8, r23	; 0x08
    1146:	b9 01       	movw	r22, r18
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / FLASH_PAGE_SIZE;
    1148:	89 2e       	mov	r8, r25
    114a:	9a 2e       	mov	r9, r26
    114c:	ab 2e       	mov	r10, r27
    114e:	bb 24       	eor	r11, r11
		uint8_t ByteAddress = Address % FLASH_PAGE_SIZE;
    1150:	38 2f       	mov	r19, r24
		uint16_t PageBytes = MIN(FLASH_PAGE_SIZE - ByteAddress, ByteCount);
    1152:	a7 01       	movw	r20, r14
    1154:	48 1b       	sub	r20, r24
    1156:	51 09       	sbc	r21, r1
    1158:	64 17       	cp	r22, r20
    115a:	75 07       	cpc	r23, r21
    115c:	08 f4       	brcc	.+2      	; 0x1160 <MemoryUploadBlock+0xe2>
    115e:	ab 01       	movw	r20, r22

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1160:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1164:	30 92 a0 09 	sts	0x09A0, r3

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1168:	20 91 a1 09 	lds	r18, 0x09A1
    116c:	26 ff       	sbrs	r18, 6
    116e:	fc cf       	rjmp	.-8      	; 0x1168 <MemoryUploadBlock+0xea>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1170:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1174:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1178:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    117c:	20 91 a1 09 	lds	r18, 0x09A1
    1180:	26 ff       	sbrs	r18, 6
    1182:	fc cf       	rjmp	.-8      	; 0x117c <MemoryUploadBlock+0xfe>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1184:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1188:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    118c:	70 92 65 06 	sts	0x0665, r7
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashMemoryToBuffer(uint16_t PageAddress)
{
	while(FlashIsBusy());
    1190:	27 ff       	sbrs	r18, 7
    1192:	e6 cf       	rjmp	.-52     	; 0x1160 <MemoryUploadBlock+0xe2>
    1194:	69 87       	std	Y+9, r22	; 0x09
    1196:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1198:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    119c:	50 92 a0 09 	sts	0x09A0, r5
    11a0:	69 85       	ldd	r22, Y+9	; 0x09
    11a2:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11a4:	20 91 a1 09 	lds	r18, 0x09A1
    11a8:	26 ff       	sbrs	r18, 6
    11aa:	fc cf       	rjmp	.-8      	; 0x11a4 <MemoryUploadBlock+0x126>
    11ac:	69 87       	std	Y+9, r22	; 0x09
    11ae:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11b0:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    11b4:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11b8:	90 92 a0 09 	sts	0x09A0, r9
    11bc:	69 85       	ldd	r22, Y+9	; 0x09
    11be:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11c0:	20 91 a1 09 	lds	r18, 0x09A1
    11c4:	26 ff       	sbrs	r18, 6
    11c6:	fc cf       	rjmp	.-8      	; 0x11c0 <MemoryUploadBlock+0x142>
    11c8:	69 87       	std	Y+9, r22	; 0x09
    11ca:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11cc:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    11d0:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11d4:	80 92 a0 09 	sts	0x09A0, r8
    11d8:	69 85       	ldd	r22, Y+9	; 0x09
    11da:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11dc:	20 91 a1 09 	lds	r18, 0x09A1
    11e0:	26 ff       	sbrs	r18, 6
    11e2:	fc cf       	rjmp	.-8      	; 0x11dc <MemoryUploadBlock+0x15e>
    11e4:	69 87       	std	Y+9, r22	; 0x09
    11e6:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    11e8:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    11ec:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    11f0:	10 92 a0 09 	sts	0x09A0, r1
    11f4:	69 85       	ldd	r22, Y+9	; 0x09
    11f6:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    11f8:	20 91 a1 09 	lds	r18, 0x09A1
    11fc:	26 ff       	sbrs	r18, 6
    11fe:	fc cf       	rjmp	.-8      	; 0x11f8 <MemoryUploadBlock+0x17a>
    1200:	69 87       	std	Y+9, r22	; 0x09
    1202:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1204:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1208:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    120c:	70 92 65 06 	sts	0x0665, r7
    1210:	69 85       	ldd	r22, Y+9	; 0x09
    1212:	7a 85       	ldd	r23, Y+10	; 0x0a

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1214:	70 92 66 06 	sts	0x0666, r7

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1218:	d0 92 a0 09 	sts	0x09A0, r13

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    121c:	20 91 a1 09 	lds	r18, 0x09A1
    1220:	26 ff       	sbrs	r18, 6
    1222:	fc cf       	rjmp	.-8      	; 0x121c <MemoryUploadBlock+0x19e>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1224:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1228:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    122c:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1230:	20 91 a1 09 	lds	r18, 0x09A1
    1234:	26 ff       	sbrs	r18, 6
    1236:	fc cf       	rjmp	.-8      	; 0x1230 <MemoryUploadBlock+0x1b2>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1238:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    123c:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1240:	70 92 65 06 	sts	0x0665, r7
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWriteBuffer(const void* Buffer, uint8_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
    1244:	27 ff       	sbrs	r18, 7
    1246:	e6 cf       	rjmp	.-52     	; 0x1214 <MemoryUploadBlock+0x196>
    1248:	69 87       	std	Y+9, r22	; 0x09
    124a:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    124c:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1250:	60 92 a0 09 	sts	0x09A0, r6
    1254:	69 85       	ldd	r22, Y+9	; 0x09
    1256:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1258:	20 91 a1 09 	lds	r18, 0x09A1
    125c:	26 ff       	sbrs	r18, 6
    125e:	fc cf       	rjmp	.-8      	; 0x1258 <MemoryUploadBlock+0x1da>
    1260:	69 87       	std	Y+9, r22	; 0x09
    1262:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1264:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1268:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    126c:	10 92 a0 09 	sts	0x09A0, r1
    1270:	69 85       	ldd	r22, Y+9	; 0x09
    1272:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1274:	20 91 a1 09 	lds	r18, 0x09A1
    1278:	26 ff       	sbrs	r18, 6
    127a:	fc cf       	rjmp	.-8      	; 0x1274 <MemoryUploadBlock+0x1f6>
    127c:	69 87       	std	Y+9, r22	; 0x09
    127e:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1280:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1284:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1288:	10 92 a0 09 	sts	0x09A0, r1
    128c:	69 85       	ldd	r22, Y+9	; 0x09
    128e:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1290:	20 91 a1 09 	lds	r18, 0x09A1
    1294:	26 ff       	sbrs	r18, 6
    1296:	fc cf       	rjmp	.-8      	; 0x1290 <MemoryUploadBlock+0x212>
    1298:	69 87       	std	Y+9, r22	; 0x09
    129a:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    129c:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    12a0:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    12a4:	30 93 a0 09 	sts	0x09A0, r19
    12a8:	69 85       	ldd	r22, Y+9	; 0x09
    12aa:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    12ac:	20 91 a1 09 	lds	r18, 0x09A1
    12b0:	26 ff       	sbrs	r18, 6
    12b2:	fc cf       	rjmp	.-8      	; 0x12ac <MemoryUploadBlock+0x22e>
    12b4:	69 87       	std	Y+9, r22	; 0x09
    12b6:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    12b8:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    12bc:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    12c0:	41 15       	cp	r20, r1
    12c2:	51 05       	cpc	r21, r1
    12c4:	91 f0       	breq	.+36     	; 0x12ea <MemoryUploadBlock+0x26c>
    12c6:	f8 01       	movw	r30, r16
    12c8:	9a 01       	movw	r18, r20
    12ca:	20 0f       	add	r18, r16
    12cc:	31 1f       	adc	r19, r17
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
    12ce:	61 91       	ld	r22, Z+
    12d0:	60 93 a0 09 	sts	0x09A0, r22
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    12d4:	60 91 a1 09 	lds	r22, 0x09A1
    12d8:	66 ff       	sbrs	r22, 6
    12da:	fc cf       	rjmp	.-8      	; 0x12d4 <MemoryUploadBlock+0x256>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    12dc:	40 92 a1 09 	sts	0x09A1, r4
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
    12e0:	60 91 a0 09 	lds	r22, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
    12e4:	e2 17       	cp	r30, r18
    12e6:	f3 07       	cpc	r31, r19
    12e8:	91 f7       	brne	.-28     	; 0x12ce <MemoryUploadBlock+0x250>
	SPITransferByte(FLASH_CMD_BUF1_WRITE);
	SPITransferByte( 0 );
	SPITransferByte( 0 );
	SPITransferByte( Address );
	SPIWriteBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    12ea:	70 92 65 06 	sts	0x0665, r7
    12ee:	69 85       	ldd	r22, Y+9	; 0x09
    12f0:	7a 85       	ldd	r23, Y+10	; 0x0a

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    12f2:	70 92 66 06 	sts	0x0666, r7

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    12f6:	d0 92 a0 09 	sts	0x09A0, r13

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    12fa:	20 91 a1 09 	lds	r18, 0x09A1
    12fe:	26 ff       	sbrs	r18, 6
    1300:	fc cf       	rjmp	.-8      	; 0x12fa <MemoryUploadBlock+0x27c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1302:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1306:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    130a:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    130e:	20 91 a1 09 	lds	r18, 0x09A1
    1312:	26 ff       	sbrs	r18, 6
    1314:	fc cf       	rjmp	.-8      	; 0x130e <MemoryUploadBlock+0x290>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1316:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    131a:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    131e:	70 92 65 06 	sts	0x0665, r7
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashBufferToMemory(uint16_t PageAddress)
{
	while(FlashIsBusy());
    1322:	27 ff       	sbrs	r18, 7
    1324:	e6 cf       	rjmp	.-52     	; 0x12f2 <MemoryUploadBlock+0x274>
    1326:	69 87       	std	Y+9, r22	; 0x09
    1328:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    132a:	c0 92 66 06 	sts	0x0666, r12

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    132e:	20 92 a0 09 	sts	0x09A0, r2
    1332:	69 85       	ldd	r22, Y+9	; 0x09
    1334:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1336:	20 91 a1 09 	lds	r18, 0x09A1
    133a:	26 ff       	sbrs	r18, 6
    133c:	fc cf       	rjmp	.-8      	; 0x1336 <MemoryUploadBlock+0x2b8>
    133e:	69 87       	std	Y+9, r22	; 0x09
    1340:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1342:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1346:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    134a:	90 92 a0 09 	sts	0x09A0, r9
    134e:	69 85       	ldd	r22, Y+9	; 0x09
    1350:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1352:	20 91 a1 09 	lds	r18, 0x09A1
    1356:	26 ff       	sbrs	r18, 6
    1358:	fc cf       	rjmp	.-8      	; 0x1352 <MemoryUploadBlock+0x2d4>
    135a:	69 87       	std	Y+9, r22	; 0x09
    135c:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    135e:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1362:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1366:	80 92 a0 09 	sts	0x09A0, r8
    136a:	69 85       	ldd	r22, Y+9	; 0x09
    136c:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    136e:	20 91 a1 09 	lds	r18, 0x09A1
    1372:	26 ff       	sbrs	r18, 6
    1374:	fc cf       	rjmp	.-8      	; 0x136e <MemoryUploadBlock+0x2f0>
    1376:	69 87       	std	Y+9, r22	; 0x09
    1378:	7a 87       	std	Y+10, r23	; 0x0a

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    137a:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    137e:	20 91 a0 09 	lds	r18, 0x09A0

static uint8_t Memory[MEMORY_SIZE_PER_SETTING];

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1382:	10 92 a0 09 	sts	0x09A0, r1
    1386:	69 85       	ldd	r22, Y+9	; 0x09
    1388:	7a 85       	ldd	r23, Y+10	; 0x0a

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    138a:	20 91 a1 09 	lds	r18, 0x09A1
    138e:	26 ff       	sbrs	r18, 6
    1390:	fc cf       	rjmp	.-8      	; 0x138a <MemoryUploadBlock+0x30c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1392:	40 92 a1 09 	sts	0x09A1, r4

	return MEMORY_FLASH_USART.DATA;
    1396:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_BUF1_TO_MEM_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    139a:	70 92 65 06 	sts	0x0665, r7

		FlashMemoryToBuffer(PageAddress);
		FlashWriteBuffer(Buffer, ByteAddress, PageBytes);
		FlashBufferToMemory(PageAddress);

		ByteCount -= PageBytes;
    139e:	64 1b       	sub	r22, r20
    13a0:	75 0b       	sbc	r23, r21
    13a2:	69 87       	std	Y+9, r22	; 0x09
    13a4:	7a 87       	std	Y+10, r23	; 0x0a
		Address += PageBytes;
    13a6:	84 0f       	add	r24, r20
    13a8:	95 1f       	adc	r25, r21
    13aa:	a1 1d       	adc	r26, r1
    13ac:	b1 1d       	adc	r27, r1
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
    13ae:	61 15       	cp	r22, r1
    13b0:	71 05       	cpc	r23, r1
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <MemoryUploadBlock+0x338>
    13b4:	c9 ce       	rjmp	.-622    	; 0x1148 <MemoryUploadBlock+0xca>
    13b6:	4d 81       	ldd	r20, Y+5	; 0x05
    13b8:	5e 81       	ldd	r21, Y+6	; 0x06
    13ba:	6f 81       	ldd	r22, Y+7	; 0x07
    13bc:	78 85       	ldd	r23, Y+8	; 0x08

    	/* Store into flash */
    	FlashWrite(Buffer, FlashAddress, ByteCount);

		/* Store to local memory */
    	uint8_t* DstPtr = &Memory[BlockAddress];
    13be:	da 01       	movw	r26, r20
    13c0:	ae 56       	subi	r26, 0x6E	; 110
    13c2:	bf 4d       	sbci	r27, 0xDF	; 223
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	8a 0f       	add	r24, r26
    13ca:	9b 1f       	adc	r25, r27
    13cc:	f8 01       	movw	r30, r16
    	uint8_t* SrcPtr = (uint8_t*) Buffer;

    	while(ByteCount--) {
    		*DstPtr++ = *SrcPtr++;
    13ce:	21 91       	ld	r18, Z+
    13d0:	2d 93       	st	X+, r18

		/* Store to local memory */
    	uint8_t* DstPtr = &Memory[BlockAddress];
    	uint8_t* SrcPtr = (uint8_t*) Buffer;

    	while(ByteCount--) {
    13d2:	a8 17       	cp	r26, r24
    13d4:	b9 07       	cpc	r27, r25
    13d6:	d9 f7       	brne	.-10     	; 0x13ce <MemoryUploadBlock+0x350>
    	}

		return true;
    }

}
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	2a 96       	adiw	r28, 0x0a	; 10
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	df 90       	pop	r13
    13ee:	cf 90       	pop	r12
    13f0:	bf 90       	pop	r11
    13f2:	af 90       	pop	r10
    13f4:	9f 90       	pop	r9
    13f6:	8f 90       	pop	r8
    13f8:	7f 90       	pop	r7
    13fa:	6f 90       	pop	r6
    13fc:	5f 90       	pop	r5
    13fe:	4f 90       	pop	r4
    1400:	3f 90       	pop	r3
    1402:	2f 90       	pop	r2
    1404:	08 95       	ret
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    1406:	c9 82       	std	Y+1, r12	; 0x01
    1408:	da 82       	std	Y+2, r13	; 0x02
    140a:	eb 82       	std	Y+3, r14	; 0x03
    140c:	fc 82       	std	Y+4, r15	; 0x04
    140e:	7c ce       	rjmp	.-776    	; 0x1108 <MemoryUploadBlock+0x8a>

00001410 <MemoryDownloadBlock>:
    }

}

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	69 01       	movw	r12, r18
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    141e:	41 15       	cp	r20, r1
    1420:	24 e0       	ldi	r18, 0x04	; 4
    1422:	52 07       	cpc	r21, r18
    1424:	61 05       	cpc	r22, r1
    1426:	71 05       	cpc	r23, r1
    1428:	40 f5       	brcc	.+80     	; 0x147a <MemoryDownloadBlock+0x6a>
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    142a:	00 e0       	ldi	r16, 0x00	; 0
    142c:	14 e0       	ldi	r17, 0x04	; 4
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    	//uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    1432:	e1 2c       	mov	r14, r1
    1434:	f1 2c       	mov	r15, r1
    1436:	04 1b       	sub	r16, r20
    1438:	15 0b       	sbc	r17, r21
    143a:	26 0b       	sbc	r18, r22
    143c:	37 0b       	sbc	r19, r23
    143e:	c0 16       	cp	r12, r16
    1440:	d1 06       	cpc	r13, r17
    1442:	e2 06       	cpc	r14, r18
    1444:	f3 06       	cpc	r15, r19
    1446:	b0 f0       	brcs	.+44     	; 0x1474 <MemoryDownloadBlock+0x64>

    	/* Output local memory contents */
    	uint8_t* DstPtr = (uint8_t*) Buffer;
    	uint8_t* SrcPtr = &Memory[BlockAddress];
    1448:	4e 56       	subi	r20, 0x6E	; 110
    144a:	5f 4d       	sbci	r21, 0xDF	; 223

    	while(ByteCount--) {
    144c:	01 15       	cp	r16, r1
    144e:	11 05       	cpc	r17, r1
    1450:	49 f0       	breq	.+18     	; 0x1464 <MemoryDownloadBlock+0x54>
    1452:	da 01       	movw	r26, r20
    1454:	fc 01       	movw	r30, r24
    1456:	08 0f       	add	r16, r24
    1458:	19 1f       	adc	r17, r25
    		*DstPtr++ = *SrcPtr++;
    145a:	8d 91       	ld	r24, X+
    145c:	81 93       	st	Z+, r24

    	/* Output local memory contents */
    	uint8_t* DstPtr = (uint8_t*) Buffer;
    	uint8_t* SrcPtr = &Memory[BlockAddress];

    	while(ByteCount--) {
    145e:	e0 17       	cp	r30, r16
    1460:	f1 07       	cpc	r31, r17
    1462:	d9 f7       	brne	.-10     	; 0x145a <MemoryDownloadBlock+0x4a>
    		*DstPtr++ = *SrcPtr++;
    	}

        return true;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    }
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	08 95       	ret
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    	//uint32_t FlashAddress = (uint32_t) BlockAddress + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
    	ByteCount = MIN(ByteCount, BytesLeft);
    1474:	97 01       	movw	r18, r14
    1476:	86 01       	movw	r16, r12
    1478:	e7 cf       	rjmp	.-50     	; 0x1448 <MemoryDownloadBlock+0x38>

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    147a:	80 e0       	ldi	r24, 0x00	; 0
    		*DstPtr++ = *SrcPtr++;
    	}

        return true;
    }
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <ButtonInit>:
}

void ButtonSetActionById(ButtonActionEnum Action)
{
#ifndef BUTTON_SETTING_GLOBAL
	GlobalSettings.ActiveSettingPtr->ButtonAction = Action;
    148a:	e0 e0       	ldi	r30, 0x00	; 0
    148c:	f6 e0       	ldi	r31, 0x06	; 6
    148e:	80 e4       	ldi	r24, 0x40	; 64
    1490:	82 83       	std	Z+2, r24	; 0x02
    1492:	88 e1       	ldi	r24, 0x18	; 24
    1494:	86 8b       	std	Z+22, r24	; 0x16
    1496:	08 95       	ret

00001498 <ButtonTick>:
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	a0 97       	sbiw	r28, 0x20	; 32
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	80 91 08 06 	lds	r24, 0x0608
    14b0:	80 95       	com	r24
    14b2:	90 91 92 24 	lds	r25, 0x2492
    14b6:	98 27       	eor	r25, r24
    14b8:	80 93 92 24 	sts	0x2492, r24
    14bc:	80 74       	andi	r24, 0x40	; 64
    14be:	89 23       	and	r24, r25
    14c0:	d9 f0       	breq	.+54     	; 0x14f8 <ButtonTick+0x60>
    14c2:	e0 91 fe 24 	lds	r30, 0x24FE
    14c6:	f0 91 ff 24 	lds	r31, 0x24FF
    14ca:	80 81       	ld	r24, Z
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	e9 f0       	breq	.+58     	; 0x150a <ButtonTick+0x72>
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	a9 f1       	breq	.+106    	; 0x153e <ButtonTick+0xa6>
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	09 f4       	brne	.+2      	; 0x14da <ButtonTick+0x42>
    14d8:	50 c0       	rjmp	.+160    	; 0x157a <ButtonTick+0xe2>
    14da:	84 30       	cpi	r24, 0x04	; 4
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <ButtonTick+0x48>
    14de:	73 c0       	rjmp	.+230    	; 0x15c6 <ButtonTick+0x12e>
    14e0:	85 30       	cpi	r24, 0x05	; 5
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <ButtonTick+0x4e>
    14e4:	8e c0       	rjmp	.+284    	; 0x1602 <ButtonTick+0x16a>
    14e6:	86 30       	cpi	r24, 0x06	; 6
    14e8:	09 f4       	brne	.+2      	; 0x14ec <ButtonTick+0x54>
    14ea:	ad c0       	rjmp	.+346    	; 0x1646 <ButtonTick+0x1ae>
    14ec:	87 30       	cpi	r24, 0x07	; 7
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <ButtonTick+0x5a>
    14f0:	66 c0       	rjmp	.+204    	; 0x15be <ButtonTick+0x126>
    14f2:	88 30       	cpi	r24, 0x08	; 8
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <ButtonTick+0x60>
    14f6:	65 c0       	rjmp	.+202    	; 0x15c2 <ButtonTick+0x12a>
    14f8:	a0 96       	adiw	r28, 0x20	; 32
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	08 95       	ret
    150a:	80 91 fb 24 	lds	r24, 0x24FB
    150e:	88 23       	and	r24, r24
    1510:	09 f4       	brne	.+2      	; 0x1514 <ButtonTick+0x7c>
    1512:	9b c0       	rjmp	.+310    	; 0x164a <ButtonTick+0x1b2>
    1514:	f1 2c       	mov	r15, r1
    1516:	8e 01       	movw	r16, r28
    1518:	0f 5f       	subi	r16, 0xFF	; 255
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	9d da       	rcall	.-2758   	; 0xa58 <RandomGetByte>
    151e:	f8 01       	movw	r30, r16
    1520:	ef 0d       	add	r30, r15
    1522:	f1 1d       	adc	r31, r1
    1524:	80 83       	st	Z, r24
    1526:	f3 94       	inc	r15
    1528:	80 91 fb 24 	lds	r24, 0x24FB
    152c:	f8 16       	cp	r15, r24
    152e:	b0 f3       	brcs	.-20     	; 0x151c <ButtonTick+0x84>
    1530:	e0 91 f7 24 	lds	r30, 0x24F7
    1534:	f0 91 f8 24 	lds	r31, 0x24F8
    1538:	c8 01       	movw	r24, r16
    153a:	09 95       	icall
    153c:	dd cf       	rjmp	.-70     	; 0x14f8 <ButtonTick+0x60>
    153e:	e0 91 f5 24 	lds	r30, 0x24F5
    1542:	f0 91 f6 24 	lds	r31, 0x24F6
    1546:	8e 01       	movw	r16, r28
    1548:	0f 5f       	subi	r16, 0xFF	; 255
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	c8 01       	movw	r24, r16
    154e:	09 95       	icall
    1550:	20 91 fb 24 	lds	r18, 0x24FB
    1554:	22 23       	and	r18, r18
    1556:	61 f3       	breq	.-40     	; 0x1530 <ButtonTick+0x98>
    1558:	f8 01       	movw	r30, r16
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	99 23       	and	r25, r25
    155e:	39 f0       	breq	.+14     	; 0x156e <ButtonTick+0xd6>
    1560:	80 81       	ld	r24, Z
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	8f 3f       	cpi	r24, 0xFF	; 255
    1566:	09 f0       	breq	.+2      	; 0x156a <ButtonTick+0xd2>
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	80 83       	st	Z, r24
    156e:	31 96       	adiw	r30, 0x01	; 1
    1570:	8e 2f       	mov	r24, r30
    1572:	80 1b       	sub	r24, r16
    1574:	82 17       	cp	r24, r18
    1576:	90 f3       	brcs	.-28     	; 0x155c <ButtonTick+0xc4>
    1578:	db cf       	rjmp	.-74     	; 0x1530 <ButtonTick+0x98>
    157a:	e0 91 f5 24 	lds	r30, 0x24F5
    157e:	f0 91 f6 24 	lds	r31, 0x24F6
    1582:	8e 01       	movw	r16, r28
    1584:	0f 5f       	subi	r16, 0xFF	; 255
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	c8 01       	movw	r24, r16
    158a:	09 95       	icall
    158c:	20 91 fb 24 	lds	r18, 0x24FB
    1590:	31 e0       	ldi	r19, 0x01	; 1
    1592:	21 50       	subi	r18, 0x01	; 1
    1594:	68 f2       	brcs	.-102    	; 0x1530 <ButtonTick+0x98>
    1596:	33 23       	and	r19, r19
    1598:	e1 f3       	breq	.-8      	; 0x1592 <ButtonTick+0xfa>
    159a:	82 2f       	mov	r24, r18
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	f8 01       	movw	r30, r16
    15a0:	e8 0f       	add	r30, r24
    15a2:	f9 1f       	adc	r31, r25
    15a4:	40 81       	ld	r20, Z
    15a6:	31 e0       	ldi	r19, 0x01	; 1
    15a8:	4f 3f       	cpi	r20, 0xFF	; 255
    15aa:	09 f0       	breq	.+2      	; 0x15ae <ButtonTick+0x116>
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	f8 01       	movw	r30, r16
    15b0:	e8 0f       	add	r30, r24
    15b2:	f9 1f       	adc	r31, r25
    15b4:	4f 5f       	subi	r20, 0xFF	; 255
    15b6:	40 83       	st	Z, r20
    15b8:	21 50       	subi	r18, 0x01	; 1
    15ba:	68 f7       	brcc	.-38     	; 0x1596 <ButtonTick+0xfe>
    15bc:	b9 cf       	rjmp	.-142    	; 0x1530 <ButtonTick+0x98>
    15be:	22 dc       	rcall	.-1980   	; 0xe04 <MemoryStore>
    15c0:	9b cf       	rjmp	.-202    	; 0x14f8 <ButtonTick+0x60>
    15c2:	2c db       	rcall	.-2472   	; 0xc1c <MemoryRecall>
    15c4:	99 cf       	rjmp	.-206    	; 0x14f8 <ButtonTick+0x60>
    15c6:	e0 91 f5 24 	lds	r30, 0x24F5
    15ca:	f0 91 f6 24 	lds	r31, 0x24F6
    15ce:	8e 01       	movw	r16, r28
    15d0:	0f 5f       	subi	r16, 0xFF	; 255
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	c8 01       	movw	r24, r16
    15d6:	09 95       	icall
    15d8:	20 91 fb 24 	lds	r18, 0x24FB
    15dc:	22 23       	and	r18, r18
    15de:	09 f4       	brne	.+2      	; 0x15e2 <ButtonTick+0x14a>
    15e0:	a7 cf       	rjmp	.-178    	; 0x1530 <ButtonTick+0x98>
    15e2:	f8 01       	movw	r30, r16
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	99 23       	and	r25, r25
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <ButtonTick+0x15e>
    15ea:	80 81       	ld	r24, Z
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	81 11       	cpse	r24, r1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	81 50       	subi	r24, 0x01	; 1
    15f4:	80 83       	st	Z, r24
    15f6:	31 96       	adiw	r30, 0x01	; 1
    15f8:	8e 2f       	mov	r24, r30
    15fa:	80 1b       	sub	r24, r16
    15fc:	82 17       	cp	r24, r18
    15fe:	98 f3       	brcs	.-26     	; 0x15e6 <ButtonTick+0x14e>
    1600:	97 cf       	rjmp	.-210    	; 0x1530 <ButtonTick+0x98>
    1602:	e0 91 f5 24 	lds	r30, 0x24F5
    1606:	f0 91 f6 24 	lds	r31, 0x24F6
    160a:	8e 01       	movw	r16, r28
    160c:	0f 5f       	subi	r16, 0xFF	; 255
    160e:	1f 4f       	sbci	r17, 0xFF	; 255
    1610:	c8 01       	movw	r24, r16
    1612:	09 95       	icall
    1614:	20 91 fb 24 	lds	r18, 0x24FB
    1618:	31 e0       	ldi	r19, 0x01	; 1
    161a:	21 50       	subi	r18, 0x01	; 1
    161c:	08 f4       	brcc	.+2      	; 0x1620 <ButtonTick+0x188>
    161e:	88 cf       	rjmp	.-240    	; 0x1530 <ButtonTick+0x98>
    1620:	33 23       	and	r19, r19
    1622:	d9 f3       	breq	.-10     	; 0x161a <ButtonTick+0x182>
    1624:	82 2f       	mov	r24, r18
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	f8 01       	movw	r30, r16
    162a:	e8 0f       	add	r30, r24
    162c:	f9 1f       	adc	r31, r25
    162e:	40 81       	ld	r20, Z
    1630:	31 e0       	ldi	r19, 0x01	; 1
    1632:	41 11       	cpse	r20, r1
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	f8 01       	movw	r30, r16
    1638:	e8 0f       	add	r30, r24
    163a:	f9 1f       	adc	r31, r25
    163c:	41 50       	subi	r20, 0x01	; 1
    163e:	40 83       	st	Z, r20
    1640:	21 50       	subi	r18, 0x01	; 1
    1642:	70 f7       	brcc	.-36     	; 0x1620 <ButtonTick+0x188>
    1644:	75 cf       	rjmp	.-278    	; 0x1530 <ButtonTick+0x98>
    1646:	da d0       	rcall	.+436    	; 0x17fc <SettingsCycle>
    1648:	57 cf       	rjmp	.-338    	; 0x14f8 <ButtonTick+0x60>
    164a:	8e 01       	movw	r16, r28
    164c:	0f 5f       	subi	r16, 0xFF	; 255
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	6f cf       	rjmp	.-290    	; 0x1530 <ButtonTick+0x98>

00001652 <ButtonGetActionList>:
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	61 50       	subi	r22, 0x01	; 1
    165c:	71 09       	sbc	r23, r1
    165e:	47 e4       	ldi	r20, 0x47	; 71
    1660:	53 e0       	ldi	r21, 0x03	; 3
    1662:	1c e2       	ldi	r17, 0x2C	; 44
    1664:	9a 01       	movw	r18, r20
    1666:	fa 01       	movw	r30, r20
    1668:	04 91       	lpm	r16, Z
    166a:	00 23       	and	r16, r16
    166c:	49 f1       	breq	.+82     	; 0x16c0 <ButtonGetActionList+0x6e>
    166e:	61 32       	cpi	r22, 0x21	; 33
    1670:	71 05       	cpc	r23, r1
    1672:	20 f4       	brcc	.+8      	; 0x167c <ButtonGetActionList+0x2a>
    1674:	25 c0       	rjmp	.+74     	; 0x16c0 <ButtonGetActionList+0x6e>
    1676:	60 32       	cpi	r22, 0x20	; 32
    1678:	71 05       	cpc	r23, r1
    167a:	61 f0       	breq	.+24     	; 0x1694 <ButtonGetActionList+0x42>
    167c:	dc 01       	movw	r26, r24
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	ec 01       	movw	r28, r24
    1682:	0c 93       	st	X, r16
    1684:	2f 5f       	subi	r18, 0xFF	; 255
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	61 50       	subi	r22, 0x01	; 1
    168a:	71 09       	sbc	r23, r1
    168c:	f9 01       	movw	r30, r18
    168e:	04 91       	lpm	r16, Z
    1690:	01 11       	cpse	r16, r1
    1692:	f1 cf       	rjmp	.-30     	; 0x1676 <ButtonGetActionList+0x24>
    1694:	f4 e0       	ldi	r31, 0x04	; 4
    1696:	47 34       	cpi	r20, 0x47	; 71
    1698:	5f 07       	cpc	r21, r31
    169a:	61 f0       	breq	.+24     	; 0x16b4 <ButtonGetActionList+0x62>
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	18 83       	st	Y, r17
    16a2:	61 50       	subi	r22, 0x01	; 1
    16a4:	71 09       	sbc	r23, r1
    16a6:	40 5e       	subi	r20, 0xE0	; 224
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	24 e0       	ldi	r18, 0x04	; 4
    16ac:	47 36       	cpi	r20, 0x67	; 103
    16ae:	52 07       	cpc	r21, r18
    16b0:	c9 f6       	brne	.-78     	; 0x1664 <ButtonGetActionList+0x12>
    16b2:	ec 01       	movw	r28, r24
    16b4:	18 82       	st	Y, r1
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	08 95       	ret
    16c0:	ec 01       	movw	r28, r24
    16c2:	e8 cf       	rjmp	.-48     	; 0x1694 <ButtonGetActionList+0x42>

000016c4 <ButtonGetActionByName>:
	}
#endif
}

void ButtonGetActionByName(char* ActionOut, uint16_t BufferSize)
{
    16c4:	ab 01       	movw	r20, r22
    strncpy_P(ActionOut, ButtonActionTable[GlobalSettings.ActiveSettingPtr->ButtonAction], BufferSize);
    16c6:	e0 91 fe 24 	lds	r30, 0x24FE
    16ca:	f0 91 ff 24 	lds	r31, 0x24FF
    16ce:	60 81       	ld	r22, Z
    16d0:	20 e2       	ldi	r18, 0x20	; 32
    16d2:	62 9f       	mul	r22, r18
    16d4:	b0 01       	movw	r22, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	69 5b       	subi	r22, 0xB9	; 185
    16da:	7c 4f       	sbci	r23, 0xFC	; 252
    16dc:	0c 94 f7 23 	jmp	0x47ee	; 0x47ee <strncpy_P>

000016e0 <ButtonSetActionByName>:
}

bool ButtonSetActionByName(const char* Action)
{
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	ec 01       	movw	r28, r24
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
    16e6:	67 e4       	ldi	r22, 0x47	; 71
    16e8:	73 e0       	ldi	r23, 0x03	; 3
    16ea:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    16ee:	89 2b       	or	r24, r25
    16f0:	e9 f1       	breq	.+122    	; 0x176c <ButtonSetActionByName+0x8c>
    16f2:	67 e6       	ldi	r22, 0x67	; 103
    16f4:	73 e0       	ldi	r23, 0x03	; 3
    16f6:	ce 01       	movw	r24, r28
    16f8:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    16fc:	89 2b       	or	r24, r25
    16fe:	09 f4       	brne	.+2      	; 0x1702 <ButtonSetActionByName+0x22>
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <ButtonSetActionByName+0xa0>
    1702:	67 e8       	ldi	r22, 0x87	; 135
    1704:	73 e0       	ldi	r23, 0x03	; 3
    1706:	ce 01       	movw	r24, r28
    1708:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    170c:	89 2b       	or	r24, r25
    170e:	d1 f1       	breq	.+116    	; 0x1784 <ButtonSetActionByName+0xa4>
    1710:	67 ea       	ldi	r22, 0xA7	; 167
    1712:	73 e0       	ldi	r23, 0x03	; 3
    1714:	ce 01       	movw	r24, r28
    1716:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    171a:	89 2b       	or	r24, r25
    171c:	a9 f1       	breq	.+106    	; 0x1788 <ButtonSetActionByName+0xa8>
    171e:	67 ec       	ldi	r22, 0xC7	; 199
    1720:	73 e0       	ldi	r23, 0x03	; 3
    1722:	ce 01       	movw	r24, r28
    1724:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    1728:	89 2b       	or	r24, r25
    172a:	81 f1       	breq	.+96     	; 0x178c <ButtonSetActionByName+0xac>
    172c:	67 ee       	ldi	r22, 0xE7	; 231
    172e:	73 e0       	ldi	r23, 0x03	; 3
    1730:	ce 01       	movw	r24, r28
    1732:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    1736:	89 2b       	or	r24, r25
    1738:	59 f1       	breq	.+86     	; 0x1790 <ButtonSetActionByName+0xb0>
    173a:	67 e0       	ldi	r22, 0x07	; 7
    173c:	74 e0       	ldi	r23, 0x04	; 4
    173e:	ce 01       	movw	r24, r28
    1740:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    1744:	89 2b       	or	r24, r25
    1746:	31 f1       	breq	.+76     	; 0x1794 <ButtonSetActionByName+0xb4>
    1748:	67 e2       	ldi	r22, 0x27	; 39
    174a:	74 e0       	ldi	r23, 0x04	; 4
    174c:	ce 01       	movw	r24, r28
    174e:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    1752:	89 2b       	or	r24, r25
    1754:	09 f1       	breq	.+66     	; 0x1798 <ButtonSetActionByName+0xb8>
    1756:	67 e4       	ldi	r22, 0x47	; 71
    1758:	74 e0       	ldi	r23, 0x04	; 4
    175a:	ce 01       	movw	r24, r28
    175c:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    1760:	89 2b       	or	r24, r25
    1762:	e1 f0       	breq	.+56     	; 0x179c <ButtonSetActionByName+0xbc>
            return true;
        }
    }

    /* Button action not found */
    return false;
    1764:	80 e0       	ldi	r24, 0x00	; 0
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

bool ButtonSetActionByName(const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    176c:	80 e0       	ldi	r24, 0x00	; 0
}

void ButtonSetActionById(ButtonActionEnum Action)
{
#ifndef BUTTON_SETTING_GLOBAL
	GlobalSettings.ActiveSettingPtr->ButtonAction = Action;
    176e:	e0 91 fe 24 	lds	r30, 0x24FE
    1772:	f0 91 ff 24 	lds	r31, 0x24FF
    1776:	80 83       	st	Z, r24
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
            ButtonSetActionById(i);
            return true;
    1778:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    /* Button action not found */
    return false;
}
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

bool ButtonSetActionByName(const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	f5 cf       	rjmp	.-22     	; 0x176e <ButtonSetActionByName+0x8e>
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	f3 cf       	rjmp	.-26     	; 0x176e <ButtonSetActionByName+0x8e>
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	f1 cf       	rjmp	.-30     	; 0x176e <ButtonSetActionByName+0x8e>
    178c:	84 e0       	ldi	r24, 0x04	; 4
    178e:	ef cf       	rjmp	.-34     	; 0x176e <ButtonSetActionByName+0x8e>
    1790:	85 e0       	ldi	r24, 0x05	; 5
    1792:	ed cf       	rjmp	.-38     	; 0x176e <ButtonSetActionByName+0x8e>
    1794:	86 e0       	ldi	r24, 0x06	; 6
    1796:	eb cf       	rjmp	.-42     	; 0x176e <ButtonSetActionByName+0x8e>
    1798:	87 e0       	ldi	r24, 0x07	; 7
    179a:	e9 cf       	rjmp	.-46     	; 0x176e <ButtonSetActionByName+0x8e>
    179c:	88 e0       	ldi	r24, 0x08	; 8
    179e:	e7 cf       	rjmp	.-50     	; 0x176e <ButtonSetActionByName+0x8e>

000017a0 <SettingsLoad>:
	}
}

uint8_t SettingsGetActiveById(void) {
	return GlobalSettings.ActiveSetting;
}
    17a0:	43 e1       	ldi	r20, 0x13	; 19
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	8d ef       	ldi	r24, 0xFD	; 253
    17aa:	94 e2       	ldi	r25, 0x24	; 36
    17ac:	0c 94 ff 25 	jmp	0x4bfe	; 0x4bfe <__eerd_block_x32a4u>

000017b0 <SettingsSave>:
    17b0:	43 e1       	ldi	r20, 0x13	; 19
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	8d ef       	ldi	r24, 0xFD	; 253
    17ba:	94 e2       	ldi	r25, 0x24	; 36
    17bc:	0c 94 0a 26 	jmp	0x4c14	; 0x4c14 <__eewr_block_x32a4u>

000017c0 <SettingsSetActiveById>:
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	1f 92       	push	r1
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	88 30       	cpi	r24, 0x08	; 8
    17cc:	20 f0       	brcs	.+8      	; 0x17d6 <SettingsSetActiveById+0x16>
    17ce:	0f 90       	pop	r0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	15 db       	rcall	.-2518   	; 0xe04 <MemoryStore>
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	80 93 fd 24 	sts	0x24FD, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	80 50       	subi	r24, 0x00	; 0
    17e8:	9b 4d       	sbci	r25, 0xDB	; 219
    17ea:	80 93 fe 24 	sts	0x24FE, r24
    17ee:	90 93 ff 24 	sts	0x24FF, r25
    17f2:	b4 d8       	rcall	.-3736   	; 0x95c <ConfigurationInit>
    17f4:	0f 90       	pop	r0
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	10 ca       	rjmp	.-3040   	; 0xc1c <MemoryRecall>

000017fc <SettingsCycle>:
    17fc:	20 91 fd 24 	lds	r18, 0x24FD
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	2f 5f       	subi	r18, 0xFF	; 255
    1804:	3f 4f       	sbci	r19, 0xFF	; 255
    1806:	27 70       	andi	r18, 0x07	; 7
    1808:	33 27       	eor	r19, r19
    180a:	82 2f       	mov	r24, r18
    180c:	f9 01       	movw	r30, r18
    180e:	ee 0f       	add	r30, r30
    1810:	ff 1f       	adc	r31, r31
    1812:	ef 5f       	subi	r30, 0xFF	; 255
    1814:	fa 4d       	sbci	r31, 0xDA	; 218
    1816:	90 81       	ld	r25, Z
    1818:	91 11       	cpse	r25, r1
    181a:	5c c0       	rjmp	.+184    	; 0x18d4 <SettingsCycle+0xd8>
    181c:	2f 5f       	subi	r18, 0xFF	; 255
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	27 70       	andi	r18, 0x07	; 7
    1822:	33 27       	eor	r19, r19
    1824:	82 2f       	mov	r24, r18
    1826:	f9 01       	movw	r30, r18
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	ef 5f       	subi	r30, 0xFF	; 255
    182e:	fa 4d       	sbci	r31, 0xDA	; 218
    1830:	90 81       	ld	r25, Z
    1832:	91 11       	cpse	r25, r1
    1834:	4f c0       	rjmp	.+158    	; 0x18d4 <SettingsCycle+0xd8>
    1836:	2f 5f       	subi	r18, 0xFF	; 255
    1838:	3f 4f       	sbci	r19, 0xFF	; 255
    183a:	27 70       	andi	r18, 0x07	; 7
    183c:	33 27       	eor	r19, r19
    183e:	82 2f       	mov	r24, r18
    1840:	f9 01       	movw	r30, r18
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ef 5f       	subi	r30, 0xFF	; 255
    1848:	fa 4d       	sbci	r31, 0xDA	; 218
    184a:	90 81       	ld	r25, Z
    184c:	91 11       	cpse	r25, r1
    184e:	42 c0       	rjmp	.+132    	; 0x18d4 <SettingsCycle+0xd8>
    1850:	2f 5f       	subi	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	27 70       	andi	r18, 0x07	; 7
    1856:	33 27       	eor	r19, r19
    1858:	82 2f       	mov	r24, r18
    185a:	f9 01       	movw	r30, r18
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	ef 5f       	subi	r30, 0xFF	; 255
    1862:	fa 4d       	sbci	r31, 0xDA	; 218
    1864:	90 81       	ld	r25, Z
    1866:	91 11       	cpse	r25, r1
    1868:	35 c0       	rjmp	.+106    	; 0x18d4 <SettingsCycle+0xd8>
    186a:	2f 5f       	subi	r18, 0xFF	; 255
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	27 70       	andi	r18, 0x07	; 7
    1870:	33 27       	eor	r19, r19
    1872:	82 2f       	mov	r24, r18
    1874:	f9 01       	movw	r30, r18
    1876:	ee 0f       	add	r30, r30
    1878:	ff 1f       	adc	r31, r31
    187a:	ef 5f       	subi	r30, 0xFF	; 255
    187c:	fa 4d       	sbci	r31, 0xDA	; 218
    187e:	90 81       	ld	r25, Z
    1880:	91 11       	cpse	r25, r1
    1882:	28 c0       	rjmp	.+80     	; 0x18d4 <SettingsCycle+0xd8>
    1884:	2f 5f       	subi	r18, 0xFF	; 255
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	27 70       	andi	r18, 0x07	; 7
    188a:	33 27       	eor	r19, r19
    188c:	82 2f       	mov	r24, r18
    188e:	f9 01       	movw	r30, r18
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	ef 5f       	subi	r30, 0xFF	; 255
    1896:	fa 4d       	sbci	r31, 0xDA	; 218
    1898:	90 81       	ld	r25, Z
    189a:	91 11       	cpse	r25, r1
    189c:	1b c0       	rjmp	.+54     	; 0x18d4 <SettingsCycle+0xd8>
    189e:	2f 5f       	subi	r18, 0xFF	; 255
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	27 70       	andi	r18, 0x07	; 7
    18a4:	33 27       	eor	r19, r19
    18a6:	82 2f       	mov	r24, r18
    18a8:	f9 01       	movw	r30, r18
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	ef 5f       	subi	r30, 0xFF	; 255
    18b0:	fa 4d       	sbci	r31, 0xDA	; 218
    18b2:	90 81       	ld	r25, Z
    18b4:	91 11       	cpse	r25, r1
    18b6:	0e c0       	rjmp	.+28     	; 0x18d4 <SettingsCycle+0xd8>
    18b8:	2f 5f       	subi	r18, 0xFF	; 255
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	27 70       	andi	r18, 0x07	; 7
    18be:	33 27       	eor	r19, r19
    18c0:	82 2f       	mov	r24, r18
    18c2:	f9 01       	movw	r30, r18
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	ef 5f       	subi	r30, 0xFF	; 255
    18ca:	fa 4d       	sbci	r31, 0xDA	; 218
    18cc:	90 81       	ld	r25, Z
    18ce:	91 11       	cpse	r25, r1
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <SettingsCycle+0xd8>
    18d2:	08 95       	ret
    18d4:	75 cf       	rjmp	.-278    	; 0x17c0 <SettingsSetActiveById>

000018d6 <SettingsGetActiveByName>:

void SettingsGetActiveByName(char* SettingOut, uint16_t BufferSize) {
	SettingOut[0] = SettingsGetActiveById() + '0';
    18d6:	20 91 fd 24 	lds	r18, 0x24FD
    18da:	20 5d       	subi	r18, 0xD0	; 208
    18dc:	fc 01       	movw	r30, r24
    18de:	20 83       	st	Z, r18
	SettingOut[1] = '\0';
    18e0:	11 82       	std	Z+1, r1	; 0x01
    18e2:	08 95       	ret

000018e4 <SettingsSetActiveByName>:
}

bool SettingsSetActiveByName(const char* Setting) {
    18e4:	fc 01       	movw	r30, r24
	uint8_t SettingNr = Setting[0] - '0';
    18e6:	80 81       	ld	r24, Z

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
    18e8:	91 81       	ldd	r25, Z+1	; 0x01
    18ea:	91 11       	cpse	r25, r1
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <SettingsSetActiveByName+0x10>
	SettingOut[0] = SettingsGetActiveById() + '0';
	SettingOut[1] = '\0';
}

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';
    18ee:	80 53       	subi	r24, 0x30	; 48

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
    18f0:	88 30       	cpi	r24, 0x08	; 8
    18f2:	10 f0       	brcs	.+4      	; 0x18f8 <SettingsSetActiveByName+0x14>
		SettingsSetActiveById(SettingNr);
		return true;
	} else {
		return false;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    18f6:	08 95       	ret

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
		SettingsSetActiveById(SettingNr);
    18f8:	63 df       	rcall	.-314    	; 0x17c0 <SettingsSetActiveById>
		return true;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	08 95       	ret

000018fe <TerminalSendString>:
uint8_t TerminalBuffer[TERMINAL_BUFFER_SIZE];
TerminalStateEnum TerminalState = TERMINAL_UNINITIALIZED;
static uint8_t TerminalInitDelay = INIT_DELAY;

void TerminalSendString(const char* s) {
    CDC_Device_SendString(&TerminalHandle, s);
    18fe:	bc 01       	movw	r22, r24
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e2       	ldi	r25, 0x20	; 32
    1904:	0c 94 95 21 	jmp	0x432a	; 0x432a <CDC_Device_SendString>

00001908 <TerminalSendStringP>:
}

void TerminalSendStringP(const char* s) {
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    char c;

    while( (c = pgm_read_byte(s++)) != '\0' ) {
    190c:	ec 01       	movw	r28, r24
    190e:	21 96       	adiw	r28, 0x01	; 1
    1910:	fc 01       	movw	r30, r24
    1912:	64 91       	lpm	r22, Z
    1914:	66 23       	and	r22, r22
    1916:	49 f0       	breq	.+18     	; 0x192a <TerminalSendStringP+0x22>
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e2       	ldi	r25, 0x20	; 32
    191c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
    1920:	fe 01       	movw	r30, r28
    1922:	64 91       	lpm	r22, Z
    1924:	21 96       	adiw	r28, 0x01	; 1
    1926:	61 11       	cpse	r22, r1
    1928:	f7 cf       	rjmp	.-18     	; 0x1918 <TerminalSendStringP+0x10>
        TerminalSendChar(c);
    }
}
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	08 95       	ret

00001930 <TerminalSendBlock>:
#endif



void TerminalSendBlock(void* Buffer, uint16_t ByteCount)
{
    1930:	ab 01       	movw	r20, r22
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
    1932:	bc 01       	movw	r22, r24
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e2       	ldi	r25, 0x20	; 32
    1938:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <CDC_Device_SendData>

0000193c <TerminalInit>:
    }
}

void TerminalInit(void)
{
    TERMINAL_VBUS_PORT.DIRCLR = TERMINAL_VBUS_MASK;
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	e0 e6       	ldi	r30, 0x60	; 96
    1940:	f6 e0       	ldi	r31, 0x06	; 6
    1942:	82 83       	std	Z+2, r24	; 0x02
    1944:	08 95       	ret

00001946 <TerminalTask>:
}

void TerminalTask(void)
{
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
	CDC_Device_USBTask(&TerminalHandle);
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e2       	ldi	r25, 0x20	; 32
    194e:	0e 94 57 22 	call	0x44ae	; 0x44ae <CDC_Device_USBTask>
	USB_USBTask();
    1952:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <USB_USBTask>
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
}


static void ProcessByte(void) {
    int16_t Byte = CDC_Device_ReceiveByte(&TerminalHandle);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e2       	ldi	r25, 0x20	; 32
    195a:	0e 94 72 22 	call	0x44e4	; 0x44e4 <CDC_Device_ReceiveByte>
    195e:	ec 01       	movw	r28, r24

    if (Byte >= 0) {
    1960:	97 fd       	sbrc	r25, 7
    1962:	09 c0       	rjmp	.+18     	; 0x1976 <TerminalTask+0x30>
    LED_PORT.OUTTGL = Mask;
}

static inline
void LEDPulse(uint8_t Mask) {
	LEDPulseMask = Mask;
    1964:	80 e1       	ldi	r24, 0x10	; 16
    1966:	80 93 93 24 	sts	0x2493, r24
	LED_PORT.OUTSET = Mask;
    196a:	80 93 05 06 	sts	0x0605, r24
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
    196e:	8c 2f       	mov	r24, r28
    1970:	5a d2       	rcall	.+1204   	; 0x1e26 <XModemProcessByte>
    1972:	88 23       	and	r24, r24
    1974:	19 f0       	breq	.+6      	; 0x197c <TerminalTask+0x36>
{
	CDC_Device_USBTask(&TerminalHandle);
	USB_USBTask();

    ProcessByte();
}
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    197c:	8c 2f       	mov	r24, r28
{
	CDC_Device_USBTask(&TerminalHandle);
	USB_USBTask();

    ProcessByte();
}
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    1982:	e0 c3       	rjmp	.+1984   	; 0x2144 <CommandLineProcessByte>

00001984 <TerminalTick>:
    }
}

static void SenseVBus(void)
{
    switch(TerminalState) {
    1984:	80 91 94 24 	lds	r24, 0x2494
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	31 f1       	breq	.+76     	; 0x19d8 <TerminalTick+0x54>
    198c:	c8 f0       	brcs	.+50     	; 0x19c0 <TerminalTick+0x3c>
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	59 f0       	breq	.+22     	; 0x19a8 <TerminalTick+0x24>
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	39 f4       	brne	.+14     	; 0x19a4 <TerminalTick+0x20>
    		TerminalState = TERMINAL_UNITIALIZING;
    	}
    	break;

    case TERMINAL_UNITIALIZING:
    	if (--TerminalInitDelay == 0) {
    1996:	80 91 00 20 	lds	r24, 0x2000
    199a:	81 50       	subi	r24, 0x01	; 1
    199c:	80 93 00 20 	sts	0x2000, r24
    19a0:	88 23       	and	r24, r24
    19a2:	49 f1       	breq	.+82     	; 0x19f6 <TerminalTick+0x72>

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    19a4:	a1 d3       	rcall	.+1858   	; 0x20e8 <XModemTick>
    CommandLineTick();
    19a6:	74 c5       	rjmp	.+2792   	; 0x2490 <CommandLineTick>
            TerminalState = TERMINAL_INITIALIZED;
    	}
    	break;

    case TERMINAL_INITIALIZED:
    	if (!(TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK)) {
    19a8:	80 91 68 06 	lds	r24, 0x0668
    19ac:	85 fd       	sbrc	r24, 5
    19ae:	fa cf       	rjmp	.-12     	; 0x19a4 <TerminalTick+0x20>
    		/* Initialized and VBUS sense low */
    		TerminalInitDelay = INIT_DELAY;
    19b0:	84 e1       	ldi	r24, 0x14	; 20
    19b2:	80 93 00 20 	sts	0x2000, r24
    		TerminalState = TERMINAL_UNITIALIZING;
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	80 93 94 24 	sts	0x2494, r24

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    19bc:	95 d3       	rcall	.+1834   	; 0x20e8 <XModemTick>
    CommandLineTick();
    19be:	68 c5       	rjmp	.+2768   	; 0x2490 <CommandLineTick>

static void SenseVBus(void)
{
    switch(TerminalState) {
    case TERMINAL_UNINITIALIZED:
    	if (TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK) {
    19c0:	80 91 68 06 	lds	r24, 0x0668
    19c4:	85 ff       	sbrs	r24, 5
    19c6:	ee cf       	rjmp	.-36     	; 0x19a4 <TerminalTick+0x20>
    		/* Not initialized and VBUS sense high */
    		TerminalInitDelay = INIT_DELAY;
    19c8:	84 e1       	ldi	r24, 0x14	; 20
    19ca:	80 93 00 20 	sts	0x2000, r24
    		TerminalState = TERMINAL_INITIALIZING;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	80 93 94 24 	sts	0x2494, r24

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    19d4:	89 d3       	rcall	.+1810   	; 0x20e8 <XModemTick>
    CommandLineTick();
    19d6:	5c c5       	rjmp	.+2744   	; 0x2490 <CommandLineTick>
    		TerminalState = TERMINAL_INITIALIZING;
    	}
    break;

    case TERMINAL_INITIALIZING:
    	if (--TerminalInitDelay == 0) {
    19d8:	80 91 00 20 	lds	r24, 0x2000
    19dc:	81 50       	subi	r24, 0x01	; 1
    19de:	80 93 00 20 	sts	0x2000, r24
    19e2:	81 11       	cpse	r24, r1
    19e4:	df cf       	rjmp	.-66     	; 0x19a4 <TerminalTick+0x20>
            SystemStartUSBClock();
    19e6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <SystemStartUSBClock>
            USB_Init();
    19ea:	0e 94 ce 20 	call	0x419c	; 0x419c <USB_Init>
            TerminalState = TERMINAL_INITIALIZED;
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	80 93 94 24 	sts	0x2494, r24
    19f4:	d7 cf       	rjmp	.-82     	; 0x19a4 <TerminalTick+0x20>
    	}
    	break;

    case TERMINAL_UNITIALIZING:
    	if (--TerminalInitDelay == 0) {
        	USB_Disable();
    19f6:	0e 94 93 20 	call	0x4126	; 0x4126 <USB_Disable>
        	SystemStopUSBClock();
    19fa:	0e 94 75 04 	call	0x8ea	; 0x8ea <SystemStopUSBClock>
        	TerminalState = TERMINAL_UNINITIALIZED;
    19fe:	10 92 94 24 	sts	0x2494, r1
    1a02:	d0 cf       	rjmp	.-96     	; 0x19a4 <TerminalTick+0x20>

00001a04 <EVENT_USB_Device_Connect>:
    LED_PORT.DIRSET = LED_MASK;
}

static inline
void LEDSetOn(uint8_t Mask) {
    LED_PORT.OUTSET = Mask;
    1a04:	80 e2       	ldi	r24, 0x20	; 32
    1a06:	e0 e0       	ldi	r30, 0x00	; 0
    1a08:	f6 e0       	ldi	r31, 0x06	; 6
    1a0a:	85 83       	std	Z+5, r24	; 0x05
    1a0c:	08 95       	ret

00001a0e <EVENT_USB_Device_Disconnect>:
}

static inline
void LEDSetOff(uint8_t Mask) {
    LED_PORT.OUTCLR = Mask;
    1a0e:	80 e2       	ldi	r24, 0x20	; 32
    1a10:	e0 e0       	ldi	r30, 0x00	; 0
    1a12:	f6 e0       	ldi	r31, 0x06	; 6
    1a14:	86 83       	std	Z+6, r24	; 0x06
    1a16:	08 95       	ret

00001a18 <EVENT_USB_Device_ConfigurationChanged>:


/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    CDC_Device_ConfigureEndpoints(&TerminalHandle);
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e2       	ldi	r25, 0x20	; 32
    1a1c:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <CDC_Device_ConfigureEndpoints>

00001a20 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    CDC_Device_ProcessControlRequest(&TerminalHandle);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e2       	ldi	r25, 0x20	; 32
    1a24:	0c 94 cf 22 	jmp	0x459e	; 0x459e <CDC_Device_ProcessControlRequest>

00001a28 <CommandGetVersion>:

extern const PROGMEM CommandEntryType CommandTable[];

CommandStatusIdType CommandGetVersion(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR(
    1a28:	25 ec       	ldi	r18, 0xC5	; 197
    1a2a:	34 e0       	ldi	r19, 0x04	; 4
    1a2c:	3f 93       	push	r19
    1a2e:	2f 93       	push	r18
    1a30:	2e eb       	ldi	r18, 0xBE	; 190
    1a32:	34 e0       	ldi	r19, 0x04	; 4
    1a34:	3f 93       	push	r19
    1a36:	2f 93       	push	r18
    1a38:	27 eb       	ldi	r18, 0xB7	; 183
    1a3a:	34 e0       	ldi	r19, 0x04	; 4
    1a3c:	3f 93       	push	r19
    1a3e:	2f 93       	push	r18
    1a40:	2e e7       	ldi	r18, 0x7E	; 126
    1a42:	34 e0       	ldi	r19, 0x04	; 4
    1a44:	3f 93       	push	r19
    1a46:	2f 93       	push	r18
    1a48:	21 e0       	ldi	r18, 0x01	; 1
    1a4a:	2f 93       	push	r18
    1a4c:	1f 92       	push	r1
    1a4e:	9f 93       	push	r25
    1a50:	8f 93       	push	r24
    1a52:	0e 94 0f 24 	call	0x481e	; 0x481e <snprintf_P>
    "Chameleon-Mini %S using LUFA %S compiled with AVR-GCC %S"
    ), PSTR(CHAMELEON_MINI_VERSION_STRING), PSTR(LUFA_VERSION_STRING), PSTR(__VERSION__)
  );

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1a56:	8d b7       	in	r24, 0x3d	; 61
    1a58:	9e b7       	in	r25, 0x3e	; 62
    1a5a:	0c 96       	adiw	r24, 0x0c	; 12
    1a5c:	8d bf       	out	0x3d, r24	; 61
    1a5e:	9e bf       	out	0x3e, r25	; 62
}
    1a60:	85 e6       	ldi	r24, 0x65	; 101
    1a62:	08 95       	ret

00001a64 <CommandGetConfig>:

CommandStatusIdType CommandGetConfig(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    1a64:	29 ed       	ldi	r18, 0xD9	; 217
    1a66:	34 e2       	ldi	r19, 0x24	; 36
    1a68:	3f 93       	push	r19
    1a6a:	2f 93       	push	r18
    1a6c:	2b e7       	ldi	r18, 0x7B	; 123
    1a6e:	34 e0       	ldi	r19, 0x04	; 4
    1a70:	3f 93       	push	r19
    1a72:	2f 93       	push	r18
    1a74:	21 e0       	ldi	r18, 0x01	; 1
    1a76:	2f 93       	push	r18
    1a78:	1f 92       	push	r1
    1a7a:	9f 93       	push	r25
    1a7c:	8f 93       	push	r24
    1a7e:	0e 94 0f 24 	call	0x481e	; 0x481e <snprintf_P>
    PSTR("%s"), ActiveConfiguration.ConfigurationName);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1a82:	8d b7       	in	r24, 0x3d	; 61
    1a84:	9e b7       	in	r25, 0x3e	; 62
    1a86:	08 96       	adiw	r24, 0x08	; 8
    1a88:	8d bf       	out	0x3d, r24	; 61
    1a8a:	9e bf       	out	0x3e, r25	; 62

}
    1a8c:	85 e6       	ldi	r24, 0x65	; 101
    1a8e:	08 95       	ret

00001a90 <CommandSetConfig>:

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
    1a90:	0e 94 b4 04 	call	0x968	; 0x968 <ConfigurationSetByName>
    1a94:	81 11       	cpse	r24, r1
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <CommandSetConfig+0xc>
	    SettingsSave();
    return COMMAND_INFO_OK_ID;
  } else {
    return COMMAND_ERR_INVALID_PARAM_ID;
    1a98:	8a ec       	ldi	r24, 0xCA	; 202
  }
}
    1a9a:	08 95       	ret
}

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
	    SettingsSave();
    1a9c:	89 de       	rcall	.-750    	; 0x17b0 <SettingsSave>
    return COMMAND_INFO_OK_ID;
    1a9e:	84 e6       	ldi	r24, 0x64	; 100
    1aa0:	08 95       	ret

00001aa2 <CommandExecConfig>:
  }
}

CommandStatusIdType CommandExecConfig(char* OutMessage)
{
  ConfigurationGetList(OutMessage, TERMINAL_BUFFER_SIZE);
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	71 e0       	ldi	r23, 0x01	; 1
    1aa6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <ConfigurationGetList>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1aaa:	85 e6       	ldi	r24, 0x65	; 101
    1aac:	08 95       	ret

00001aae <CommandGetUid>:

CommandStatusIdType CommandGetUid(char* OutParam)
{
    1aae:	ef 92       	push	r14
    1ab0:	ff 92       	push	r15
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	a0 97       	sbiw	r28, 0x20	; 32
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    1ac6:	e0 90 fb 24 	lds	r14, 0x24FB
    1aca:	f1 2c       	mov	r15, r1
INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    1acc:	e0 91 f5 24 	lds	r30, 0x24F5
    1ad0:	f0 91 f6 24 	lds	r31, 0x24F6
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	09 95       	icall

  ApplicationGetUid(UidBuffer);

  BufferToHexString(OutParam, TERMINAL_BUFFER_SIZE,
    1ada:	97 01       	movw	r18, r14
    1adc:	ae 01       	movw	r20, r28
    1ade:	4f 5f       	subi	r20, 0xFF	; 255
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	71 e0       	ldi	r23, 0x01	; 1
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	0e 94 47 05 	call	0xa8e	; 0xa8e <BufferToHexString>
    UidBuffer, UidSize);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1aec:	85 e6       	ldi	r24, 0x65	; 101
    1aee:	a0 96       	adiw	r28, 0x20	; 32
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	08 95       	ret

00001b02 <CommandSetUid>:

CommandStatusIdType CommandSetUid(const char* InParam)
{
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	a0 97       	sbiw	r28, 0x20	; 32
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    1b20:	c0 90 fb 24 	lds	r12, 0x24FB
    1b24:	d1 2c       	mov	r13, r1

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    1b26:	64 e7       	ldi	r22, 0x74	; 116
    1b28:	74 e0       	ldi	r23, 0x04	; 4
    1b2a:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    1b2e:	89 2b       	or	r24, r25
    1b30:	49 f5       	brne	.+82     	; 0x1b84 <CommandSetUid+0x82>
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    1b32:	c1 14       	cp	r12, r1
    1b34:	d1 04       	cpc	r13, r1
    1b36:	99 f1       	breq	.+102    	; 0x1b9e <CommandSetUid+0x9c>
    1b38:	b1 2c       	mov	r11, r1
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	7c 01       	movw	r14, r24
    1b40:	00 e0       	ldi	r16, 0x00	; 0
    1b42:	10 e0       	ldi	r17, 0x00	; 0
      UidBuffer[i] = RandomGetByte();
    1b44:	0e 94 2c 05 	call	0xa58	; 0xa58 <RandomGetByte>
    1b48:	f7 01       	movw	r30, r14
    1b4a:	e0 0f       	add	r30, r16
    1b4c:	f1 1f       	adc	r31, r17
    1b4e:	80 83       	st	Z, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    1b50:	b3 94       	inc	r11
    1b52:	0b 2d       	mov	r16, r11
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	0c 15       	cp	r16, r12
    1b58:	1d 05       	cpc	r17, r13
    1b5a:	a0 f3       	brcs	.-24     	; 0x1b44 <CommandSetUid+0x42>
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    1b5c:	e0 91 f7 24 	lds	r30, 0x24F7
    1b60:	f0 91 f8 24 	lds	r31, 0x24F8
    1b64:	c7 01       	movw	r24, r14
    1b66:	09 95       	icall
    }
  }

  ApplicationSetUid(UidBuffer);

  return COMMAND_INFO_OK_ID;
    1b68:	84 e6       	ldi	r24, 0x64	; 100
}
    1b6a:	a0 96       	adiw	r28, 0x20	; 32
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	bf 90       	pop	r11
    1b82:	08 95       	ret
    for (uint8_t i=0; i<UidSize; i++) {
      UidBuffer[i] = RandomGetByte();
    }
  } else {
    /* Convert to Bytes */
    if (HexStringToBuffer(UidBuffer, sizeof(UidBuffer), InParam) != UidSize) {
    1b84:	a8 01       	movw	r20, r16
    1b86:	60 e2       	ldi	r22, 0x20	; 32
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	7c 01       	movw	r14, r24
    1b90:	0e 94 8a 05 	call	0xb14	; 0xb14 <HexStringToBuffer>
    1b94:	8c 15       	cp	r24, r12
    1b96:	9d 05       	cpc	r25, r13
    1b98:	09 f3       	breq	.-62     	; 0x1b5c <CommandSetUid+0x5a>
      /* Malformed input. Abort */
      return COMMAND_ERR_INVALID_PARAM_ID;
    1b9a:	8a ec       	ldi	r24, 0xCA	; 202
    1b9c:	e6 cf       	rjmp	.-52     	; 0x1b6a <CommandSetUid+0x68>
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	7c 01       	movw	r14, r24
    1ba4:	db cf       	rjmp	.-74     	; 0x1b5c <CommandSetUid+0x5a>

00001ba6 <CommandGetReadOnly>:
  return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    1ba6:	20 91 fc 24 	lds	r18, 0x24FC
    1baa:	21 11       	cpse	r18, r1
    1bac:	07 c0       	rjmp	.+14     	; 0x1bbc <CommandGetReadOnly+0x16>
    OutParam[0] = COMMAND_CHAR_TRUE;
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
    1bae:	20 e3       	ldi	r18, 0x30	; 48
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	20 83       	st	Z, r18
  }

  OutParam[1] = '\0';
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1bb8:	85 e6       	ldi	r24, 0x65	; 101
    1bba:	08 95       	ret
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    OutParam[0] = COMMAND_CHAR_TRUE;
    1bbc:	21 e3       	ldi	r18, 0x31	; 49
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	20 83       	st	Z, r18
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
  }

  OutParam[1] = '\0';
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1bc6:	85 e6       	ldi	r24, 0x65	; 101
    1bc8:	08 95       	ret

00001bca <CommandSetReadOnly>:

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    1bca:	fc 01       	movw	r30, r24
    1bcc:	21 81       	ldd	r18, Z+1	; 0x01
    1bce:	21 11       	cpse	r18, r1
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <CommandSetReadOnly+0x12>
    if (InParam[0] == COMMAND_CHAR_TRUE) {
    1bd2:	80 81       	ld	r24, Z
    1bd4:	81 33       	cpi	r24, 0x31	; 49
    1bd6:	41 f0       	breq	.+16     	; 0x1be8 <CommandSetReadOnly+0x1e>
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
    1bd8:	80 33       	cpi	r24, 0x30	; 48
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <CommandSetReadOnly+0x16>
      ActiveConfiguration.ReadOnly = false;
      return COMMAND_INFO_OK_ID;
    }
  }

  return COMMAND_ERR_INVALID_PARAM_ID;
    1bdc:	8a ec       	ldi	r24, 0xCA	; 202
}
    1bde:	08 95       	ret
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
      ActiveConfiguration.ReadOnly = false;
    1be0:	10 92 fc 24 	sts	0x24FC, r1
      return COMMAND_INFO_OK_ID;
    1be4:	84 e6       	ldi	r24, 0x64	; 100
    1be6:	08 95       	ret

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	80 93 fc 24 	sts	0x24FC, r24
      return COMMAND_INFO_OK_ID;
    1bee:	84 e6       	ldi	r24, 0x64	; 100
    1bf0:	08 95       	ret

00001bf2 <CommandExecUpload>:
  return COMMAND_ERR_INVALID_PARAM_ID;
}

CommandStatusIdType CommandExecUpload(char* OutMessage)
{
    XModemReceive(MemoryUploadBlock);
    1bf2:	8f e3       	ldi	r24, 0x3F	; 63
    1bf4:	98 e0       	ldi	r25, 0x08	; 8
    1bf6:	ec d0       	rcall	.+472    	; 0x1dd0 <XModemReceive>
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    1bf8:	8e e6       	ldi	r24, 0x6E	; 110
    1bfa:	08 95       	ret

00001bfc <CommandExecDownload>:

CommandStatusIdType CommandExecDownload(char* OutMessage)
{
    XModemSend(MemoryDownloadBlock);
    1bfc:	88 e0       	ldi	r24, 0x08	; 8
    1bfe:	9a e0       	ldi	r25, 0x0A	; 10
    1c00:	ff d0       	rcall	.+510    	; 0x1e00 <XModemSend>
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    1c02:	8e e6       	ldi	r24, 0x6E	; 110
    1c04:	08 95       	ret

00001c06 <CommandExecReset>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    1c06:	e0 ec       	ldi	r30, 0xC0	; 192
    1c08:	f4 e0       	ldi	r31, 0x04	; 4
    1c0a:	81 81       	ldd	r24, Z+1	; 0x01
    1c0c:	8e 7f       	andi	r24, 0xFE	; 254
    1c0e:	81 83       	std	Z+1, r24	; 0x01

CommandStatusIdType CommandExecReset(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    1c10:	0e 94 93 20 	call	0x4126	; 0x4126 <USB_Disable>

  SystemReset();
    1c14:	0e 94 4f 04 	call	0x89e	; 0x89e <SystemReset>

  return COMMAND_INFO_OK_ID;
}
    1c18:	84 e6       	ldi	r24, 0x64	; 100
    1c1a:	08 95       	ret

00001c1c <CommandExecUpgrade>:
    1c1c:	e0 ec       	ldi	r30, 0xC0	; 192
    1c1e:	f4 e0       	ldi	r31, 0x04	; 4
    1c20:	81 81       	ldd	r24, Z+1	; 0x01
    1c22:	8e 7f       	andi	r24, 0xFE	; 254
    1c24:	81 83       	std	Z+1, r24	; 0x01

#ifdef SUPPORT_FIRMWARE_UPGRADE
CommandStatusIdType CommandExecUpgrade(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    1c26:	0e 94 93 20 	call	0x4126	; 0x4126 <USB_Disable>

  SystemEnterBootloader();
    1c2a:	0e 94 56 04 	call	0x8ac	; 0x8ac <SystemEnterBootloader>

  return COMMAND_INFO_OK_ID;
}
    1c2e:	84 e6       	ldi	r24, 0x64	; 100
    1c30:	08 95       	ret

00001c32 <CommandGetMemSize>:
#endif

CommandStatusIdType CommandGetMemSize(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.MemorySize);
    1c32:	e9 ef       	ldi	r30, 0xF9	; 249
    1c34:	f4 e2       	ldi	r31, 0x24	; 36
    1c36:	21 81       	ldd	r18, Z+1	; 0x01
    1c38:	2f 93       	push	r18
    1c3a:	20 81       	ld	r18, Z
    1c3c:	2f 93       	push	r18
    1c3e:	21 e7       	ldi	r18, 0x71	; 113
    1c40:	34 e0       	ldi	r19, 0x04	; 4
    1c42:	3f 93       	push	r19
    1c44:	2f 93       	push	r18
    1c46:	21 e0       	ldi	r18, 0x01	; 1
    1c48:	2f 93       	push	r18
    1c4a:	1f 92       	push	r1
    1c4c:	9f 93       	push	r25
    1c4e:	8f 93       	push	r24
    1c50:	0e 94 0f 24 	call	0x481e	; 0x481e <snprintf_P>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1c54:	8d b7       	in	r24, 0x3d	; 61
    1c56:	9e b7       	in	r25, 0x3e	; 62
    1c58:	08 96       	adiw	r24, 0x08	; 8
    1c5a:	8d bf       	out	0x3d, r24	; 61
    1c5c:	9e bf       	out	0x3e, r25	; 62
}
    1c5e:	85 e6       	ldi	r24, 0x65	; 101
    1c60:	08 95       	ret

00001c62 <CommandGetUidSize>:

CommandStatusIdType CommandGetUidSize(char* OutParam)
{
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.UidSize);
    1c62:	20 91 fb 24 	lds	r18, 0x24FB
    1c66:	1f 92       	push	r1
    1c68:	2f 93       	push	r18
    1c6a:	2e e6       	ldi	r18, 0x6E	; 110
    1c6c:	34 e0       	ldi	r19, 0x04	; 4
    1c6e:	3f 93       	push	r19
    1c70:	2f 93       	push	r18
    1c72:	21 e0       	ldi	r18, 0x01	; 1
    1c74:	2f 93       	push	r18
    1c76:	1f 92       	push	r1
    1c78:	9f 93       	push	r25
    1c7a:	8f 93       	push	r24
    1c7c:	0e 94 0f 24 	call	0x481e	; 0x481e <snprintf_P>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
    1c80:	8d b7       	in	r24, 0x3d	; 61
    1c82:	9e b7       	in	r25, 0x3e	; 62
    1c84:	08 96       	adiw	r24, 0x08	; 8
    1c86:	8d bf       	out	0x3d, r24	; 61
    1c88:	9e bf       	out	0x3e, r25	; 62
}
    1c8a:	85 e6       	ldi	r24, 0x65	; 101
    1c8c:	08 95       	ret

00001c8e <CommandExecButton>:

CommandStatusIdType CommandExecButton(char* OutMessage)
{
    ButtonGetActionList(OutMessage, TERMINAL_BUFFER_SIZE);
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	71 e0       	ldi	r23, 0x01	; 1
    1c92:	df dc       	rcall	.-1602   	; 0x1652 <ButtonGetActionList>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1c94:	85 e6       	ldi	r24, 0x65	; 101
    1c96:	08 95       	ret

00001c98 <CommandGetButton>:

CommandStatusIdType CommandGetButton(char* OutParam)
{
    ButtonGetActionByName(OutParam, TERMINAL_BUFFER_SIZE);
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	71 e0       	ldi	r23, 0x01	; 1
    1c9c:	13 dd       	rcall	.-1498   	; 0x16c4 <ButtonGetActionByName>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1c9e:	85 e6       	ldi	r24, 0x65	; 101
    1ca0:	08 95       	ret

00001ca2 <CommandSetButton>:

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(InParam)) {
    1ca2:	1e dd       	rcall	.-1476   	; 0x16e0 <ButtonSetActionByName>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <CommandSetButton+0xa>
        SettingsSave();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    1ca8:	8a ec       	ldi	r24, 0xCA	; 202
    }
}
    1caa:	08 95       	ret
}

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(InParam)) {
        SettingsSave();
    1cac:	81 dd       	rcall	.-1278   	; 0x17b0 <SettingsSave>
        return COMMAND_INFO_OK_ID;
    1cae:	84 e6       	ldi	r24, 0x64	; 100
    1cb0:	08 95       	ret

00001cb2 <CommandGetSetting>:
    }
}

CommandStatusIdType CommandGetSetting(char* OutParam)
{
	SettingsGetActiveByName(OutParam, TERMINAL_BUFFER_SIZE);
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	71 e0       	ldi	r23, 0x01	; 1
    1cb6:	0f de       	rcall	.-994    	; 0x18d6 <SettingsGetActiveByName>
	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1cb8:	85 e6       	ldi	r24, 0x65	; 101
    1cba:	08 95       	ret

00001cbc <CommandSetSetting>:

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
    1cbc:	13 de       	rcall	.-986    	; 0x18e4 <SettingsSetActiveByName>
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <CommandSetSetting+0xa>
		SettingsSave();
		return COMMAND_INFO_OK_ID;
	} else {
		return COMMAND_ERR_INVALID_PARAM_ID;
    1cc2:	8a ec       	ldi	r24, 0xCA	; 202
	}
}
    1cc4:	08 95       	ret
}

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
		SettingsSave();
    1cc6:	74 dd       	rcall	.-1304   	; 0x17b0 <SettingsSave>
		return COMMAND_INFO_OK_ID;
    1cc8:	84 e6       	ldi	r24, 0x64	; 100
    1cca:	08 95       	ret

00001ccc <CommandExecClear>:
	}
}

CommandStatusIdType CommandExecClear(char* OutParam)
{
	MemoryClear();
    1ccc:	0e 94 03 06 	call	0xc06	; 0xc06 <MemoryClear>
	return COMMAND_INFO_OK_ID;
}
    1cd0:	84 e6       	ldi	r24, 0x64	; 100
    1cd2:	08 95       	ret

00001cd4 <CommandExecHelp>:

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	7c 01       	movw	r14, r24
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */
    1ce4:	cf ef       	ldi	r28, 0xFF	; 255
    1ce6:	d0 e0       	ldi	r29, 0x00	; 0
	return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    1ce8:	07 e9       	ldi	r16, 0x97	; 151
    1cea:	15 e0       	ldi	r17, 0x05	; 5
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    1cec:	8c e2       	ldi	r24, 0x2C	; 44
    1cee:	d8 2e       	mov	r13, r24
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    1cf0:	b8 01       	movw	r22, r16
    1cf2:	80 e9       	ldi	r24, 0x90	; 144
    1cf4:	90 e2       	ldi	r25, 0x20	; 32
    1cf6:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    1cfa:	89 2b       	or	r24, r25
    1cfc:	39 f1       	breq	.+78     	; 0x1d4c <CommandExecHelp+0x78>
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    1cfe:	f8 01       	movw	r30, r16
    1d00:	44 91       	lpm	r20, Z
    1d02:	44 23       	and	r20, r20
    1d04:	79 f1       	breq	.+94     	; 0x1d64 <CommandExecHelp+0x90>
    1d06:	c1 32       	cpi	r28, 0x21	; 33
    1d08:	d1 05       	cpc	r29, r1
    1d0a:	60 f1       	brcs	.+88     	; 0x1d64 <CommandExecHelp+0x90>
    1d0c:	d7 01       	movw	r26, r14
    1d0e:	f8 01       	movw	r30, r16
    1d10:	04 c0       	rjmp	.+8      	; 0x1d1a <CommandExecHelp+0x46>
    1d12:	c0 32       	cpi	r28, 0x20	; 32
    1d14:	d1 05       	cpc	r29, r1
    1d16:	51 f0       	breq	.+20     	; 0x1d2c <CommandExecHelp+0x58>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	9c 01       	movw	r18, r24
            *OutMessage++ = c;
    1d20:	4c 93       	st	X, r20
            CommandName++;
    1d22:	31 96       	adiw	r30, 0x01	; 1
            ByteCount--;
    1d24:	21 97       	sbiw	r28, 0x01	; 1

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    1d26:	44 91       	lpm	r20, Z
    1d28:	41 11       	cpse	r20, r1
    1d2a:	f3 cf       	rjmp	.-26     	; 0x1d12 <CommandExecHelp+0x3e>
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    1d2c:	79 01       	movw	r14, r18
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	e8 1a       	sub	r14, r24
    1d32:	f8 0a       	sbc	r15, r24
    1d34:	f9 01       	movw	r30, r18
    1d36:	d0 82       	st	Z, r13
        ByteCount--;
    1d38:	21 97       	sbiw	r28, 0x01	; 1

        EntryPtr++;
    1d3a:	0a 5e       	subi	r16, 0xEA	; 234
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    1d3e:	b8 01       	movw	r22, r16
    1d40:	80 e9       	ldi	r24, 0x90	; 144
    1d42:	90 e2       	ldi	r25, 0x20	; 32
    1d44:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    1d48:	89 2b       	or	r24, r25
    1d4a:	c9 f6       	brne	.-78     	; 0x1cfe <CommandExecHelp+0x2a>
        ByteCount--;

        EntryPtr++;
    }

    *--OutMessage = '\0';
    1d4c:	d7 01       	movw	r26, r14
    1d4e:	11 97       	sbiw	r26, 0x01	; 1
    1d50:	1c 92       	st	X, r1

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1d52:	85 e6       	ldi	r24, 0x65	; 101
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	08 95       	ret

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    1d64:	97 01       	movw	r18, r14
    1d66:	e2 cf       	rjmp	.-60     	; 0x1d2c <CommandExecHelp+0x58>

00001d68 <CommandGetRssi>:

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}

CommandStatusIdType CommandGetRssi(char* OutParam)
{
    1d68:	fc 01       	movw	r30, r24
}

static inline
uint16_t AntennaLevelGet(void)
{
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
    1d6a:	20 91 20 02 	lds	r18, 0x0220
    1d6e:	20 68       	ori	r18, 0x80	; 128
    1d70:	20 93 20 02 	sts	0x0220, r18
	while( !(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm) );
    1d74:	20 91 23 02 	lds	r18, 0x0223
    1d78:	20 ff       	sbrs	r18, 0
    1d7a:	fc cf       	rjmp	.-8      	; 0x1d74 <CommandGetRssi+0xc>

	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	80 93 23 02 	sts	0x0223, r24

	int16_t Result = ADCA.CH0RES - ANTENNA_LEVEL_OFFSET;
    1d82:	a0 91 10 02 	lds	r26, 0x0210
    1d86:	b0 91 11 02 	lds	r27, 0x0211
    1d8a:	ae 5b       	subi	r26, 0xBE	; 190
    1d8c:	b1 09       	sbc	r27, r1
    1d8e:	b7 fd       	sbrc	r27, 7
    1d90:	1c c0       	rjmp	.+56     	; 0x1dca <CommandGetRssi+0x62>
	if (Result < 0) Result = 0;

	return (uint16_t) (((uint32_t) Result * ANTENNA_LEVEL_NUMERATOR) / ANTENNA_LEVEL_DENOMINATOR);
    1d92:	29 e6       	ldi	r18, 0x69	; 105
    1d94:	37 e5       	ldi	r19, 0x57	; 87
    1d96:	4b e0       	ldi	r20, 0x0B	; 11
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	0e 94 6f 23 	call	0x46de	; 0x46de <__mulshisi3>
    1d9e:	aa 27       	eor	r26, r26
    1da0:	bb 27       	eor	r27, r27
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    1da2:	9f 93       	push	r25
    1da4:	8f 93       	push	r24
    1da6:	27 e6       	ldi	r18, 0x67	; 103
    1da8:	34 e0       	ldi	r19, 0x04	; 4
    1daa:	3f 93       	push	r19
    1dac:	2f 93       	push	r18
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	8f 93       	push	r24
    1db2:	1f 92       	push	r1
    1db4:	ff 93       	push	r31
    1db6:	ef 93       	push	r30
    1db8:	0e 94 0f 24 	call	0x481e	; 0x481e <snprintf_P>
        PSTR("%5u mV"), AntennaLevelGet());


    return COMMAND_INFO_OK_WITH_TEXT_ID;
    1dbc:	8d b7       	in	r24, 0x3d	; 61
    1dbe:	9e b7       	in	r25, 0x3e	; 62
    1dc0:	08 96       	adiw	r24, 0x08	; 8
    1dc2:	8d bf       	out	0x3d, r24	; 61
    1dc4:	9e bf       	out	0x3e, r25	; 62
}
    1dc6:	85 e6       	ldi	r24, 0x65	; 101
    1dc8:	08 95       	ret
    1dca:	a0 e0       	ldi	r26, 0x00	; 0
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e1 cf       	rjmp	.-62     	; 0x1d92 <CommandGetRssi+0x2a>

00001dd0 <XModemReceive>:
    return Checksum;
}

void XModemReceive(XModemCallbackType TheCallbackFunc)
{
    State = STATE_RECEIVE_INIT;
    1dd0:	21 e0       	ldi	r18, 0x01	; 1
    1dd2:	20 93 a2 24 	sts	0x24A2, r18
    CurrentFrameNumber = FIRST_FRAME_NUMBER;
    1dd6:	20 93 a1 24 	sts	0x24A1, r18
    RetryCount = RECV_INIT_COUNT;
    1dda:	24 e1       	ldi	r18, 0x14	; 20
    1ddc:	20 93 9e 24 	sts	0x249E, r18
    RetryTimeout = RECV_INIT_TIMEOUT;
    1de0:	25 e0       	ldi	r18, 0x05	; 5
    1de2:	20 93 9d 24 	sts	0x249D, r18
    BlockAddress = 0;
    1de6:	10 92 97 24 	sts	0x2497, r1
    1dea:	10 92 98 24 	sts	0x2498, r1
    1dee:	10 92 99 24 	sts	0x2499, r1
    1df2:	10 92 9a 24 	sts	0x249A, r1

    CallbackFunc = TheCallbackFunc;
    1df6:	80 93 95 24 	sts	0x2495, r24
    1dfa:	90 93 96 24 	sts	0x2496, r25
    1dfe:	08 95       	ret

00001e00 <XModemSend>:
}

void XModemSend(XModemCallbackType TheCallbackFunc)
{
    State = STATE_SEND_INIT;
    1e00:	27 e0       	ldi	r18, 0x07	; 7
    1e02:	20 93 a2 24 	sts	0x24A2, r18
    RetryTimeout = SEND_INIT_TIMEOUT;
    1e06:	24 e6       	ldi	r18, 0x64	; 100
    1e08:	20 93 9d 24 	sts	0x249D, r18
    BlockAddress = 0;
    1e0c:	10 92 97 24 	sts	0x2497, r1
    1e10:	10 92 98 24 	sts	0x2498, r1
    1e14:	10 92 99 24 	sts	0x2499, r1
    1e18:	10 92 9a 24 	sts	0x249A, r1

    CallbackFunc = TheCallbackFunc;
    1e1c:	80 93 95 24 	sts	0x2495, r24
    1e20:	90 93 96 24 	sts	0x2496, r25
    1e24:	08 95       	ret

00001e26 <XModemProcessByte>:
}

bool XModemProcessByte(uint8_t Byte)
{
    1e26:	cf 93       	push	r28
    switch(State) {
    1e28:	40 91 a2 24 	lds	r20, 0x24A2
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	fa 01       	movw	r30, r20
    1e30:	31 97       	sbiw	r30, 0x01	; 1
    1e32:	e9 30       	cpi	r30, 0x09	; 9
    1e34:	f1 05       	cpc	r31, r1
    1e36:	20 f0       	brcs	.+8      	; 0x1e40 <XModemProcessByte+0x1a>
        /* Receive Ack */
        State = STATE_OFF;
        break;

    default:
        return false;
    1e38:	c0 e0       	ldi	r28, 0x00	; 0
        break;
    }

    return true;
}
    1e3a:	8c 2f       	mov	r24, r28
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    1e40:	e2 50       	subi	r30, 0x02	; 2
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__tablejump2__>
        }

        break;

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
    1e48:	20 91 a0 24 	lds	r18, 0x24A0
    1e4c:	90 91 a1 24 	lds	r25, 0x24A1
    1e50:	29 17       	cp	r18, r25
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <XModemProcessByte+0x30>
    1e54:	dd c0       	rjmp	.+442    	; 0x2010 <XModemProcessByte+0x1ea>
            } else {
                /* Data seems to be damaged */
                TerminalSendByte(BYTE_NAK);
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	89 2f       	mov	r24, r25
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	28 17       	cp	r18, r24
    1e60:	39 07       	cpc	r19, r25
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <XModemProcessByte+0x40>
    1e64:	20 c1       	rjmp	.+576    	; 0x20a6 <XModemProcessByte+0x280>
INLINE void TerminalSendByte(uint8_t Byte) { CDC_Device_SendByte(&TerminalHandle, Byte); }
    1e66:	68 e1       	ldi	r22, 0x18	; 24
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e2       	ldi	r25, 0x20	; 32
    1e6c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
        } else {
            /* This frame is completely out of order. Just cancel */
            TerminalSendByte(BYTE_CAN);
            State = STATE_OFF;
    1e70:	10 92 a2 24 	sts	0x24A2, r1
    default:
        return false;
        break;
    }

    return true;
    1e74:	c1 e0       	ldi	r28, 0x01	; 1
}
    1e76:	8c 2f       	mov	r24, r28
    1e78:	cf 91       	pop	r28
    1e7a:	08 95       	ret

        break;

    case STATE_SEND_INIT:
        /* Start sending on NAK */
        if (Byte == BYTE_NAK) {
    1e7c:	85 31       	cpi	r24, 0x15	; 21
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <XModemProcessByte+0x5c>
    1e80:	50 c0       	rjmp	.+160    	; 0x1f22 <XModemProcessByte+0xfc>
        }

        /* Fallthrough */

    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
    1e82:	88 31       	cpi	r24, 0x18	; 24
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <XModemProcessByte+0x62>
    1e86:	06 c1       	rjmp	.+524    	; 0x2094 <XModemProcessByte+0x26e>
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
    1e88:	86 30       	cpi	r24, 0x06	; 6
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <XModemProcessByte+0x68>
    1e8c:	29 c1       	rjmp	.+594    	; 0x20e0 <XModemProcessByte+0x2ba>
                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
            }
        } else if (Byte == BYTE_NAK){
    1e8e:	85 31       	cpi	r24, 0x15	; 21
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <XModemProcessByte+0x6e>
    1e92:	98 c0       	rjmp	.+304    	; 0x1fc4 <XModemProcessByte+0x19e>
    default:
        return false;
        break;
    }

    return true;
    1e94:	c1 e0       	ldi	r28, 0x01	; 1
}
    1e96:	8c 2f       	mov	r24, r28
    1e98:	cf 91       	pop	r28
    1e9a:	08 95       	ret

        break;

    case STATE_RECEIVE_FRAMENUM1:
        /* Store frame number */
        ReceivedFrameNumber = Byte;
    1e9c:	80 93 a0 24 	sts	0x24A0, r24
        State = STATE_RECEIVE_FRAMENUM2;
    1ea0:	84 e0       	ldi	r24, 0x04	; 4
    1ea2:	80 93 a2 24 	sts	0x24A2, r24
    default:
        return false;
        break;
    }

    return true;
    1ea6:	c1 e0       	ldi	r28, 0x01	; 1
}
    1ea8:	8c 2f       	mov	r24, r28
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret
        ReceivedFrameNumber = Byte;
        State = STATE_RECEIVE_FRAMENUM2;
        break;

    case STATE_RECEIVE_FRAMENUM2:
        if (Byte == (255 - ReceivedFrameNumber)) {
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	40 91 a0 24 	lds	r20, 0x24A0
    1eb4:	2f ef       	ldi	r18, 0xFF	; 255
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	24 1b       	sub	r18, r20
    1eba:	31 09       	sbc	r19, r1
    1ebc:	82 17       	cp	r24, r18
    1ebe:	93 07       	cpc	r25, r19
    1ec0:	31 f5       	brne	.+76     	; 0x1f0e <XModemProcessByte+0xe8>
            /* frame-number check passed. */
            State = STATE_RECEIVE_DATA;
    1ec2:	85 e0       	ldi	r24, 0x05	; 5
    1ec4:	80 93 a2 24 	sts	0x24A2, r24
    default:
        return false;
        break;
    }

    return true;
    1ec8:	c1 e0       	ldi	r28, 0x01	; 1
    1eca:	b7 cf       	rjmp	.-146    	; 0x1e3a <XModemProcessByte+0x14>
bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <XModemProcessByte+0xac>
    1ed0:	ec c0       	rjmp	.+472    	; 0x20aa <XModemProcessByte+0x284>
            /* Next frame incoming */
            BufferIdx = 0;
            Checksum = CHECKSUM_INIT_VALUE;
            State = STATE_RECEIVE_FRAMENUM1;
        } else if (Byte == BYTE_EOT) {
    1ed2:	84 30       	cpi	r24, 0x04	; 4
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <XModemProcessByte+0xb2>
    1ed6:	de c0       	rjmp	.+444    	; 0x2094 <XModemProcessByte+0x26e>
            /* Transmission finished */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_CAN) {
    1ed8:	88 31       	cpi	r24, 0x18	; 24
    1eda:	51 f2       	breq	.-108    	; 0x1e70 <XModemProcessByte+0x4a>
    default:
        return false;
        break;
    }

    return true;
    1edc:	c1 e0       	ldi	r28, 0x01	; 1
    1ede:	db cf       	rjmp	.-74     	; 0x1e96 <XModemProcessByte+0x70>

        break;

    case STATE_RECEIVE_DATA:
        /* Process byte and update checksum */
        TerminalBuffer[BufferIdx++] = Byte;
    1ee0:	40 91 9b 24 	lds	r20, 0x249B
    1ee4:	50 91 9c 24 	lds	r21, 0x249C
    1ee8:	9a 01       	movw	r18, r20
    1eea:	2f 5f       	subi	r18, 0xFF	; 255
    1eec:	3f 4f       	sbci	r19, 0xFF	; 255
    1eee:	20 93 9b 24 	sts	0x249B, r18
    1ef2:	30 93 9c 24 	sts	0x249C, r19
    1ef6:	fa 01       	movw	r30, r20
    1ef8:	e0 5f       	subi	r30, 0xF0	; 240
    1efa:	fa 4d       	sbci	r31, 0xDA	; 218
    1efc:	80 83       	st	Z, r24

        if (BufferIdx == XMODEM_BLOCK_SIZE) {
    1efe:	20 38       	cpi	r18, 0x80	; 128
    1f00:	31 05       	cpc	r19, r1
    1f02:	41 f6       	brne	.-112    	; 0x1e94 <XModemProcessByte+0x6e>
            /* Block full */
            State = STATE_RECEIVE_PROCESS;
    1f04:	86 e0       	ldi	r24, 0x06	; 6
    1f06:	80 93 a2 24 	sts	0x24A2, r24
    default:
        return false;
        break;
    }

    return true;
    1f0a:	c1 e0       	ldi	r28, 0x01	; 1
    1f0c:	96 cf       	rjmp	.-212    	; 0x1e3a <XModemProcessByte+0x14>
    1f0e:	65 e1       	ldi	r22, 0x15	; 21
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e2       	ldi	r25, 0x20	; 32
    1f14:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
            /* This is a retransmission */
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	80 93 a2 24 	sts	0x24A2, r24
    default:
        return false;
        break;
    }

    return true;
    1f1e:	c1 e0       	ldi	r28, 0x01	; 1
    1f20:	8c cf       	rjmp	.-232    	; 0x1e3a <XModemProcessByte+0x14>
    1f22:	81 e0       	ldi	r24, 0x01	; 1
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
            /* Acknowledge. Proceed to next frame, get data and calc checksum */
            CurrentFrameNumber++;
    1f24:	80 93 a1 24 	sts	0x24A1, r24

            if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    1f28:	40 91 97 24 	lds	r20, 0x2497
    1f2c:	50 91 98 24 	lds	r21, 0x2498
    1f30:	60 91 99 24 	lds	r22, 0x2499
    1f34:	70 91 9a 24 	lds	r23, 0x249A
    1f38:	e0 91 95 24 	lds	r30, 0x2495
    1f3c:	f0 91 96 24 	lds	r31, 0x2496
    1f40:	20 e8       	ldi	r18, 0x80	; 128
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	80 e1       	ldi	r24, 0x10	; 16
    1f46:	95 e2       	ldi	r25, 0x25	; 37
    1f48:	09 95       	icall
    1f4a:	c8 2f       	mov	r28, r24
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <XModemProcessByte+0x12c>
    1f50:	b7 c0       	rjmp	.+366    	; 0x20c0 <XModemProcessByte+0x29a>
    1f52:	61 e0       	ldi	r22, 0x01	; 1
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e2       	ldi	r25, 0x20	; 32
    1f58:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
    1f5c:	60 91 a1 24 	lds	r22, 0x24A1
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e2       	ldi	r25, 0x20	; 32
    1f64:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
                TerminalSendByte(BYTE_SOH);
                TerminalSendByte(CurrentFrameNumber);
                TerminalSendByte(255 - CurrentFrameNumber);
    1f68:	60 91 a1 24 	lds	r22, 0x24A1
    1f6c:	60 95       	com	r22
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e2       	ldi	r25, 0x20	; 32
    1f72:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
                TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    1f76:	60 e8       	ldi	r22, 0x80	; 128
    1f78:	70 e0       	ldi	r23, 0x00	; 0
    1f7a:	80 e1       	ldi	r24, 0x10	; 16
    1f7c:	95 e2       	ldi	r25, 0x25	; 37
    1f7e:	d8 dc       	rcall	.-1616   	; 0x1930 <TerminalSendBlock>
    1f80:	e0 e1       	ldi	r30, 0x10	; 16
    1f82:	f5 e2       	ldi	r31, 0x25	; 37
static uint32_t BlockAddress;

static XModemCallbackType CallbackFunc;

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        Checksum += *DataPtr++;
    1f86:	81 91       	ld	r24, Z+
    1f88:	68 0f       	add	r22, r24

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    1f8a:	85 e2       	ldi	r24, 0x25	; 37
    1f8c:	e0 39       	cpi	r30, 0x90	; 144
    1f8e:	f8 07       	cpc	r31, r24
    1f90:	d1 f7       	brne	.-12     	; 0x1f86 <XModemProcessByte+0x160>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e2       	ldi	r25, 0x20	; 32
    1f96:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
                TerminalSendByte(CurrentFrameNumber);
                TerminalSendByte(255 - CurrentFrameNumber);
                TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));

                BlockAddress += XMODEM_BLOCK_SIZE;
    1f9a:	40 91 97 24 	lds	r20, 0x2497
    1f9e:	50 91 98 24 	lds	r21, 0x2498
    1fa2:	60 91 99 24 	lds	r22, 0x2499
    1fa6:	70 91 9a 24 	lds	r23, 0x249A
    1faa:	40 58       	subi	r20, 0x80	; 128
    1fac:	5f 4f       	sbci	r21, 0xFF	; 255
    1fae:	6f 4f       	sbci	r22, 0xFF	; 255
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	40 93 97 24 	sts	0x2497, r20
    1fb6:	50 93 98 24 	sts	0x2498, r21
    1fba:	60 93 99 24 	sts	0x2499, r22
    1fbe:	70 93 9a 24 	sts	0x249A, r23
    1fc2:	3b cf       	rjmp	.-394    	; 0x1e3a <XModemProcessByte+0x14>
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e2       	ldi	r25, 0x20	; 32
    1fca:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
    1fce:	60 91 a1 24 	lds	r22, 0x24A1
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e2       	ldi	r25, 0x20	; 32
    1fd6:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
            }
        } else if (Byte == BYTE_NAK){
            /* Resend frame */
            TerminalSendByte(BYTE_SOH);
            TerminalSendByte(CurrentFrameNumber);
            TerminalSendByte(255 - CurrentFrameNumber);
    1fda:	60 91 a1 24 	lds	r22, 0x24A1
    1fde:	60 95       	com	r22
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e2       	ldi	r25, 0x20	; 32
    1fe4:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
            TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    1fe8:	60 e8       	ldi	r22, 0x80	; 128
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	80 e1       	ldi	r24, 0x10	; 16
    1fee:	95 e2       	ldi	r25, 0x25	; 37
    1ff0:	9f dc       	rcall	.-1730   	; 0x1930 <TerminalSendBlock>
    1ff2:	e0 e1       	ldi	r30, 0x10	; 16
    1ff4:	f5 e2       	ldi	r31, 0x25	; 37
static uint32_t BlockAddress;

static XModemCallbackType CallbackFunc;

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        Checksum += *DataPtr++;
    1ff8:	81 91       	ld	r24, Z+
    1ffa:	68 0f       	add	r22, r24

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    1ffc:	25 e2       	ldi	r18, 0x25	; 37
    1ffe:	e0 39       	cpi	r30, 0x90	; 144
    2000:	f2 07       	cpc	r31, r18
    2002:	d1 f7       	brne	.-12     	; 0x1ff8 <XModemProcessByte+0x1d2>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e2       	ldi	r25, 0x20	; 32
    2008:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
    default:
        return false;
        break;
    }

    return true;
    200c:	c1 e0       	ldi	r28, 0x01	; 1
    200e:	43 cf       	rjmp	.-378    	; 0x1e96 <XModemProcessByte+0x70>
    2010:	e0 e1       	ldi	r30, 0x10	; 16
    2012:	f5 e2       	ldi	r31, 0x25	; 37
        }

        break;

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
    2014:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        Checksum += *DataPtr++;
    2016:	21 91       	ld	r18, Z+
    2018:	92 0f       	add	r25, r18

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    201a:	25 e2       	ldi	r18, 0x25	; 37
    201c:	e0 39       	cpi	r30, 0x90	; 144
    201e:	f2 07       	cpc	r31, r18
    2020:	d1 f7       	brne	.-12     	; 0x2016 <XModemProcessByte+0x1f0>

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
            /* This is the expected frame. Calculate and verify checksum */

            if (CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE) == Byte) {
    2022:	89 13       	cpse	r24, r25
    2024:	74 cf       	rjmp	.-280    	; 0x1f0e <XModemProcessByte+0xe8>
                /* Checksum is valid. Pass received data to callback function */
                if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    2026:	40 91 97 24 	lds	r20, 0x2497
    202a:	50 91 98 24 	lds	r21, 0x2498
    202e:	60 91 99 24 	lds	r22, 0x2499
    2032:	70 91 9a 24 	lds	r23, 0x249A
    2036:	e0 91 95 24 	lds	r30, 0x2495
    203a:	f0 91 96 24 	lds	r31, 0x2496
    203e:	20 e8       	ldi	r18, 0x80	; 128
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	80 e1       	ldi	r24, 0x10	; 16
    2044:	95 e2       	ldi	r25, 0x25	; 37
    2046:	09 95       	icall
    2048:	c8 2f       	mov	r28, r24
    204a:	88 23       	and	r24, r24
    204c:	09 f4       	brne	.+2      	; 0x2050 <XModemProcessByte+0x22a>
    204e:	42 c0       	rjmp	.+132    	; 0x20d4 <XModemProcessByte+0x2ae>
                    /* Proceed to next frame and send ACK */
                    CurrentFrameNumber++;
    2050:	80 91 a1 24 	lds	r24, 0x24A1
    2054:	8f 5f       	subi	r24, 0xFF	; 255
    2056:	80 93 a1 24 	sts	0x24A1, r24
                    BlockAddress += XMODEM_BLOCK_SIZE;
    205a:	40 91 97 24 	lds	r20, 0x2497
    205e:	50 91 98 24 	lds	r21, 0x2498
    2062:	60 91 99 24 	lds	r22, 0x2499
    2066:	70 91 9a 24 	lds	r23, 0x249A
    206a:	40 58       	subi	r20, 0x80	; 128
    206c:	5f 4f       	sbci	r21, 0xFF	; 255
    206e:	6f 4f       	sbci	r22, 0xFF	; 255
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	40 93 97 24 	sts	0x2497, r20
    2076:	50 93 98 24 	sts	0x2498, r21
    207a:	60 93 99 24 	sts	0x2499, r22
    207e:	70 93 9a 24 	sts	0x249A, r23
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    2082:	66 e0       	ldi	r22, 0x06	; 6
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e2       	ldi	r25, 0x20	; 32
    2088:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
                    TerminalSendChar(BYTE_ACK);
                    State = STATE_RECEIVE_WAIT;
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	80 93 a2 24 	sts	0x24A2, r24
    2092:	d3 ce       	rjmp	.-602    	; 0x1e3a <XModemProcessByte+0x14>
INLINE void TerminalSendByte(uint8_t Byte) { CDC_Device_SendByte(&TerminalHandle, Byte); }
    2094:	66 e0       	ldi	r22, 0x06	; 6
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e2       	ldi	r25, 0x20	; 32
    209a:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
            Checksum = CHECKSUM_INIT_VALUE;
            State = STATE_RECEIVE_FRAMENUM1;
        } else if (Byte == BYTE_EOT) {
            /* Transmission finished */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
    209e:	10 92 a2 24 	sts	0x24A2, r1
    default:
        return false;
        break;
    }

    return true;
    20a2:	c1 e0       	ldi	r28, 0x01	; 1
    20a4:	ca ce       	rjmp	.-620    	; 0x1e3a <XModemProcessByte+0x14>
    20a6:	66 e0       	ldi	r22, 0x06	; 6
    20a8:	33 cf       	rjmp	.-410    	; 0x1f10 <XModemProcessByte+0xea>
    switch(State) {
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
            /* Next frame incoming */
            BufferIdx = 0;
    20aa:	10 92 9b 24 	sts	0x249B, r1
    20ae:	10 92 9c 24 	sts	0x249C, r1
            Checksum = CHECKSUM_INIT_VALUE;
    20b2:	10 92 9f 24 	sts	0x249F, r1
            State = STATE_RECEIVE_FRAMENUM1;
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	80 93 a2 24 	sts	0x24A2, r24
    default:
        return false;
        break;
    }

    return true;
    20bc:	c1 e0       	ldi	r28, 0x01	; 1
    20be:	bd ce       	rjmp	.-646    	; 0x1e3a <XModemProcessByte+0x14>
    20c0:	64 e0       	ldi	r22, 0x04	; 4
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e2       	ldi	r25, 0x20	; 32
    20c6:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));

                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
    20ca:	89 e0       	ldi	r24, 0x09	; 9
    20cc:	80 93 a2 24 	sts	0x24A2, r24
    default:
        return false;
        break;
    }

    return true;
    20d0:	c1 e0       	ldi	r28, 0x01	; 1
    20d2:	b3 ce       	rjmp	.-666    	; 0x1e3a <XModemProcessByte+0x14>
    20d4:	68 e1       	ldi	r22, 0x18	; 24
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e2       	ldi	r25, 0x20	; 32
    20da:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
    20de:	c3 ce       	rjmp	.-634    	; 0x1e66 <XModemProcessByte+0x40>
    20e0:	80 91 a1 24 	lds	r24, 0x24A1
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	1e cf       	rjmp	.-452    	; 0x1f24 <XModemProcessByte+0xfe>

000020e8 <XModemTick>:
}

void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    20e8:	80 91 a2 24 	lds	r24, 0x24A2
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	71 f0       	breq	.+28     	; 0x210c <XModemTick+0x24>
    20f0:	87 30       	cpi	r24, 0x07	; 7
    20f2:	59 f4       	brne	.+22     	; 0x210a <XModemTick+0x22>
            RetryTimeout = RECV_INIT_TIMEOUT;
        }
        break;

    case STATE_SEND_INIT:
        if (RetryTimeout-- == 0) {
    20f4:	80 91 9d 24 	lds	r24, 0x249D
    20f8:	9f ef       	ldi	r25, 0xFF	; 255
    20fa:	98 0f       	add	r25, r24
    20fc:	90 93 9d 24 	sts	0x249D, r25
    2100:	81 11       	cpse	r24, r1
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <XModemTick+0x20>
            /* Abort */
            State = STATE_OFF;
    2104:	10 92 a2 24 	sts	0x24A2, r1
    2108:	08 95       	ret
    210a:	08 95       	ret
void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    case STATE_RECEIVE_INIT:
        if (RetryTimeout-- == 0) {
    210c:	80 91 9d 24 	lds	r24, 0x249D
    2110:	9f ef       	ldi	r25, 0xFF	; 255
    2112:	98 0f       	add	r25, r24
    2114:	90 93 9d 24 	sts	0x249D, r25
    2118:	81 11       	cpse	r24, r1
    211a:	f6 cf       	rjmp	.-20     	; 0x2108 <XModemTick+0x20>
            if (RetryCount-- > 0) {
    211c:	80 91 9e 24 	lds	r24, 0x249E
    2120:	9f ef       	ldi	r25, 0xFF	; 255
    2122:	98 0f       	add	r25, r24
    2124:	90 93 9e 24 	sts	0x249E, r25
    2128:	81 11       	cpse	r24, r1
    212a:	06 c0       	rjmp	.+12     	; 0x2138 <XModemTick+0x50>
                /* Put out communication request */
                TerminalSendChar(BYTE_NAK);
            } else {
                /* Just shut off after some time. */
                State = STATE_OFF;
    212c:	10 92 a2 24 	sts	0x24A2, r1
            }

            RetryTimeout = RECV_INIT_TIMEOUT;
    2130:	85 e0       	ldi	r24, 0x05	; 5
    2132:	80 93 9d 24 	sts	0x249D, r24
    2136:	08 95       	ret
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    2138:	65 e1       	ldi	r22, 0x15	; 21
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e2       	ldi	r25, 0x20	; 32
    213e:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <CDC_Device_SendByte>
    2142:	f6 cf       	rjmp	.-20     	; 0x2130 <XModemTick+0x48>

00002144 <CommandLineProcessByte>:
void CommandLineInit(void)
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
  if (IS_CHARACTER(Byte)){
    214a:	9f eb       	ldi	r25, 0xBF	; 191
    214c:	98 0f       	add	r25, r24
    214e:	9a 31       	cpi	r25, 0x1A	; 26
    2150:	28 f0       	brcs	.+10     	; 0x215c <CommandLineProcessByte+0x18>
    2152:	9f e9       	ldi	r25, 0x9F	; 159
    2154:	98 0f       	add	r25, r24
    2156:	9a 31       	cpi	r25, 0x1A	; 26
    2158:	c0 f4       	brcc	.+48     	; 0x218a <CommandLineProcessByte+0x46>
    /* Store uppercase character */
    if (IS_LOWERCASE(Byte)) {
      Byte = TO_UPPERCASE(Byte);
    215a:	80 52       	subi	r24, 0x20	; 32
    }

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
    215c:	20 91 a3 24 	lds	r18, 0x24A3
    2160:	30 91 a4 24 	lds	r19, 0x24A4
    2164:	2f 3f       	cpi	r18, 0xFF	; 255
    2166:	31 05       	cpc	r19, r1
    2168:	58 f4       	brcc	.+22     	; 0x2180 <CommandLineProcessByte+0x3c>
      TerminalBuffer[BufferIdx++] = Byte;
    216a:	a9 01       	movw	r20, r18
    216c:	4f 5f       	subi	r20, 0xFF	; 255
    216e:	5f 4f       	sbci	r21, 0xFF	; 255
    2170:	40 93 a3 24 	sts	0x24A3, r20
    2174:	50 93 a4 24 	sts	0x24A4, r21
    2178:	f9 01       	movw	r30, r18
    217a:	e0 5f       	subi	r30, 0xF0	; 240
    217c:	fa 4d       	sbci	r31, 0xDA	; 218
    217e:	80 83       	st	Z, r24
  } else {
    /* Ignore other chars */
  }

  return true;
}
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	08 95       	ret
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
  if (IS_CHARACTER(Byte)){
    218a:	90 ed       	ldi	r25, 0xD0	; 208
    218c:	98 0f       	add	r25, r24
    218e:	9a 30       	cpi	r25, 0x0A	; 10
    2190:	28 f3       	brcs	.-54     	; 0x215c <CommandLineProcessByte+0x18>
    2192:	8f 35       	cpi	r24, 0x5F	; 95
    2194:	19 f3       	breq	.-58     	; 0x215c <CommandLineProcessByte+0x18>
    2196:	98 2f       	mov	r25, r24
    2198:	9d 7f       	andi	r25, 0xFD	; 253
    219a:	9d 33       	cpi	r25, 0x3D	; 61
    219c:	f9 f2       	breq	.-66     	; 0x215c <CommandLineProcessByte+0x18>

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    219e:	8d 30       	cpi	r24, 0x0D	; 13
    21a0:	a9 f0       	breq	.+42     	; 0x21cc <CommandLineProcessByte+0x88>
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    21a2:	88 30       	cpi	r24, 0x08	; 8
    21a4:	39 f0       	breq	.+14     	; 0x21b4 <CommandLineProcessByte+0x70>
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
      BufferIdx--;
    }
  } else if (Byte == 0x1B){
    21a6:	8b 31       	cpi	r24, 0x1B	; 27
    21a8:	59 f7       	brne	.-42     	; 0x2180 <CommandLineProcessByte+0x3c>
    /* Drop buffer on escape */
    BufferIdx = 0;
    21aa:	10 92 a3 24 	sts	0x24A3, r1
    21ae:	10 92 a4 24 	sts	0x24A4, r1
    21b2:	e6 cf       	rjmp	.-52     	; 0x2180 <CommandLineProcessByte+0x3c>
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
    21b4:	80 91 a3 24 	lds	r24, 0x24A3
    21b8:	90 91 a4 24 	lds	r25, 0x24A4
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	01 f3       	breq	.-64     	; 0x2180 <CommandLineProcessByte+0x3c>
      BufferIdx--;
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	80 93 a3 24 	sts	0x24A3, r24
    21c6:	90 93 a4 24 	sts	0x24A4, r25
    21ca:	da cf       	rjmp	.-76     	; 0x2180 <CommandLineProcessByte+0x3c>
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    21cc:	e0 91 a3 24 	lds	r30, 0x24A3
    21d0:	f0 91 a4 24 	lds	r31, 0x24A4
    21d4:	e0 5f       	subi	r30, 0xF0	; 240
    21d6:	fa 4d       	sbci	r31, 0xDA	; 218
    21d8:	10 82       	st	Z, r1
    BufferIdx = 0;
    21da:	10 92 a3 24 	sts	0x24A3, r1
    21de:	10 92 a4 24 	sts	0x24A4, r1
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Do some sanity check first */
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    21e2:	80 91 10 25 	lds	r24, 0x2510
    21e6:	88 23       	and	r24, r24
    21e8:	09 f4       	brne	.+2      	; 0x21ec <CommandLineProcessByte+0xa8>
    21ea:	a0 c0       	rjmp	.+320    	; 0x232c <CommandLineProcessByte+0x1e8>
    21ec:	8d 7f       	andi	r24, 0xFD	; 253
    21ee:	8d 33       	cpi	r24, 0x3D	; 61
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <CommandLineProcessByte+0xb0>
    21f2:	9c c0       	rjmp	.+312    	; 0x232c <CommandLineProcessByte+0x1e8>
    21f4:	e1 e1       	ldi	r30, 0x11	; 17
    21f6:	f5 e2       	ldi	r31, 0x25	; 37
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <CommandLineProcessByte+0xbe>
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    21fa:	1f 33       	cpi	r17, 0x3F	; 63
    21fc:	31 f0       	breq	.+12     	; 0x220a <CommandLineProcessByte+0xc6>
    21fe:	1d 33       	cpi	r17, 0x3D	; 61
    2200:	21 f0       	breq	.+8      	; 0x220a <CommandLineProcessByte+0xc6>
      pCommandDelimiter++;
    2202:	ef 01       	movw	r28, r30
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    2204:	11 91       	ld	r17, Z+
    2206:	11 11       	cpse	r17, r1
    2208:	f8 cf       	rjmp	.-16     	; 0x21fa <CommandLineProcessByte+0xb6>
      pCommandDelimiter++;

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';
    220a:	18 82       	st	Y, r1

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    220c:	67 e9       	ldi	r22, 0x97	; 151
    220e:	75 e0       	ldi	r23, 0x05	; 5
    2210:	80 e1       	ldi	r24, 0x10	; 16
    2212:	95 e2       	ldi	r25, 0x25	; 37
    2214:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    2218:	89 2b       	or	r24, r25
    221a:	09 f4       	brne	.+2      	; 0x221e <CommandLineProcessByte+0xda>
    221c:	36 c1       	rjmp	.+620    	; 0x248a <CommandLineProcessByte+0x346>
    221e:	6d ea       	ldi	r22, 0xAD	; 173
    2220:	75 e0       	ldi	r23, 0x05	; 5
    2222:	80 e1       	ldi	r24, 0x10	; 16
    2224:	95 e2       	ldi	r25, 0x25	; 37
    2226:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    222a:	89 2b       	or	r24, r25
    222c:	09 f4       	brne	.+2      	; 0x2230 <CommandLineProcessByte+0xec>
    222e:	2a c1       	rjmp	.+596    	; 0x2484 <CommandLineProcessByte+0x340>
    2230:	63 ec       	ldi	r22, 0xC3	; 195
    2232:	75 e0       	ldi	r23, 0x05	; 5
    2234:	80 e1       	ldi	r24, 0x10	; 16
    2236:	95 e2       	ldi	r25, 0x25	; 37
    2238:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    223c:	89 2b       	or	r24, r25
    223e:	09 f4       	brne	.+2      	; 0x2242 <CommandLineProcessByte+0xfe>
    2240:	1e c1       	rjmp	.+572    	; 0x247e <CommandLineProcessByte+0x33a>
    2242:	69 ed       	ldi	r22, 0xD9	; 217
    2244:	75 e0       	ldi	r23, 0x05	; 5
    2246:	80 e1       	ldi	r24, 0x10	; 16
    2248:	95 e2       	ldi	r25, 0x25	; 37
    224a:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    224e:	89 2b       	or	r24, r25
    2250:	09 f4       	brne	.+2      	; 0x2254 <CommandLineProcessByte+0x110>
    2252:	12 c1       	rjmp	.+548    	; 0x2478 <CommandLineProcessByte+0x334>
    2254:	6f ee       	ldi	r22, 0xEF	; 239
    2256:	75 e0       	ldi	r23, 0x05	; 5
    2258:	80 e1       	ldi	r24, 0x10	; 16
    225a:	95 e2       	ldi	r25, 0x25	; 37
    225c:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    2260:	89 2b       	or	r24, r25
    2262:	09 f4       	brne	.+2      	; 0x2266 <CommandLineProcessByte+0x122>
    2264:	06 c1       	rjmp	.+524    	; 0x2472 <CommandLineProcessByte+0x32e>
    2266:	65 e0       	ldi	r22, 0x05	; 5
    2268:	76 e0       	ldi	r23, 0x06	; 6
    226a:	80 e1       	ldi	r24, 0x10	; 16
    226c:	95 e2       	ldi	r25, 0x25	; 37
    226e:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    2272:	89 2b       	or	r24, r25
    2274:	09 f4       	brne	.+2      	; 0x2278 <CommandLineProcessByte+0x134>
    2276:	fa c0       	rjmp	.+500    	; 0x246c <CommandLineProcessByte+0x328>
    2278:	6b e1       	ldi	r22, 0x1B	; 27
    227a:	76 e0       	ldi	r23, 0x06	; 6
    227c:	80 e1       	ldi	r24, 0x10	; 16
    227e:	95 e2       	ldi	r25, 0x25	; 37
    2280:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    2284:	89 2b       	or	r24, r25
    2286:	09 f4       	brne	.+2      	; 0x228a <CommandLineProcessByte+0x146>
    2288:	ee c0       	rjmp	.+476    	; 0x2466 <CommandLineProcessByte+0x322>
    228a:	61 e3       	ldi	r22, 0x31	; 49
    228c:	76 e0       	ldi	r23, 0x06	; 6
    228e:	80 e1       	ldi	r24, 0x10	; 16
    2290:	95 e2       	ldi	r25, 0x25	; 37
    2292:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    2296:	89 2b       	or	r24, r25
    2298:	09 f4       	brne	.+2      	; 0x229c <CommandLineProcessByte+0x158>
    229a:	e2 c0       	rjmp	.+452    	; 0x2460 <CommandLineProcessByte+0x31c>
    229c:	67 e4       	ldi	r22, 0x47	; 71
    229e:	76 e0       	ldi	r23, 0x06	; 6
    22a0:	80 e1       	ldi	r24, 0x10	; 16
    22a2:	95 e2       	ldi	r25, 0x25	; 37
    22a4:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    22a8:	89 2b       	or	r24, r25
    22aa:	09 f4       	brne	.+2      	; 0x22ae <CommandLineProcessByte+0x16a>
    22ac:	d6 c0       	rjmp	.+428    	; 0x245a <CommandLineProcessByte+0x316>
    22ae:	6d e5       	ldi	r22, 0x5D	; 93
    22b0:	76 e0       	ldi	r23, 0x06	; 6
    22b2:	80 e1       	ldi	r24, 0x10	; 16
    22b4:	95 e2       	ldi	r25, 0x25	; 37
    22b6:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    22ba:	89 2b       	or	r24, r25
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <CommandLineProcessByte+0x17c>
    22be:	ca c0       	rjmp	.+404    	; 0x2454 <CommandLineProcessByte+0x310>
    22c0:	63 e7       	ldi	r22, 0x73	; 115
    22c2:	76 e0       	ldi	r23, 0x06	; 6
    22c4:	80 e1       	ldi	r24, 0x10	; 16
    22c6:	95 e2       	ldi	r25, 0x25	; 37
    22c8:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    22cc:	89 2b       	or	r24, r25
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <CommandLineProcessByte+0x18e>
    22d0:	be c0       	rjmp	.+380    	; 0x244e <CommandLineProcessByte+0x30a>
    22d2:	69 e8       	ldi	r22, 0x89	; 137
    22d4:	76 e0       	ldi	r23, 0x06	; 6
    22d6:	80 e1       	ldi	r24, 0x10	; 16
    22d8:	95 e2       	ldi	r25, 0x25	; 37
    22da:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    22de:	89 2b       	or	r24, r25
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <CommandLineProcessByte+0x1a0>
    22e2:	b2 c0       	rjmp	.+356    	; 0x2448 <CommandLineProcessByte+0x304>
    22e4:	6f e9       	ldi	r22, 0x9F	; 159
    22e6:	76 e0       	ldi	r23, 0x06	; 6
    22e8:	80 e1       	ldi	r24, 0x10	; 16
    22ea:	95 e2       	ldi	r25, 0x25	; 37
    22ec:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    22f0:	89 2b       	or	r24, r25
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <CommandLineProcessByte+0x1b2>
    22f4:	a6 c0       	rjmp	.+332    	; 0x2442 <CommandLineProcessByte+0x2fe>
    22f6:	65 eb       	ldi	r22, 0xB5	; 181
    22f8:	76 e0       	ldi	r23, 0x06	; 6
    22fa:	80 e1       	ldi	r24, 0x10	; 16
    22fc:	95 e2       	ldi	r25, 0x25	; 37
    22fe:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    2302:	89 2b       	or	r24, r25
    2304:	09 f4       	brne	.+2      	; 0x2308 <CommandLineProcessByte+0x1c4>
    2306:	9a c0       	rjmp	.+308    	; 0x243c <CommandLineProcessByte+0x2f8>
    2308:	6b ec       	ldi	r22, 0xCB	; 203
    230a:	76 e0       	ldi	r23, 0x06	; 6
    230c:	80 e1       	ldi	r24, 0x10	; 16
    230e:	95 e2       	ldi	r25, 0x25	; 37
    2310:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    2314:	89 2b       	or	r24, r25
    2316:	09 f4       	brne	.+2      	; 0x231a <CommandLineProcessByte+0x1d6>
    2318:	8e c0       	rjmp	.+284    	; 0x2436 <CommandLineProcessByte+0x2f2>
    231a:	61 ee       	ldi	r22, 0xE1	; 225
    231c:	76 e0       	ldi	r23, 0x06	; 6
    231e:	80 e1       	ldi	r24, 0x10	; 16
    2320:	95 e2       	ldi	r25, 0x25	; 37
    2322:	0e 94 ee 23 	call	0x47dc	; 0x47dc <strcmp_P>
    2326:	89 2b       	or	r24, r25
    2328:	09 f4       	brne	.+2      	; 0x232c <CommandLineProcessByte+0x1e8>
    232a:	52 c0       	rjmp	.+164    	; 0x23d0 <CommandLineProcessByte+0x28c>

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
    232c:	88 ec       	ldi	r24, 0xC8	; 200
}

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
    232e:	c0 e0       	ldi	r28, 0x00	; 0
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    2330:	e1 ed       	ldi	r30, 0xD1	; 209
    2332:	f4 e0       	ldi	r31, 0x04	; 4
    2334:	e4 91       	lpm	r30, Z
    2336:	8e 17       	cp	r24, r30
    2338:	09 f4       	brne	.+2      	; 0x233c <CommandLineProcessByte+0x1f8>
    233a:	30 c0       	rjmp	.+96     	; 0x239c <CommandLineProcessByte+0x258>
    233c:	e2 ef       	ldi	r30, 0xF2	; 242
    233e:	f4 e0       	ldi	r31, 0x04	; 4
    2340:	e4 91       	lpm	r30, Z
    2342:	8e 17       	cp	r24, r30
    2344:	09 f4       	brne	.+2      	; 0x2348 <CommandLineProcessByte+0x204>
    2346:	41 c0       	rjmp	.+130    	; 0x23ca <CommandLineProcessByte+0x286>
    2348:	e3 e1       	ldi	r30, 0x13	; 19
    234a:	f5 e0       	ldi	r31, 0x05	; 5
    234c:	e4 91       	lpm	r30, Z
    234e:	8e 17       	cp	r24, r30
    2350:	09 f4       	brne	.+2      	; 0x2354 <CommandLineProcessByte+0x210>
    2352:	38 c0       	rjmp	.+112    	; 0x23c4 <CommandLineProcessByte+0x280>
    2354:	e4 e3       	ldi	r30, 0x34	; 52
    2356:	f5 e0       	ldi	r31, 0x05	; 5
    2358:	e4 91       	lpm	r30, Z
    235a:	8e 17       	cp	r24, r30
    235c:	81 f1       	breq	.+96     	; 0x23be <CommandLineProcessByte+0x27a>
    235e:	e5 e5       	ldi	r30, 0x55	; 85
    2360:	f5 e0       	ldi	r31, 0x05	; 5
    2362:	e4 91       	lpm	r30, Z
    2364:	8e 17       	cp	r24, r30
    2366:	41 f1       	breq	.+80     	; 0x23b8 <CommandLineProcessByte+0x274>
    2368:	e6 e7       	ldi	r30, 0x76	; 118
    236a:	f5 e0       	ldi	r31, 0x05	; 5
    236c:	e4 91       	lpm	r30, Z
    236e:	8e 17       	cp	r24, r30
    2370:	01 f1       	breq	.+64     	; 0x23b2 <CommandLineProcessByte+0x26e>
            return StatusTable[i].Message;
    }

    return (void*) 0;
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }

  /* Send command status message */
  TerminalSendStringP(GetStatusMessageP(StatusId));
    2376:	c8 da       	rcall	.-2672   	; 0x1908 <TerminalSendStringP>
  TerminalSendStringP(PSTR(STATUS_MESSAGE_TRAILER));
    2378:	8e ec       	ldi	r24, 0xCE	; 206
    237a:	94 e0       	ldi	r25, 0x04	; 4
    237c:	c5 da       	rcall	.-2678   	; 0x1908 <TerminalSendStringP>

  if (CommandFound && (pTerminalBuffer[0] != '\0') ) {
    237e:	cc 23       	and	r28, r28
    2380:	09 f4       	brne	.+2      	; 0x2384 <CommandLineProcessByte+0x240>
    2382:	fe ce       	rjmp	.-516    	; 0x2180 <CommandLineProcessByte+0x3c>
    2384:	80 91 10 25 	lds	r24, 0x2510
    2388:	88 23       	and	r24, r24
    238a:	09 f4       	brne	.+2      	; 0x238e <CommandLineProcessByte+0x24a>
    238c:	f9 ce       	rjmp	.-526    	; 0x2180 <CommandLineProcessByte+0x3c>
    /* Send optional answer */
    TerminalSendString(pTerminalBuffer);
    238e:	80 e1       	ldi	r24, 0x10	; 16
    2390:	95 e2       	ldi	r25, 0x25	; 37
    2392:	b5 da       	rcall	.-2710   	; 0x18fe <TerminalSendString>
    TerminalSendStringP(PSTR(OPTIONAL_ANSWER_TRAILER));
    2394:	8b ec       	ldi	r24, 0xCB	; 203
    2396:	94 e0       	ldi	r25, 0x04	; 4
    2398:	b7 da       	rcall	.-2706   	; 0x1908 <TerminalSendStringP>
    239a:	f2 ce       	rjmp	.-540    	; 0x2180 <CommandLineProcessByte+0x3c>
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
            return StatusTable[i].Message;
    23a0:	41 e2       	ldi	r20, 0x21	; 33
    23a2:	42 9f       	mul	r20, r18
    23a4:	c0 01       	movw	r24, r0
    23a6:	43 9f       	mul	r20, r19
    23a8:	90 0d       	add	r25, r0
    23aa:	11 24       	eor	r1, r1
    23ac:	8e 52       	subi	r24, 0x2E	; 46
    23ae:	9b 4f       	sbci	r25, 0xFB	; 251
    23b0:	e2 cf       	rjmp	.-60     	; 0x2376 <CommandLineProcessByte+0x232>
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    23b2:	25 e0       	ldi	r18, 0x05	; 5
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	f4 cf       	rjmp	.-24     	; 0x23a0 <CommandLineProcessByte+0x25c>
    23b8:	24 e0       	ldi	r18, 0x04	; 4
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	f1 cf       	rjmp	.-30     	; 0x23a0 <CommandLineProcessByte+0x25c>
    23be:	23 e0       	ldi	r18, 0x03	; 3
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	ee cf       	rjmp	.-36     	; 0x23a0 <CommandLineProcessByte+0x25c>
    23c4:	22 e0       	ldi	r18, 0x02	; 2
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	eb cf       	rjmp	.-42     	; 0x23a0 <CommandLineProcessByte+0x25c>
    23ca:	21 e0       	ldi	r18, 0x01	; 1
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	e8 cf       	rjmp	.-48     	; 0x23a0 <CommandLineProcessByte+0x25c>
    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    23d0:	21 ee       	ldi	r18, 0xE1	; 225
    23d2:	36 e0       	ldi	r19, 0x06	; 6
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
    23d4:	10 92 10 25 	sts	0x2510, r1
static CommandStatusIdType CallCommandFunc(
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    23d8:	1f 33       	cpi	r17, 0x3F	; 63
    23da:	19 f1       	breq	.+70     	; 0x2422 <CommandLineProcessByte+0x2de>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    23dc:	1d 33       	cpi	r17, 0x3D	; 61
    23de:	99 f0       	breq	.+38     	; 0x2406 <CommandLineProcessByte+0x2c2>
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    23e0:	11 23       	and	r17, r17
    23e2:	19 f0       	breq	.+6      	; 0x23ea <CommandLineProcessByte+0x2a6>
  } else {
    /* This should not happen (TM) */
  }

  /* This delimiter has not been registered with this command */
  return COMMAND_ERR_INVALID_USAGE_ID;
    23e4:	89 ec       	ldi	r24, 0xC9	; 201
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    23e6:	c1 e0       	ldi	r28, 0x01	; 1
    23e8:	a3 cf       	rjmp	.-186    	; 0x2330 <CommandLineProcessByte+0x1ec>
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    CommandExecFuncType ExecFunc = pgm_read_ptr(&CommandEntry->ExecFunc);
    23ea:	20 5f       	subi	r18, 0xF0	; 240
    23ec:	3f 4f       	sbci	r19, 0xFF	; 255
    23ee:	f9 01       	movw	r30, r18
    23f0:	45 91       	lpm	r20, Z+
    23f2:	54 91       	lpm	r21, Z
    if (ExecFunc != NO_FUNCTION) {
    23f4:	41 15       	cp	r20, r1
    23f6:	51 05       	cpc	r21, r1
    23f8:	a9 f3       	breq	.-22     	; 0x23e4 <CommandLineProcessByte+0x2a0>
      return ExecFunc(pTerminalBuffer);
    23fa:	80 e1       	ldi	r24, 0x10	; 16
    23fc:	95 e2       	ldi	r25, 0x25	; 37
    23fe:	fa 01       	movw	r30, r20
    2400:	09 95       	icall
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    2402:	c1 e0       	ldi	r28, 0x01	; 1
    2404:	95 cf       	rjmp	.-214    	; 0x2330 <CommandLineProcessByte+0x1ec>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    2406:	2e 5e       	subi	r18, 0xEE	; 238
    2408:	3f 4f       	sbci	r19, 0xFF	; 255
    240a:	f9 01       	movw	r30, r18
    240c:	45 91       	lpm	r20, Z+
    240e:	54 91       	lpm	r21, Z
    if (SetFunc != NO_FUNCTION) {
    2410:	41 15       	cp	r20, r1
    2412:	51 05       	cpc	r21, r1
    2414:	39 f3       	breq	.-50     	; 0x23e4 <CommandLineProcessByte+0x2a0>
      return SetFunc(pParam);
    2416:	ce 01       	movw	r24, r28
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	fa 01       	movw	r30, r20
    241c:	09 95       	icall
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    241e:	c1 e0       	ldi	r28, 0x01	; 1
    2420:	87 cf       	rjmp	.-242    	; 0x2330 <CommandLineProcessByte+0x1ec>
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    2422:	2c 5e       	subi	r18, 0xEC	; 236
    2424:	3f 4f       	sbci	r19, 0xFF	; 255
    2426:	f9 01       	movw	r30, r18
    2428:	45 91       	lpm	r20, Z+
    242a:	54 91       	lpm	r21, Z
    if (GetFunc != NO_FUNCTION) {
    242c:	41 15       	cp	r20, r1
    242e:	51 05       	cpc	r21, r1
    2430:	21 f7       	brne	.-56     	; 0x23fa <CommandLineProcessByte+0x2b6>
  } else {
    /* This should not happen (TM) */
  }

  /* This delimiter has not been registered with this command */
  return COMMAND_ERR_INVALID_USAGE_ID;
    2432:	89 ec       	ldi	r24, 0xC9	; 201
    2434:	d8 cf       	rjmp	.-80     	; 0x23e6 <CommandLineProcessByte+0x2a2>
    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    2436:	2b ec       	ldi	r18, 0xCB	; 203
    2438:	36 e0       	ldi	r19, 0x06	; 6
    243a:	cc cf       	rjmp	.-104    	; 0x23d4 <CommandLineProcessByte+0x290>
    243c:	25 eb       	ldi	r18, 0xB5	; 181
    243e:	36 e0       	ldi	r19, 0x06	; 6
    2440:	c9 cf       	rjmp	.-110    	; 0x23d4 <CommandLineProcessByte+0x290>
    2442:	2f e9       	ldi	r18, 0x9F	; 159
    2444:	36 e0       	ldi	r19, 0x06	; 6
    2446:	c6 cf       	rjmp	.-116    	; 0x23d4 <CommandLineProcessByte+0x290>
    2448:	29 e8       	ldi	r18, 0x89	; 137
    244a:	36 e0       	ldi	r19, 0x06	; 6
    244c:	c3 cf       	rjmp	.-122    	; 0x23d4 <CommandLineProcessByte+0x290>
    244e:	23 e7       	ldi	r18, 0x73	; 115
    2450:	36 e0       	ldi	r19, 0x06	; 6
    2452:	c0 cf       	rjmp	.-128    	; 0x23d4 <CommandLineProcessByte+0x290>
    2454:	2d e5       	ldi	r18, 0x5D	; 93
    2456:	36 e0       	ldi	r19, 0x06	; 6
    2458:	bd cf       	rjmp	.-134    	; 0x23d4 <CommandLineProcessByte+0x290>
    245a:	27 e4       	ldi	r18, 0x47	; 71
    245c:	36 e0       	ldi	r19, 0x06	; 6
    245e:	ba cf       	rjmp	.-140    	; 0x23d4 <CommandLineProcessByte+0x290>
    2460:	21 e3       	ldi	r18, 0x31	; 49
    2462:	36 e0       	ldi	r19, 0x06	; 6
    2464:	b7 cf       	rjmp	.-146    	; 0x23d4 <CommandLineProcessByte+0x290>
    2466:	2b e1       	ldi	r18, 0x1B	; 27
    2468:	36 e0       	ldi	r19, 0x06	; 6
    246a:	b4 cf       	rjmp	.-152    	; 0x23d4 <CommandLineProcessByte+0x290>
    246c:	25 e0       	ldi	r18, 0x05	; 5
    246e:	36 e0       	ldi	r19, 0x06	; 6
    2470:	b1 cf       	rjmp	.-158    	; 0x23d4 <CommandLineProcessByte+0x290>
    2472:	2f ee       	ldi	r18, 0xEF	; 239
    2474:	35 e0       	ldi	r19, 0x05	; 5
    2476:	ae cf       	rjmp	.-164    	; 0x23d4 <CommandLineProcessByte+0x290>
    2478:	29 ed       	ldi	r18, 0xD9	; 217
    247a:	35 e0       	ldi	r19, 0x05	; 5
    247c:	ab cf       	rjmp	.-170    	; 0x23d4 <CommandLineProcessByte+0x290>
    247e:	23 ec       	ldi	r18, 0xC3	; 195
    2480:	35 e0       	ldi	r19, 0x05	; 5
    2482:	a8 cf       	rjmp	.-176    	; 0x23d4 <CommandLineProcessByte+0x290>
    2484:	2d ea       	ldi	r18, 0xAD	; 173
    2486:	35 e0       	ldi	r19, 0x05	; 5
    2488:	a5 cf       	rjmp	.-182    	; 0x23d4 <CommandLineProcessByte+0x290>
    248a:	27 e9       	ldi	r18, 0x97	; 151
    248c:	35 e0       	ldi	r19, 0x05	; 5
    248e:	a2 cf       	rjmp	.-188    	; 0x23d4 <CommandLineProcessByte+0x290>

00002490 <CommandLineTick>:

  return true;
}

void CommandLineTick(void)
{
    2490:	08 95       	ret

00002492 <StartDemod>:
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    2492:	a0 e2       	ldi	r26, 0x20	; 32
    2494:	b6 e0       	ldi	r27, 0x06	; 6
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	11 96       	adiw	r26, 0x01	; 1
    249a:	8c 93       	st	X, r24
    249c:	11 97       	sbiw	r26, 0x01	; 1

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    249e:	15 96       	adiw	r26, 0x05	; 5
    24a0:	8c 93       	st	X, r24
    24a2:	15 97       	sbiw	r26, 0x05	; 5
static void StartDemod(void) {
    /* Activate Power for demodulator */
    CodecSetDemodPower(true);

    /* Configure sampling-timer free running and sync to first modulation-pause. */
    CODEC_TIMER_SAMPLING.CNT = 0;
    24a4:	e0 e4       	ldi	r30, 0x40	; 64
    24a6:	f8 e0       	ldi	r31, 0x08	; 8
    24a8:	10 a2       	std	Z+32, r1	; 0x20
    24aa:	11 a2       	std	Z+33, r1	; 0x21
    CODEC_TIMER_SAMPLING.PER = SAMPLE_RATE_SYSTEM_CYCLES - 1;
    24ac:	8d e2       	ldi	r24, 0x2D	; 45
    24ae:	91 e0       	ldi	r25, 0x01	; 1
    24b0:	86 a3       	std	Z+38, r24	; 0x26
    24b2:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_TIMER_SAMPLING.CCA = 0xFFFF; /* CCA Interrupt is not active! */
    24b4:	8f ef       	ldi	r24, 0xFF	; 255
    24b6:	9f ef       	ldi	r25, 0xFF	; 255
    24b8:	80 a7       	std	Z+40, r24	; 0x28
    24ba:	91 a7       	std	Z+41, r25	; 0x29
    CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_DIV1_gc;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	80 83       	st	Z, r24
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    24c0:	98 e8       	ldi	r25, 0x88	; 136
    24c2:	93 83       	std	Z+3, r25	; 0x03
    CODEC_TIMER_SAMPLING.INTCTRLB = TC_CCAINTLVL_HI_gc;
    24c4:	93 e0       	ldi	r25, 0x03	; 3
    24c6:	97 83       	std	Z+7, r25	; 0x07

    /* Start looking out for modulation pause via interrupt. */
    CODEC_DEMOD_IN_PORT.INT0MASK = CODEC_DEMOD_IN_MASK0;
    24c8:	1a 96       	adiw	r26, 0x0a	; 10
    24ca:	8c 93       	st	X, r24
    24cc:	08 95       	ret

000024ce <__vector_34>:
}

ISR(CODEC_DEMOD_IN_INT0_VECT) {
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	8f 93       	push	r24
    24da:	9f 93       	push	r25
    24dc:	ef 93       	push	r30
    24de:	ff 93       	push	r31
    /* This is the first edge of the first modulation-pause after StartDemod.
     * Now we have time to prepare our timers and variables to start
     * demodulating beginning from one bit-width after this edge. */
    CodecBufferPtr = CodecBuffer;
    24e0:	80 e1       	ldi	r24, 0x10	; 16
    24e2:	96 e2       	ldi	r25, 0x26	; 38
    24e4:	80 93 b1 24 	sts	0x24B1, r24
    24e8:	90 93 b2 24 	sts	0x24B2, r25
    ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    24ec:	80 e9       	ldi	r24, 0x90	; 144
    24ee:	96 e2       	ldi	r25, 0x26	; 38
    24f0:	80 93 af 24 	sts	0x24AF, r24
    24f4:	90 93 b0 24 	sts	0x24B0, r25
    DataRegister = 0;
    24f8:	10 92 aa 24 	sts	0x24AA, r1
    SampleRegister = 0;
    24fc:	10 92 a9 24 	sts	0x24A9, r1
    SamplePosition = 0;
    2500:	10 92 a5 24 	sts	0x24A5, r1
    BitCount = 0;
    2504:	10 92 ad 24 	sts	0x24AD, r1
    2508:	10 92 ae 24 	sts	0x24AE, r1
    IsParityBit = false;
    250c:	10 92 a8 24 	sts	0x24A8, r1
     * XYZBUF mechanism of the xmega to automatically double the sampling rate on the
     * next overflow. For this we have to temporarily deactivate the automatical alignment
     * in order to catch next overflow event for updating the BUF registers.
     * We want to sample the demodulated data stream in the first quarter of the half-bit
     * where the pulsed miller encoded is located. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_OFF_gc;
    2510:	e0 e4       	ldi	r30, 0x40	; 64
    2512:	f8 e0       	ldi	r31, 0x08	; 8
    2514:	13 82       	std	Z+3, r1	; 0x03
    CODEC_TIMER_SAMPLING.PERBUF = SAMPLE_RATE_SYSTEM_CYCLES/2 - 1; /* Half bit width */
    2516:	86 e9       	ldi	r24, 0x96	; 150
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	86 ab       	std	Z+54, r24	; 0x36
    251c:	97 ab       	std	Z+55, r25	; 0x37
    CODEC_TIMER_SAMPLING.CCABUF = SAMPLE_RATE_SYSTEM_CYCLES/8 - 10 - 1; /* Compensate for DIGFILT and ISR prolog */
    251e:	8a e1       	ldi	r24, 0x1A	; 26
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	80 af       	std	Z+56, r24	; 0x38
    2524:	91 af       	std	Z+57, r25	; 0x39
    /* Setup Frame Delay Timer and wire to EVSYS. Frame delay time is
     * measured from last change in RF field, therefore we use
     * the event channel 1 (end of modulation pause) as the restart event.
     * The preliminary frame delay time chosen here is irrelevant, because
     * the correct FDT gets set automatically after demodulation. */
    CODEC_TIMER_LOADMOD.CNT = 0;
    2526:	e0 e4       	ldi	r30, 0x40	; 64
    2528:	f9 e0       	ldi	r31, 0x09	; 9
    252a:	10 a2       	std	Z+32, r1	; 0x20
    252c:	11 a2       	std	Z+33, r1	; 0x21
    CODEC_TIMER_LOADMOD.PER = 0xFFFF;
    252e:	8f ef       	ldi	r24, 0xFF	; 255
    2530:	9f ef       	ldi	r25, 0xFF	; 255
    2532:	86 a3       	std	Z+38, r24	; 0x26
    2534:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH1_gc;
    2536:	89 e8       	ldi	r24, 0x89	; 137
    2538:	83 83       	std	Z+3, r24	; 0x03
    CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_EVCH6_gc;
    253a:	8e e0       	ldi	r24, 0x0E	; 14
    253c:	80 83       	st	Z, r24

    /* Disable this interrupt */
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    253e:	e0 e2       	ldi	r30, 0x20	; 32
    2540:	f6 e0       	ldi	r31, 0x06	; 6
    2542:	12 86       	std	Z+10, r1	; 0x0a
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	9f 91       	pop	r25
    254a:	8f 91       	pop	r24
    254c:	0f 90       	pop	r0
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	0f 90       	pop	r0
    2552:	1f 90       	pop	r1
    2554:	18 95       	reti

00002556 <__vector_22>:

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	2f 93       	push	r18
    2562:	3f 93       	push	r19
    2564:	4f 93       	push	r20
    2566:	8f 93       	push	r24
    2568:	9f 93       	push	r25
    256a:	ef 93       	push	r30
    256c:	ff 93       	push	r31
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    256e:	90 91 28 06 	lds	r25, 0x0628
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    2572:	80 91 a9 24 	lds	r24, 0x24A9
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
}

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    2576:	95 70       	andi	r25, 0x05	; 5
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    2578:	21 e0       	ldi	r18, 0x01	; 1
    257a:	09 f0       	breq	.+2      	; 0x257e <__vector_22+0x28>
    257c:	20 e0       	ldi	r18, 0x00	; 0
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    257e:	88 0f       	add	r24, r24
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    2580:	82 2b       	or	r24, r18
    SampleRegister = NewSampleRegister;
    2582:	80 93 a9 24 	sts	0x24A9, r24

    if (SamplePosition) {
    2586:	90 91 a5 24 	lds	r25, 0x24A5
    258a:	99 23       	and	r25, r25
    258c:	c1 f1       	breq	.+112    	; 0x25fe <__vector_22+0xa8>
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
    258e:	98 2f       	mov	r25, r24
    2590:	97 70       	andi	r25, 0x07	; 7
    2592:	97 30       	cpi	r25, 0x07	; 7
    2594:	09 f4       	brne	.+2      	; 0x2598 <__vector_22+0x42>
    2596:	48 c0       	rjmp	.+144    	; 0x2628 <__vector_22+0xd2>

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
        } else {
            /* Otherwise, we check the two sample bits from the bit before. */
            uint8_t BitSample = NewSampleRegister & 0xC;
    2598:	98 2f       	mov	r25, r24
    259a:	9c 70       	andi	r25, 0x0C	; 12
            uint8_t Bit = 0;

            if (BitSample != (0x0 << 2)) {
    259c:	81 f1       	breq	.+96     	; 0x25fe <__vector_22+0xa8>
                /* We have a valid bit. decode and process it. */
                if (BitSample & (0x1 << 2)) {
    259e:	82 fb       	bst	r24, 2
    25a0:	88 27       	eor	r24, r24
    25a2:	80 f9       	bld	r24, 0
    25a4:	91 e0       	ldi	r25, 0x01	; 1
    25a6:	89 27       	eor	r24, r25
                } else {
                    /* 10 sequence -> This is a one bit */
                    Bit = 1;
                }

                LastBit = Bit;
    25a8:	80 93 a7 24 	sts	0x24A7, r24

                if (!IsParityBit) {
    25ac:	90 91 a8 24 	lds	r25, 0x24A8
    25b0:	91 11       	cpse	r25, r1
    25b2:	7f c0       	rjmp	.+254    	; 0x26b2 <__vector_22+0x15c>
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
    25b4:	90 91 aa 24 	lds	r25, 0x24AA
    25b8:	96 95       	lsr	r25
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    25ba:	88 23       	and	r24, r24
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <__vector_22+0x6a>
    25be:	83 c0       	rjmp	.+262    	; 0x26c6 <__vector_22+0x170>
    25c0:	20 e8       	ldi	r18, 0x80	; 128
    25c2:	29 2b       	or	r18, r25
                    DataRegister = NewDataRegister;
    25c4:	20 93 aa 24 	sts	0x24AA, r18

                    /* Update bitcount */
                    uint16_t NewBitCount = ++BitCount;
    25c8:	80 91 ad 24 	lds	r24, 0x24AD
    25cc:	90 91 ae 24 	lds	r25, 0x24AE
    25d0:	01 96       	adiw	r24, 0x01	; 1
    25d2:	80 93 ad 24 	sts	0x24AD, r24
    25d6:	90 93 ae 24 	sts	0x24AE, r25
                    if ((NewBitCount & 0x07) == 0) {
    25da:	87 70       	andi	r24, 0x07	; 7
    25dc:	99 27       	eor	r25, r25
    25de:	89 2b       	or	r24, r25
    25e0:	71 f4       	brne	.+28     	; 0x25fe <__vector_22+0xa8>
                        /* We have reached a byte boundary! Store the data register. */
                        /* TODO: Prevent buffer overflow */
                        *CodecBufferPtr++ = NewDataRegister;
    25e2:	e0 91 b1 24 	lds	r30, 0x24B1
    25e6:	f0 91 b2 24 	lds	r31, 0x24B2
    25ea:	cf 01       	movw	r24, r30
    25ec:	01 96       	adiw	r24, 0x01	; 1
    25ee:	80 93 b1 24 	sts	0x24B1, r24
    25f2:	90 93 b2 24 	sts	0x24B2, r25
    25f6:	20 83       	st	Z, r18

                        /* Store bit for determining FDT at EOC and enable parity
                         * handling on next bit. */
                        IsParityBit = true;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	80 93 a8 24 	sts	0x24A8, r24
        }
    } else {
        /* On odd sample position just sample. */
    }

    SamplePosition = !SamplePosition;
    25fe:	80 91 a5 24 	lds	r24, 0x24A5
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	89 27       	eor	r24, r25
    2606:	80 93 a5 24 	sts	0x24A5, r24

    /* Make sure the sampling timer gets automatically aligned to the
     * modulation pauses by using the RESTART event.
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    260a:	88 e8       	ldi	r24, 0x88	; 136
    260c:	80 93 43 08 	sts	0x0843, r24
}
    2610:	ff 91       	pop	r31
    2612:	ef 91       	pop	r30
    2614:	9f 91       	pop	r25
    2616:	8f 91       	pop	r24
    2618:	4f 91       	pop	r20
    261a:	3f 91       	pop	r19
    261c:	2f 91       	pop	r18
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0
    2624:	1f 90       	pop	r1
    2626:	18 95       	reti

    if (SamplePosition) {
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
            /* No carrier modulation for 3 sample points. EOC! */
            CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_OFF_gc;
    2628:	10 92 40 08 	sts	0x0840, r1
            CODEC_TIMER_SAMPLING.INTFLAGS = TC0_CCAIF_bm;
    262c:	80 e1       	ldi	r24, 0x10	; 16
    262e:	80 93 4c 08 	sts	0x084C, r24

            /* By this time, the FDT timer is aligned to the last modulation
             * edge of the reader. So we disable the auto-synchronization and
             * let it count the frame delay time in the background, and generate
             * an interrupt once it has reached the FDT. */
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;
    2632:	10 92 43 09 	sts	0x0943, r1

            if (LastBit) {
    2636:	80 91 a7 24 	lds	r24, 0x24A7
    263a:	88 23       	and	r24, r24
    263c:	e9 f1       	breq	.+122    	; 0x26b8 <__vector_22+0x162>
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
    263e:	8c eb       	ldi	r24, 0xBC	; 188
    2640:	94 e0       	ldi	r25, 0x04	; 4
    2642:	80 93 66 09 	sts	0x0966, r24
    2646:	90 93 67 09 	sts	0x0967, r25
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
            }

            LoadModState = LOADMOD_FDT;
    264a:	10 92 a6 24 	sts	0x24A6, r1

            CODEC_TIMER_LOADMOD.INTFLAGS = TC1_OVFIF_bm;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	80 93 4c 09 	sts	0x094C, r24
            CODEC_TIMER_LOADMOD.INTCTRLA = TC_OVFINTLVL_HI_gc;
    2654:	83 e0       	ldi	r24, 0x03	; 3
    2656:	80 93 46 09 	sts	0x0946, r24

            /* Determine if we did not receive a multiple of 8 bits.
             * If this is the case, right-align the remaining data and
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
    265a:	80 91 ad 24 	lds	r24, 0x24AD
    265e:	90 91 ae 24 	lds	r25, 0x24AE
    2662:	87 70       	andi	r24, 0x07	; 7
            if (RemainingBits != 0) {
    2664:	11 f1       	breq	.+68     	; 0x26aa <__vector_22+0x154>
                uint8_t NewDataRegister = DataRegister;
    2666:	90 91 aa 24 	lds	r25, 0x24AA

                while (RemainingBits++ < 8) {
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    266a:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    266c:	22 e0       	ldi	r18, 0x02	; 2
    266e:	28 0f       	add	r18, r24
    2670:	87 30       	cpi	r24, 0x07	; 7
    2672:	b1 f0       	breq	.+44     	; 0x26a0 <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2674:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    2676:	43 e0       	ldi	r20, 0x03	; 3
    2678:	48 0f       	add	r20, r24
    267a:	28 30       	cpi	r18, 0x08	; 8
    267c:	88 f4       	brcc	.+34     	; 0x26a0 <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    267e:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    2680:	34 e0       	ldi	r19, 0x04	; 4
    2682:	38 0f       	add	r19, r24
    2684:	48 30       	cpi	r20, 0x08	; 8
    2686:	60 f4       	brcc	.+24     	; 0x26a0 <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2688:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    268a:	25 e0       	ldi	r18, 0x05	; 5
    268c:	28 0f       	add	r18, r24
    268e:	38 30       	cpi	r19, 0x08	; 8
    2690:	38 f4       	brcc	.+14     	; 0x26a0 <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2692:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    2694:	28 30       	cpi	r18, 0x08	; 8
    2696:	20 f4       	brcc	.+8      	; 0x26a0 <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2698:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	09 f4       	brne	.+2      	; 0x26a0 <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    269e:	96 95       	lsr	r25
                }

                /* TODO: Prevent buffer overflow */
                *CodecBufferPtr = NewDataRegister;
    26a0:	e0 91 b1 24 	lds	r30, 0x24B1
    26a4:	f0 91 b2 24 	lds	r31, 0x24B2
    26a8:	90 83       	st	Z, r25
            }

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	80 93 b3 24 	sts	0x24B3, r24
    26b0:	a6 cf       	rjmp	.-180    	; 0x25fe <__vector_22+0xa8>

                } else {
                    /* This is a parity bit. Store it */
                    /* TODO: Store parity and prevent overflow */
                    //*ParityBufferPtr++ = Bit;
                    IsParityBit = false;
    26b2:	10 92 a8 24 	sts	0x24A8, r1
    26b6:	a3 cf       	rjmp	.-186    	; 0x25fe <__vector_22+0xa8>
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;

            if (LastBit) {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
    26b8:	8c e7       	ldi	r24, 0x7C	; 124
    26ba:	94 e0       	ldi	r25, 0x04	; 4
    26bc:	80 93 66 09 	sts	0x0966, r24
    26c0:	90 93 67 09 	sts	0x0967, r25
    26c4:	c2 cf       	rjmp	.-124    	; 0x264a <__vector_22+0xf4>

                if (!IsParityBit) {
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	7c cf       	rjmp	.-264    	; 0x25c2 <__vector_22+0x6c>

000026ca <__vector_83>:
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
}

ISR(CODEC_TIMER_OVF_VECT) {
    26ca:	1f 92       	push	r1
    26cc:	0f 92       	push	r0
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	0f 92       	push	r0
    26d2:	11 24       	eor	r1, r1
    26d4:	2f 93       	push	r18
    26d6:	3f 93       	push	r19
    26d8:	8f 93       	push	r24
    26da:	9f 93       	push	r25
    26dc:	af 93       	push	r26
    26de:	bf 93       	push	r27
    26e0:	ef 93       	push	r30
    26e2:	ff 93       	push	r31
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    26e4:	80 91 a6 24 	lds	r24, 0x24A6
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	8b 30       	cpi	r24, 0x0B	; 11
    26ec:	91 05       	cpc	r25, r1
    26ee:	80 f5       	brcc	.+96     	; 0x2750 <__vector_83+0x86>
    26f0:	fc 01       	movw	r30, r24
    26f2:	e9 5f       	subi	r30, 0xF9	; 249
    26f4:	fe 4f       	sbci	r31, 0xFE	; 254
    26f6:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__tablejump2__>

        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
    26fa:	e0 91 af 24 	lds	r30, 0x24AF
    26fe:	f0 91 b0 24 	lds	r31, 0x24B0
    2702:	80 81       	ld	r24, Z
    2704:	81 11       	cpse	r24, r1
    2706:	ac c0       	rjmp	.+344    	; 0x2860 <__vector_83+0x196>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2708:	80 e4       	ldi	r24, 0x40	; 64
    270a:	80 93 45 06 	sts	0x0645, r24
        }

        if (BitSent == BitCount) {
    270e:	20 91 ab 24 	lds	r18, 0x24AB
    2712:	30 91 ac 24 	lds	r19, 0x24AC
    2716:	80 91 ad 24 	lds	r24, 0x24AD
    271a:	90 91 ae 24 	lds	r25, 0x24AE
    271e:	28 17       	cp	r18, r24
    2720:	39 07       	cpc	r19, r25
    2722:	09 f4       	brne	.+2      	; 0x2726 <__vector_83+0x5c>
    2724:	6c c0       	rjmp	.+216    	; 0x27fe <__vector_83+0x134>
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
        } else {
            /* Fetch next data and continue sending bits. */
            ParityBufferPtr++;
    2726:	31 96       	adiw	r30, 0x01	; 1
    2728:	e0 93 af 24 	sts	0x24AF, r30
    272c:	f0 93 b0 24 	sts	0x24B0, r31
            DataRegister = *++CodecBufferPtr;
    2730:	e0 91 b1 24 	lds	r30, 0x24B1
    2734:	f0 91 b2 24 	lds	r31, 0x24B2
    2738:	cf 01       	movw	r24, r30
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	80 93 b1 24 	sts	0x24B1, r24
    2740:	90 93 b2 24 	sts	0x24B2, r25
    2744:	81 81       	ldd	r24, Z+1	; 0x01
    2746:	80 93 aa 24 	sts	0x24AA, r24
            LoadModState = LOADMOD_DATA0;
    274a:	84 e0       	ldi	r24, 0x04	; 4
    274c:	80 93 a6 24 	sts	0x24A6, r24
        break;

    default:
        break;
    }
}
    2750:	ff 91       	pop	r31
    2752:	ef 91       	pop	r30
    2754:	bf 91       	pop	r27
    2756:	af 91       	pop	r26
    2758:	9f 91       	pop	r25
    275a:	8f 91       	pop	r24
    275c:	3f 91       	pop	r19
    275e:	2f 91       	pop	r18
    2760:	0f 90       	pop	r0
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	0f 90       	pop	r0
    2766:	1f 90       	pop	r1
    2768:	18 95       	reti
        break;

    case LOADMOD_START:
        /* Application produced data. With this interrupt we are aligned to the bit-grid.
         * Start subcarrier generation and align to bitrate. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_RATE_CYCLES / 2 - 1;
    276a:	8f e3       	ldi	r24, 0x3F	; 63
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	80 93 66 09 	sts	0x0966, r24
    2772:	90 93 67 09 	sts	0x0967, r25
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_EVCH6_gc;
    2776:	8e e0       	ldi	r24, 0x0E	; 14
    2778:	80 93 00 08 	sts	0x0800, r24

        /* Fallthrough to first bit */

    case LOADMOD_START_BIT0:
    	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    277c:	80 e4       	ldi	r24, 0x40	; 64
    277e:	80 93 45 06 	sts	0x0645, r24
        LoadModState = LOADMOD_START_BIT1;
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	80 93 a6 24 	sts	0x24A6, r24
        break;
    2788:	e3 cf       	rjmp	.-58     	; 0x2750 <__vector_83+0x86>

    case LOADMOD_START_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    278a:	80 e4       	ldi	r24, 0x40	; 64
    278c:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_DATA0;
    2790:	84 e0       	ldi	r24, 0x04	; 4
    2792:	80 93 a6 24 	sts	0x24A6, r24

        /* Fetch first byte */
        DataRegister = *CodecBufferPtr;
    2796:	e0 91 b1 24 	lds	r30, 0x24B1
    279a:	f0 91 b2 24 	lds	r31, 0x24B2
    279e:	80 81       	ld	r24, Z
    27a0:	80 93 aa 24 	sts	0x24AA, r24
        break;
    27a4:	d5 cf       	rjmp	.-86     	; 0x2750 <__vector_83+0x86>

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
    27a6:	80 91 aa 24 	lds	r24, 0x24AA
    27aa:	80 fd       	sbrc	r24, 0
    27ac:	64 c0       	rjmp	.+200    	; 0x2876 <__vector_83+0x1ac>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    27ae:	80 e4       	ldi	r24, 0x40	; 64
    27b0:	80 93 46 06 	sts	0x0646, r24
        }

        LoadModState = LOADMOD_DATA1;
    27b4:	85 e0       	ldi	r24, 0x05	; 5
    27b6:	80 93 a6 24 	sts	0x24A6, r24
        break;
    27ba:	ca cf       	rjmp	.-108    	; 0x2750 <__vector_83+0x86>

    case LOADMOD_DATA1:
        Temp8 = DataRegister;
    27bc:	80 91 aa 24 	lds	r24, 0x24AA

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    27c0:	90 e4       	ldi	r25, 0x40	; 64
        break;

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
    27c2:	80 fd       	sbrc	r24, 0
    27c4:	55 c0       	rjmp	.+170    	; 0x2870 <__vector_83+0x1a6>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    27c6:	90 93 45 06 	sts	0x0645, r25
        }

        DataRegister = Temp8 >> 1;
    27ca:	86 95       	lsr	r24
    27cc:	80 93 aa 24 	sts	0x24AA, r24

        Temp16 = BitSent;
    27d0:	80 91 ab 24 	lds	r24, 0x24AB
    27d4:	90 91 ac 24 	lds	r25, 0x24AC
        BitSent = ++Temp16;
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	80 93 ab 24 	sts	0x24AB, r24
    27de:	90 93 ac 24 	sts	0x24AC, r25

        if ((Temp16 & 0x07) == 0) {
    27e2:	9c 01       	movw	r18, r24
    27e4:	27 70       	andi	r18, 0x07	; 7
    27e6:	33 27       	eor	r19, r19
    27e8:	23 2b       	or	r18, r19
    27ea:	09 f4       	brne	.+2      	; 0x27ee <__vector_83+0x124>
    27ec:	48 c0       	rjmp	.+144    	; 0x287e <__vector_83+0x1b4>
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
            break;
        }

        if (Temp16 == BitCount) {
    27ee:	20 91 ad 24 	lds	r18, 0x24AD
    27f2:	30 91 ae 24 	lds	r19, 0x24AE
    27f6:	82 17       	cp	r24, r18
    27f8:	93 07       	cpc	r25, r19
    27fa:	09 f0       	breq	.+2      	; 0x27fe <__vector_83+0x134>
    27fc:	a6 cf       	rjmp	.-180    	; 0x274a <__vector_83+0x80>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        }

        if (BitSent == BitCount) {
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
    27fe:	88 e0       	ldi	r24, 0x08	; 8
    2800:	80 93 a6 24 	sts	0x24A6, r24
    2804:	a5 cf       	rjmp	.-182    	; 0x2750 <__vector_83+0x86>
        LoadModState = LOADMOD_DATA0;

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
    2806:	e0 91 af 24 	lds	r30, 0x24AF
    280a:	f0 91 b0 24 	lds	r31, 0x24B0
    280e:	80 81       	ld	r24, Z
    2810:	81 11       	cpse	r24, r1
    2812:	2a c0       	rjmp	.+84     	; 0x2868 <__vector_83+0x19e>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2814:	80 e4       	ldi	r24, 0x40	; 64
    2816:	80 93 46 06 	sts	0x0646, r24
        }

        LoadModState = LOADMOD_PARITY1;
    281a:	87 e0       	ldi	r24, 0x07	; 7
    281c:	80 93 a6 24 	sts	0x24A6, r24
        break;
    2820:	97 cf       	rjmp	.-210    	; 0x2750 <__vector_83+0x86>
        }

        break;

    case LOADMOD_STOP_BIT0:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2822:	80 e4       	ldi	r24, 0x40	; 64
    2824:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_STOP_BIT1;
    2828:	89 e0       	ldi	r24, 0x09	; 9
    282a:	80 93 a6 24 	sts	0x24A6, r24
        break;
    282e:	90 cf       	rjmp	.-224    	; 0x2750 <__vector_83+0x86>

    case LOADMOD_STOP_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2830:	80 e4       	ldi	r24, 0x40	; 64
    2832:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_FINISHED;
    2836:	8a e0       	ldi	r24, 0x0A	; 10
    2838:	80 93 a6 24 	sts	0x24A6, r24
        break;
    283c:	89 cf       	rjmp	.-238    	; 0x2750 <__vector_83+0x86>

    case LOADMOD_FINISHED:
        /* We have written all of our bits. Deactivate the loadmod
         * timer. Also disable the bit-rate interrupt again. And
         * stop the subcarrier divider. */
        CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    283e:	10 92 40 09 	sts	0x0940, r1
        CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    2842:	10 92 46 09 	sts	0x0946, r1
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_OFF_gc;
    2846:	10 92 00 08 	sts	0x0800, r1

        /* Signal application that we have finished loadmod */
        Flags.LoadmodFinished = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	80 93 b4 24 	sts	0x24B4, r24
        break;
    2850:	7f cf       	rjmp	.-258    	; 0x2750 <__vector_83+0x86>
    uint16_t Temp16;

    switch (LoadModState) {
    case LOADMOD_FDT:
        /* No data has been produced, but FDT has ended. Switch over to bit-grid aligning. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_GRID_CYCLES - 1;
    2852:	8f e7       	ldi	r24, 0x7F	; 127
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	80 93 66 09 	sts	0x0966, r24
    285a:	90 93 67 09 	sts	0x0967, r25
        break;
    285e:	78 cf       	rjmp	.-272    	; 0x2750 <__vector_83+0x86>
        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2860:	80 e4       	ldi	r24, 0x40	; 64
    2862:	80 93 46 06 	sts	0x0646, r24
    2866:	53 cf       	rjmp	.-346    	; 0x270e <__vector_83+0x44>

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2868:	80 e4       	ldi	r24, 0x40	; 64
    286a:	80 93 45 06 	sts	0x0645, r24
    286e:	d5 cf       	rjmp	.-86     	; 0x281a <__vector_83+0x150>

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2870:	90 93 46 06 	sts	0x0646, r25
    2874:	aa cf       	rjmp	.-172    	; 0x27ca <__vector_83+0x100>
        DataRegister = *CodecBufferPtr;
        break;

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2876:	80 e4       	ldi	r24, 0x40	; 64
    2878:	80 93 45 06 	sts	0x0645, r24
    287c:	9b cf       	rjmp	.-202    	; 0x27b4 <__vector_83+0xea>
        Temp16 = BitSent;
        BitSent = ++Temp16;

        if ((Temp16 & 0x07) == 0) {
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
    287e:	86 e0       	ldi	r24, 0x06	; 6
    2880:	80 93 a6 24 	sts	0x24A6, r24
            break;
    2884:	65 cf       	rjmp	.-310    	; 0x2750 <__vector_83+0x86>

00002886 <ISO14443ACodecInit>:
    default:
        break;
    }
}

void ISO14443ACodecInit(void) {
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
static volatile LoadModStateType LoadModState;
static volatile bool SamplePosition;

static void Initialize(void) {
    /* Configure CARRIER input pin and route it to EVSYS */
    CODEC_CARRIER_IN_PORT.DIRCLR = CODEC_CARRIER_IN_MASK;
    288a:	e0 e4       	ldi	r30, 0x40	; 64
    288c:	f6 e0       	ldi	r31, 0x06	; 6
    288e:	84 e0       	ldi	r24, 0x04	; 4
    2890:	82 83       	std	Z+2, r24	; 0x02
    CODEC_CARRIER_IN_PORT.CODEC_CARRIER_IN_PINCTRL = PORT_ISC_BOTHEDGES_gc;
    2892:	12 8a       	std	Z+18, r1	; 0x12
    EVSYS.CH6MUX = CODEC_CARRIER_IN_EVMUX;
    2894:	c0 e8       	ldi	r28, 0x80	; 128
    2896:	d1 e0       	ldi	r29, 0x01	; 1
    2898:	82 e6       	ldi	r24, 0x62	; 98
    289a:	8e 83       	std	Y+6, r24	; 0x06

    /* Configure two DEMOD pins for input.
     * Configure event channel 0 for rising edge (begin of modulation pause)
     * Configure event channel 1 for falling edge (end of modulation pause) */
    CODEC_DEMOD_IN_PORT.DIRCLR = CODEC_DEMOD_IN_MASK;
    289c:	a0 e2       	ldi	r26, 0x20	; 32
    289e:	b6 e0       	ldi	r27, 0x06	; 6
    28a0:	85 e0       	ldi	r24, 0x05	; 5
    28a2:	12 96       	adiw	r26, 0x02	; 2
    28a4:	8c 93       	st	X, r24
    28a6:	12 97       	sbiw	r26, 0x02	; 2
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL0 = PORT_ISC_RISING_gc;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	50 96       	adiw	r26, 0x10	; 16
    28ac:	8c 93       	st	X, r24
    28ae:	50 97       	sbiw	r26, 0x10	; 16
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL1 = PORT_ISC_FALLING_gc;
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	52 96       	adiw	r26, 0x12	; 18
    28b4:	8c 93       	st	X, r24
    28b6:	52 97       	sbiw	r26, 0x12	; 18
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    28b8:	1a 96       	adiw	r26, 0x0a	; 10
    28ba:	1c 92       	st	X, r1
    28bc:	1a 97       	sbiw	r26, 0x0a	; 10
    CODEC_DEMOD_IN_PORT.INTCTRL = PORT_INT0LVL_HI_gc;
    28be:	83 e0       	ldi	r24, 0x03	; 3
    28c0:	19 96       	adiw	r26, 0x09	; 9
    28c2:	8c 93       	st	X, r24
    EVSYS.CH0MUX = CODEC_DEMOD_IN_EVMUX0;
    28c4:	98 e5       	ldi	r25, 0x58	; 88
    28c6:	98 83       	st	Y, r25
    EVSYS.CH1MUX = CODEC_DEMOD_IN_EVMUX1;
    28c8:	9a e5       	ldi	r25, 0x5A	; 90
    28ca:	99 83       	std	Y+1, r25	; 0x01

    /* Configure LOADMOD and SUBCARRIER output pins.
     * Disable PSK modulation by setting pin to low. */
    CODEC_LOADMOD_PORT.DIRSET = CODEC_LOADMOD_MASK;
    28cc:	90 e4       	ldi	r25, 0x40	; 64
    28ce:	91 83       	std	Z+1, r25	; 0x01
    CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    28d0:	96 83       	std	Z+6, r25	; 0x06
    CODEC_SUBCARRIER_PORT.DIRSET = CODEC_SUBCARRIER_MASK;
    28d2:	81 83       	std	Z+1, r24	; 0x01
    CODEC_SUBCARRIER_PORT.OUTCLR = CODEC_SUBCARRIER_MASK;
    28d4:	86 83       	std	Z+6, r24	; 0x06

    /* Configure subcarrier generation with 50% DC output using OOK */
    CODEC_SUBCARRIER_TIMER.PER = ISO14443A_SUBCARRIER_DIVIDER - 1;
    28d6:	e0 e0       	ldi	r30, 0x00	; 0
    28d8:	f8 e0       	ldi	r31, 0x08	; 8
    28da:	8f e0       	ldi	r24, 0x0F	; 15
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	86 a3       	std	Z+38, r24	; 0x26
    28e0:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_SUBCARRIER_TIMER.CODEC_SUBCARRIER_CC_OOK = ISO14443A_SUBCARRIER_DIVIDER/2;
    28e2:	88 e0       	ldi	r24, 0x08	; 8
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	82 a7       	std	Z+42, r24	; 0x2a
    28e8:	93 a7       	std	Z+43, r25	; 0x2b
    CODEC_SUBCARRIER_TIMER.CTRLB = CODEC_SUBCARRIER_CCEN_OOK | TC_WGMODE_SINGLESLOPE_gc;
    28ea:	83 e2       	ldi	r24, 0x23	; 35
    28ec:	81 83       	std	Z+1, r24	; 0x01
void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
}
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28

void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
    28f2:	cf cd       	rjmp	.-1122   	; 0x2492 <StartDemod>

000028f4 <ISO14443ACodecTask>:
}

void ISO14443ACodecTask(void) {
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    if (Flags.DemodFinished) {
    28f8:	80 91 b3 24 	lds	r24, 0x24B3
    28fc:	88 23       	and	r24, r24
    28fe:	c1 f0       	breq	.+48     	; 0x2930 <ISO14443ACodecTask+0x3c>
        Flags.DemodFinished = 0;
    2900:	10 92 b3 24 	sts	0x24B3, r1
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	80 93 21 06 	sts	0x0621, r24

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    } else {
        CODEC_DEMOD_POWER_PORT.OUTCLR = CODEC_DEMOD_POWER_MASK;
    290a:	80 93 26 06 	sts	0x0626, r24
        /* Reception finished. Process the received bytes */
        CodecSetDemodPower(false);

        uint16_t DemodBitCount = BitCount;
    290e:	60 91 ad 24 	lds	r22, 0x24AD
    2912:	70 91 ae 24 	lds	r23, 0x24AE
        uint16_t AnswerBitCount = ISO14443A_APP_NO_RESPONSE;

        if (DemodBitCount > 0) {
    2916:	61 15       	cp	r22, r1
    2918:	71 05       	cpc	r23, r1
    291a:	89 f4       	brne	.+34     	; 0x293e <ISO14443ACodecTask+0x4a>
INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
}

INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
    291c:	e0 91 ef 24 	lds	r30, 0x24EF
    2920:	f0 91 f0 24 	lds	r31, 0x24F0
    2924:	09 95       	icall
            CodecBufferPtr = CodecBuffer;
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
            LoadModState = LOADMOD_START;
        } else {
            /* No data to be processed. Disable loadmodding and start listening again */
            CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    2926:	10 92 40 09 	sts	0x0940, r1
            CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    292a:	10 92 46 09 	sts	0x0946, r1

            StartDemod();
    292e:	b1 dd       	rcall	.-1182   	; 0x2492 <StartDemod>
        }
    }

    if (Flags.LoadmodFinished) {
    2930:	80 91 b4 24 	lds	r24, 0x24B4
    2934:	81 11       	cpse	r24, r1
    2936:	2a c0       	rjmp	.+84     	; 0x298c <ISO14443ACodecTask+0x98>
        Flags.LoadmodFinished = 0;
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    }
}
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	08 95       	ret
INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
}

INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
    293e:	e0 91 f3 24 	lds	r30, 0x24F3
    2942:	f0 91 f4 24 	lds	r31, 0x24F4
    2946:	80 e1       	ldi	r24, 0x10	; 16
    2948:	96 e2       	ldi	r25, 0x26	; 38
    294a:	09 95       	icall

        if (DemodBitCount > 0) {
            /* Call application if we received data */
            AnswerBitCount = ApplicationProcess(CodecBuffer, DemodBitCount);

            if (AnswerBitCount & ISO14443A_APP_CUSTOM_PARITY) {
    294c:	94 ff       	sbrs	r25, 4
    294e:	23 c0       	rjmp	.+70     	; 0x2996 <ISO14443ACodecTask+0xa2>
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
    2950:	9f 7e       	andi	r25, 0xEF	; 239
            }
        } else {
            ApplicationReset();
        }

        if (AnswerBitCount != ISO14443A_APP_NO_RESPONSE) {
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	41 f3       	breq	.-48     	; 0x2926 <ISO14443ACodecTask+0x32>
            BitCount = AnswerBitCount;
    2956:	80 93 ad 24 	sts	0x24AD, r24
    295a:	90 93 ae 24 	sts	0x24AE, r25
            BitSent = 0;
    295e:	10 92 ab 24 	sts	0x24AB, r1
    2962:	10 92 ac 24 	sts	0x24AC, r1
            CodecBufferPtr = CodecBuffer;
    2966:	80 e1       	ldi	r24, 0x10	; 16
    2968:	96 e2       	ldi	r25, 0x26	; 38
    296a:	80 93 b1 24 	sts	0x24B1, r24
    296e:	90 93 b2 24 	sts	0x24B2, r25
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    2972:	80 e9       	ldi	r24, 0x90	; 144
    2974:	96 e2       	ldi	r25, 0x26	; 38
    2976:	80 93 af 24 	sts	0x24AF, r24
    297a:	90 93 b0 24 	sts	0x24B0, r25
            LoadModState = LOADMOD_START;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	80 93 a6 24 	sts	0x24A6, r24

            StartDemod();
        }
    }

    if (Flags.LoadmodFinished) {
    2984:	80 91 b4 24 	lds	r24, 0x24B4
    2988:	88 23       	and	r24, r24
    298a:	b1 f2       	breq	.-84     	; 0x2938 <ISO14443ACodecTask+0x44>
        Flags.LoadmodFinished = 0;
    298c:	10 92 b4 24 	sts	0x24B4, r1
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    }
}
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28

    if (Flags.LoadmodFinished) {
        Flags.LoadmodFinished = 0;
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    2994:	7e cd       	rjmp	.-1284   	; 0x2492 <StartDemod>
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    2996:	ac 01       	movw	r20, r24
    2998:	56 95       	lsr	r21
    299a:	47 95       	ror	r20
    299c:	56 95       	lsr	r21
    299e:	47 95       	ror	r20
    29a0:	56 95       	lsr	r21
    29a2:	47 95       	ror	r20
    29a4:	41 15       	cp	r20, r1
    29a6:	51 05       	cpc	r21, r1
    29a8:	a1 f2       	breq	.-88     	; 0x2952 <ISO14443ACodecTask+0x5e>
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
                            ODD_PARITY(CodecBuffer[i]);
    29b0:	f9 01       	movw	r30, r18
    29b2:	e0 5f       	subi	r30, 0xF0	; 240
    29b4:	f9 4d       	sbci	r31, 0xD9	; 217
    29b6:	60 81       	ld	r22, Z
    29b8:	06 2e       	mov	r0, r22
    29ba:	62 95       	swap	r22
    29bc:	60 25       	eor	r22, r0
    29be:	06 2e       	mov	r0, r22
    29c0:	66 95       	lsr	r22
    29c2:	66 95       	lsr	r22
    29c4:	60 25       	eor	r22, r0
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
    29c6:	e0 58       	subi	r30, 0x80	; 128
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
                            ODD_PARITY(CodecBuffer[i]);
    29ca:	6f 5f       	subi	r22, 0xFF	; 255
    29cc:	66 95       	lsr	r22
    29ce:	61 70       	andi	r22, 0x01	; 1
    29d0:	c6 2f       	mov	r28, r22
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	d2 2f       	mov	r29, r18
    29d6:	21 e0       	ldi	r18, 0x01	; 1
    29d8:	c2 27       	eor	r28, r18
    29da:	c0 83       	st	Z, r28
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    29dc:	7f 5f       	subi	r23, 0xFF	; 255
    29de:	27 2f       	mov	r18, r23
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	24 17       	cp	r18, r20
    29e4:	35 07       	cpc	r19, r21
    29e6:	20 f3       	brcs	.-56     	; 0x29b0 <ISO14443ACodecTask+0xbc>
    29e8:	b6 cf       	rjmp	.-148    	; 0x2956 <ISO14443ACodecTask+0x62>

000029ea <MifareClassicAppInit1K>:
    Block[11] = Block[3];
}

void MifareClassicAppInit1K(void)
{
    State = STATE_IDLE;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	80 93 d1 24 	sts	0x24D1, r24
    CardATQAValue = MFCLASSIC_1K_ATQA_VALUE;
    29f0:	84 e0       	ldi	r24, 0x04	; 4
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	80 93 b6 24 	sts	0x24B6, r24
    29f8:	90 93 b7 24 	sts	0x24B7, r25
    CardSAKValue = MFCLASSIC_1K_SAK_CL1_VALUE;
    29fc:	88 e0       	ldi	r24, 0x08	; 8
    29fe:	80 93 b5 24 	sts	0x24B5, r24
    2a02:	08 95       	ret

00002a04 <MifareClassicAppInit4K>:
}

void MifareClassicAppInit4K(void)
{
    State = STATE_IDLE;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	80 93 d1 24 	sts	0x24D1, r24
    CardATQAValue = MFCLASSIC_4K_ATQA_VALUE;
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	80 93 b6 24 	sts	0x24B6, r24
    2a12:	90 93 b7 24 	sts	0x24B7, r25
    CardSAKValue = MFCLASSIC_4K_SAK_CL1_VALUE;
    2a16:	88 e1       	ldi	r24, 0x18	; 24
    2a18:	80 93 b5 24 	sts	0x24B5, r24
    2a1c:	08 95       	ret

00002a1e <MifareClassicAppReset>:
}

void MifareClassicAppReset(void)
{
    State = STATE_IDLE;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	80 93 d1 24 	sts	0x24D1, r24
    2a24:	08 95       	ret

00002a26 <MifareClassicAppTask>:
}

void MifareClassicAppTask(void)
{
    2a26:	08 95       	ret

00002a28 <MifareClassicAppProcess>:

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    2a28:	7f 92       	push	r7
    2a2a:	8f 92       	push	r8
    2a2c:	9f 92       	push	r9
    2a2e:	af 92       	push	r10
    2a30:	bf 92       	push	r11
    2a32:	cf 92       	push	r12
    2a34:	df 92       	push	r13
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	2e 97       	sbiw	r28, 0x0e	; 14
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	8c 01       	movw	r16, r24
    switch(State) {
    2a4e:	40 91 d1 24 	lds	r20, 0x24D1
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	4a 30       	cpi	r20, 0x0A	; 10
    2a56:	51 05       	cpc	r21, r1
    2a58:	98 f0       	brcs	.+38     	; 0x2a80 <MifareClassicAppProcess+0x58>

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
            return true;
        } else {
            /* We have not been selected. Don't send anything. */
            *BitCount = 0;
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
}
    2a5e:	2e 96       	adiw	r28, 0x0e	; 14
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	df 90       	pop	r13
    2a72:	cf 90       	pop	r12
    2a74:	bf 90       	pop	r11
    2a76:	af 90       	pop	r10
    2a78:	9f 90       	pop	r9
    2a7a:	8f 90       	pop	r8
    2a7c:	7f 90       	pop	r7
    2a7e:	08 95       	ret

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    2a80:	fa 01       	movw	r30, r20
    2a82:	ee 5e       	subi	r30, 0xEE	; 238
    2a84:	fe 4f       	sbci	r31, 0xFE	; 254
    2a86:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__tablejump2__>
    2a8a:	7c 01       	movw	r14, r24
    2a8c:	d1 2c       	mov	r13, r1
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    2a8e:	f7 01       	movw	r30, r14
    2a90:	c0 80       	ld	r12, Z
    2a92:	99 d5       	rcall	.+2866   	; 0x35c6 <Crypto1Byte>
    2a94:	8c 25       	eor	r24, r12
    2a96:	d7 01       	movw	r26, r14
    2a98:	8d 93       	st	X+, r24
    2a9a:	7d 01       	movw	r14, r26
         * sending the data to be written. Decrypt the data first and
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
    2a9c:	d3 94       	inc	r13
    2a9e:	b2 e1       	ldi	r27, 0x12	; 18
    2aa0:	db 12       	cpse	r13, r27
    2aa2:	f5 cf       	rjmp	.-22     	; 0x2a8e <MifareClassicAppProcess+0x66>
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
    2aa4:	60 e1       	ldi	r22, 0x10	; 16
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	c8 01       	movw	r24, r16
    2aaa:	e5 d3       	rcall	.+1994   	; 0x3276 <ISO14443ACheckCRCA>
    2aac:	88 23       	and	r24, r24
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <MifareClassicAppProcess+0x8a>
    2ab0:	ec c1       	rjmp	.+984    	; 0x2e8a <MifareClassicAppProcess+0x462>
            if (!ActiveConfiguration.ReadOnly) {
    2ab2:	80 91 fc 24 	lds	r24, 0x24FC
    2ab6:	88 23       	and	r24, r24
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <MifareClassicAppProcess+0x94>
    2aba:	ed c1       	rjmp	.+986    	; 0x2e96 <MifareClassicAppProcess+0x46e>
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
            } else {
                /* Silently ignore in ReadOnly mode */
            }

            Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2abc:	97 d5       	rcall	.+2862   	; 0x35ec <Crypto1Nibble>
    2abe:	9a e0       	ldi	r25, 0x0A	; 10
    2ac0:	98 27       	eor	r25, r24
    2ac2:	d8 01       	movw	r26, r16
    2ac4:	9c 93       	st	X, r25
        } else {
            /* CRC Error. */
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
        }

        State = STATE_AUTHED_IDLE;
    2ac6:	85 e0       	ldi	r24, 0x05	; 5
    2ac8:	80 93 d1 24 	sts	0x24D1, r24
        return ACK_NAK_FRAME_SIZE;
    2acc:	84 e0       	ldi	r24, 0x04	; 4
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	c6 cf       	rjmp	.-116    	; 0x2a5e <MifareClassicAppProcess+0x36>
    2ad2:	7c 01       	movw	r14, r24

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    2ad4:	56 e0       	ldi	r21, 0x06	; 6
    2ad6:	d5 2e       	mov	r13, r21
         * decrypt the data and check CRC. Read data from the requested block
         * address into the global block buffer and check for integrity. Then
         * add or subtract according to issued command if necessary and store
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    2ad8:	d7 01       	movw	r26, r14
    2ada:	cc 90       	ld	r12, X
    2adc:	74 d5       	rcall	.+2792   	; 0x35c6 <Crypto1Byte>
    2ade:	8c 25       	eor	r24, r12
    2ae0:	f7 01       	movw	r30, r14
    2ae2:	81 93       	st	Z+, r24
    2ae4:	7f 01       	movw	r14, r30
    2ae6:	da 94       	dec	r13
         * been issued earlier and the reader is now sending the data. First,
         * decrypt the data and check CRC. Read data from the requested block
         * address into the global block buffer and check for integrity. Then
         * add or subtract according to issued command if necessary and store
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
    2ae8:	b9 f7       	brne	.-18     	; 0x2ad8 <MifareClassicAppProcess+0xb0>
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
    2aea:	64 e0       	ldi	r22, 0x04	; 4
    2aec:	70 e0       	ldi	r23, 0x00	; 0
    2aee:	c8 01       	movw	r24, r16
    2af0:	c2 d3       	rcall	.+1924   	; 0x3276 <ISO14443ACheckCRCA>
    2af2:	81 11       	cpse	r24, r1
    2af4:	b0 c1       	rjmp	.+864    	; 0x2e56 <MifareClassicAppProcess+0x42e>
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
            }
        } else {
            /* CRC Error. */
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2af6:	7a d5       	rcall	.+2804   	; 0x35ec <Crypto1Nibble>
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	98 27       	eor	r25, r24
    2afc:	d8 01       	movw	r26, r16
    2afe:	9c 93       	st	X, r25
    2b00:	e2 cf       	rjmp	.-60     	; 0x2ac6 <MifareClassicAppProcess+0x9e>
uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    case STATE_IDLE:
    case STATE_HALT:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    2b02:	20 91 b6 24 	lds	r18, 0x24B6
    2b06:	90 91 b7 24 	lds	r25, 0x24B7
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    2b0a:	d8 01       	movw	r26, r16
    2b0c:	8c 91       	ld	r24, X
    2b0e:	86 32       	cpi	r24, 0x26	; 38
    2b10:	19 f0       	breq	.+6      	; 0x2b18 <MifareClassicAppProcess+0xf0>
    2b12:	82 35       	cpi	r24, 0x52	; 82
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <MifareClassicAppProcess+0xf0>
    2b16:	a1 cf       	rjmp	.-190    	; 0x2a5a <MifareClassicAppProcess+0x32>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    2b18:	f8 01       	movw	r30, r16
    2b1a:	20 83       	st	Z, r18
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    2b1c:	91 83       	std	Z+1, r25	; 0x01
        }
        break;

    case STATE_READY:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
            State = STATE_READY;
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	80 93 d1 24 	sts	0x24D1, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    2b24:	80 e1       	ldi	r24, 0x10	; 16
    2b26:	90 e0       	ldi	r25, 0x00	; 0
            return BitCount;
    2b28:	9a cf       	rjmp	.-204    	; 0x2a5e <MifareClassicAppProcess+0x36>
            return BitCount;
        }
        break;

    case STATE_READY:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    2b2a:	20 91 b6 24 	lds	r18, 0x24B6
    2b2e:	90 91 b7 24 	lds	r25, 0x24B7
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    2b32:	d8 01       	movw	r26, r16
    2b34:	8c 91       	ld	r24, X
    2b36:	86 32       	cpi	r24, 0x26	; 38
    2b38:	79 f3       	breq	.-34     	; 0x2b18 <MifareClassicAppProcess+0xf0>
    2b3a:	82 35       	cpi	r24, 0x52	; 82
    2b3c:	69 f3       	breq	.-38     	; 0x2b18 <MifareClassicAppProcess+0xf0>
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
    2b3e:	83 39       	cpi	r24, 0x93	; 147
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <MifareClassicAppProcess+0x11c>
    2b42:	cb c1       	rjmp	.+918    	; 0x2eda <MifareClassicAppProcess+0x4b2>
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
    2b44:	10 92 d1 24 	sts	0x24D1, r1
                    return ISO14443A_APP_NO_RESPONSE;
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	88 cf       	rjmp	.-240    	; 0x2a5e <MifareClassicAppProcess+0x36>

    case STATE_AUTHING:
        /* Reader delivers an encrypted nonce. We use it
        * to setup the crypto1 LFSR in nonlinear feedback mode.
        * Furthermore it delivers an encrypted answer. Decrypt and check it */
        Crypto1Auth(&Buffer[0]);
    2b4e:	16 d5       	rcall	.+2604   	; 0x357c <Crypto1Auth>
    2b50:	68 01       	movw	r12, r16
    2b52:	b4 e0       	ldi	r27, 0x04	; 4
    2b54:	cb 0e       	add	r12, r27
    2b56:	d1 1c       	adc	r13, r1

        for (uint8_t i=0; i<4; i++)
    2b58:	b1 2c       	mov	r11, r1
            Buffer[i+4] ^= Crypto1Byte();
    2b5a:	f6 01       	movw	r30, r12
    2b5c:	a0 80       	ld	r10, Z
    2b5e:	33 d5       	rcall	.+2662   	; 0x35c6 <Crypto1Byte>
    2b60:	8a 25       	eor	r24, r10
    2b62:	d6 01       	movw	r26, r12
    2b64:	8d 93       	st	X+, r24
    2b66:	6d 01       	movw	r12, r26
        /* Reader delivers an encrypted nonce. We use it
        * to setup the crypto1 LFSR in nonlinear feedback mode.
        * Furthermore it delivers an encrypted answer. Decrypt and check it */
        Crypto1Auth(&Buffer[0]);

        for (uint8_t i=0; i<4; i++)
    2b68:	b3 94       	inc	r11
    2b6a:	b4 e0       	ldi	r27, 0x04	; 4
    2b6c:	bb 12       	cpse	r11, r27
    2b6e:	f5 cf       	rjmp	.-22     	; 0x2b5a <MifareClassicAppProcess+0x132>
            Buffer[i+4] ^= Crypto1Byte();

        if ((Buffer[4] == ReaderResponse[0]) &&
    2b70:	f8 01       	movw	r30, r16
    2b72:	94 81       	ldd	r25, Z+4	; 0x04
    2b74:	80 91 c9 24 	lds	r24, 0x24C9
    2b78:	98 17       	cp	r25, r24
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <MifareClassicAppProcess+0x156>
    2b7c:	2e c1       	rjmp	.+604    	; 0x2dda <MifareClassicAppProcess+0x3b2>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	80 93 d1 24 	sts	0x24D1, r24
        /* Unknown state? Should never happen. */
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
        }

        break;
    2b88:	6a cf       	rjmp	.-300    	; 0x2a5e <MifareClassicAppProcess+0x36>

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    2b8a:	7c 01       	movw	r14, r24
    2b8c:	74 e0       	ldi	r23, 0x04	; 4
    2b8e:	b7 2e       	mov	r11, r23

    case STATE_AUTHED_IDLE:
        /* In this state, all communication is encrypted. Thus we first have to encrypt
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();
    2b90:	d7 01       	movw	r26, r14
    2b92:	ac 90       	ld	r10, X
    2b94:	18 d5       	rcall	.+2608   	; 0x35c6 <Crypto1Byte>
    2b96:	8a 25       	eor	r24, r10
    2b98:	f7 01       	movw	r30, r14
    2b9a:	81 93       	st	Z+, r24
    2b9c:	7f 01       	movw	r14, r30
    2b9e:	ba 94       	dec	r11
        break;

    case STATE_AUTHED_IDLE:
        /* In this state, all communication is encrypted. Thus we first have to encrypt
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
    2ba0:	b9 f7       	brne	.-18     	; 0x2b90 <MifareClassicAppProcess+0x168>
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
    2ba2:	d8 01       	movw	r26, r16
    2ba4:	8c 91       	ld	r24, X
    2ba6:	80 33       	cpi	r24, 0x30	; 48
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <MifareClassicAppProcess+0x184>
    2baa:	89 c1       	rjmp	.+786    	; 0x2ebe <MifareClassicAppProcess+0x496>
                        * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
    2bac:	80 3a       	cpi	r24, 0xA0	; 160
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <MifareClassicAppProcess+0x18a>
    2bb0:	cb c1       	rjmp	.+918    	; 0x2f48 <MifareClassicAppProcess+0x520>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
    2bb2:	80 3c       	cpi	r24, 0xC0	; 192
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <MifareClassicAppProcess+0x190>
    2bb6:	da c1       	rjmp	.+948    	; 0x2f6c <MifareClassicAppProcess+0x544>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
    2bb8:	81 3c       	cpi	r24, 0xC1	; 193
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <MifareClassicAppProcess+0x196>
    2bbc:	75 c2       	rjmp	.+1258   	; 0x30a8 <__stack+0xa9>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
    2bbe:	82 3c       	cpi	r24, 0xC2	; 194
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <MifareClassicAppProcess+0x19c>
    2bc2:	80 c2       	rjmp	.+1280   	; 0x30c4 <__stack+0xc5>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
    2bc4:	80 3b       	cpi	r24, 0xB0	; 176
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <MifareClassicAppProcess+0x1a2>
    2bc8:	8e c2       	rjmp	.+1308   	; 0x30e6 <__stack+0xe7>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
    2bca:	80 56       	subi	r24, 0x60	; 96
    2bcc:	82 30       	cpi	r24, 0x02	; 2
    2bce:	b8 f6       	brcc	.-82     	; 0x2b7e <MifareClassicAppProcess+0x156>
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    2bd0:	62 e0       	ldi	r22, 0x02	; 2
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	c8 01       	movw	r24, r16
    2bd6:	4f d3       	rcall	.+1694   	; 0x3276 <ISO14443ACheckCRCA>
    2bd8:	88 23       	and	r24, r24
    2bda:	09 f4       	brne	.+2      	; 0x2bde <MifareClassicAppProcess+0x1b6>
    2bdc:	68 c1       	rjmp	.+720    	; 0x2eae <MifareClassicAppProcess+0x486>
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    2bde:	f8 01       	movw	r30, r16
    2be0:	81 81       	ldd	r24, Z+1	; 0x01
    2be2:	8c 73       	andi	r24, 0x3C	; 60
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    2be4:	90 81       	ld	r25, Z
    2be6:	90 36       	cpi	r25, 0x60	; 96
    2be8:	09 f4       	brne	.+2      	; 0x2bec <MifareClassicAppProcess+0x1c4>
    2bea:	eb c2       	rjmp	.+1494   	; 0x31c2 <__stack+0x1c3>
    2bec:	6a e3       	ldi	r22, 0x3A	; 58
    2bee:	70 e0       	ldi	r23, 0x00	; 0
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    2bf0:	7b 01       	movw	r14, r22
    2bf2:	f0 e1       	ldi	r31, 0x10	; 16
    2bf4:	8f 9f       	mul	r24, r31
    2bf6:	e0 0c       	add	r14, r0
    2bf8:	f1 1c       	adc	r15, r1
    2bfa:	11 24       	eor	r1, r1
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    2bfc:	64 e0       	ldi	r22, 0x04	; 4
    2bfe:	ce 01       	movw	r24, r28
    2c00:	07 96       	adiw	r24, 0x07	; 7
    2c02:	0e 94 2f 05 	call	0xa5e	; 0xa5e <RandomGetBuffer>
                MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2c06:	44 e0       	ldi	r20, 0x04	; 4
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	60 e0       	ldi	r22, 0x00	; 0
    2c0c:	70 e0       	ldi	r23, 0x00	; 0
    2c0e:	ce 01       	movw	r24, r28
    2c10:	0b 96       	adiw	r24, 0x0b	; 11
    2c12:	0e 94 d4 05 	call	0xba8	; 0xba8 <MemoryReadBlock>
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    2c16:	46 e0       	ldi	r20, 0x06	; 6
    2c18:	50 e0       	ldi	r21, 0x00	; 0
    2c1a:	b7 01       	movw	r22, r14
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	01 96       	adiw	r24, 0x01	; 1
    2c20:	0e 94 d4 05 	call	0xba8	; 0xba8 <MemoryReadBlock>
    2c24:	8f 81       	ldd	r24, Y+7	; 0x07
    2c26:	98 85       	ldd	r25, Y+8	; 0x08
    2c28:	a9 85       	ldd	r26, Y+9	; 0x09
    2c2a:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c2c:	80 93 c9 24 	sts	0x24C9, r24
    2c30:	90 93 ca 24 	sts	0x24CA, r25
    2c34:	a0 93 cb 24 	sts	0x24CB, r26
    2c38:	b0 93 cc 24 	sts	0x24CC, r27

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];

                Crypto1PRNG(ReaderResponse, 64);
    2c3c:	60 e4       	ldi	r22, 0x40	; 64
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	89 ec       	ldi	r24, 0xC9	; 201
    2c42:	94 e2       	ldi	r25, 0x24	; 36
    2c44:	e6 d4       	rcall	.+2508   	; 0x3612 <Crypto1PRNG>
    2c46:	80 91 c9 24 	lds	r24, 0x24C9
    2c4a:	90 91 ca 24 	lds	r25, 0x24CA
    2c4e:	a0 91 cb 24 	lds	r26, 0x24CB
    2c52:	b0 91 cc 24 	lds	r27, 0x24CC
    2c56:	80 93 cd 24 	sts	0x24CD, r24
    2c5a:	90 93 ce 24 	sts	0x24CE, r25
    2c5e:	a0 93 cf 24 	sts	0x24CF, r26
    2c62:	b0 93 d0 24 	sts	0x24D0, r27

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];

                Crypto1PRNG(CardResponse, 32);
    2c66:	60 e2       	ldi	r22, 0x20	; 32
    2c68:	70 e0       	ldi	r23, 0x00	; 0
    2c6a:	8d ec       	ldi	r24, 0xCD	; 205
    2c6c:	94 e2       	ldi	r25, 0x24	; 36
    2c6e:	d1 d4       	rcall	.+2466   	; 0x3612 <Crypto1PRNG>

                /* Setup crypto1 cipher. */
                Crypto1Setup(Key, Uid, CardNonce);
    2c70:	ae 01       	movw	r20, r28
    2c72:	49 5f       	subi	r20, 0xF9	; 249
    2c74:	5f 4f       	sbci	r21, 0xFF	; 255
    2c76:	be 01       	movw	r22, r28
    2c78:	65 5f       	subi	r22, 0xF5	; 245
    2c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	b0 d3       	rcall	.+1888   	; 0x33e2 <Crypto1Setup>
    2c82:	8f 81       	ldd	r24, Y+7	; 0x07
    2c84:	98 85       	ldd	r25, Y+8	; 0x08
    2c86:	a9 85       	ldd	r26, Y+9	; 0x09
    2c88:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];

                /* Respond with the encrypted random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    2c94:	84 e0       	ldi	r24, 0x04	; 4
    2c96:	80 93 d1 24 	sts	0x24D1, r24

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    2c9a:	80 e2       	ldi	r24, 0x20	; 32
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	df ce       	rjmp	.-578    	; 0x2a5e <MifareClassicAppProcess+0x36>
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	80 81       	ld	r24, Z
    2ca4:	86 32       	cpi	r24, 0x26	; 38
    2ca6:	d1 f0       	breq	.+52     	; 0x2cdc <MifareClassicAppProcess+0x2b4>
    2ca8:	82 35       	cpi	r24, 0x52	; 82
    2caa:	c1 f0       	breq	.+48     	; 0x2cdc <MifareClassicAppProcess+0x2b4>

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, MFCLASSIC_1K_ATQA_VALUE)) {
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
    2cac:	80 35       	cpi	r24, 0x50	; 80
    2cae:	09 f1       	breq	.+66     	; 0x2cf2 <MifareClassicAppProcess+0x2ca>
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
    2cb0:	90 ea       	ldi	r25, 0xA0	; 160
    2cb2:	98 0f       	add	r25, r24
    2cb4:	92 30       	cpi	r25, 0x02	; 2
    2cb6:	38 f1       	brcs	.+78     	; 0x2d06 <MifareClassicAppProcess+0x2de>
                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (  (Buffer[0] == CMD_READ) || (Buffer[0] == CMD_WRITE) || (Buffer[0] == CMD_DECREMENT)
    2cb8:	98 2f       	mov	r25, r24
    2cba:	9f 77       	andi	r25, 0x7F	; 127
    2cbc:	90 33       	cpi	r25, 0x30	; 48
    2cbe:	31 f0       	breq	.+12     	; 0x2ccc <MifareClassicAppProcess+0x2a4>
    2cc0:	80 3a       	cpi	r24, 0xA0	; 160
    2cc2:	21 f0       	breq	.+8      	; 0x2ccc <MifareClassicAppProcess+0x2a4>
    2cc4:	80 5c       	subi	r24, 0xC0	; 192
    2cc6:	83 30       	cpi	r24, 0x03	; 3
    2cc8:	08 f0       	brcs	.+2      	; 0x2ccc <MifareClassicAppProcess+0x2a4>
    2cca:	59 cf       	rjmp	.-334    	; 0x2b7e <MifareClassicAppProcess+0x156>
                  || (Buffer[0] == CMD_INCREMENT) || (Buffer[0] == CMD_RESTORE) || (Buffer[0] == CMD_TRANSFER) ) {
            State = STATE_IDLE;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	80 93 d1 24 	sts	0x24D1, r24
            Buffer[0] = NAK_NOT_AUTHED;
    2cd2:	84 e0       	ldi	r24, 0x04	; 4
    2cd4:	d8 01       	movw	r26, r16
    2cd6:	8c 93       	st	X, r24
            return ACK_NAK_FRAME_SIZE;
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	c1 ce       	rjmp	.-638    	; 0x2a5e <MifareClassicAppProcess+0x36>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    2cdc:	84 e0       	ldi	r24, 0x04	; 4
    2cde:	d8 01       	movw	r26, r16
    2ce0:	8c 93       	st	X, r24
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    2ce2:	11 96       	adiw	r26, 0x01	; 1
    2ce4:	1c 92       	st	X, r1
        }
        break;

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, MFCLASSIC_1K_ATQA_VALUE)) {
            State = STATE_READY;
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	80 93 d1 24 	sts	0x24D1, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    2cec:	80 e1       	ldi	r24, 0x10	; 16
    2cee:	90 e0       	ldi	r25, 0x00	; 0
            return BitCount;
    2cf0:	b6 ce       	rjmp	.-660    	; 0x2a5e <MifareClassicAppProcess+0x36>
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
    2cf2:	f8 01       	movw	r30, r16
    2cf4:	81 81       	ldd	r24, Z+1	; 0x01
    2cf6:	88 23       	and	r24, r24
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <MifareClassicAppProcess+0x2d4>
    2cfa:	13 c2       	rjmp	.+1062   	; 0x3122 <__stack+0x123>
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
                    return ACK_NAK_FRAME_SIZE;
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	10 82       	st	Z, r1
                return ACK_NAK_FRAME_SIZE;
    2d00:	84 e0       	ldi	r24, 0x04	; 4
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	ac ce       	rjmp	.-680    	; 0x2a5e <MifareClassicAppProcess+0x36>
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    2d06:	62 e0       	ldi	r22, 0x02	; 2
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	c8 01       	movw	r24, r16
    2d0c:	b4 d2       	rcall	.+1384   	; 0x3276 <ISO14443ACheckCRCA>
    2d0e:	88 23       	and	r24, r24
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <MifareClassicAppProcess+0x2ec>
    2d12:	0d c2       	rjmp	.+1050   	; 0x312e <__stack+0x12f>
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    2d14:	d8 01       	movw	r26, r16
    2d16:	11 96       	adiw	r26, 0x01	; 1
    2d18:	2c 91       	ld	r18, X
    2d1a:	11 97       	sbiw	r26, 0x01	; 1
    2d1c:	2c 73       	andi	r18, 0x3C	; 60
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    2d1e:	8c 91       	ld	r24, X
    2d20:	80 36       	cpi	r24, 0x60	; 96
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <MifareClassicAppProcess+0x2fe>
    2d24:	51 c2       	rjmp	.+1186   	; 0x31c8 <__stack+0x1c9>
    2d26:	8a e3       	ldi	r24, 0x3A	; 58
    2d28:	90 e0       	ldi	r25, 0x00	; 0
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    2d2a:	7c 01       	movw	r14, r24
    2d2c:	b0 e1       	ldi	r27, 0x10	; 16
    2d2e:	2b 9f       	mul	r18, r27
    2d30:	e0 0c       	add	r14, r0
    2d32:	f1 1c       	adc	r15, r1
    2d34:	11 24       	eor	r1, r1
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    2d36:	64 e0       	ldi	r22, 0x04	; 4
    2d38:	ce 01       	movw	r24, r28
    2d3a:	07 96       	adiw	r24, 0x07	; 7
    2d3c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <RandomGetBuffer>
                MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2d40:	44 e0       	ldi	r20, 0x04	; 4
    2d42:	50 e0       	ldi	r21, 0x00	; 0
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	ce 01       	movw	r24, r28
    2d4a:	0b 96       	adiw	r24, 0x0b	; 11
    2d4c:	0e 94 d4 05 	call	0xba8	; 0xba8 <MemoryReadBlock>
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    2d50:	46 e0       	ldi	r20, 0x06	; 6
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	b7 01       	movw	r22, r14
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	0e 94 d4 05 	call	0xba8	; 0xba8 <MemoryReadBlock>
    2d5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d60:	98 85       	ldd	r25, Y+8	; 0x08
    2d62:	a9 85       	ldd	r26, Y+9	; 0x09
    2d64:	ba 85       	ldd	r27, Y+10	; 0x0a
    2d66:	80 93 c9 24 	sts	0x24C9, r24
    2d6a:	90 93 ca 24 	sts	0x24CA, r25
    2d6e:	a0 93 cb 24 	sts	0x24CB, r26
    2d72:	b0 93 cc 24 	sts	0x24CC, r27

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];

                Crypto1PRNG(ReaderResponse, 64);
    2d76:	60 e4       	ldi	r22, 0x40	; 64
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	89 ec       	ldi	r24, 0xC9	; 201
    2d7c:	94 e2       	ldi	r25, 0x24	; 36
    2d7e:	49 d4       	rcall	.+2194   	; 0x3612 <Crypto1PRNG>
    2d80:	80 91 c9 24 	lds	r24, 0x24C9
    2d84:	90 91 ca 24 	lds	r25, 0x24CA
    2d88:	a0 91 cb 24 	lds	r26, 0x24CB
    2d8c:	b0 91 cc 24 	lds	r27, 0x24CC
    2d90:	80 93 cd 24 	sts	0x24CD, r24
    2d94:	90 93 ce 24 	sts	0x24CE, r25
    2d98:	a0 93 cf 24 	sts	0x24CF, r26
    2d9c:	b0 93 d0 24 	sts	0x24D0, r27

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];

                Crypto1PRNG(CardResponse, 32);
    2da0:	60 e2       	ldi	r22, 0x20	; 32
    2da2:	70 e0       	ldi	r23, 0x00	; 0
    2da4:	8d ec       	ldi	r24, 0xCD	; 205
    2da6:	94 e2       	ldi	r25, 0x24	; 36
    2da8:	34 d4       	rcall	.+2152   	; 0x3612 <Crypto1PRNG>

                /* Respond with the random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    2daa:	84 e0       	ldi	r24, 0x04	; 4
    2dac:	80 93 d1 24 	sts	0x24D1, r24
    2db0:	8f 81       	ldd	r24, Y+7	; 0x07
    2db2:	98 85       	ldd	r25, Y+8	; 0x08
    2db4:	a9 85       	ldd	r26, Y+9	; 0x09
    2db6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2db8:	f8 01       	movw	r30, r16
    2dba:	80 83       	st	Z, r24
    2dbc:	91 83       	std	Z+1, r25	; 0x01
    2dbe:	a2 83       	std	Z+2, r26	; 0x02
    2dc0:	b3 83       	std	Z+3, r27	; 0x03

                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];

                /* Setup crypto1 cipher. Discard in-place encrypted CardNonce. */
                Crypto1Setup(Key, Uid, CardNonce);
    2dc2:	ae 01       	movw	r20, r28
    2dc4:	49 5f       	subi	r20, 0xF9	; 249
    2dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc8:	be 01       	movw	r22, r28
    2dca:	65 5f       	subi	r22, 0xF5	; 245
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	ce 01       	movw	r24, r28
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	07 d3       	rcall	.+1550   	; 0x33e2 <Crypto1Setup>

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    2dd4:	80 e2       	ldi	r24, 0x20	; 32
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	42 ce       	rjmp	.-892    	; 0x2a5e <MifareClassicAppProcess+0x36>
        Crypto1Auth(&Buffer[0]);

        for (uint8_t i=0; i<4; i++)
            Buffer[i+4] ^= Crypto1Byte();

        if ((Buffer[4] == ReaderResponse[0]) &&
    2dda:	95 81       	ldd	r25, Z+5	; 0x05
    2ddc:	80 91 ca 24 	lds	r24, 0x24CA
    2de0:	98 13       	cpse	r25, r24
    2de2:	cd ce       	rjmp	.-614    	; 0x2b7e <MifareClassicAppProcess+0x156>
            (Buffer[5] == ReaderResponse[1]) &&
    2de4:	96 81       	ldd	r25, Z+6	; 0x06
    2de6:	80 91 cb 24 	lds	r24, 0x24CB
    2dea:	98 13       	cpse	r25, r24
    2dec:	c8 ce       	rjmp	.-624    	; 0x2b7e <MifareClassicAppProcess+0x156>
            (Buffer[6] == ReaderResponse[2]) &&
    2dee:	97 81       	ldd	r25, Z+7	; 0x07
    2df0:	80 91 cc 24 	lds	r24, 0x24CC
    2df4:	98 13       	cpse	r25, r24
    2df6:	c3 ce       	rjmp	.-634    	; 0x2b7e <MifareClassicAppProcess+0x156>
    2df8:	68 01       	movw	r12, r16
    2dfa:	0d ec       	ldi	r16, 0xCD	; 205
    2dfc:	14 e2       	ldi	r17, 0x24	; 36
    2dfe:	5f 01       	movw	r10, r30
    2e00:	f0 e8       	ldi	r31, 0x80	; 128
    2e02:	af 0e       	add	r10, r31
    2e04:	b1 1c       	adc	r11, r1
    2e06:	48 01       	movw	r8, r16
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2e08:	d8 01       	movw	r26, r16
    2e0a:	7d 90       	ld	r7, X+
    2e0c:	8d 01       	movw	r16, r26
    2e0e:	db d3       	rcall	.+1974   	; 0x35c6 <Crypto1Byte>
    2e10:	87 25       	eor	r24, r7
    2e12:	f6 01       	movw	r30, r12
    2e14:	81 93       	st	Z+, r24
    2e16:	6f 01       	movw	r12, r30
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2e18:	d4 01       	movw	r26, r8
    2e1a:	9c 90       	ld	r9, X
    2e1c:	09 2c       	mov	r0, r9
    2e1e:	92 94       	swap	r9
    2e20:	90 24       	eor	r9, r0
    2e22:	09 2c       	mov	r0, r9
    2e24:	96 94       	lsr	r9
    2e26:	96 94       	lsr	r9
    2e28:	90 24       	eor	r9, r0
    2e2a:	a9 d2       	rcall	.+1362   	; 0x337e <Crypto1FilterOutput>
    2e2c:	93 94       	inc	r9
    2e2e:	91 fa       	bst	r9, 1
    2e30:	ee 24       	eor	r14, r14
    2e32:	e0 f8       	bld	r14, 0
    2e34:	f1 2c       	mov	r15, r1
    2e36:	b1 e0       	ldi	r27, 0x01	; 1
    2e38:	eb 26       	eor	r14, r27
    2e3a:	8e 25       	eor	r24, r14
    2e3c:	f5 01       	movw	r30, r10
    2e3e:	81 93       	st	Z+, r24
    2e40:	5f 01       	movw	r10, r30
            (Buffer[5] == ReaderResponse[1]) &&
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
    2e42:	f4 e2       	ldi	r31, 0x24	; 36
    2e44:	01 3d       	cpi	r16, 0xD1	; 209
    2e46:	1f 07       	cpc	r17, r31
    2e48:	f1 f6       	brne	.-68     	; 0x2e06 <MifareClassicAppProcess+0x3de>
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
            }

            State = STATE_AUTHED_IDLE;
    2e4a:	85 e0       	ldi	r24, 0x05	; 5
    2e4c:	80 93 d1 24 	sts	0x24D1, r24

            return (CMD_AUTH_BA_FRAME_SIZE * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
    2e50:	80 e2       	ldi	r24, 0x20	; 32
    2e52:	90 e1       	ldi	r25, 0x10	; 16
    2e54:	04 ce       	rjmp	.-1016   	; 0x2a5e <MifareClassicAppProcess+0x36>
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
            MemoryReadBlock(BlockBuffer, (uint16_t) CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2e56:	60 91 c8 24 	lds	r22, 0x24C8
    2e5a:	f0 e1       	ldi	r31, 0x10	; 16
    2e5c:	6f 9f       	mul	r22, r31
    2e5e:	b0 01       	movw	r22, r0
    2e60:	11 24       	eor	r1, r1
    2e62:	40 e1       	ldi	r20, 0x10	; 16
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	88 eb       	ldi	r24, 0xB8	; 184
    2e68:	94 e2       	ldi	r25, 0x24	; 36
    2e6a:	0e 94 d4 05 	call	0xba8	; 0xba8 <MemoryReadBlock>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    2e6e:	20 91 b8 24 	lds	r18, 0x24B8
    2e72:	80 91 bc 24 	lds	r24, 0x24BC
    2e76:	80 95       	com	r24
    2e78:	28 17       	cp	r18, r24
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <MifareClassicAppProcess+0x456>
    2e7c:	88 c0       	rjmp	.+272    	; 0x2f8e <MifareClassicAppProcess+0x566>
                State = STATE_AUTHED_IDLE;
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
            } else {
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
    2e7e:	b6 d3       	rcall	.+1900   	; 0x35ec <Crypto1Nibble>
    2e80:	96 e0       	ldi	r25, 0x06	; 6
    2e82:	98 27       	eor	r25, r24
    2e84:	f8 01       	movw	r30, r16
    2e86:	90 83       	st	Z, r25
    2e88:	1e ce       	rjmp	.-964    	; 0x2ac6 <MifareClassicAppProcess+0x9e>
                /* Silently ignore in ReadOnly mode */
            }

            Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
        } else {
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2e8a:	b0 d3       	rcall	.+1888   	; 0x35ec <Crypto1Nibble>
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	98 27       	eor	r25, r24
    2e90:	f8 01       	movw	r30, r16
    2e92:	90 83       	st	Z, r25
    2e94:	18 ce       	rjmp	.-976    	; 0x2ac6 <MifareClassicAppProcess+0x9e>
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
            if (!ActiveConfiguration.ReadOnly) {
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2e96:	60 91 c8 24 	lds	r22, 0x24C8
    2e9a:	e0 e1       	ldi	r30, 0x10	; 16
    2e9c:	6e 9f       	mul	r22, r30
    2e9e:	b0 01       	movw	r22, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	40 e1       	ldi	r20, 0x10	; 16
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	c8 01       	movw	r24, r16
    2ea8:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <MemoryWriteBlock>
    2eac:	07 ce       	rjmp	.-1010   	; 0x2abc <MifareClassicAppProcess+0x94>
                * form the reader in the next frame. */
                State = STATE_AUTHING;

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2eae:	9e d3       	rcall	.+1852   	; 0x35ec <Crypto1Nibble>
    2eb0:	91 e0       	ldi	r25, 0x01	; 1
    2eb2:	98 27       	eor	r25, r24
    2eb4:	d8 01       	movw	r26, r16
    2eb6:	9c 93       	st	X, r25
                return ACK_NAK_FRAME_SIZE;
    2eb8:	84 e0       	ldi	r24, 0x04	; 4
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	d0 cd       	rjmp	.-1120   	; 0x2a5e <MifareClassicAppProcess+0x36>
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
    2ebe:	62 e0       	ldi	r22, 0x02	; 2
    2ec0:	70 e0       	ldi	r23, 0x00	; 0
    2ec2:	c8 01       	movw	r24, r16
    2ec4:	d8 d1       	rcall	.+944    	; 0x3276 <ISO14443ACheckCRCA>
    2ec6:	81 11       	cpse	r24, r1
    2ec8:	38 c1       	rjmp	.+624    	; 0x313a <__stack+0x13b>
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
                CurrentAddress = Buffer[1];
                State = STATE_RESTORE;
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2eca:	90 d3       	rcall	.+1824   	; 0x35ec <Crypto1Nibble>
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
                /* Write command. Store the address and prepare for the upcoming data.
                * Respond with ACK. */
                CurrentAddress = Buffer[1];
                State = STATE_WRITE;
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2ece:	98 27       	eor	r25, r24
    2ed0:	f8 01       	movw	r30, r16
    2ed2:	90 83       	st	Z, r25
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
    2ed4:	84 e0       	ldi	r24, 0x04	; 4
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	c2 cd       	rjmp	.-1148   	; 0x2a5e <MifareClassicAppProcess+0x36>
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
            /* Load UID CL1 and perform anticollision */
            uint8_t UidCL1[4];
            MemoryReadBlock(UidCL1, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2eda:	44 e0       	ldi	r20, 0x04	; 4
    2edc:	50 e0       	ldi	r21, 0x00	; 0
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	01 96       	adiw	r24, 0x01	; 1
    2ee6:	0e 94 d4 05 	call	0xba8	; 0xba8 <MemoryReadBlock>

            if (ISO14443ASelect(Buffer, &BitCount, UidCL1, CardSAKValue)) {
    2eea:	90 91 b5 24 	lds	r25, 0x24B5
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    2eee:	d8 01       	movw	r26, r16
    2ef0:	11 96       	adiw	r26, 0x01	; 1
    2ef2:	8c 91       	ld	r24, X
    2ef4:	80 32       	cpi	r24, 0x20	; 32
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <MifareClassicAppProcess+0x4d2>
    2ef8:	54 c1       	rjmp	.+680    	; 0x31a2 <__stack+0x1a3>
    2efa:	80 37       	cpi	r24, 0x70	; 112
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <MifareClassicAppProcess+0x4d8>
    2efe:	ad cd       	rjmp	.-1190   	; 0x2a5a <MifareClassicAppProcess+0x32>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    2f00:	d8 01       	movw	r26, r16
    2f02:	12 96       	adiw	r26, 0x02	; 2
    2f04:	2c 91       	ld	r18, X
    2f06:	12 97       	sbiw	r26, 0x02	; 2
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	28 13       	cpse	r18, r24
    2f0c:	a6 cd       	rjmp	.-1204   	; 0x2a5a <MifareClassicAppProcess+0x32>
    2f0e:	13 96       	adiw	r26, 0x03	; 3
    2f10:	2c 91       	ld	r18, X
    2f12:	13 97       	sbiw	r26, 0x03	; 3
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	28 13       	cpse	r18, r24
    2f18:	a0 cd       	rjmp	.-1216   	; 0x2a5a <MifareClassicAppProcess+0x32>
                (DataPtr[3] == UidCL[1]) &&
    2f1a:	14 96       	adiw	r26, 0x04	; 4
    2f1c:	2c 91       	ld	r18, X
    2f1e:	14 97       	sbiw	r26, 0x04	; 4
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	28 13       	cpse	r18, r24
    2f24:	9a cd       	rjmp	.-1228   	; 0x2a5a <MifareClassicAppProcess+0x32>
                (DataPtr[4] == UidCL[2]) &&
    2f26:	15 96       	adiw	r26, 0x05	; 5
    2f28:	2c 91       	ld	r18, X
    2f2a:	15 97       	sbiw	r26, 0x05	; 5
    2f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2e:	28 13       	cpse	r18, r24
    2f30:	94 cd       	rjmp	.-1240   	; 0x2a5a <MifareClassicAppProcess+0x32>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    2f32:	9c 93       	st	X, r25
            ISO14443AAppendCRCA(Buffer, 1);
    2f34:	61 e0       	ldi	r22, 0x01	; 1
    2f36:	70 e0       	ldi	r23, 0x00	; 0
    2f38:	c8 01       	movw	r24, r16
    2f3a:	6f d1       	rcall	.+734    	; 0x321a <ISO14443AAppendCRCA>
                State = STATE_ACTIVE;
    2f3c:	83 e0       	ldi	r24, 0x03	; 3
    2f3e:	80 93 d1 24 	sts	0x24D1, r24

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
    2f42:	88 e1       	ldi	r24, 0x18	; 24
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	8b cd       	rjmp	.-1258   	; 0x2a5e <MifareClassicAppProcess+0x36>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
    2f48:	62 e0       	ldi	r22, 0x02	; 2
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	c8 01       	movw	r24, r16
    2f4e:	93 d1       	rcall	.+806    	; 0x3276 <ISO14443ACheckCRCA>
    2f50:	88 23       	and	r24, r24
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <MifareClassicAppProcess+0x52e>
    2f54:	ac cf       	rjmp	.-168    	; 0x2eae <MifareClassicAppProcess+0x486>
                /* Write command. Store the address and prepare for the upcoming data.
                * Respond with ACK. */
                CurrentAddress = Buffer[1];
    2f56:	d8 01       	movw	r26, r16
    2f58:	11 96       	adiw	r26, 0x01	; 1
    2f5a:	8c 91       	ld	r24, X
    2f5c:	80 93 c8 24 	sts	0x24C8, r24
                State = STATE_WRITE;
    2f60:	86 e0       	ldi	r24, 0x06	; 6
    2f62:	80 93 d1 24 	sts	0x24D1, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2f66:	42 d3       	rcall	.+1668   	; 0x35ec <Crypto1Nibble>
    2f68:	9a e0       	ldi	r25, 0x0A	; 10
    2f6a:	b1 cf       	rjmp	.-158    	; 0x2ece <MifareClassicAppProcess+0x4a6>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    2f6c:	62 e0       	ldi	r22, 0x02	; 2
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	c8 01       	movw	r24, r16
    2f72:	81 d1       	rcall	.+770    	; 0x3276 <ISO14443ACheckCRCA>
    2f74:	88 23       	and	r24, r24
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <MifareClassicAppProcess+0x552>
    2f78:	a8 cf       	rjmp	.-176    	; 0x2eca <MifareClassicAppProcess+0x4a2>
                CurrentAddress = Buffer[1];
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	81 81       	ldd	r24, Z+1	; 0x01
    2f7e:	80 93 c8 24 	sts	0x24C8, r24
                State = STATE_DECREMENT;
    2f82:	88 e0       	ldi	r24, 0x08	; 8
    2f84:	80 93 d1 24 	sts	0x24D1, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2f88:	31 d3       	rcall	.+1634   	; 0x35ec <Crypto1Nibble>
    2f8a:	9a e0       	ldi	r25, 0x0A	; 10
    2f8c:	92 cf       	rjmp	.-220    	; 0x2eb2 <MifareClassicAppProcess+0x48a>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    2f8e:	80 91 c0 24 	lds	r24, 0x24C0
    2f92:	28 13       	cpse	r18, r24
    2f94:	74 cf       	rjmp	.-280    	; 0x2e7e <MifareClassicAppProcess+0x456>
         && (Block[1] == (uint8_t) ~Block[5]) && (Block[1] == Block[9])
    2f96:	e0 91 b9 24 	lds	r30, 0x24B9
    2f9a:	80 91 bd 24 	lds	r24, 0x24BD
    2f9e:	80 95       	com	r24
    2fa0:	e8 13       	cpse	r30, r24
    2fa2:	6d cf       	rjmp	.-294    	; 0x2e7e <MifareClassicAppProcess+0x456>
    2fa4:	80 91 c1 24 	lds	r24, 0x24C1
    2fa8:	e8 13       	cpse	r30, r24
    2faa:	69 cf       	rjmp	.-302    	; 0x2e7e <MifareClassicAppProcess+0x456>
         && (Block[2] == (uint8_t) ~Block[6]) && (Block[2] == Block[10])
    2fac:	80 91 ba 24 	lds	r24, 0x24BA
    2fb0:	90 91 be 24 	lds	r25, 0x24BE
    2fb4:	90 95       	com	r25
    2fb6:	89 13       	cpse	r24, r25
    2fb8:	62 cf       	rjmp	.-316    	; 0x2e7e <MifareClassicAppProcess+0x456>
    2fba:	90 91 c2 24 	lds	r25, 0x24C2
    2fbe:	89 13       	cpse	r24, r25
    2fc0:	5e cf       	rjmp	.-324    	; 0x2e7e <MifareClassicAppProcess+0x456>
         && (Block[3] == (uint8_t) ~Block[7]) && (Block[3] == Block[11])
    2fc2:	30 91 bb 24 	lds	r19, 0x24BB
    2fc6:	90 91 bf 24 	lds	r25, 0x24BF
    2fca:	90 95       	com	r25
    2fcc:	39 13       	cpse	r19, r25
    2fce:	57 cf       	rjmp	.-338    	; 0x2e7e <MifareClassicAppProcess+0x456>
    2fd0:	90 91 c3 24 	lds	r25, 0x24C3
    2fd4:	39 13       	cpse	r19, r25
    2fd6:	53 cf       	rjmp	.-346    	; 0x2e7e <MifareClassicAppProcess+0x456>
         && (Block[12] == (uint8_t) ~Block[13])
    2fd8:	40 91 c4 24 	lds	r20, 0x24C4
    2fdc:	90 91 c5 24 	lds	r25, 0x24C5
    2fe0:	90 95       	com	r25
    2fe2:	49 13       	cpse	r20, r25
    2fe4:	4c cf       	rjmp	.-360    	; 0x2e7e <MifareClassicAppProcess+0x456>
         && (Block[12] == Block[14])
    2fe6:	90 91 c6 24 	lds	r25, 0x24C6
    2fea:	49 13       	cpse	r20, r25
    2fec:	48 cf       	rjmp	.-368    	; 0x2e7e <MifareClassicAppProcess+0x456>
         && (Block[14] == (uint8_t) ~Block[15])) {
    2fee:	90 91 c7 24 	lds	r25, 0x24C7
    2ff2:	90 95       	com	r25
    2ff4:	49 13       	cpse	r20, r25
    2ff6:	43 cf       	rjmp	.-378    	; 0x2e7e <MifareClassicAppProcess+0x456>
}

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    2ff8:	d8 01       	movw	r26, r16
    2ffa:	9c 91       	ld	r25, X
    *Value |= ((uint32_t) Block[1] << 8);
    2ffc:	11 96       	adiw	r26, 0x01	; 1
    2ffe:	fc 91       	ld	r31, X
    3000:	11 97       	sbiw	r26, 0x01	; 1
    *Value |= ((uint32_t) Block[2] << 16);
    3002:	12 96       	adiw	r26, 0x02	; 2
    3004:	4c 91       	ld	r20, X
    3006:	12 97       	sbiw	r26, 0x02	; 2
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	ba 01       	movw	r22, r20
    3010:	55 27       	eor	r21, r21
    3012:	44 27       	eor	r20, r20

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    3014:	5f 2b       	or	r21, r31
    *Value |= ((uint32_t) Block[2] << 16);
    3016:	49 2b       	or	r20, r25
    *Value |= ((uint32_t) Block[3] << 24);
    3018:	13 96       	adiw	r26, 0x03	; 3
    301a:	9c 91       	ld	r25, X
    301c:	79 2b       	or	r23, r25
INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    *Value |= ((uint32_t) Block[2] << 16);
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	a0 e0       	ldi	r26, 0x00	; 0
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	dc 01       	movw	r26, r24
    3026:	99 27       	eor	r25, r25
    3028:	88 27       	eor	r24, r24

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    302a:	9e 2b       	or	r25, r30
    *Value |= ((uint32_t) Block[2] << 16);
    302c:	82 2b       	or	r24, r18
    *Value |= ((uint32_t) Block[3] << 24);
    302e:	b3 2b       	or	r27, r19
                uint32_t BlockValue;

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
    3030:	20 91 d1 24 	lds	r18, 0x24D1
    3034:	28 30       	cpi	r18, 0x08	; 8
    3036:	09 f4       	brne	.+2      	; 0x303a <__stack+0x3b>
    3038:	6f c0       	rjmp	.+222    	; 0x3118 <__stack+0x119>
                    BlockValue -= ParamValue;
                } else if (State == STATE_INCREMENT) {
    303a:	27 30       	cpi	r18, 0x07	; 7
    303c:	21 f4       	brne	.+8      	; 0x3046 <__stack+0x47>
                    BlockValue += ParamValue;
    303e:	84 0f       	add	r24, r20
    3040:	95 1f       	adc	r25, r21
    3042:	a6 1f       	adc	r26, r22
    3044:	b7 1f       	adc	r27, r23
    *Value |= ((uint32_t) Block[3] << 24);
}

INLINE void ValueToBlock(uint8_t* Block, uint32_t Value)
{
    Block[0] = (uint8_t) (Value >> 0);
    3046:	80 93 b8 24 	sts	0x24B8, r24
    Block[1] = (uint8_t) (Value >> 8);
    304a:	c9 2e       	mov	r12, r25
    304c:	da 2e       	mov	r13, r26
    304e:	eb 2e       	mov	r14, r27
    3050:	ff 24       	eor	r15, r15
    3052:	c0 92 b9 24 	sts	0x24B9, r12
    Block[2] = (uint8_t) (Value >> 16);
    3056:	8d 01       	movw	r16, r26
    3058:	22 27       	eor	r18, r18
    305a:	33 27       	eor	r19, r19
    305c:	00 93 ba 24 	sts	0x24BA, r16
    Block[3] = (uint8_t) (Value >> 24);
    3060:	4b 2f       	mov	r20, r27
    3062:	55 27       	eor	r21, r21
    3064:	66 27       	eor	r22, r22
    3066:	77 27       	eor	r23, r23
    3068:	40 93 bb 24 	sts	0x24BB, r20
    Block[4] = ~Block[0];
    306c:	e8 2f       	mov	r30, r24
    306e:	e0 95       	com	r30
    3070:	e0 93 bc 24 	sts	0x24BC, r30
    Block[5] = ~Block[1];
    3074:	ec 2d       	mov	r30, r12
    3076:	e0 95       	com	r30
    3078:	e0 93 bd 24 	sts	0x24BD, r30
    Block[6] = ~Block[2];
    307c:	e0 2f       	mov	r30, r16
    307e:	e0 95       	com	r30
    3080:	e0 93 be 24 	sts	0x24BE, r30
    Block[7] = ~Block[3];
    3084:	e4 2f       	mov	r30, r20
    3086:	e0 95       	com	r30
    3088:	e0 93 bf 24 	sts	0x24BF, r30
    Block[8] = Block[0];
    308c:	80 93 c0 24 	sts	0x24C0, r24
    Block[9] = Block[1];
    3090:	c0 92 c1 24 	sts	0x24C1, r12
    Block[10] = Block[2];
    3094:	00 93 c2 24 	sts	0x24C2, r16
    Block[11] = Block[3];
    3098:	40 93 c3 24 	sts	0x24C3, r20
                    /* Do nothing */
                }

                ValueToBlock(BlockBuffer, BlockValue);

                State = STATE_AUTHED_IDLE;
    309c:	85 e0       	ldi	r24, 0x05	; 5
    309e:	80 93 d1 24 	sts	0x24D1, r24
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	db cc       	rjmp	.-1610   	; 0x2a5e <MifareClassicAppProcess+0x36>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    30a8:	62 e0       	ldi	r22, 0x02	; 2
    30aa:	70 e0       	ldi	r23, 0x00	; 0
    30ac:	c8 01       	movw	r24, r16
    30ae:	e3 d0       	rcall	.+454    	; 0x3276 <ISO14443ACheckCRCA>
    30b0:	88 23       	and	r24, r24
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <__stack+0xb7>
    30b4:	fc ce       	rjmp	.-520    	; 0x2eae <MifareClassicAppProcess+0x486>
                CurrentAddress = Buffer[1];
    30b6:	d8 01       	movw	r26, r16
    30b8:	11 96       	adiw	r26, 0x01	; 1
    30ba:	8c 91       	ld	r24, X
    30bc:	80 93 c8 24 	sts	0x24C8, r24
                State = STATE_INCREMENT;
    30c0:	87 e0       	ldi	r24, 0x07	; 7
    30c2:	4f cf       	rjmp	.-354    	; 0x2f62 <MifareClassicAppProcess+0x53a>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    30c4:	62 e0       	ldi	r22, 0x02	; 2
    30c6:	70 e0       	ldi	r23, 0x00	; 0
    30c8:	c8 01       	movw	r24, r16
    30ca:	d5 d0       	rcall	.+426    	; 0x3276 <ISO14443ACheckCRCA>
    30cc:	88 23       	and	r24, r24
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <__stack+0xd3>
    30d0:	fc ce       	rjmp	.-520    	; 0x2eca <MifareClassicAppProcess+0x4a2>
                CurrentAddress = Buffer[1];
    30d2:	f8 01       	movw	r30, r16
    30d4:	81 81       	ldd	r24, Z+1	; 0x01
    30d6:	80 93 c8 24 	sts	0x24C8, r24
                State = STATE_RESTORE;
    30da:	89 e0       	ldi	r24, 0x09	; 9
    30dc:	80 93 d1 24 	sts	0x24D1, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    30e0:	85 d2       	rcall	.+1290   	; 0x35ec <Crypto1Nibble>
    30e2:	9a e0       	ldi	r25, 0x0A	; 10
    30e4:	e6 ce       	rjmp	.-564    	; 0x2eb2 <MifareClassicAppProcess+0x48a>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
            /* Write back the global block buffer to the desired block address */
            if (ISO14443ACheckCRCA(Buffer, CMD_TRANSFER_FRAME_SIZE)) {
    30e6:	62 e0       	ldi	r22, 0x02	; 2
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	c8 01       	movw	r24, r16
    30ec:	c4 d0       	rcall	.+392    	; 0x3276 <ISO14443ACheckCRCA>
    30ee:	88 23       	and	r24, r24
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <__stack+0xf5>
    30f2:	dd ce       	rjmp	.-582    	; 0x2eae <MifareClassicAppProcess+0x486>
                if (!ActiveConfiguration.ReadOnly) {
    30f4:	80 91 fc 24 	lds	r24, 0x24FC
    30f8:	81 11       	cpse	r24, r1
    30fa:	35 cf       	rjmp	.-406    	; 0x2f66 <MifareClassicAppProcess+0x53e>
                    MemoryWriteBlock(BlockBuffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK );
    30fc:	d8 01       	movw	r26, r16
    30fe:	11 96       	adiw	r26, 0x01	; 1
    3100:	6c 91       	ld	r22, X
    3102:	b0 e1       	ldi	r27, 0x10	; 16
    3104:	6b 9f       	mul	r22, r27
    3106:	b0 01       	movw	r22, r0
    3108:	11 24       	eor	r1, r1
    310a:	40 e1       	ldi	r20, 0x10	; 16
    310c:	50 e0       	ldi	r21, 0x00	; 0
    310e:	88 eb       	ldi	r24, 0xB8	; 184
    3110:	94 e2       	ldi	r25, 0x24	; 36
    3112:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <MemoryWriteBlock>
    3116:	27 cf       	rjmp	.-434    	; 0x2f66 <MifareClassicAppProcess+0x53e>

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
                    BlockValue -= ParamValue;
    3118:	84 1b       	sub	r24, r20
    311a:	95 0b       	sbc	r25, r21
    311c:	a6 0b       	sbc	r26, r22
    311e:	b7 0b       	sbc	r27, r23
    3120:	92 cf       	rjmp	.-220    	; 0x3046 <__stack+0x47>
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
    3122:	62 e0       	ldi	r22, 0x02	; 2
    3124:	70 e0       	ldi	r23, 0x00	; 0
    3126:	c8 01       	movw	r24, r16
    3128:	a6 d0       	rcall	.+332    	; 0x3276 <ISO14443ACheckCRCA>
    312a:	81 11       	cpse	r24, r1
    312c:	0b cd       	rjmp	.-1514   	; 0x2b44 <MifareClassicAppProcess+0x11c>
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
                    return ISO14443A_APP_NO_RESPONSE;
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	d8 01       	movw	r26, r16
    3132:	8c 93       	st	X, r24
                    return ACK_NAK_FRAME_SIZE;
    3134:	84 e0       	ldi	r24, 0x04	; 4
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	92 cc       	rjmp	.-1756   	; 0x2a5e <MifareClassicAppProcess+0x36>
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    313a:	f8 01       	movw	r30, r16
    313c:	61 81       	ldd	r22, Z+1	; 0x01
    313e:	f0 e1       	ldi	r31, 0x10	; 16
    3140:	6f 9f       	mul	r22, r31
    3142:	b0 01       	movw	r22, r0
    3144:	11 24       	eor	r1, r1
    3146:	40 e1       	ldi	r20, 0x10	; 16
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	c8 01       	movw	r24, r16
    314c:	0e 94 d4 05 	call	0xba8	; 0xba8 <MemoryReadBlock>
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);
    3150:	60 e1       	ldi	r22, 0x10	; 16
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	c8 01       	movw	r24, r16
    3156:	61 d0       	rcall	.+194    	; 0x321a <ISO14443AAppendCRCA>
    3158:	78 01       	movw	r14, r16
    315a:	30 e8       	ldi	r19, 0x80	; 128
    315c:	e3 0e       	add	r14, r19
    315e:	f1 1c       	adc	r15, r1
    3160:	62 e1       	ldi	r22, 0x12	; 18
    3162:	a6 2e       	mov	r10, r22

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
                    uint8_t Plain = Buffer[i];
    3164:	d8 01       	movw	r26, r16
    3166:	bc 90       	ld	r11, X
                    Buffer[i] = Plain ^ Crypto1Byte();
    3168:	2e d2       	rcall	.+1116   	; 0x35c6 <Crypto1Byte>
    316a:	8b 25       	eor	r24, r11
    316c:	f8 01       	movw	r30, r16
    316e:	81 93       	st	Z+, r24
    3170:	8f 01       	movw	r16, r30
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
    3172:	0b 2c       	mov	r0, r11
    3174:	b2 94       	swap	r11
    3176:	b0 24       	eor	r11, r0
    3178:	0b 2c       	mov	r0, r11
    317a:	b6 94       	lsr	r11
    317c:	b6 94       	lsr	r11
    317e:	b0 24       	eor	r11, r0
    3180:	fe d0       	rcall	.+508    	; 0x337e <Crypto1FilterOutput>
    3182:	b3 94       	inc	r11
    3184:	b1 fa       	bst	r11, 1
    3186:	cc 24       	eor	r12, r12
    3188:	c0 f8       	bld	r12, 0
    318a:	d1 2c       	mov	r13, r1
    318c:	f1 e0       	ldi	r31, 0x01	; 1
    318e:	cf 26       	eor	r12, r31
    3190:	8c 25       	eor	r24, r12
    3192:	d7 01       	movw	r26, r14
    3194:	8d 93       	st	X+, r24
    3196:	7d 01       	movw	r14, r26
    3198:	aa 94       	dec	r10
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
    319a:	21 f7       	brne	.-56     	; 0x3164 <__stack+0x165>
                    uint8_t Plain = Buffer[i];
                    Buffer[i] = Plain ^ Crypto1Byte();
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
                }

                return ( (CMD_READ_RESPONSE_FRAME_SIZE + ISO14443A_CRCA_SIZE )
    319c:	80 e9       	ldi	r24, 0x90	; 144
    319e:	90 e1       	ldi	r25, 0x10	; 16
    31a0:	5e cc       	rjmp	.-1860   	; 0x2a5e <MifareClassicAppProcess+0x36>

    switch (NVB) {
    case ISO14443A_NVB_AC_START:
        /* Start of anticollision procedure.
        * Send whole UID CLn + BCC */
        DataPtr[0] = UidCL[0];
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	f8 01       	movw	r30, r16
    31a6:	80 83       	st	Z, r24
        DataPtr[1] = UidCL[1];
    31a8:	3a 81       	ldd	r19, Y+2	; 0x02
    31aa:	31 83       	std	Z+1, r19	; 0x01
        DataPtr[2] = UidCL[2];
    31ac:	2b 81       	ldd	r18, Y+3	; 0x03
    31ae:	22 83       	std	Z+2, r18	; 0x02
        DataPtr[3] = UidCL[3];
    31b0:	9c 81       	ldd	r25, Y+4	; 0x04
    31b2:	93 83       	std	Z+3, r25	; 0x03
        DataPtr[4] = ISO14443A_CALC_BCC(DataPtr);
    31b4:	83 27       	eor	r24, r19
    31b6:	82 27       	eor	r24, r18
    31b8:	89 27       	eor	r24, r25
    31ba:	84 83       	std	Z+4, r24	; 0x04

        *BitCount = ISO14443A_CL_FRAME_SIZE;
    31bc:	88 e2       	ldi	r24, 0x28	; 40
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	4e cc       	rjmp	.-1892   	; 0x2a5e <MifareClassicAppProcess+0x36>
            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    31c2:	60 e3       	ldi	r22, 0x30	; 48
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	14 cd       	rjmp	.-1496   	; 0x2bf0 <MifareClassicAppProcess+0x1c8>
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    31c8:	80 e3       	ldi	r24, 0x30	; 48
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	ae cd       	rjmp	.-1188   	; 0x2d2a <MifareClassicAppProcess+0x302>

000031ce <MifareClassicGetUid>:
    return ISO14443A_APP_NO_RESPONSE;
}

void MifareClassicGetUid(ConfigurationUidType Uid)
{
    MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    31ce:	44 e0       	ldi	r20, 0x04	; 4
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <MemoryReadBlock>

000031da <MifareClassicSetUid>:
}

void MifareClassicSetUid(ConfigurationUidType Uid)
{
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	1f 92       	push	r1
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    uint8_t BCC =  Uid[0] ^ Uid[1] ^ Uid[2] ^ Uid[3];
    31e4:	fc 01       	movw	r30, r24
    31e6:	21 81       	ldd	r18, Z+1	; 0x01
    31e8:	30 81       	ld	r19, Z
    31ea:	23 27       	eor	r18, r19
    31ec:	32 81       	ldd	r19, Z+2	; 0x02
    31ee:	23 27       	eor	r18, r19
    31f0:	33 81       	ldd	r19, Z+3	; 0x03
    31f2:	23 27       	eor	r18, r19
    31f4:	29 83       	std	Y+1, r18	; 0x01

    MemoryWriteBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    31f6:	44 e0       	ldi	r20, 0x04	; 4
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	70 e0       	ldi	r23, 0x00	; 0
    31fe:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <MemoryWriteBlock>
    MemoryWriteBlock(&BCC, MEM_UID_BCC1_ADDRESS, ISO14443A_CL_BCC_SIZE);
    3202:	41 e0       	ldi	r20, 0x01	; 1
    3204:	50 e0       	ldi	r21, 0x00	; 0
    3206:	64 e0       	ldi	r22, 0x04	; 4
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	ce 01       	movw	r24, r28
    320c:	01 96       	adiw	r24, 0x01	; 1
    320e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <MemoryWriteBlock>
}
    3212:	0f 90       	pop	r0
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	08 95       	ret

0000321a <ISO14443AAppendCRCA>:
 * policies, either expressed or implied, of the ORIGINAL AUTHORS.
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    321a:	fc 01       	movw	r30, r24
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    321c:	61 15       	cp	r22, r1
    321e:	71 05       	cpc	r23, r1
    3220:	39 f1       	breq	.+78     	; 0x3270 <ISO14443AAppendCRCA+0x56>
    3222:	68 0f       	add	r22, r24
    3224:	79 1f       	adc	r23, r25
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    3226:	23 e6       	ldi	r18, 0x63	; 99
    3228:	33 e6       	ldi	r19, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    322a:	41 91       	ld	r20, Z+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    322c:	42 27       	eor	r20, r18
        Byte ^= Byte << 4;
    322e:	50 e1       	ldi	r21, 0x10	; 16
    3230:	45 9f       	mul	r20, r21
    3232:	c0 01       	movw	r24, r0
    3234:	11 24       	eor	r1, r1
    3236:	a4 2f       	mov	r26, r20
    3238:	a8 27       	eor	r26, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    323a:	8a 2f       	mov	r24, r26
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	58 2f       	mov	r21, r24
    3240:	44 27       	eor	r20, r20
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    3242:	88 0f       	add	r24, r24
    3244:	99 1f       	adc	r25, r25
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	88 0f       	add	r24, r24
    324c:	99 1f       	adc	r25, r25
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    324e:	48 27       	eor	r20, r24
    3250:	59 27       	eor	r21, r25
    3252:	23 2f       	mov	r18, r19
    3254:	33 27       	eor	r19, r19
    3256:	24 27       	eor	r18, r20
    3258:	35 27       	eor	r19, r21
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    325a:	a2 95       	swap	r26
    325c:	af 70       	andi	r26, 0x0F	; 15
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    325e:	2a 27       	eor	r18, r26

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    3260:	e6 17       	cp	r30, r22
    3262:	f7 07       	cpc	r31, r23
    3264:	11 f7       	brne	.-60     	; 0x322a <ISO14443AAppendCRCA+0x10>
    3266:	92 2f       	mov	r25, r18
    3268:	83 2f       	mov	r24, r19

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    326a:	90 83       	st	Z, r25
    *DataPtr = (Checksum >> 8) & 0x00FF;
    326c:	81 83       	std	Z+1, r24	; 0x01
    326e:	08 95       	ret

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    3270:	83 e6       	ldi	r24, 0x63	; 99
    3272:	93 e6       	ldi	r25, 0x63	; 99
    3274:	fa cf       	rjmp	.-12     	; 0x326a <ISO14443AAppendCRCA+0x50>

00003276 <ISO14443ACheckCRCA>:
    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    3276:	fc 01       	movw	r30, r24
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    3278:	61 15       	cp	r22, r1
    327a:	71 05       	cpc	r23, r1
    327c:	a9 f1       	breq	.+106    	; 0x32e8 <ISO14443ACheckCRCA+0x72>
    327e:	68 0f       	add	r22, r24
    3280:	79 1f       	adc	r23, r25
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    3282:	23 e6       	ldi	r18, 0x63	; 99
    3284:	33 e6       	ldi	r19, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    3286:	41 91       	ld	r20, Z+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    3288:	42 27       	eor	r20, r18
        Byte ^= Byte << 4;
    328a:	50 e1       	ldi	r21, 0x10	; 16
    328c:	45 9f       	mul	r20, r21
    328e:	c0 01       	movw	r24, r0
    3290:	11 24       	eor	r1, r1
    3292:	a4 2f       	mov	r26, r20
    3294:	a8 27       	eor	r26, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    3296:	8a 2f       	mov	r24, r26
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	58 2f       	mov	r21, r24
    329c:	44 27       	eor	r20, r20
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    32aa:	48 27       	eor	r20, r24
    32ac:	59 27       	eor	r21, r25
    32ae:	23 2f       	mov	r18, r19
    32b0:	33 27       	eor	r19, r19
    32b2:	24 27       	eor	r18, r20
    32b4:	35 27       	eor	r19, r21
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    32b6:	a2 95       	swap	r26
    32b8:	af 70       	andi	r26, 0x0F	; 15
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    32ba:	2a 27       	eor	r18, r26
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    32bc:	e6 17       	cp	r30, r22
    32be:	f7 07       	cpc	r31, r23
    32c0:	11 f7       	brne	.-60     	; 0x3286 <ISO14443ACheckCRCA+0x10>
    32c2:	a9 01       	movw	r20, r18
    32c4:	55 27       	eor	r21, r21

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    32c6:	80 81       	ld	r24, Z
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	84 17       	cp	r24, r20
    32cc:	95 07       	cpc	r25, r21
    32ce:	11 f0       	breq	.+4      	; 0x32d4 <ISO14443ACheckCRCA+0x5e>
    32d0:	80 e0       	ldi	r24, 0x00	; 0
}
    32d2:	08 95       	ret

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    32d4:	41 81       	ldd	r20, Z+1	; 0x01
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	23 2f       	mov	r18, r19
    32da:	33 27       	eor	r19, r19
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	42 17       	cp	r20, r18
    32e0:	53 07       	cpc	r21, r19
    32e2:	b9 f3       	breq	.-18     	; 0x32d2 <ISO14443ACheckCRCA+0x5c>
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	f5 cf       	rjmp	.-22     	; 0x32d2 <ISO14443ACheckCRCA+0x5c>
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    32e8:	43 e6       	ldi	r20, 0x63	; 99
    32ea:	50 e0       	ldi	r21, 0x00	; 0
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    32ec:	23 e6       	ldi	r18, 0x63	; 99
    32ee:	33 e6       	ldi	r19, 0x63	; 99
    32f0:	ea cf       	rjmp	.-44     	; 0x32c6 <ISO14443ACheckCRCA+0x50>

000032f2 <Crypto1LFSR>:
/* Split Crypto1 state into even and odd bits to speed up the output filter network */
static uint8_t StateEven[LFSR_SIZE/2] = {0};
static uint8_t StateOdd[LFSR_SIZE/2] = {0};

/* Proceed LFSR by one clock cycle */
static void Crypto1LFSR(uint8_t In) {
    32f2:	cf 93       	push	r28
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    32f4:	b0 91 d5 24 	lds	r27, 0x24D5
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    32f8:	c0 91 d6 24 	lds	r28, 0x24D6
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    32fc:	40 91 d7 24 	lds	r20, 0x24D7

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    3300:	a0 91 d2 24 	lds	r26, 0x24D2
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    3304:	f0 91 d3 24 	lds	r31, 0x24D3
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    3308:	e0 91 d4 24 	lds	r30, 0x24D4
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    330c:	9c 2f       	mov	r25, r28
    330e:	90 71       	andi	r25, 0x10	; 16
static void Crypto1LFSR(uint8_t In) {
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    3310:	2b 2f       	mov	r18, r27
    3312:	21 7e       	andi	r18, 0xE1	; 225
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    3314:	92 27       	eor	r25, r18
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    3316:	24 2f       	mov	r18, r20
    3318:	20 72       	andi	r18, 0x20	; 32
    331a:	92 27       	eor	r25, r18

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    331c:	2a 2f       	mov	r18, r26
    331e:	24 79       	andi	r18, 0x94	; 148
    3320:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    3322:	2f 2f       	mov	r18, r31
    3324:	23 77       	andi	r18, 0x73	; 115
    3326:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    3328:	2e 2f       	mov	r18, r30
    332a:	2a 73       	andi	r18, 0x3A	; 58
    332c:	92 27       	eor	r25, r18

    Feedback ^= Feedback >> 4;
    332e:	39 2f       	mov	r19, r25
    3330:	32 95       	swap	r19
    3332:	3f 70       	andi	r19, 0x0F	; 15
    3334:	39 27       	eor	r19, r25
    Feedback ^= Feedback >> 2;
    3336:	23 2f       	mov	r18, r19
    3338:	26 95       	lsr	r18
    333a:	26 95       	lsr	r18
    333c:	23 27       	eor	r18, r19
    Feedback ^= Feedback >> 1;
    333e:	92 2f       	mov	r25, r18
    3340:	96 95       	lsr	r25
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    Temp |= ((uint32_t) StateEven[2] << 16);
    3342:	50 e0       	ldi	r21, 0x00	; 0
    3344:	60 e0       	ldi	r22, 0x00	; 0
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	ba 01       	movw	r22, r20
    334a:	55 27       	eor	r21, r21
    334c:	44 27       	eor	r20, r20
    * - the new even state becomes the old odd state
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    334e:	5c 2b       	or	r21, r28
    Temp |= ((uint32_t) StateEven[2] << 16);
    3350:	4b 2b       	or	r20, r27

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;
    3352:	76 95       	lsr	r23
    3354:	67 95       	ror	r22
    3356:	57 95       	ror	r21
    3358:	47 95       	ror	r20
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);

    Feedback ^= Feedback >> 4;
    Feedback ^= Feedback >> 2;
    Feedback ^= Feedback >> 1;
    335a:	92 27       	eor	r25, r18

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;

    /* Calculate MSBit of even state as input bit to LFSR */
    if ( (Feedback & 0x01) ^ In ) {
    335c:	91 70       	andi	r25, 0x01	; 1
    335e:	98 13       	cpse	r25, r24
        Temp |= (uint32_t) 1 << (8 * LFSR_SIZE/2 - 1);
    3360:	60 68       	ori	r22, 0x80	; 128
    }

    /* Convert even state back into byte array and swap odd/even state
    * as explained above. */
    StateEven[0] = StateOdd[0];
    3362:	a0 93 d5 24 	sts	0x24D5, r26
    StateEven[1] = StateOdd[1];
    3366:	f0 93 d6 24 	sts	0x24D6, r31
    StateEven[2] = StateOdd[2];
    336a:	e0 93 d7 24 	sts	0x24D7, r30

    StateOdd[0] = (uint8_t) (Temp >> 0);
    336e:	40 93 d2 24 	sts	0x24D2, r20
    StateOdd[1] = (uint8_t) (Temp >> 8);
    3372:	50 93 d3 24 	sts	0x24D3, r21
    StateOdd[2] = (uint8_t) (Temp >> 16);
    3376:	60 93 d4 24 	sts	0x24D4, r22
}
    337a:	cf 91       	pop	r28
    337c:	08 95       	ret

0000337e <Crypto1FilterOutput>:

uint8_t Crypto1FilterOutput(void) {
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    3382:	a0 91 d3 24 	lds	r26, 0x24D3
    3386:	ea 2f       	mov	r30, r26
    3388:	ef 70       	andi	r30, 0x0F	; 15
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	e0 5c       	subi	r30, 0xC0	; 192
    338e:	ff 4d       	sbci	r31, 0xDF	; 223
    * can simply be ORed together to produce the resulting
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    3390:	c0 91 d2 24 	lds	r28, 0x24D2
    3394:	c2 95       	swap	r28
    3396:	cf 70       	andi	r28, 0x0F	; 15
    3398:	d0 e0       	ldi	r29, 0x00	; 0
    339a:	c0 5c       	subi	r28, 0xC0	; 192
    339c:	df 4d       	sbci	r29, 0xDF	; 223
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    339e:	e0 89       	ldd	r30, Z+16	; 0x10
    33a0:	88 81       	ld	r24, Y
    33a2:	e8 2b       	or	r30, r24
    Sum |= TableAB[2][(StateOdd[1] >> 4) & 0x0F];
    33a4:	a2 95       	swap	r26
    33a6:	af 70       	andi	r26, 0x0F	; 15
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	a0 5c       	subi	r26, 0xC0	; 192
    33ac:	bf 4d       	sbci	r27, 0xDF	; 223
    33ae:	90 96       	adiw	r26, 0x20	; 32
    33b0:	8c 91       	ld	r24, X
    33b2:	e8 2b       	or	r30, r24
    Sum |= TableAB[3][(StateOdd[2] >> 0) & 0x0F];
    33b4:	a0 91 d4 24 	lds	r26, 0x24D4
    33b8:	ca 2f       	mov	r28, r26
    33ba:	cf 70       	andi	r28, 0x0F	; 15
    33bc:	d0 e0       	ldi	r29, 0x00	; 0
    33be:	c0 5c       	subi	r28, 0xC0	; 192
    33c0:	df 4d       	sbci	r29, 0xDF	; 223
    33c2:	88 a9       	ldd	r24, Y+48	; 0x30
    33c4:	e8 2b       	or	r30, r24
    Sum |= TableAB[4][(StateOdd[2] >> 4) & 0x0F];
    33c6:	a2 95       	swap	r26
    33c8:	af 70       	andi	r26, 0x0F	; 15
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	a0 58       	subi	r26, 0x80	; 128
    33ce:	bf 4d       	sbci	r27, 0xDF	; 223
    33d0:	8c 91       	ld	r24, X
    33d2:	e8 2b       	or	r30, r24

    return TableC[Sum];
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	e0 5e       	subi	r30, 0xE0	; 224
    33d8:	ff 4d       	sbci	r31, 0xDF	; 223
}
    33da:	80 81       	ld	r24, Z
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	08 95       	ret

000033e2 <Crypto1Setup>:

void Crypto1Setup(uint8_t Key[6], uint8_t Uid[4], uint8_t CardNonce[4])
{
    33e2:	af 92       	push	r10
    33e4:	bf 92       	push	r11
    33e6:	cf 92       	push	r12
    33e8:	df 92       	push	r13
    33ea:	ef 92       	push	r14
    33ec:	ff 92       	push	r15
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	5b 01       	movw	r10, r22
    33f8:	ea 01       	movw	r28, r20
    33fa:	dc 01       	movw	r26, r24
    33fc:	11 96       	adiw	r26, 0x01	; 1
    33fe:	45 ed       	ldi	r20, 0xD5	; 213
    3400:	54 e2       	ldi	r21, 0x24	; 36
    3402:	62 ed       	ldi	r22, 0xD2	; 210
    3404:	74 e2       	ldi	r23, 0x24	; 36
    3406:	cd 01       	movw	r24, r26
    3408:	01 97       	sbiw	r24, 0x01	; 1
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    340a:	fc 01       	movw	r30, r24
    340c:	20 81       	ld	r18, Z
    340e:	8c 91       	ld	r24, X
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	38 2b       	or	r19, r24
    3414:	20 ff       	sbrs	r18, 0
    3416:	b0 c0       	rjmp	.+352    	; 0x3578 <Crypto1Setup+0x196>
    3418:	00 e4       	ldi	r16, 0x40	; 64
    341a:	21 ff       	sbrs	r18, 1
    341c:	ab c0       	rjmp	.+342    	; 0x3574 <Crypto1Setup+0x192>
    341e:	10 e4       	ldi	r17, 0x40	; 64

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    3420:	c9 01       	movw	r24, r18
    3422:	96 95       	lsr	r25
    3424:	87 95       	ror	r24
    3426:	96 95       	lsr	r25
    3428:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    342a:	30 2f       	mov	r19, r16
    342c:	30 68       	ori	r19, 0x80	; 128
    342e:	80 ff       	sbrs	r24, 0
    3430:	30 2f       	mov	r19, r16
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3432:	21 2f       	mov	r18, r17
    3434:	20 68       	ori	r18, 0x80	; 128
    3436:	81 ff       	sbrs	r24, 1
    3438:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    343a:	96 95       	lsr	r25
    343c:	87 95       	ror	r24
    343e:	96 95       	lsr	r25
    3440:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3442:	36 95       	lsr	r19
            OddByte >>= 1;
    3444:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3446:	13 2f       	mov	r17, r19
    3448:	10 68       	ori	r17, 0x80	; 128
    344a:	80 fd       	sbrc	r24, 0
    344c:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    344e:	12 2f       	mov	r17, r18
    3450:	10 68       	ori	r17, 0x80	; 128
    3452:	81 fd       	sbrc	r24, 1
    3454:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    3456:	96 95       	lsr	r25
    3458:	87 95       	ror	r24
    345a:	96 95       	lsr	r25
    345c:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    345e:	36 95       	lsr	r19
            OddByte >>= 1;
    3460:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3462:	13 2f       	mov	r17, r19
    3464:	10 68       	ori	r17, 0x80	; 128
    3466:	80 fd       	sbrc	r24, 0
    3468:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    346a:	12 2f       	mov	r17, r18
    346c:	10 68       	ori	r17, 0x80	; 128
    346e:	81 fd       	sbrc	r24, 1
    3470:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    3472:	96 95       	lsr	r25
    3474:	87 95       	ror	r24
    3476:	96 95       	lsr	r25
    3478:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    347a:	36 95       	lsr	r19
            OddByte >>= 1;
    347c:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    347e:	13 2f       	mov	r17, r19
    3480:	10 68       	ori	r17, 0x80	; 128
    3482:	80 fd       	sbrc	r24, 0
    3484:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3486:	12 2f       	mov	r17, r18
    3488:	10 68       	ori	r17, 0x80	; 128
    348a:	81 fd       	sbrc	r24, 1
    348c:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    348e:	96 95       	lsr	r25
    3490:	87 95       	ror	r24
    3492:	96 95       	lsr	r25
    3494:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3496:	36 95       	lsr	r19
            OddByte >>= 1;
    3498:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    349a:	13 2f       	mov	r17, r19
    349c:	10 68       	ori	r17, 0x80	; 128
    349e:	80 fd       	sbrc	r24, 0
    34a0:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    34a2:	12 2f       	mov	r17, r18
    34a4:	10 68       	ori	r17, 0x80	; 128
    34a6:	81 fd       	sbrc	r24, 1
    34a8:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    34aa:	96 95       	lsr	r25
    34ac:	87 95       	ror	r24
    34ae:	96 95       	lsr	r25
    34b0:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    34b2:	36 95       	lsr	r19
            OddByte >>= 1;
    34b4:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    34b6:	13 2f       	mov	r17, r19
    34b8:	10 68       	ori	r17, 0x80	; 128
    34ba:	80 fd       	sbrc	r24, 0
    34bc:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    34be:	12 2f       	mov	r17, r18
    34c0:	10 68       	ori	r17, 0x80	; 128
    34c2:	81 fd       	sbrc	r24, 1
    34c4:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    34c6:	96 95       	lsr	r25
    34c8:	87 95       	ror	r24
    34ca:	96 95       	lsr	r25
    34cc:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    34ce:	36 95       	lsr	r19
            OddByte >>= 1;
    34d0:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    34d2:	03 2f       	mov	r16, r19
    34d4:	00 68       	ori	r16, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    34d6:	12 2f       	mov	r17, r18
    34d8:	10 68       	ori	r17, 0x80	; 128
    34da:	80 fd       	sbrc	r24, 0
    34dc:	30 2f       	mov	r19, r16
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    34de:	fa 01       	movw	r30, r20
    34e0:	31 93       	st	Z+, r19
    34e2:	af 01       	movw	r20, r30
    34e4:	81 fd       	sbrc	r24, 1
    34e6:	21 2f       	mov	r18, r17
        StateOdd[i] = OddByte;
    34e8:	fb 01       	movw	r30, r22
    34ea:	21 93       	st	Z+, r18
    34ec:	bf 01       	movw	r22, r30
    34ee:	12 96       	adiw	r26, 0x02	; 2

    /* Again, one trade off when splitting up the state into even/odd parts
    * is that loading the key into the state becomes a little more difficult.
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
    34f0:	f4 e2       	ldi	r31, 0x24	; 36
    34f2:	48 3d       	cpi	r20, 0xD8	; 216
    34f4:	5f 07       	cpc	r21, r31
    34f6:	09 f0       	breq	.+2      	; 0x34fa <Crypto1Setup+0x118>
    34f8:	86 cf       	rjmp	.-244    	; 0x3406 <Crypto1Setup+0x24>
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    34fa:	f5 01       	movw	r30, r10
    34fc:	81 81       	ldd	r24, Z+1	; 0x01
    34fe:	99 81       	ldd	r25, Y+1	; 0x01
    3500:	89 27       	eor	r24, r25
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    3502:	c2 80       	ldd	r12, Z+2	; 0x02
    3504:	9a 81       	ldd	r25, Y+2	; 0x02
    3506:	c9 26       	eor	r12, r25
    3508:	d1 2c       	mov	r13, r1
    350a:	e1 2c       	mov	r14, r1
    350c:	f1 2c       	mov	r15, r1
    350e:	76 01       	movw	r14, r12
    3510:	dd 24       	eor	r13, r13
    3512:	cc 24       	eor	r12, r12
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    3514:	d8 2a       	or	r13, r24

    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    3516:	80 81       	ld	r24, Z
    3518:	98 81       	ld	r25, Y
    351a:	89 27       	eor	r24, r25
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    351c:	c8 2a       	or	r12, r24
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;
    351e:	83 81       	ldd	r24, Z+3	; 0x03
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	89 27       	eor	r24, r25
    3524:	f8 2a       	or	r15, r24
    3526:	10 e2       	ldi	r17, 0x20	; 32

    for (i=0; i<32; i++) {
        uint8_t Out = Crypto1FilterOutput();
    3528:	2a df       	rcall	.-428    	; 0x337e <Crypto1FilterOutput>
    352a:	08 2f       	mov	r16, r24

        Crypto1LFSR(Temp & 0x01);
    352c:	8c 2d       	mov	r24, r12
    352e:	81 70       	andi	r24, 0x01	; 1
    3530:	e0 de       	rcall	.-576    	; 0x32f2 <Crypto1LFSR>
        Temp >>= 1;
    3532:	f6 94       	lsr	r15
    3534:	e7 94       	ror	r14
    3536:	d7 94       	ror	r13
    3538:	c7 94       	ror	r12

        /* Store the keystream for later use */
        if (Out) {
    353a:	00 23       	and	r16, r16
    353c:	11 f0       	breq	.+4      	; 0x3542 <Crypto1Setup+0x160>
            Temp |= (uint32_t) 1 << 31;
    353e:	68 94       	set
    3540:	f7 f8       	bld	r15, 7
    3542:	11 50       	subi	r17, 0x01	; 1
    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;

    for (i=0; i<32; i++) {
    3544:	89 f7       	brne	.-30     	; 0x3528 <Crypto1Setup+0x146>
    }

    /* Crypto1 state register is now set up to be used for authentication.
    * In case of nested authentication, we need to use the produced keystream
    * to encrypt the CardNonce. For this case we do the encryption in-place. */
    CardNonce[0] ^= (uint8_t) (Temp >> 0);
    3546:	88 81       	ld	r24, Y
    3548:	8c 25       	eor	r24, r12
    354a:	88 83       	st	Y, r24
    CardNonce[1] ^= (uint8_t) (Temp >> 8);
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	8d 25       	eor	r24, r13
    3550:	89 83       	std	Y+1, r24	; 0x01
    CardNonce[2] ^= (uint8_t) (Temp >> 16);
    3552:	8a 81       	ldd	r24, Y+2	; 0x02
    3554:	8e 25       	eor	r24, r14
    3556:	8a 83       	std	Y+2, r24	; 0x02
    CardNonce[3] ^= (uint8_t) (Temp >> 24);
    3558:	8b 81       	ldd	r24, Y+3	; 0x03
    355a:	8f 25       	eor	r24, r15
    355c:	8b 83       	std	Y+3, r24	; 0x03
}
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	ff 90       	pop	r15
    3568:	ef 90       	pop	r14
    356a:	df 90       	pop	r13
    356c:	cf 90       	pop	r12
    356e:	bf 90       	pop	r11
    3570:	af 90       	pop	r10
    3572:	08 95       	ret
    3574:	10 e0       	ldi	r17, 0x00	; 0
    3576:	54 cf       	rjmp	.-344    	; 0x3420 <Crypto1Setup+0x3e>
    3578:	00 e0       	ldi	r16, 0x00	; 0
    357a:	4f cf       	rjmp	.-354    	; 0x341a <Crypto1Setup+0x38>

0000357c <Crypto1Auth>:

void Crypto1Auth(uint8_t EncryptedReaderNonce[4])
{
    357c:	cf 92       	push	r12
    357e:	df 92       	push	r13
    3580:	ef 92       	push	r14
    3582:	ff 92       	push	r15
    3584:	cf 93       	push	r28
    3586:	fc 01       	movw	r30, r24
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    3588:	81 81       	ldd	r24, Z+1	; 0x01
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    358a:	c2 80       	ldd	r12, Z+2	; 0x02
    358c:	d1 2c       	mov	r13, r1
    358e:	e1 2c       	mov	r14, r1
    3590:	f1 2c       	mov	r15, r1
    3592:	76 01       	movw	r14, r12
    3594:	dd 24       	eor	r13, r13
    3596:	cc 24       	eor	r12, r12
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    3598:	d8 2a       	or	r13, r24
{
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    359a:	80 81       	ld	r24, Z
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    359c:	c8 2a       	or	r12, r24
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;
    359e:	83 81       	ldd	r24, Z+3	; 0x03
    35a0:	f8 2a       	or	r15, r24
    35a2:	c0 e2       	ldi	r28, 0x20	; 32
    uint8_t i;

    for (i=0; i<32; i++) {
        /* Decrypt one output bit of the given encrypted nonce using the
        * filter output as keystream. */
        uint8_t Out = Crypto1FilterOutput();
    35a4:	ec de       	rcall	.-552    	; 0x337e <Crypto1FilterOutput>
        uint8_t Bit = Out ^ (Temp & 0x01);
    35a6:	9c 2d       	mov	r25, r12
    35a8:	91 70       	andi	r25, 0x01	; 1

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
    35aa:	89 27       	eor	r24, r25
    35ac:	a2 de       	rcall	.-700    	; 0x32f2 <Crypto1LFSR>
        Temp >>= 1;
    35ae:	f6 94       	lsr	r15
    35b0:	e7 94       	ror	r14
    35b2:	d7 94       	ror	r13
    35b4:	c7 94       	ror	r12
    35b6:	c1 50       	subi	r28, 0x01	; 1
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;

    uint8_t i;

    for (i=0; i<32; i++) {
    35b8:	a9 f7       	brne	.-22     	; 0x35a4 <Crypto1Auth+0x28>

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
        Temp >>= 1;
    }
}
    35ba:	cf 91       	pop	r28
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	df 90       	pop	r13
    35c2:	cf 90       	pop	r12
    35c4:	08 95       	ret

000035c6 <Crypto1Byte>:

uint8_t Crypto1Byte(void)
{
    35c6:	1f 93       	push	r17
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	d8 e0       	ldi	r29, 0x08	; 8
    uint8_t KeyStream = 0;
    35ce:	c0 e0       	ldi	r28, 0x00	; 0
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    35d0:	d6 de       	rcall	.-596    	; 0x337e <Crypto1FilterOutput>
    35d2:	18 2f       	mov	r17, r24
        Crypto1LFSR(0);
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	8d de       	rcall	.-742    	; 0x32f2 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    35d8:	c6 95       	lsr	r28

        if (Out) {
    35da:	11 11       	cpse	r17, r1
            KeyStream |= (1<<7);
    35dc:	c0 68       	ori	r28, 0x80	; 128
    35de:	d1 50       	subi	r29, 0x01	; 1
{
    uint8_t KeyStream = 0;
    uint8_t i;

    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {
    35e0:	b9 f7       	brne	.-18     	; 0x35d0 <Crypto1Byte+0xa>
            KeyStream |= (1<<7);
        }
    }

    return KeyStream;
}
    35e2:	8c 2f       	mov	r24, r28
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	08 95       	ret

000035ec <Crypto1Nibble>:

uint8_t Crypto1Nibble(void)
{
    35ec:	1f 93       	push	r17
    35ee:	cf 93       	push	r28
    35f0:	df 93       	push	r29
    35f2:	d4 e0       	ldi	r29, 0x04	; 4
    uint8_t KeyStream = 0;
    35f4:	c0 e0       	ldi	r28, 0x00	; 0
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    35f6:	c3 de       	rcall	.-634    	; 0x337e <Crypto1FilterOutput>
    35f8:	18 2f       	mov	r17, r24
        Crypto1LFSR(0);
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	7a de       	rcall	.-780    	; 0x32f2 <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    35fe:	c6 95       	lsr	r28

        if (Out) {
    3600:	11 11       	cpse	r17, r1
            KeyStream |= (1<<3);
    3602:	c8 60       	ori	r28, 0x08	; 8
    3604:	d1 50       	subi	r29, 0x01	; 1
{
    uint8_t KeyStream = 0;
    uint8_t i;

    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {
    3606:	b9 f7       	brne	.-18     	; 0x35f6 <Crypto1Nibble+0xa>
            KeyStream |= (1<<3);
        }
    }

    return KeyStream;
}
    3608:	8c 2f       	mov	r24, r28
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	1f 91       	pop	r17
    3610:	08 95       	ret

00003612 <Crypto1PRNG>:

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    3612:	8f 92       	push	r8
    3614:	9f 92       	push	r9
    3616:	af 92       	push	r10
    3618:	bf 92       	push	r11
    361a:	cf 92       	push	r12
    361c:	df 92       	push	r13
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	fc 01       	movw	r30, r24
    while(ClockCount--) {
    3628:	cb 01       	movw	r24, r22
    362a:	01 97       	sbiw	r24, 0x01	; 1
    362c:	67 2b       	or	r22, r23
    362e:	b1 f1       	breq	.+108    	; 0x369c <Crypto1PRNG+0x8a>
    3630:	b2 81       	ldd	r27, Z+2	; 0x02
    3632:	a0 81       	ld	r26, Z
    3634:	81 80       	ldd	r8, Z+1	; 0x01
    3636:	03 81       	ldd	r16, Z+3	; 0x03
    3638:	02 c0       	rjmp	.+4      	; 0x363e <Crypto1PRNG+0x2c>
    363a:	a4 2f       	mov	r26, r20
    363c:	bc 2d       	mov	r27, r12
        * XOR all tapped bits to a single feedback bit. */
        uint8_t Feedback = 0;

        Feedback ^= State[0] & (uint8_t) (PRNG_MASK >> 0);
        Feedback ^= State[1] & (uint8_t) (PRNG_MASK >> 8);
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
    363e:	2b 2f       	mov	r18, r27
    3640:	2d 72       	andi	r18, 0x2D	; 45
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
    3642:	32 2f       	mov	r19, r18
    3644:	32 95       	swap	r19
    3646:	3f 70       	andi	r19, 0x0F	; 15
    3648:	32 27       	eor	r19, r18
        Feedback ^= Feedback >> 2;
    364a:	23 2f       	mov	r18, r19
    364c:	26 95       	lsr	r18
    364e:	26 95       	lsr	r18
    3650:	23 27       	eor	r18, r19
        Feedback ^= Feedback >> 1;
    3652:	32 2f       	mov	r19, r18
    3654:	36 95       	lsr	r19
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
        Temp |= (uint32_t) State[2] << 16;
        Temp |= (uint32_t) State[3] << 24;
    3656:	40 2f       	mov	r20, r16
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	60 e0       	ldi	r22, 0x00	; 0
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	74 2f       	mov	r23, r20
    3660:	66 27       	eor	r22, r22
    3662:	55 27       	eor	r21, r21
    3664:	44 27       	eor	r20, r20

        /* For ease of processing convert the state into a 32 bit integer first */
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
    3666:	58 29       	or	r21, r8
        Temp |= (uint32_t) State[2] << 16;
    3668:	4a 2b       	or	r20, r26
        Temp |= (uint32_t) State[3] << 24;
    366a:	6b 2b       	or	r22, r27

        /* Cycle LFSR and feed back. */
        Temp >>= 1;
    366c:	76 95       	lsr	r23
    366e:	67 95       	ror	r22
    3670:	57 95       	ror	r21
    3672:	47 95       	ror	r20
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
        Feedback ^= Feedback >> 2;
        Feedback ^= Feedback >> 1;
    3674:	32 27       	eor	r19, r18
        Temp |= (uint32_t) State[3] << 24;

        /* Cycle LFSR and feed back. */
        Temp >>= 1;

        if (Feedback & 0x01) {
    3676:	30 fd       	sbrc	r19, 0
            Temp |= (uint32_t) 1 << (8 * PRNG_SIZE - 1);
    3678:	70 68       	ori	r23, 0x80	; 128
        }

        /* Store back state */
        State[0] = (uint8_t) (Temp >> 0);
        State[1] = (uint8_t) (Temp >> 8);
    367a:	85 2e       	mov	r8, r21
    367c:	96 2e       	mov	r9, r22
    367e:	a7 2e       	mov	r10, r23
    3680:	bb 24       	eor	r11, r11
        State[2] = (uint8_t) (Temp >> 16);
    3682:	6b 01       	movw	r12, r22
    3684:	ee 24       	eor	r14, r14
    3686:	ff 24       	eor	r15, r15
        State[3] = (uint8_t) (Temp >> 24);
    3688:	07 2f       	mov	r16, r23
    368a:	11 27       	eor	r17, r17
    368c:	22 27       	eor	r18, r18
    368e:	33 27       	eor	r19, r19
    return KeyStream;
}

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    while(ClockCount--) {
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	98 f6       	brcc	.-90     	; 0x363a <Crypto1PRNG+0x28>
    3694:	40 83       	st	Z, r20
    3696:	81 82       	std	Z+1, r8	; 0x01
    3698:	c2 82       	std	Z+2, r12	; 0x02
    369a:	03 83       	std	Z+3, r16	; 0x03
        State[2] = (uint8_t) (Temp >> 16);
        State[3] = (uint8_t) (Temp >> 24);
    }


}
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	bf 90       	pop	r11
    36aa:	af 90       	pop	r10
    36ac:	9f 90       	pop	r9
    36ae:	8f 90       	pop	r8
    36b0:	08 95       	ret

000036b2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	ea 97       	sbiw	r28, 0x3a	; 58
    36c0:	cd bf       	out	0x3d, r28	; 61
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	05 e1       	ldi	r16, 0x15	; 21
    36c6:	17 e2       	ldi	r17, 0x27	; 39
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    36c8:	f7 d2       	rcall	.+1518   	; 0x3cb8 <Endpoint_Read_8>
    36ca:	f8 01       	movw	r30, r16
    36cc:	81 93       	st	Z+, r24
    36ce:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    36d0:	f7 e2       	ldi	r31, 0x27	; 39
    36d2:	0d 31       	cpi	r16, 0x1D	; 29
    36d4:	1f 07       	cpc	r17, r31
    36d6:	c1 f7       	brne	.-16     	; 0x36c8 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    36d8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    36dc:	6b d3       	rcall	.+1750   	; 0x3db4 <Endpoint_IsSETUPReceived>
    36de:	88 23       	and	r24, r24
    36e0:	49 f0       	breq	.+18     	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    36e2:	30 91 15 27 	lds	r19, 0x2715

		switch (USB_ControlRequest.bRequest)
    36e6:	20 91 16 27 	lds	r18, 0x2716
    36ea:	82 2f       	mov	r24, r18
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	8a 30       	cpi	r24, 0x0A	; 10
    36f0:	91 05       	cpc	r25, r1
    36f2:	68 f0       	brcs	.+26     	; 0x370e <USB_Device_ProcessControlRequest+0x5c>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    36f4:	5f d3       	rcall	.+1726   	; 0x3db4 <Endpoint_IsSETUPReceived>
    36f6:	88 23       	and	r24, r24
    36f8:	11 f0       	breq	.+4      	; 0x36fe <USB_Device_ProcessControlRequest+0x4c>
	{
		Endpoint_ClearSETUP();
    36fa:	75 d3       	rcall	.+1770   	; 0x3de6 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    36fc:	a0 d3       	rcall	.+1856   	; 0x3e3e <Endpoint_StallTransaction>
	}
}
    36fe:	ea 96       	adiw	r28, 0x3a	; 58
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	1f 91       	pop	r17
    370a:	0f 91       	pop	r16
    370c:	08 95       	ret

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
    370e:	fc 01       	movw	r30, r24
    3710:	e4 5e       	subi	r30, 0xE4	; 228
    3712:	fe 4f       	sbci	r31, 0xFE	; 254
    3714:	de c7       	rjmp	.+4028   	; 0x46d2 <__tablejump2__>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3716:	31 11       	cpse	r19, r1
    3718:	ed cf       	rjmp	.-38     	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    371a:	80 91 17 27 	lds	r24, 0x2717
    371e:	82 30       	cpi	r24, 0x02	; 2
    3720:	48 f7       	brcc	.-46     	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    3722:	61 d3       	rcall	.+1730   	; 0x3de6 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3724:	80 91 17 27 	lds	r24, 0x2717
    3728:	80 93 10 27 	sts	0x2710, r24

	Endpoint_ClearStatusStage();
    372c:	93 d4       	rcall	.+2342   	; 0x4054 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    372e:	80 91 10 27 	lds	r24, 0x2710
    3732:	88 23       	and	r24, r24
    3734:	09 f4       	brne	.+2      	; 0x3738 <USB_Device_ProcessControlRequest+0x86>
    3736:	d1 c0       	rjmp	.+418    	; 0x38da <USB_Device_ProcessControlRequest+0x228>
	  USB_DeviceState = DEVICE_STATE_Configured;
    3738:	84 e0       	ldi	r24, 0x04	; 4
    373a:	80 93 14 27 	sts	0x2714, r24
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;

	EVENT_USB_Device_ConfigurationChanged();
    373e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EVENT_USB_Device_ConfigurationChanged>
    3742:	d8 cf       	rjmp	.-80     	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3744:	30 38       	cpi	r19, 0x80	; 128
    3746:	b1 f6       	brne	.-84     	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    3748:	4e d3       	rcall	.+1692   	; 0x3de6 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    374a:	80 91 10 27 	lds	r24, 0x2710
    374e:	c4 d2       	rcall	.+1416   	; 0x3cd8 <Endpoint_Write_8>
	Endpoint_ClearIN();
    3750:	8b d2       	rcall	.+1302   	; 0x3c68 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    3752:	80 d4       	rcall	.+2304   	; 0x4054 <Endpoint_ClearStatusStage>
    3754:	cf cf       	rjmp	.-98     	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3756:	30 58       	subi	r19, 0x80	; 128
    3758:	32 30       	cpi	r19, 0x02	; 2
    375a:	60 f6       	brcc	.-104    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    375c:	80 91 17 27 	lds	r24, 0x2717
    3760:	90 91 18 27 	lds	r25, 0x2718
    3764:	8c 3d       	cpi	r24, 0xDC	; 220
    3766:	e3 e0       	ldi	r30, 0x03	; 3
    3768:	9e 07       	cpc	r25, r30
    376a:	09 f4       	brne	.+2      	; 0x376e <USB_Device_ProcessControlRequest+0xbc>
    376c:	88 c0       	rjmp	.+272    	; 0x387e <USB_Device_ProcessControlRequest+0x1cc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    376e:	ae 01       	movw	r20, r28
    3770:	4f 5f       	subi	r20, 0xFF	; 255
    3772:	5f 4f       	sbci	r21, 0xFF	; 255
    3774:	60 91 19 27 	lds	r22, 0x2719
    3778:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <CALLBACK_USB_GetDescriptor>
    377c:	8c 01       	movw	r16, r24
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	09 f4       	brne	.+2      	; 0x3784 <USB_Device_ProcessControlRequest+0xd2>
    3782:	b8 cf       	rjmp	.-144    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    3784:	30 d3       	rcall	.+1632   	; 0x3de6 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3786:	b8 01       	movw	r22, r16
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	c1 d1       	rcall	.+898    	; 0x3b10 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    378e:	85 d2       	rcall	.+1290   	; 0x3c9a <Endpoint_ClearOUT>
    3790:	b1 cf       	rjmp	.-158    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3792:	31 11       	cpse	r19, r1
    3794:	af cf       	rjmp	.-162    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3796:	10 91 17 27 	lds	r17, 0x2717
    379a:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    379c:	24 d3       	rcall	.+1608   	; 0x3de6 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    379e:	5a d4       	rcall	.+2228   	; 0x4054 <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    37a0:	e4 d2       	rcall	.+1480   	; 0x3d6a <Endpoint_IsINReady>
    37a2:	88 23       	and	r24, r24
    37a4:	e9 f3       	breq	.-6      	; 0x37a0 <USB_Device_ProcessControlRequest+0xee>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    37a6:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    37aa:	11 11       	cpse	r17, r1
    37ac:	66 c0       	rjmp	.+204    	; 0x387a <USB_Device_ProcessControlRequest+0x1c8>
    37ae:	82 e0       	ldi	r24, 0x02	; 2
    37b0:	80 93 14 27 	sts	0x2714, r24
    37b4:	9f cf       	rjmp	.-194    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    37b6:	33 23       	and	r19, r19
    37b8:	09 f4       	brne	.+2      	; 0x37bc <USB_Device_ProcessControlRequest+0x10a>
    37ba:	4b c0       	rjmp	.+150    	; 0x3852 <USB_Device_ProcessControlRequest+0x1a0>
    37bc:	32 30       	cpi	r19, 0x02	; 2
    37be:	09 f0       	breq	.+2      	; 0x37c2 <USB_Device_ProcessControlRequest+0x110>
    37c0:	99 cf       	rjmp	.-206    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    37c2:	80 91 17 27 	lds	r24, 0x2717
    37c6:	81 11       	cpse	r24, r1
    37c8:	24 c0       	rjmp	.+72     	; 0x3812 <USB_Device_ProcessControlRequest+0x160>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    37ca:	10 91 19 27 	lds	r17, 0x2719
    37ce:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <USB_Device_ProcessControlRequest+0x122>
    37d2:	90 cf       	rjmp	.-224    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    37d4:	81 2f       	mov	r24, r17
    37d6:	90 d2       	rcall	.+1312   	; 0x3cf8 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    37d8:	80 91 16 27 	lds	r24, 0x2716
    37dc:	83 30       	cpi	r24, 0x03	; 3
    37de:	09 f4       	brne	.+2      	; 0x37e2 <USB_Device_ProcessControlRequest+0x130>
    37e0:	86 c0       	rjmp	.+268    	; 0x38ee <USB_Device_ProcessControlRequest+0x23c>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    37e2:	a0 91 1f 27 	lds	r26, 0x271F
    37e6:	b0 91 20 27 	lds	r27, 0x2720
    37ea:	11 96       	adiw	r26, 0x01	; 1
    37ec:	8c 91       	ld	r24, X
    37ee:	11 97       	sbiw	r26, 0x01	; 1
    37f0:	8b 7f       	andi	r24, 0xFB	; 251
    37f2:	11 96       	adiw	r26, 0x01	; 1
    37f4:	8c 93       	st	X, r24
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    37f6:	24 e8       	ldi	r18, 0x84	; 132
    37f8:	12 9f       	mul	r17, r18
    37fa:	f0 01       	movw	r30, r0
    37fc:	11 24       	eor	r1, r1
    37fe:	ed 59       	subi	r30, 0x9D	; 157
    3800:	f8 4d       	sbci	r31, 0xD8	; 216
    3802:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    3804:	e0 91 1f 27 	lds	r30, 0x271F
    3808:	f0 91 20 27 	lds	r31, 0x2720
    380c:	80 81       	ld	r24, Z
    380e:	8e 7f       	andi	r24, 0xFE	; 254
    3810:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	71 d2       	rcall	.+1250   	; 0x3cf8 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    3816:	e7 d2       	rcall	.+1486   	; 0x3de6 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    3818:	1d d4       	rcall	.+2106   	; 0x4054 <Endpoint_ClearStatusStage>
    381a:	6c cf       	rjmp	.-296    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    381c:	30 38       	cpi	r19, 0x80	; 128
    381e:	29 f1       	breq	.+74     	; 0x386a <USB_Device_ProcessControlRequest+0x1b8>
    3820:	32 38       	cpi	r19, 0x82	; 130
    3822:	09 f0       	breq	.+2      	; 0x3826 <USB_Device_ProcessControlRequest+0x174>
    3824:	67 cf       	rjmp	.-306    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3826:	80 91 19 27 	lds	r24, 0x2719
    382a:	8f 70       	andi	r24, 0x0F	; 15
    382c:	65 d2       	rcall	.+1226   	; 0x3cf8 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    382e:	e0 91 1f 27 	lds	r30, 0x271F
    3832:	f0 91 20 27 	lds	r31, 0x2720
    3836:	11 81       	ldd	r17, Z+1	; 0x01
    3838:	12 fb       	bst	r17, 2
    383a:	11 27       	eor	r17, r17
    383c:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	5b d2       	rcall	.+1206   	; 0x3cf8 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    3842:	d1 d2       	rcall	.+1442   	; 0x3de6 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    3844:	81 2f       	mov	r24, r17
    3846:	48 d2       	rcall	.+1168   	; 0x3cd8 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	46 d2       	rcall	.+1164   	; 0x3cd8 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    384c:	0d d2       	rcall	.+1050   	; 0x3c68 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    384e:	02 d4       	rcall	.+2052   	; 0x4054 <Endpoint_ClearStatusStage>
    3850:	51 cf       	rjmp	.-350    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3852:	80 91 17 27 	lds	r24, 0x2717
    3856:	81 30       	cpi	r24, 0x01	; 1
    3858:	09 f0       	breq	.+2      	; 0x385c <USB_Device_ProcessControlRequest+0x1aa>
    385a:	4c cf       	rjmp	.-360    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	23 30       	cpi	r18, 0x03	; 3
    3860:	09 f0       	breq	.+2      	; 0x3864 <USB_Device_ProcessControlRequest+0x1b2>
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	80 93 12 27 	sts	0x2712, r24
    3868:	d4 cf       	rjmp	.-88     	; 0x3812 <USB_Device_ProcessControlRequest+0x160>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    386a:	10 91 11 27 	lds	r17, 0x2711
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    386e:	80 91 12 27 	lds	r24, 0x2712
    3872:	88 23       	and	r24, r24
    3874:	31 f3       	breq	.-52     	; 0x3842 <USB_Device_ProcessControlRequest+0x190>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3876:	12 60       	ori	r17, 0x02	; 2
    3878:	e4 cf       	rjmp	.-56     	; 0x3842 <USB_Device_ProcessControlRequest+0x190>

	while (!(Endpoint_IsINReady()));

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    387a:	83 e0       	ldi	r24, 0x03	; 3
    387c:	99 cf       	rjmp	.-206    	; 0x37b0 <USB_Device_ProcessControlRequest+0xfe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    387e:	83 e0       	ldi	r24, 0x03	; 3
    3880:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3882:	8a e3       	ldi	r24, 0x3A	; 58
    3884:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    3886:	5f b7       	in	r21, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    3888:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    388a:	de 01       	movw	r26, r28
    388c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    388e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3890:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    3892:	42 e0       	ldi	r20, 0x02	; 2
    3894:	07 c0       	rjmp	.+14     	; 0x38a4 <USB_Device_ProcessControlRequest+0x1f2>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	c7 96       	adiw	r24, 0x37	; 55
    389a:	8d 93       	st	X+, r24
    389c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    389e:	2f 5f       	subi	r18, 0xFF	; 255
    38a0:	2c 31       	cpi	r18, 0x1C	; 28
    38a2:	91 f0       	breq	.+36     	; 0x38c8 <USB_Device_ProcessControlRequest+0x216>
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    38a4:	40 93 ca 01 	sts	0x01CA, r20
					SerialByte = pgm_read_byte(SigReadAddress);
    38a8:	e3 2f       	mov	r30, r19
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    38ae:	10 92 ca 01 	sts	0x01CA, r1

					if (SerialCharNum & 0x01)
    38b2:	20 ff       	sbrs	r18, 0
    38b4:	03 c0       	rjmp	.+6      	; 0x38bc <USB_Device_ProcessControlRequest+0x20a>
					{
						SerialByte >>= 4;
    38b6:	82 95       	swap	r24
    38b8:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    38ba:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    38bc:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    38be:	8a 30       	cpi	r24, 0x0A	; 10
    38c0:	50 f7       	brcc	.-44     	; 0x3896 <USB_Device_ProcessControlRequest+0x1e4>
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	c0 96       	adiw	r24, 0x30	; 48
    38c6:	e9 cf       	rjmp	.-46     	; 0x389a <USB_Device_ProcessControlRequest+0x1e8>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    38c8:	5f bf       	out	0x3f, r21	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    38ca:	8d d2       	rcall	.+1306   	; 0x3de6 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    38cc:	6a e3       	ldi	r22, 0x3A	; 58
    38ce:	70 e0       	ldi	r23, 0x00	; 0
    38d0:	ce 01       	movw	r24, r28
    38d2:	01 96       	adiw	r24, 0x01	; 1
    38d4:	88 d0       	rcall	.+272    	; 0x39e6 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    38d6:	e1 d1       	rcall	.+962    	; 0x3c9a <Endpoint_ClearOUT>
    38d8:	0d cf       	rjmp	.-486    	; 0x36f4 <USB_Device_ProcessControlRequest+0x42>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    38da:	80 91 c3 04 	lds	r24, 0x04C3
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    38de:	88 23       	and	r24, r24
    38e0:	21 f0       	breq	.+8      	; 0x38ea <USB_Device_ProcessControlRequest+0x238>
    38e2:	84 e0       	ldi	r24, 0x04	; 4
    38e4:	80 93 14 27 	sts	0x2714, r24
    38e8:	2a cf       	rjmp	.-428    	; 0x373e <USB_Device_ProcessControlRequest+0x8c>
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	fb cf       	rjmp	.-10     	; 0x38e4 <USB_Device_ProcessControlRequest+0x232>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
					{
						Endpoint_StallTransaction();
    38ee:	a7 d2       	rcall	.+1358   	; 0x3e3e <Endpoint_StallTransaction>
    38f0:	90 cf       	rjmp	.-224    	; 0x3812 <USB_Device_ProcessControlRequest+0x160>

000038f2 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    38f2:	08 95       	ret

000038f4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    38f4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    38f6:	80 91 14 27 	lds	r24, 0x2714
    38fa:	81 11       	cpse	r24, r1
    38fc:	02 c0       	rjmp	.+4      	; 0x3902 <USB_USBTask+0xe>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    38fe:	cf 91       	pop	r28
    3900:	08 95       	ret
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    3902:	c0 91 21 27 	lds	r28, 0x2721
	if (USB_DeviceState == DEVICE_STATE_Unattached)
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	f7 d1       	rcall	.+1006   	; 0x3cf8 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    390a:	54 d2       	rcall	.+1192   	; 0x3db4 <Endpoint_IsSETUPReceived>
    390c:	81 11       	cpse	r24, r1
    390e:	03 c0       	rjmp	.+6      	; 0x3916 <USB_USBTask+0x22>
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    3910:	8c 2f       	mov	r24, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3912:	cf 91       	pop	r28
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    3914:	f1 c1       	rjmp	.+994    	; 0x3cf8 <Endpoint_SelectEndpoint>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    3916:	cd de       	rcall	.-614    	; 0x36b2 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    3918:	8c 2f       	mov	r24, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    391a:	cf 91       	pop	r28
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    391c:	ed c1       	rjmp	.+986    	; 0x3cf8 <Endpoint_SelectEndpoint>

0000391e <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    391e:	cf 92       	push	r12
    3920:	df 92       	push	r13
    3922:	ef 92       	push	r14
    3924:	ff 92       	push	r15
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
    392a:	cf 93       	push	r28
    392c:	df 93       	push	r29
    392e:	8c 01       	movw	r16, r24
    3930:	eb 01       	movw	r28, r22
    3932:	7a 01       	movw	r14, r20
    3934:	a5 d3       	rcall	.+1866   	; 0x4080 <Endpoint_WaitUntilReady>
    3936:	81 11       	cpse	r24, r1
    3938:	25 c0       	rjmp	.+74     	; 0x3984 <Endpoint_Write_Stream_LE+0x66>
    393a:	e1 14       	cp	r14, r1
    393c:	f1 04       	cpc	r15, r1
    393e:	81 f1       	breq	.+96     	; 0x39a0 <Endpoint_Write_Stream_LE+0x82>
    3940:	f7 01       	movw	r30, r14
    3942:	80 81       	ld	r24, Z
    3944:	91 81       	ldd	r25, Z+1	; 0x01
    3946:	c8 1b       	sub	r28, r24
    3948:	d9 0b       	sbc	r29, r25
    394a:	08 0f       	add	r16, r24
    394c:	19 1f       	adc	r17, r25
    394e:	20 97       	sbiw	r28, 0x00	; 0
    3950:	09 f4       	brne	.+2      	; 0x3954 <Endpoint_Write_Stream_LE+0x36>
    3952:	3b c0       	rjmp	.+118    	; 0x39ca <Endpoint_Write_Stream_LE+0xac>
    3954:	c1 2c       	mov	r12, r1
    3956:	d1 2c       	mov	r13, r1
    3958:	20 91 1d 27 	lds	r18, 0x271D
    395c:	30 91 1e 27 	lds	r19, 0x271E
    3960:	f9 01       	movw	r30, r18
    3962:	ef 5b       	subi	r30, 0xBF	; 191
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	90 81       	ld	r25, Z
    3968:	31 97       	sbiw	r30, 0x01	; 1
    396a:	80 81       	ld	r24, Z
    396c:	98 17       	cp	r25, r24
    396e:	78 f1       	brcs	.+94     	; 0x39ce <Endpoint_Write_Stream_LE+0xb0>
    3970:	7b d1       	rcall	.+758    	; 0x3c68 <Endpoint_ClearIN>
    3972:	c0 df       	rcall	.-128    	; 0x38f4 <USB_USBTask>
    3974:	f7 01       	movw	r30, r14
    3976:	80 81       	ld	r24, Z
    3978:	91 81       	ldd	r25, Z+1	; 0x01
    397a:	8c 0d       	add	r24, r12
    397c:	9d 1d       	adc	r25, r13
    397e:	80 83       	st	Z, r24
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	85 e0       	ldi	r24, 0x05	; 5
    3984:	df 91       	pop	r29
    3986:	cf 91       	pop	r28
    3988:	1f 91       	pop	r17
    398a:	0f 91       	pop	r16
    398c:	ff 90       	pop	r15
    398e:	ef 90       	pop	r14
    3990:	df 90       	pop	r13
    3992:	cf 90       	pop	r12
    3994:	08 95       	ret
    3996:	68 d1       	rcall	.+720    	; 0x3c68 <Endpoint_ClearIN>
    3998:	ad df       	rcall	.-166    	; 0x38f4 <USB_USBTask>
    399a:	72 d3       	rcall	.+1764   	; 0x4080 <Endpoint_WaitUntilReady>
    399c:	81 11       	cpse	r24, r1
    399e:	f2 cf       	rjmp	.-28     	; 0x3984 <Endpoint_Write_Stream_LE+0x66>
    39a0:	20 97       	sbiw	r28, 0x00	; 0
    39a2:	99 f0       	breq	.+38     	; 0x39ca <Endpoint_Write_Stream_LE+0xac>
    39a4:	20 91 1d 27 	lds	r18, 0x271D
    39a8:	30 91 1e 27 	lds	r19, 0x271E
    39ac:	f9 01       	movw	r30, r18
    39ae:	ef 5b       	subi	r30, 0xBF	; 191
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	90 81       	ld	r25, Z
    39b4:	31 97       	sbiw	r30, 0x01	; 1
    39b6:	80 81       	ld	r24, Z
    39b8:	98 17       	cp	r25, r24
    39ba:	68 f7       	brcc	.-38     	; 0x3996 <Endpoint_Write_Stream_LE+0x78>
    39bc:	f8 01       	movw	r30, r16
    39be:	81 91       	ld	r24, Z+
    39c0:	8f 01       	movw	r16, r30
    39c2:	8a d1       	rcall	.+788    	; 0x3cd8 <Endpoint_Write_8>
    39c4:	21 97       	sbiw	r28, 0x01	; 1
    39c6:	20 97       	sbiw	r28, 0x00	; 0
    39c8:	69 f7       	brne	.-38     	; 0x39a4 <Endpoint_Write_Stream_LE+0x86>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	db cf       	rjmp	.-74     	; 0x3984 <Endpoint_Write_Stream_LE+0x66>
    39ce:	f8 01       	movw	r30, r16
    39d0:	81 91       	ld	r24, Z+
    39d2:	8f 01       	movw	r16, r30
    39d4:	81 d1       	rcall	.+770    	; 0x3cd8 <Endpoint_Write_8>
    39d6:	ff ef       	ldi	r31, 0xFF	; 255
    39d8:	cf 1a       	sub	r12, r31
    39da:	df 0a       	sbc	r13, r31
    39dc:	cc 15       	cp	r28, r12
    39de:	dd 05       	cpc	r29, r13
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <Endpoint_Write_Stream_LE+0xc6>
    39e2:	ba cf       	rjmp	.-140    	; 0x3958 <Endpoint_Write_Stream_LE+0x3a>
    39e4:	f2 cf       	rjmp	.-28     	; 0x39ca <Endpoint_Write_Stream_LE+0xac>

000039e6 <Endpoint_Write_Control_Stream_LE>:
    39e6:	cf 92       	push	r12
    39e8:	df 92       	push	r13
    39ea:	ef 92       	push	r14
    39ec:	ff 92       	push	r15
    39ee:	0f 93       	push	r16
    39f0:	1f 93       	push	r17
    39f2:	cf 93       	push	r28
    39f4:	df 93       	push	r29
    39f6:	6c 01       	movw	r12, r24
    39f8:	8b 01       	movw	r16, r22
    39fa:	80 91 21 27 	lds	r24, 0x2721
    39fe:	80 68       	ori	r24, 0x80	; 128
    3a00:	7b d1       	rcall	.+758    	; 0x3cf8 <Endpoint_SelectEndpoint>
    3a02:	c0 91 1b 27 	lds	r28, 0x271B
    3a06:	d0 91 1c 27 	lds	r29, 0x271C
    3a0a:	c0 17       	cp	r28, r16
    3a0c:	d1 07       	cpc	r29, r17
    3a0e:	28 f0       	brcs	.+10     	; 0x3a1a <Endpoint_Write_Control_Stream_LE+0x34>
    3a10:	01 15       	cp	r16, r1
    3a12:	11 05       	cpc	r17, r1
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <Endpoint_Write_Control_Stream_LE+0x32>
    3a16:	6f c0       	rjmp	.+222    	; 0x3af6 <Endpoint_Write_Control_Stream_LE+0x110>
    3a18:	e8 01       	movw	r28, r16
    3a1a:	10 e0       	ldi	r17, 0x00	; 0
    3a1c:	20 97       	sbiw	r28, 0x00	; 0
    3a1e:	39 f5       	brne	.+78     	; 0x3a6e <Endpoint_Write_Control_Stream_LE+0x88>
    3a20:	11 11       	cpse	r17, r1
    3a22:	0c c0       	rjmp	.+24     	; 0x3a3c <Endpoint_Write_Control_Stream_LE+0x56>
    3a24:	2f c0       	rjmp	.+94     	; 0x3a84 <Endpoint_Write_Control_Stream_LE+0x9e>
    3a26:	85 30       	cpi	r24, 0x05	; 5
    3a28:	91 f1       	breq	.+100    	; 0x3a8e <Endpoint_Write_Control_Stream_LE+0xa8>
    3a2a:	c4 d1       	rcall	.+904    	; 0x3db4 <Endpoint_IsSETUPReceived>
    3a2c:	81 11       	cpse	r24, r1
    3a2e:	31 c0       	rjmp	.+98     	; 0x3a92 <Endpoint_Write_Control_Stream_LE+0xac>
    3a30:	a8 d1       	rcall	.+848    	; 0x3d82 <Endpoint_IsOUTReceived>
    3a32:	81 11       	cpse	r24, r1
    3a34:	27 c0       	rjmp	.+78     	; 0x3a84 <Endpoint_Write_Control_Stream_LE+0x9e>
    3a36:	99 d1       	rcall	.+818    	; 0x3d6a <Endpoint_IsINReady>
    3a38:	81 11       	cpse	r24, r1
    3a3a:	2d c0       	rjmp	.+90     	; 0x3a96 <Endpoint_Write_Control_Stream_LE+0xb0>
    3a3c:	80 91 14 27 	lds	r24, 0x2714
    3a40:	81 11       	cpse	r24, r1
    3a42:	f1 cf       	rjmp	.-30     	; 0x3a26 <Endpoint_Write_Control_Stream_LE+0x40>
    3a44:	82 e0       	ldi	r24, 0x02	; 2
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	df 90       	pop	r13
    3a54:	cf 90       	pop	r12
    3a56:	08 95       	ret
    3a58:	85 30       	cpi	r24, 0x05	; 5
    3a5a:	c9 f0       	breq	.+50     	; 0x3a8e <Endpoint_Write_Control_Stream_LE+0xa8>
    3a5c:	ab d1       	rcall	.+854    	; 0x3db4 <Endpoint_IsSETUPReceived>
    3a5e:	81 11       	cpse	r24, r1
    3a60:	18 c0       	rjmp	.+48     	; 0x3a92 <Endpoint_Write_Control_Stream_LE+0xac>
    3a62:	8f d1       	rcall	.+798    	; 0x3d82 <Endpoint_IsOUTReceived>
    3a64:	81 11       	cpse	r24, r1
    3a66:	0e c0       	rjmp	.+28     	; 0x3a84 <Endpoint_Write_Control_Stream_LE+0x9e>
    3a68:	80 d1       	rcall	.+768    	; 0x3d6a <Endpoint_IsINReady>
    3a6a:	81 11       	cpse	r24, r1
    3a6c:	14 c0       	rjmp	.+40     	; 0x3a96 <Endpoint_Write_Control_Stream_LE+0xb0>
    3a6e:	80 91 14 27 	lds	r24, 0x2714
    3a72:	81 11       	cpse	r24, r1
    3a74:	f1 cf       	rjmp	.-30     	; 0x3a58 <Endpoint_Write_Control_Stream_LE+0x72>
    3a76:	e6 cf       	rjmp	.-52     	; 0x3a44 <Endpoint_Write_Control_Stream_LE+0x5e>
    3a78:	80 91 14 27 	lds	r24, 0x2714
    3a7c:	88 23       	and	r24, r24
    3a7e:	11 f3       	breq	.-60     	; 0x3a44 <Endpoint_Write_Control_Stream_LE+0x5e>
    3a80:	85 30       	cpi	r24, 0x05	; 5
    3a82:	29 f0       	breq	.+10     	; 0x3a8e <Endpoint_Write_Control_Stream_LE+0xa8>
    3a84:	7e d1       	rcall	.+764    	; 0x3d82 <Endpoint_IsOUTReceived>
    3a86:	88 23       	and	r24, r24
    3a88:	b9 f3       	breq	.-18     	; 0x3a78 <Endpoint_Write_Control_Stream_LE+0x92>
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	dc cf       	rjmp	.-72     	; 0x3a46 <Endpoint_Write_Control_Stream_LE+0x60>
    3a8e:	83 e0       	ldi	r24, 0x03	; 3
    3a90:	da cf       	rjmp	.-76     	; 0x3a46 <Endpoint_Write_Control_Stream_LE+0x60>
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	d8 cf       	rjmp	.-80     	; 0x3a46 <Endpoint_Write_Control_Stream_LE+0x60>
    3a96:	80 91 21 27 	lds	r24, 0x2721
    3a9a:	87 fd       	sbrc	r24, 7
    3a9c:	30 c0       	rjmp	.+96     	; 0x3afe <Endpoint_Write_Control_Stream_LE+0x118>
    3a9e:	20 91 1d 27 	lds	r18, 0x271D
    3aa2:	30 91 1e 27 	lds	r19, 0x271E
    3aa6:	f9 01       	movw	r30, r18
    3aa8:	e0 5c       	subi	r30, 0xC0	; 192
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	e0 80       	ld	r14, Z
    3aae:	31 96       	adiw	r30, 0x01	; 1
    3ab0:	80 81       	ld	r24, Z
    3ab2:	f1 2c       	mov	r15, r1
    3ab4:	e8 1a       	sub	r14, r24
    3ab6:	f1 08       	sbc	r15, r1
    3ab8:	20 97       	sbiw	r28, 0x00	; 0
    3aba:	a9 f0       	breq	.+42     	; 0x3ae6 <Endpoint_Write_Control_Stream_LE+0x100>
    3abc:	88 e0       	ldi	r24, 0x08	; 8
    3abe:	e8 16       	cp	r14, r24
    3ac0:	f1 04       	cpc	r15, r1
    3ac2:	88 f4       	brcc	.+34     	; 0x3ae6 <Endpoint_Write_Control_Stream_LE+0x100>
    3ac4:	86 01       	movw	r16, r12
    3ac6:	04 c0       	rjmp	.+8      	; 0x3ad0 <Endpoint_Write_Control_Stream_LE+0xea>
    3ac8:	88 e0       	ldi	r24, 0x08	; 8
    3aca:	e8 16       	cp	r14, r24
    3acc:	f1 04       	cpc	r15, r1
    3ace:	59 f0       	breq	.+22     	; 0x3ae6 <Endpoint_Write_Control_Stream_LE+0x100>
    3ad0:	f8 01       	movw	r30, r16
    3ad2:	81 91       	ld	r24, Z+
    3ad4:	8f 01       	movw	r16, r30
    3ad6:	00 d1       	rcall	.+512    	; 0x3cd8 <Endpoint_Write_8>
    3ad8:	68 01       	movw	r12, r16
    3ada:	21 97       	sbiw	r28, 0x01	; 1
    3adc:	ff ef       	ldi	r31, 0xFF	; 255
    3ade:	ef 1a       	sub	r14, r31
    3ae0:	ff 0a       	sbc	r15, r31
    3ae2:	20 97       	sbiw	r28, 0x00	; 0
    3ae4:	89 f7       	brne	.-30     	; 0x3ac8 <Endpoint_Write_Control_Stream_LE+0xe2>
    3ae6:	11 e0       	ldi	r17, 0x01	; 1
    3ae8:	e8 e0       	ldi	r30, 0x08	; 8
    3aea:	ee 16       	cp	r14, r30
    3aec:	f1 04       	cpc	r15, r1
    3aee:	09 f0       	breq	.+2      	; 0x3af2 <Endpoint_Write_Control_Stream_LE+0x10c>
    3af0:	10 e0       	ldi	r17, 0x00	; 0
    3af2:	ba d0       	rcall	.+372    	; 0x3c68 <Endpoint_ClearIN>
    3af4:	93 cf       	rjmp	.-218    	; 0x3a1c <Endpoint_Write_Control_Stream_LE+0x36>
    3af6:	b8 d0       	rcall	.+368    	; 0x3c68 <Endpoint_ClearIN>
    3af8:	c0 e0       	ldi	r28, 0x00	; 0
    3afa:	d0 e0       	ldi	r29, 0x00	; 0
    3afc:	8e cf       	rjmp	.-228    	; 0x3a1a <Endpoint_Write_Control_Stream_LE+0x34>
    3afe:	e0 91 1d 27 	lds	r30, 0x271D
    3b02:	f0 91 1e 27 	lds	r31, 0x271E
    3b06:	ef 5b       	subi	r30, 0xBF	; 191
    3b08:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0a:	e0 80       	ld	r14, Z
    3b0c:	f1 2c       	mov	r15, r1
    3b0e:	d4 cf       	rjmp	.-88     	; 0x3ab8 <Endpoint_Write_Control_Stream_LE+0xd2>

00003b10 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3b10:	df 92       	push	r13
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	f8 2e       	mov	r15, r24
    3b20:	e9 2e       	mov	r14, r25
    3b22:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    3b24:	80 91 21 27 	lds	r24, 0x2721
    3b28:	80 68       	ori	r24, 0x80	; 128
    3b2a:	e6 d0       	rcall	.+460    	; 0x3cf8 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    3b2c:	c0 91 1b 27 	lds	r28, 0x271B
    3b30:	d0 91 1c 27 	lds	r29, 0x271C
    3b34:	c0 17       	cp	r28, r16
    3b36:	d1 07       	cpc	r29, r17
    3b38:	28 f0       	brcs	.+10     	; 0x3b44 <Endpoint_Write_Control_PStream_LE+0x34>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3b3a:	01 15       	cp	r16, r1
    3b3c:	11 05       	cpc	r17, r1
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <Endpoint_Write_Control_PStream_LE+0x32>
    3b40:	86 c0       	rjmp	.+268    	; 0x3c4e <Endpoint_Write_Control_PStream_LE+0x13e>
    3b42:	e8 01       	movw	r28, r16
    3b44:	0f 2d       	mov	r16, r15
    3b46:	1e 2d       	mov	r17, r14
    3b48:	d1 2c       	mov	r13, r1
    3b4a:	20 97       	sbiw	r28, 0x00	; 0
    3b4c:	39 f5       	brne	.+78     	; 0x3b9c <Endpoint_Write_Control_PStream_LE+0x8c>
    3b4e:	d1 10       	cpse	r13, r1
    3b50:	0d c0       	rjmp	.+26     	; 0x3b6c <Endpoint_Write_Control_PStream_LE+0x5c>
    3b52:	2f c0       	rjmp	.+94     	; 0x3bb2 <Endpoint_Write_Control_PStream_LE+0xa2>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3b54:	85 30       	cpi	r24, 0x05	; 5
    3b56:	09 f4       	brne	.+2      	; 0x3b5a <Endpoint_Write_Control_PStream_LE+0x4a>
    3b58:	38 c0       	rjmp	.+112    	; 0x3bca <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3b5a:	2c d1       	rcall	.+600    	; 0x3db4 <Endpoint_IsSETUPReceived>
    3b5c:	81 11       	cpse	r24, r1
    3b5e:	3e c0       	rjmp	.+124    	; 0x3bdc <Endpoint_Write_Control_PStream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3b60:	10 d1       	rcall	.+544    	; 0x3d82 <Endpoint_IsOUTReceived>
    3b62:	81 11       	cpse	r24, r1
    3b64:	26 c0       	rjmp	.+76     	; 0x3bb2 <Endpoint_Write_Control_PStream_LE+0xa2>
		  break;

		if (Endpoint_IsINReady())
    3b66:	01 d1       	rcall	.+514    	; 0x3d6a <Endpoint_IsINReady>
    3b68:	81 11       	cpse	r24, r1
    3b6a:	41 c0       	rjmp	.+130    	; 0x3bee <Endpoint_Write_Control_PStream_LE+0xde>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3b6c:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3b70:	81 11       	cpse	r24, r1
    3b72:	f0 cf       	rjmp	.-32     	; 0x3b54 <Endpoint_Write_Control_PStream_LE+0x44>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3b74:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3b76:	df 91       	pop	r29
    3b78:	cf 91       	pop	r28
    3b7a:	1f 91       	pop	r17
    3b7c:	0f 91       	pop	r16
    3b7e:	ff 90       	pop	r15
    3b80:	ef 90       	pop	r14
    3b82:	df 90       	pop	r13
    3b84:	08 95       	ret
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3b86:	85 30       	cpi	r24, 0x05	; 5
    3b88:	01 f1       	breq	.+64     	; 0x3bca <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3b8a:	14 d1       	rcall	.+552    	; 0x3db4 <Endpoint_IsSETUPReceived>
    3b8c:	81 11       	cpse	r24, r1
    3b8e:	26 c0       	rjmp	.+76     	; 0x3bdc <Endpoint_Write_Control_PStream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3b90:	f8 d0       	rcall	.+496    	; 0x3d82 <Endpoint_IsOUTReceived>
    3b92:	81 11       	cpse	r24, r1
    3b94:	0e c0       	rjmp	.+28     	; 0x3bb2 <Endpoint_Write_Control_PStream_LE+0xa2>
		  break;

		if (Endpoint_IsINReady())
    3b96:	e9 d0       	rcall	.+466    	; 0x3d6a <Endpoint_IsINReady>
    3b98:	81 11       	cpse	r24, r1
    3b9a:	29 c0       	rjmp	.+82     	; 0x3bee <Endpoint_Write_Control_PStream_LE+0xde>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3b9c:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3ba0:	81 11       	cpse	r24, r1
    3ba2:	f1 cf       	rjmp	.-30     	; 0x3b86 <Endpoint_Write_Control_PStream_LE+0x76>
    3ba4:	e7 cf       	rjmp	.-50     	; 0x3b74 <Endpoint_Write_Control_PStream_LE+0x64>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3ba6:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3baa:	88 23       	and	r24, r24
    3bac:	19 f3       	breq	.-58     	; 0x3b74 <Endpoint_Write_Control_PStream_LE+0x64>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3bae:	85 30       	cpi	r24, 0x05	; 5
    3bb0:	61 f0       	breq	.+24     	; 0x3bca <Endpoint_Write_Control_PStream_LE+0xba>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3bb2:	e7 d0       	rcall	.+462    	; 0x3d82 <Endpoint_IsOUTReceived>
    3bb4:	88 23       	and	r24, r24
    3bb6:	b9 f3       	breq	.-18     	; 0x3ba6 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
}
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	1f 91       	pop	r17
    3bc0:	0f 91       	pop	r16
    3bc2:	ff 90       	pop	r15
    3bc4:	ef 90       	pop	r14
    3bc6:	df 90       	pop	r13
    3bc8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3bca:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	ff 90       	pop	r15
    3bd6:	ef 90       	pop	r14
    3bd8:	df 90       	pop	r13
    3bda:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	ff 90       	pop	r15
    3be8:	ef 90       	pop	r14
    3bea:	df 90       	pop	r13
    3bec:	08 95       	ret
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    3bee:	80 91 21 27 	lds	r24, 0x2721
    3bf2:	87 fd       	sbrc	r24, 7
    3bf4:	30 c0       	rjmp	.+96     	; 0x3c56 <Endpoint_Write_Control_PStream_LE+0x146>
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    3bf6:	80 91 1d 27 	lds	r24, 0x271D
    3bfa:	90 91 1e 27 	lds	r25, 0x271E
    3bfe:	fc 01       	movw	r30, r24
    3c00:	e0 5c       	subi	r30, 0xC0	; 192
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	e0 80       	ld	r14, Z
    3c06:	31 96       	adiw	r30, 0x01	; 1
    3c08:	80 81       	ld	r24, Z
    3c0a:	f1 2c       	mov	r15, r1
    3c0c:	e8 1a       	sub	r14, r24
    3c0e:	f1 08       	sbc	r15, r1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3c10:	20 97       	sbiw	r28, 0x00	; 0
    3c12:	a1 f0       	breq	.+40     	; 0x3c3c <Endpoint_Write_Control_PStream_LE+0x12c>
    3c14:	88 e0       	ldi	r24, 0x08	; 8
    3c16:	e8 16       	cp	r14, r24
    3c18:	f1 04       	cpc	r15, r1
    3c1a:	28 f0       	brcs	.+10     	; 0x3c26 <Endpoint_Write_Control_PStream_LE+0x116>
    3c1c:	0f c0       	rjmp	.+30     	; 0x3c3c <Endpoint_Write_Control_PStream_LE+0x12c>
    3c1e:	88 e0       	ldi	r24, 0x08	; 8
    3c20:	e8 16       	cp	r14, r24
    3c22:	f1 04       	cpc	r15, r1
    3c24:	59 f0       	breq	.+22     	; 0x3c3c <Endpoint_Write_Control_PStream_LE+0x12c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3c26:	f8 01       	movw	r30, r16
    3c28:	84 91       	lpm	r24, Z
    3c2a:	56 d0       	rcall	.+172    	; 0x3cd8 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3c2c:	0f 5f       	subi	r16, 0xFF	; 255
    3c2e:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    3c30:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    3c32:	ff ef       	ldi	r31, 0xFF	; 255
    3c34:	ef 1a       	sub	r14, r31
    3c36:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3c38:	20 97       	sbiw	r28, 0x00	; 0
    3c3a:	89 f7       	brne	.-30     	; 0x3c1e <Endpoint_Write_Control_PStream_LE+0x10e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3c3c:	dd 24       	eor	r13, r13
    3c3e:	d3 94       	inc	r13
    3c40:	e8 e0       	ldi	r30, 0x08	; 8
    3c42:	ee 16       	cp	r14, r30
    3c44:	f1 04       	cpc	r15, r1
    3c46:	09 f0       	breq	.+2      	; 0x3c4a <Endpoint_Write_Control_PStream_LE+0x13a>
    3c48:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    3c4a:	0e d0       	rcall	.+28     	; 0x3c68 <Endpoint_ClearIN>
    3c4c:	7e cf       	rjmp	.-260    	; 0x3b4a <Endpoint_Write_Control_PStream_LE+0x3a>
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();
    3c4e:	0c d0       	rcall	.+24     	; 0x3c68 <Endpoint_ClearIN>
    3c50:	c0 e0       	ldi	r28, 0x00	; 0
    3c52:	d0 e0       	ldi	r29, 0x00	; 0
    3c54:	77 cf       	rjmp	.-274    	; 0x3b44 <Endpoint_Write_Control_PStream_LE+0x34>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    3c56:	e0 91 1d 27 	lds	r30, 0x271D
    3c5a:	f0 91 1e 27 	lds	r31, 0x271E
    3c5e:	ef 5b       	subi	r30, 0xBF	; 191
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	e0 80       	ld	r14, Z
    3c64:	f1 2c       	mov	r15, r1
    3c66:	d4 cf       	rjmp	.-88     	; 0x3c10 <Endpoint_Write_Control_PStream_LE+0x100>

00003c68 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    3c68:	e0 91 1f 27 	lds	r30, 0x271F
    3c6c:	f0 91 20 27 	lds	r31, 0x2720
    3c70:	a0 91 1d 27 	lds	r26, 0x271D
    3c74:	b0 91 1e 27 	lds	r27, 0x271E
    3c78:	af 5b       	subi	r26, 0xBF	; 191
    3c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c7c:	8c 91       	ld	r24, X
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	82 83       	std	Z+2, r24	; 0x02
    3c82:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    3c84:	80 81       	ld	r24, Z
    3c86:	8d 79       	andi	r24, 0x9D	; 157
    3c88:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3c8a:	e0 91 1d 27 	lds	r30, 0x271D
    3c8e:	f0 91 1e 27 	lds	r31, 0x271E
    3c92:	ef 5b       	subi	r30, 0xBF	; 191
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	10 82       	st	Z, r1
    3c98:	08 95       	ret

00003c9a <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    3c9a:	e0 91 1f 27 	lds	r30, 0x271F
    3c9e:	f0 91 20 27 	lds	r31, 0x2720
    3ca2:	80 81       	ld	r24, Z
    3ca4:	8d 79       	andi	r24, 0x9D	; 157
    3ca6:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3ca8:	e0 91 1d 27 	lds	r30, 0x271D
    3cac:	f0 91 1e 27 	lds	r31, 0x271E
    3cb0:	ef 5b       	subi	r30, 0xBF	; 191
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	10 82       	st	Z, r1
    3cb6:	08 95       	ret

00003cb8 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    3cb8:	80 91 1d 27 	lds	r24, 0x271D
    3cbc:	90 91 1e 27 	lds	r25, 0x271E
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	ef 5b       	subi	r30, 0xBF	; 191
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	20 81       	ld	r18, Z
    3cc8:	31 e0       	ldi	r19, 0x01	; 1
    3cca:	32 0f       	add	r19, r18
    3ccc:	30 83       	st	Z, r19
    3cce:	fc 01       	movw	r30, r24
    3cd0:	e2 0f       	add	r30, r18
    3cd2:	f1 1d       	adc	r31, r1
    3cd4:	80 81       	ld	r24, Z
}
    3cd6:	08 95       	ret

00003cd8 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    3cd8:	20 91 1d 27 	lds	r18, 0x271D
    3cdc:	30 91 1e 27 	lds	r19, 0x271E
    3ce0:	f9 01       	movw	r30, r18
    3ce2:	ef 5b       	subi	r30, 0xBF	; 191
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	90 81       	ld	r25, Z
    3ce8:	41 e0       	ldi	r20, 0x01	; 1
    3cea:	49 0f       	add	r20, r25
    3cec:	40 83       	st	Z, r20
    3cee:	f9 01       	movw	r30, r18
    3cf0:	e9 0f       	add	r30, r25
    3cf2:	f1 1d       	adc	r31, r1
    3cf4:	80 83       	st	Z, r24
    3cf6:	08 95       	ret

00003cf8 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    3cf8:	80 93 21 27 	sts	0x2721, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    3cfc:	28 2f       	mov	r18, r24
    3cfe:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    3d00:	62 2f       	mov	r22, r18
    3d02:	70 e0       	ldi	r23, 0x00	; 0
    3d04:	94 e8       	ldi	r25, 0x84	; 132
    3d06:	29 9f       	mul	r18, r25
    3d08:	90 01       	movw	r18, r0
    3d0a:	11 24       	eor	r1, r1
    3d0c:	2e 5d       	subi	r18, 0xDE	; 222
    3d0e:	38 4d       	sbci	r19, 0xD8	; 216
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    3d10:	40 91 c6 04 	lds	r20, 0x04C6
    3d14:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    3d18:	87 fd       	sbrc	r24, 7
    3d1a:	12 c0       	rjmp	.+36     	; 0x3d40 <Endpoint_SelectEndpoint+0x48>
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    3d1c:	20 93 1d 27 	sts	0x271D, r18
    3d20:	30 93 1e 27 	sts	0x271E, r19
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    3d24:	cb 01       	movw	r24, r22
    3d26:	82 95       	swap	r24
    3d28:	92 95       	swap	r25
    3d2a:	90 7f       	andi	r25, 0xF0	; 240
    3d2c:	98 27       	eor	r25, r24
    3d2e:	80 7f       	andi	r24, 0xF0	; 240
    3d30:	98 27       	eor	r25, r24
    3d32:	84 0f       	add	r24, r20
    3d34:	95 1f       	adc	r25, r21
    3d36:	80 93 1f 27 	sts	0x271F, r24
    3d3a:	90 93 20 27 	sts	0x2720, r25
    3d3e:	08 95       	ret
	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;

	if (Address & ENDPOINT_DIR_IN)
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    3d40:	2e 5b       	subi	r18, 0xBE	; 190
    3d42:	3f 4f       	sbci	r19, 0xFF	; 255
    3d44:	20 93 1d 27 	sts	0x271D, r18
    3d48:	30 93 1e 27 	sts	0x271E, r19
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    3d4c:	62 95       	swap	r22
    3d4e:	72 95       	swap	r23
    3d50:	70 7f       	andi	r23, 0xF0	; 240
    3d52:	76 27       	eor	r23, r22
    3d54:	60 7f       	andi	r22, 0xF0	; 240
    3d56:	76 27       	eor	r23, r22
    3d58:	68 5f       	subi	r22, 0xF8	; 248
    3d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5c:	64 0f       	add	r22, r20
    3d5e:	75 1f       	adc	r23, r21
    3d60:	60 93 1f 27 	sts	0x271F, r22
    3d64:	70 93 20 27 	sts	0x2720, r23
    3d68:	08 95       	ret

00003d6a <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    3d6a:	80 91 21 27 	lds	r24, 0x2721
    3d6e:	80 68       	ori	r24, 0x80	; 128
    3d70:	c3 df       	rcall	.-122    	; 0x3cf8 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    3d72:	e0 91 1f 27 	lds	r30, 0x271F
    3d76:	f0 91 20 27 	lds	r31, 0x2720
    3d7a:	80 81       	ld	r24, Z
}
    3d7c:	86 95       	lsr	r24
    3d7e:	81 70       	andi	r24, 0x01	; 1
    3d80:	08 95       	ret

00003d82 <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    3d82:	80 91 21 27 	lds	r24, 0x2721
    3d86:	8f 77       	andi	r24, 0x7F	; 127
    3d88:	b7 df       	rcall	.-146    	; 0x3cf8 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    3d8a:	e0 91 1f 27 	lds	r30, 0x271F
    3d8e:	f0 91 20 27 	lds	r31, 0x2720
    3d92:	80 81       	ld	r24, Z
    3d94:	85 ff       	sbrs	r24, 5
    3d96:	0c c0       	rjmp	.+24     	; 0x3db0 <Endpoint_IsOUTReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    3d98:	20 91 1d 27 	lds	r18, 0x271D
    3d9c:	30 91 1e 27 	lds	r19, 0x271E
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	f9 01       	movw	r30, r18
    3da6:	e0 5c       	subi	r30, 0xC0	; 192
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	80 83       	st	Z, r24
		return true;
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	08 95       	ret
	}

	return false;
    3db0:	80 e0       	ldi	r24, 0x00	; 0
}
    3db2:	08 95       	ret

00003db4 <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    3db4:	80 91 21 27 	lds	r24, 0x2721
    3db8:	8f 77       	andi	r24, 0x7F	; 127
    3dba:	9e df       	rcall	.-196    	; 0x3cf8 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    3dbc:	e0 91 1f 27 	lds	r30, 0x271F
    3dc0:	f0 91 20 27 	lds	r31, 0x2720
    3dc4:	80 81       	ld	r24, Z
    3dc6:	84 ff       	sbrs	r24, 4
    3dc8:	0c c0       	rjmp	.+24     	; 0x3de2 <Endpoint_IsSETUPReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    3dca:	20 91 1d 27 	lds	r18, 0x271D
    3dce:	30 91 1e 27 	lds	r19, 0x271E
    3dd2:	82 81       	ldd	r24, Z+2	; 0x02
    3dd4:	93 81       	ldd	r25, Z+3	; 0x03
    3dd6:	f9 01       	movw	r30, r18
    3dd8:	e0 5c       	subi	r30, 0xC0	; 192
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	80 83       	st	Z, r24
		return true;
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	08 95       	ret
	}

	return false;
    3de2:	80 e0       	ldi	r24, 0x00	; 0
}
    3de4:	08 95       	ret

00003de6 <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    3de6:	80 91 21 27 	lds	r24, 0x2721
    3dea:	8f 77       	andi	r24, 0x7F	; 127
    3dec:	85 df       	rcall	.-246    	; 0x3cf8 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    3dee:	e0 91 1f 27 	lds	r30, 0x271F
    3df2:	f0 91 20 27 	lds	r31, 0x2720
    3df6:	80 81       	ld	r24, Z
    3df8:	8d 78       	andi	r24, 0x8D	; 141
    3dfa:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    3dfc:	e0 91 1f 27 	lds	r30, 0x271F
    3e00:	f0 91 20 27 	lds	r31, 0x2720
    3e04:	80 81       	ld	r24, Z
    3e06:	81 60       	ori	r24, 0x01	; 1
    3e08:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3e0a:	e0 91 1d 27 	lds	r30, 0x271D
    3e0e:	f0 91 1e 27 	lds	r31, 0x271E
    3e12:	ef 5b       	subi	r30, 0xBF	; 191
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    3e18:	80 91 21 27 	lds	r24, 0x2721
    3e1c:	80 68       	ori	r24, 0x80	; 128
    3e1e:	6c df       	rcall	.-296    	; 0x3cf8 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    3e20:	e0 91 1f 27 	lds	r30, 0x271F
    3e24:	f0 91 20 27 	lds	r31, 0x2720
    3e28:	80 81       	ld	r24, Z
    3e2a:	81 60       	ori	r24, 0x01	; 1
    3e2c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3e2e:	e0 91 1d 27 	lds	r30, 0x271D
    3e32:	f0 91 1e 27 	lds	r31, 0x271E
    3e36:	ef 5b       	subi	r30, 0xBF	; 191
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	10 82       	st	Z, r1
    3e3c:	08 95       	ret

00003e3e <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    3e3e:	e0 91 1f 27 	lds	r30, 0x271F
    3e42:	f0 91 20 27 	lds	r31, 0x2720
    3e46:	81 81       	ldd	r24, Z+1	; 0x01
    3e48:	84 60       	ori	r24, 0x04	; 4
    3e4a:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    3e4c:	e0 91 1f 27 	lds	r30, 0x271F
    3e50:	f0 91 20 27 	lds	r31, 0x2720
    3e54:	81 81       	ldd	r24, Z+1	; 0x01
    3e56:	80 7c       	andi	r24, 0xC0	; 192
    3e58:	80 34       	cpi	r24, 0x40	; 64
    3e5a:	09 f0       	breq	.+2      	; 0x3e5e <Endpoint_StallTransaction+0x20>
    3e5c:	08 95       	ret
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    3e5e:	80 91 21 27 	lds	r24, 0x2721
    3e62:	80 58       	subi	r24, 0x80	; 128
    3e64:	49 df       	rcall	.-366    	; 0x3cf8 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    3e66:	e0 91 1f 27 	lds	r30, 0x271F
    3e6a:	f0 91 20 27 	lds	r31, 0x2720
    3e6e:	81 81       	ldd	r24, Z+1	; 0x01
    3e70:	84 60       	ori	r24, 0x04	; 4
    3e72:	81 83       	std	Z+1, r24	; 0x01
    3e74:	08 95       	ret

00003e76 <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    3e76:	1f 93       	push	r17
    3e78:	cf 93       	push	r28
    3e7a:	df 93       	push	r29
    3e7c:	00 d0       	rcall	.+0      	; 0x3e7e <Endpoint_ConfigureEndpoint_PRV+0x8>
    3e7e:	cd b7       	in	r28, 0x3d	; 61
    3e80:	de b7       	in	r29, 0x3e	; 62
    3e82:	18 2f       	mov	r17, r24
	Endpoint_SelectEndpoint(Address);
    3e84:	4a 83       	std	Y+2, r20	; 0x02
    3e86:	69 83       	std	Y+1, r22	; 0x01
    3e88:	37 df       	rcall	.-402    	; 0x3cf8 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    3e8a:	e0 91 1f 27 	lds	r30, 0x271F
    3e8e:	f0 91 20 27 	lds	r31, 0x2720
    3e92:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    3e94:	e0 91 1f 27 	lds	r30, 0x271F
    3e98:	f0 91 20 27 	lds	r31, 0x2720
    3e9c:	4a 81       	ldd	r20, Y+2	; 0x02
    3e9e:	69 81       	ldd	r22, Y+1	; 0x01
    3ea0:	17 fd       	sbrc	r17, 7
    3ea2:	20 c0       	rjmp	.+64     	; 0x3ee4 <Endpoint_ConfigureEndpoint_PRV+0x6e>
    3ea4:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    3ea6:	e0 91 1f 27 	lds	r30, 0x271F
    3eaa:	f0 91 20 27 	lds	r31, 0x2720
    3eae:	61 83       	std	Z+1, r22	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    3eb0:	e0 91 1f 27 	lds	r30, 0x271F
    3eb4:	f0 91 20 27 	lds	r31, 0x2720
    3eb8:	12 82       	std	Z+2, r1	; 0x02
    3eba:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    3ebc:	80 91 1d 27 	lds	r24, 0x271D
    3ec0:	90 91 1e 27 	lds	r25, 0x271E
    3ec4:	84 83       	std	Z+4, r24	; 0x04
    3ec6:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	fc 01       	movw	r30, r24
    3ecc:	e0 5c       	subi	r30, 0xC0	; 192
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3ed2:	31 96       	adiw	r30, 0x01	; 1
    3ed4:	10 82       	st	Z, r1

	return true;
}
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	df 91       	pop	r29
    3ede:	cf 91       	pop	r28
    3ee0:	1f 91       	pop	r17
    3ee2:	08 95       	ret
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    3ee4:	82 e0       	ldi	r24, 0x02	; 2
    3ee6:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    3ee8:	e0 91 1f 27 	lds	r30, 0x271F
    3eec:	f0 91 20 27 	lds	r31, 0x2720
    3ef0:	61 83       	std	Z+1, r22	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    3ef2:	e0 91 1f 27 	lds	r30, 0x271F
    3ef6:	f0 91 20 27 	lds	r31, 0x2720
    3efa:	12 82       	std	Z+2, r1	; 0x02
    3efc:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    3efe:	80 91 1d 27 	lds	r24, 0x271D
    3f02:	90 91 1e 27 	lds	r25, 0x271E
    3f06:	84 83       	std	Z+4, r24	; 0x04
    3f08:	95 83       	std	Z+5, r25	; 0x05
    3f0a:	df cf       	rjmp	.-66     	; 0x3eca <Endpoint_ConfigureEndpoint_PRV+0x54>

00003f0c <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    3f0c:	cf 92       	push	r12
    3f0e:	df 92       	push	r13
    3f10:	ef 92       	push	r14
    3f12:	ff 92       	push	r15
    3f14:	0f 93       	push	r16
    3f16:	1f 93       	push	r17
    3f18:	cf 93       	push	r28
    3f1a:	df 93       	push	r29
    3f1c:	1f 92       	push	r1
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    3f22:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < Entries; i++)
    3f24:	66 23       	and	r22, r22
    3f26:	09 f4       	brne	.+2      	; 0x3f2a <Endpoint_ConfigureEndpointTable+0x1e>
    3f28:	3e c0       	rjmp	.+124    	; 0x3fa6 <Endpoint_ConfigureEndpointTable+0x9a>
    3f2a:	6c 01       	movw	r12, r24
    3f2c:	00 e0       	ldi	r16, 0x00	; 0
	{
		if (!(Table[i].Address))
    3f2e:	d6 01       	movw	r26, r12
    3f30:	1c 91       	ld	r17, X
    3f32:	11 23       	and	r17, r17
    3f34:	91 f1       	breq	.+100    	; 0x3f9a <Endpoint_ConfigureEndpointTable+0x8e>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    3f36:	d6 01       	movw	r26, r12
    3f38:	11 96       	adiw	r26, 0x01	; 1
    3f3a:	ed 91       	ld	r30, X+
    3f3c:	fc 91       	ld	r31, X
    3f3e:	12 97       	sbiw	r26, 0x02	; 2
    3f40:	13 96       	adiw	r26, 0x03	; 3
    3f42:	8c 91       	ld	r24, X
    3f44:	13 97       	sbiw	r26, 0x03	; 3
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    3f46:	14 96       	adiw	r26, 0x04	; 4
    3f48:	9c 91       	ld	r25, X
    3f4a:	92 30       	cpi	r25, 0x02	; 2
    3f4c:	08 f4       	brcc	.+2      	; 0x3f50 <Endpoint_ConfigureEndpointTable+0x44>
    3f4e:	45 c0       	rjmp	.+138    	; 0x3fda <Endpoint_ConfigureEndpointTable+0xce>
    3f50:	98 e1       	ldi	r25, 0x18	; 24
    3f52:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3f54:	e9 30       	cpi	r30, 0x09	; 9
    3f56:	f1 05       	cpc	r31, r1
    3f58:	50 f0       	brcs	.+20     	; 0x3f6e <Endpoint_ConfigureEndpointTable+0x62>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    3f5a:	28 e0       	ldi	r18, 0x08	; 8
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    3f60:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    3f62:	22 0f       	add	r18, r18
    3f64:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3f66:	2e 17       	cp	r18, r30
    3f68:	3f 07       	cpc	r19, r31
    3f6a:	d0 f3       	brcs	.-12     	; 0x3f60 <Endpoint_ConfigureEndpointTable+0x54>
    3f6c:	94 2b       	or	r25, r20
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    3f6e:	21 2f       	mov	r18, r17
    3f70:	2f 70       	andi	r18, 0x0F	; 15
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	26 30       	cpi	r18, 0x06	; 6
    3f76:	31 05       	cpc	r19, r1
    3f78:	9c f5       	brge	.+102    	; 0x3fe0 <Endpoint_ConfigureEndpointTable+0xd4>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    3f7a:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    3f7c:	e1 34       	cpi	r30, 0x41	; 65
    3f7e:	f1 05       	cpc	r31, r1
    3f80:	78 f5       	brcc	.+94     	; 0x3fe0 <Endpoint_ConfigureEndpointTable+0xd4>
				  return false;

				switch (Type)
    3f82:	88 23       	and	r24, r24
    3f84:	01 f1       	breq	.+64     	; 0x3fc6 <Endpoint_ConfigureEndpointTable+0xba>
    3f86:	81 30       	cpi	r24, 0x01	; 1
    3f88:	c9 f4       	brne	.+50     	; 0x3fbc <Endpoint_ConfigureEndpointTable+0xb0>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    3f8a:	90 6c       	ori	r25, 0xC0	; 192
    3f8c:	ee 2e       	mov	r14, r30
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    3f8e:	4e 2d       	mov	r20, r14
    3f90:	69 2f       	mov	r22, r25
    3f92:	81 2f       	mov	r24, r17
    3f94:	70 df       	rcall	.-288    	; 0x3e76 <Endpoint_ConfigureEndpoint_PRV>
    3f96:	88 23       	and	r24, r24
    3f98:	19 f1       	breq	.+70     	; 0x3fe0 <Endpoint_ConfigureEndpointTable+0xd4>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    3f9a:	0f 5f       	subi	r16, 0xFF	; 255
    3f9c:	b5 e0       	ldi	r27, 0x05	; 5
    3f9e:	cb 0e       	add	r12, r27
    3fa0:	d1 1c       	adc	r13, r1
    3fa2:	0f 11       	cpse	r16, r15
    3fa4:	c4 cf       	rjmp	.-120    	; 0x3f2e <Endpoint_ConfigureEndpointTable+0x22>
		{
			return false;
		}
	}

	return true;
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
}
    3fa8:	0f 90       	pop	r0
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	ff 90       	pop	r15
    3fb4:	ef 90       	pop	r14
    3fb6:	df 90       	pop	r13
    3fb8:	cf 90       	pop	r12
    3fba:	08 95       	ret
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    3fbc:	90 68       	ori	r25, 0x80	; 128
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    3fbe:	88 23       	and	r24, r24
    3fc0:	19 f0       	breq	.+6      	; 0x3fc8 <Endpoint_ConfigureEndpointTable+0xbc>
    3fc2:	ee 2e       	mov	r14, r30
    3fc4:	e4 cf       	rjmp	.-56     	; 0x3f8e <Endpoint_ConfigureEndpointTable+0x82>
				  return false;

				switch (Type)
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    3fc6:	90 64       	ori	r25, 0x40	; 64
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    3fc8:	ee 2e       	mov	r14, r30
    3fca:	4e 2f       	mov	r20, r30
    3fcc:	69 2f       	mov	r22, r25
    3fce:	80 e8       	ldi	r24, 0x80	; 128
    3fd0:	81 0f       	add	r24, r17
    3fd2:	99 83       	std	Y+1, r25	; 0x01
    3fd4:	50 df       	rcall	.-352    	; 0x3e76 <Endpoint_ConfigureEndpoint_PRV>
    3fd6:	99 81       	ldd	r25, Y+1	; 0x01
    3fd8:	da cf       	rjmp	.-76     	; 0x3f8e <Endpoint_ConfigureEndpointTable+0x82>
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    3fda:	98 e0       	ldi	r25, 0x08	; 8
    3fdc:	48 e0       	ldi	r20, 0x08	; 8
    3fde:	ba cf       	rjmp	.-140    	; 0x3f54 <Endpoint_ConfigureEndpointTable+0x48>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	e2 cf       	rjmp	.-60     	; 0x3fa8 <Endpoint_ConfigureEndpointTable+0x9c>

00003fe4 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    3fe4:	e0 ec       	ldi	r30, 0xC0	; 192
    3fe6:	f4 e0       	ldi	r31, 0x04	; 4
    3fe8:	a6 81       	ldd	r26, Z+6	; 0x06
    3fea:	b7 81       	ldd	r27, Z+7	; 0x07
    3fec:	19 96       	adiw	r26, 0x09	; 9
    3fee:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    3ff0:	a6 81       	ldd	r26, Z+6	; 0x06
    3ff2:	b7 81       	ldd	r27, Z+7	; 0x07
    3ff4:	11 96       	adiw	r26, 0x01	; 1
    3ff6:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    3ff8:	a6 81       	ldd	r26, Z+6	; 0x06
    3ffa:	b7 81       	ldd	r27, Z+7	; 0x07
    3ffc:	59 96       	adiw	r26, 0x19	; 25
    3ffe:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    4000:	a6 81       	ldd	r26, Z+6	; 0x06
    4002:	b7 81       	ldd	r27, Z+7	; 0x07
    4004:	51 96       	adiw	r26, 0x11	; 17
    4006:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    4008:	a6 81       	ldd	r26, Z+6	; 0x06
    400a:	b7 81       	ldd	r27, Z+7	; 0x07
    400c:	99 96       	adiw	r26, 0x29	; 41
    400e:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    4010:	a6 81       	ldd	r26, Z+6	; 0x06
    4012:	b7 81       	ldd	r27, Z+7	; 0x07
    4014:	91 96       	adiw	r26, 0x21	; 33
    4016:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    4018:	a6 81       	ldd	r26, Z+6	; 0x06
    401a:	b7 81       	ldd	r27, Z+7	; 0x07
    401c:	d9 96       	adiw	r26, 0x39	; 57
    401e:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    4020:	a6 81       	ldd	r26, Z+6	; 0x06
    4022:	b7 81       	ldd	r27, Z+7	; 0x07
    4024:	d1 96       	adiw	r26, 0x31	; 49
    4026:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    4028:	a6 81       	ldd	r26, Z+6	; 0x06
    402a:	b7 81       	ldd	r27, Z+7	; 0x07
    402c:	a7 5b       	subi	r26, 0xB7	; 183
    402e:	bf 4f       	sbci	r27, 0xFF	; 255
    4030:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    4032:	a6 81       	ldd	r26, Z+6	; 0x06
    4034:	b7 81       	ldd	r27, Z+7	; 0x07
    4036:	af 5b       	subi	r26, 0xBF	; 191
    4038:	bf 4f       	sbci	r27, 0xFF	; 255
    403a:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    403c:	a6 81       	ldd	r26, Z+6	; 0x06
    403e:	b7 81       	ldd	r27, Z+7	; 0x07
    4040:	a7 5a       	subi	r26, 0xA7	; 167
    4042:	bf 4f       	sbci	r27, 0xFF	; 255
    4044:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    4046:	06 80       	ldd	r0, Z+6	; 0x06
    4048:	f7 81       	ldd	r31, Z+7	; 0x07
    404a:	e0 2d       	mov	r30, r0
    404c:	ef 5a       	subi	r30, 0xAF	; 175
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	10 82       	st	Z, r1
    4052:	08 95       	ret

00004054 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    4054:	80 91 15 27 	lds	r24, 0x2715
    4058:	87 ff       	sbrs	r24, 7
    405a:	05 c0       	rjmp	.+10     	; 0x4066 <Endpoint_ClearStatusStage+0x12>
    405c:	0c c0       	rjmp	.+24     	; 0x4076 <Endpoint_ClearStatusStage+0x22>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    405e:	80 91 14 27 	lds	r24, 0x2714
    4062:	88 23       	and	r24, r24
    4064:	61 f0       	breq	.+24     	; 0x407e <Endpoint_ClearStatusStage+0x2a>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    4066:	81 de       	rcall	.-766    	; 0x3d6a <Endpoint_IsINReady>
    4068:	88 23       	and	r24, r24
    406a:	c9 f3       	breq	.-14     	; 0x405e <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    406c:	fd cd       	rjmp	.-1030   	; 0x3c68 <Endpoint_ClearIN>
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    406e:	80 91 14 27 	lds	r24, 0x2714
    4072:	88 23       	and	r24, r24
    4074:	21 f0       	breq	.+8      	; 0x407e <Endpoint_ClearStatusStage+0x2a>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    4076:	85 de       	rcall	.-758    	; 0x3d82 <Endpoint_IsOUTReceived>
    4078:	88 23       	and	r24, r24
    407a:	c9 f3       	breq	.-14     	; 0x406e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    407c:	0e ce       	rjmp	.-996    	; 0x3c9a <Endpoint_ClearOUT>
    407e:	08 95       	ret

00004080 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    4080:	1f 93       	push	r17
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    4086:	e0 91 c6 04 	lds	r30, 0x04C6
    408a:	f0 91 c7 04 	lds	r31, 0x04C7
    408e:	e0 5a       	subi	r30, 0xA0	; 160
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	c0 81       	ld	r28, Z
    4094:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    4096:	14 e6       	ldi	r17, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    4098:	80 91 21 27 	lds	r24, 0x2721
    409c:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    409e:	80 38       	cpi	r24, 0x80	; 128
    40a0:	31 f1       	breq	.+76     	; 0x40ee <Endpoint_WaitUntilReady+0x6e>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    40a2:	6f de       	rcall	.-802    	; 0x3d82 <Endpoint_IsOUTReceived>
    40a4:	81 11       	cpse	r24, r1
    40a6:	26 c0       	rjmp	.+76     	; 0x40f4 <Endpoint_WaitUntilReady+0x74>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    40a8:	80 91 14 27 	lds	r24, 0x2714

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    40ac:	88 23       	and	r24, r24
    40ae:	39 f1       	breq	.+78     	; 0x40fe <Endpoint_WaitUntilReady+0x7e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    40b0:	85 30       	cpi	r24, 0x05	; 5
    40b2:	51 f1       	breq	.+84     	; 0x4108 <Endpoint_WaitUntilReady+0x88>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    40b4:	e0 91 1f 27 	lds	r30, 0x271F
    40b8:	f0 91 20 27 	lds	r31, 0x2720
    40bc:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    40be:	82 fd       	sbrc	r24, 2
    40c0:	28 c0       	rjmp	.+80     	; 0x4112 <Endpoint_WaitUntilReady+0x92>
    40c2:	e0 91 c6 04 	lds	r30, 0x04C6
    40c6:	f0 91 c7 04 	lds	r31, 0x04C7
    40ca:	e0 5a       	subi	r30, 0xA0	; 160
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	80 81       	ld	r24, Z
    40d0:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    40d2:	c8 17       	cp	r28, r24
    40d4:	d9 07       	cpc	r29, r25
    40d6:	01 f3       	breq	.-64     	; 0x4098 <Endpoint_WaitUntilReady+0x18>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    40d8:	2f ef       	ldi	r18, 0xFF	; 255
    40da:	21 0f       	add	r18, r17
    40dc:	11 23       	and	r17, r17
    40de:	f1 f0       	breq	.+60     	; 0x411c <Endpoint_WaitUntilReady+0x9c>
    40e0:	ec 01       	movw	r28, r24
    40e2:	12 2f       	mov	r17, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    40e4:	80 91 21 27 	lds	r24, 0x2721
    40e8:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    40ea:	80 38       	cpi	r24, 0x80	; 128
    40ec:	d1 f6       	brne	.-76     	; 0x40a2 <Endpoint_WaitUntilReady+0x22>
		{
			if (Endpoint_IsINReady())
    40ee:	3d de       	rcall	.-902    	; 0x3d6a <Endpoint_IsINReady>
    40f0:	88 23       	and	r24, r24
    40f2:	d1 f2       	breq	.-76     	; 0x40a8 <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_NoError;
    40f4:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    40f6:	df 91       	pop	r29
    40f8:	cf 91       	pop	r28
    40fa:	1f 91       	pop	r17
    40fc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    40fe:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    4108:	83 e0       	ldi	r24, 0x03	; 3

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    410a:	df 91       	pop	r29
    410c:	cf 91       	pop	r28
    410e:	1f 91       	pop	r17
    4110:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    4112:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	1f 91       	pop	r17
    411a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    411c:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
    411e:	df 91       	pop	r29
    4120:	cf 91       	pop	r28
    4122:	1f 91       	pop	r17
    4124:	08 95       	ret

00004126 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    4126:	62 d0       	rcall	.+196    	; 0x41ec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    4128:	68 d0       	rcall	.+208    	; 0x41fa <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    412a:	e0 ec       	ldi	r30, 0xC0	; 192
    412c:	f4 e0       	ldi	r31, 0x04	; 4
    412e:	81 81       	ldd	r24, Z+1	; 0x01
    4130:	8e 7f       	andi	r24, 0xFE	; 254
    4132:	81 83       	std	Z+1, r24	; 0x01
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    4134:	80 81       	ld	r24, Z
    4136:	8f 77       	andi	r24, 0x7F	; 127
    4138:	80 83       	st	Z, r24

	USB_Detach();
	USB_Controller_Disable();

	USB_IsInitialized = false;
    413a:	10 92 13 27 	sts	0x2713, r1
    413e:	08 95       	ret

00004140 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    4140:	cf 93       	push	r28
    4142:	df 93       	push	r29
	#if defined(USB_DEVICE_OPT_FULLSPEED)
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	else
	  CLK.USBCTRL = (((F_USB / 48000000) - 1) << CLK_USBPSDIV_gp);
    4144:	e0 e4       	ldi	r30, 0x40	; 64
    4146:	f0 e0       	ldi	r31, 0x00	; 0
    4148:	14 82       	std	Z+4, r1	; 0x04
	#else
	CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	#endif

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
    414a:	84 81       	ldd	r24, Z+4	; 0x04
    414c:	81 60       	ori	r24, 0x01	; 1
    414e:	84 83       	std	Z+4, r24	; 0x04
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    4150:	4d d0       	rcall	.+154    	; 0x41ec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    4152:	53 d0       	rcall	.+166    	; 0x41fa <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    4154:	c0 ec       	ldi	r28, 0xC0	; 192
    4156:	d4 e0       	ldi	r29, 0x04	; 4
    4158:	88 81       	ld	r24, Y
    415a:	8f 77       	andi	r24, 0x7F	; 127
    415c:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    415e:	88 81       	ld	r24, Y
    4160:	80 68       	ori	r24, 0x80	; 128
    4162:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    4164:	10 92 14 27 	sts	0x2714, r1
	USB_Device_ConfigurationNumber  = 0;
    4168:	10 92 10 27 	sts	0x2710, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    416c:	10 92 12 27 	sts	0x2712, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    4170:	10 92 11 27 	sts	0x2711, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    4174:	88 81       	ld	r24, Y
    4176:	80 64       	ori	r24, 0x40	; 64
    4178:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    417a:	48 e0       	ldi	r20, 0x08	; 8
    417c:	68 e4       	ldi	r22, 0x48	; 72
    417e:	80 e8       	ldi	r24, 0x80	; 128
    4180:	7a de       	rcall	.-780    	; 0x3e76 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    4182:	48 e0       	ldi	r20, 0x08	; 8
    4184:	68 e4       	ldi	r22, 0x48	; 72
    4186:	80 e0       	ldi	r24, 0x00	; 0
    4188:	76 de       	rcall	.-788    	; 0x3e76 <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    418a:	88 85       	ldd	r24, Y+8	; 0x08
    418c:	80 64       	ori	r24, 0x40	; 64
    418e:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	81 60       	ori	r24, 0x01	; 1
    4194:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	08 95       	ret

0000419c <USB_Init>:
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    419c:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    419e:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    41a0:	82 e0       	ldi	r24, 0x02	; 2
    41a2:	e0 ec       	ldi	r30, 0xC0	; 192
    41a4:	f1 e0       	ldi	r31, 0x01	; 1
    41a6:	82 87       	std	Z+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    41a8:	ea e1       	ldi	r30, 0x1A	; 26
    41aa:	f0 e0       	ldi	r31, 0x00	; 0
    41ac:	e4 91       	lpm	r30, Z
    41ae:	a0 ec       	ldi	r26, 0xC0	; 192
    41b0:	b4 e0       	ldi	r27, 0x04	; 4
    41b2:	da 96       	adiw	r26, 0x3a	; 58
    41b4:	ec 93       	st	X, r30
    41b6:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    41b8:	eb e1       	ldi	r30, 0x1B	; 27
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	e4 91       	lpm	r30, Z
    41be:	db 96       	adiw	r26, 0x3b	; 59
    41c0:	ec 93       	st	X, r30
    41c2:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    41c4:	e0 ec       	ldi	r30, 0xC0	; 192
    41c6:	f1 e0       	ldi	r31, 0x01	; 1
    41c8:	12 86       	std	Z+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    41ca:	8b e3       	ldi	r24, 0x3B	; 59
    41cc:	9a e2       	ldi	r25, 0x2A	; 42
    41ce:	8e 7f       	andi	r24, 0xFE	; 254
    41d0:	16 96       	adiw	r26, 0x06	; 6
    41d2:	8d 93       	st	X+, r24
    41d4:	9c 93       	st	X, r25
    41d6:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    41d8:	85 e1       	ldi	r24, 0x15	; 21
    41da:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
	else if ((USB_Options & USB_OPT_BUSEVENT_PRIMED) == USB_OPT_BUSEVENT_PRIMED)
	  USB.INTCTRLA = (2 << USB_INTLVL_gp);
    41dc:	82 e0       	ldi	r24, 0x02	; 2
    41de:	18 96       	adiw	r26, 0x08	; 8
    41e0:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    41e2:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	80 93 13 27 	sts	0x2713, r24

	USB_ResetInterface();
    41ea:	aa cf       	rjmp	.-172    	; 0x4140 <USB_ResetInterface>

000041ec <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    41ec:	e0 ec       	ldi	r30, 0xC0	; 192
    41ee:	f4 e0       	ldi	r31, 0x04	; 4
    41f0:	80 85       	ldd	r24, Z+8	; 0x08
    41f2:	83 70       	andi	r24, 0x03	; 3
    41f4:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    41f6:	11 86       	std	Z+9, r1	; 0x09
    41f8:	08 95       	ret

000041fa <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    41fa:	e0 ec       	ldi	r30, 0xC0	; 192
    41fc:	f4 e0       	ldi	r31, 0x04	; 4
    41fe:	8f ef       	ldi	r24, 0xFF	; 255
    4200:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    4202:	84 87       	std	Z+12, r24	; 0x0c
    4204:	08 95       	ret

00004206 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    4206:	1f 92       	push	r1
    4208:	0f 92       	push	r0
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	0f 92       	push	r0
    420e:	11 24       	eor	r1, r1
    4210:	2f 93       	push	r18
    4212:	3f 93       	push	r19
    4214:	4f 93       	push	r20
    4216:	5f 93       	push	r21
    4218:	6f 93       	push	r22
    421a:	7f 93       	push	r23
    421c:	8f 93       	push	r24
    421e:	9f 93       	push	r25
    4220:	af 93       	push	r26
    4222:	bf 93       	push	r27
    4224:	ef 93       	push	r30
    4226:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    4228:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    422c:	87 fd       	sbrc	r24, 7
    422e:	4d c0       	rjmp	.+154    	; 0x42ca <__vector_125+0xc4>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    4230:	80 91 ca 04 	lds	r24, 0x04CA

		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    4234:	86 fd       	sbrc	r24, 6
    4236:	41 c0       	rjmp	.+130    	; 0x42ba <__vector_125+0xb4>
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    4238:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    423c:	85 ff       	sbrs	r24, 5
    423e:	0c c0       	rjmp	.+24     	; 0x4258 <__vector_125+0x52>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    4240:	80 e2       	ldi	r24, 0x20	; 32
    4242:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    4246:	80 91 10 27 	lds	r24, 0x2710
    424a:	88 23       	and	r24, r24
    424c:	71 f1       	breq	.+92     	; 0x42aa <__vector_125+0xa4>
		  USB_DeviceState = DEVICE_STATE_Configured;
    424e:	84 e0       	ldi	r24, 0x04	; 4
    4250:	80 93 14 27 	sts	0x2714, r24
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    4254:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    4258:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    425c:	84 ff       	sbrs	r24, 4
    425e:	14 c0       	rjmp	.+40     	; 0x4288 <__vector_125+0x82>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    4260:	80 e1       	ldi	r24, 0x10	; 16
    4262:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    4266:	82 e0       	ldi	r24, 0x02	; 2
    4268:	80 93 14 27 	sts	0x2714, r24
		USB_Device_ConfigurationNumber = 0;
    426c:	10 92 10 27 	sts	0x2710, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    4270:	10 92 c3 04 	sts	0x04C3, r1

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    4274:	b7 de       	rcall	.-658    	; 0x3fe4 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    4276:	48 e0       	ldi	r20, 0x08	; 8
    4278:	68 e4       	ldi	r22, 0x48	; 72
    427a:	80 e8       	ldi	r24, 0x80	; 128
    427c:	fc dd       	rcall	.-1032   	; 0x3e76 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    427e:	48 e0       	ldi	r20, 0x08	; 8
    4280:	68 e4       	ldi	r22, 0x48	; 72
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	f8 dd       	rcall	.-1040   	; 0x3e76 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    4286:	35 db       	rcall	.-2454   	; 0x38f2 <USB_Event_Stub>
	}
}
    4288:	ff 91       	pop	r31
    428a:	ef 91       	pop	r30
    428c:	bf 91       	pop	r27
    428e:	af 91       	pop	r26
    4290:	9f 91       	pop	r25
    4292:	8f 91       	pop	r24
    4294:	7f 91       	pop	r23
    4296:	6f 91       	pop	r22
    4298:	5f 91       	pop	r21
    429a:	4f 91       	pop	r20
    429c:	3f 91       	pop	r19
    429e:	2f 91       	pop	r18
    42a0:	0f 90       	pop	r0
    42a2:	0f be       	out	0x3f, r0	; 63
    42a4:	0f 90       	pop	r0
    42a6:	1f 90       	pop	r1
    42a8:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    42aa:	80 91 c3 04 	lds	r24, 0x04C3
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    42ae:	81 11       	cpse	r24, r1
    42b0:	15 c0       	rjmp	.+42     	; 0x42dc <__vector_125+0xd6>
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	80 93 14 27 	sts	0x2714, r24
    42b8:	cd cf       	rjmp	.-102    	; 0x4254 <__vector_125+0x4e>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    42ba:	80 e4       	ldi	r24, 0x40	; 64
    42bc:	80 93 ca 04 	sts	0x04CA, r24
	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    42c0:	10 92 14 27 	sts	0x2714, r1
		EVENT_USB_Device_Disconnect();
    42c4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <EVENT_USB_Device_Disconnect>
    42c8:	b7 cf       	rjmp	.-146    	; 0x4238 <__vector_125+0x32>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    42ca:	80 91 c8 04 	lds	r24, 0x04C8
}

ISR(USB_BUSEVENT_vect)
{
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    42ce:	87 ff       	sbrs	r24, 7
    42d0:	af cf       	rjmp	.-162    	; 0x4230 <__vector_125+0x2a>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    42d2:	80 e8       	ldi	r24, 0x80	; 128
    42d4:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    42d8:	0c db       	rcall	.-2536   	; 0x38f2 <USB_Event_Stub>
    42da:	aa cf       	rjmp	.-172    	; 0x4230 <__vector_125+0x2a>
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    42dc:	83 e0       	ldi	r24, 0x03	; 3
    42de:	ea cf       	rjmp	.-44     	; 0x42b4 <__vector_125+0xae>

000042e0 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	ec 01       	movw	r28, r24
    42e6:	fc 01       	movw	r30, r24
    42e8:	70 96       	adiw	r30, 0x10	; 16
    42ea:	8b e0       	ldi	r24, 0x0B	; 11
    42ec:	df 01       	movw	r26, r30
    42ee:	1d 92       	st	X+, r1
    42f0:	8a 95       	dec	r24
    42f2:	e9 f7       	brne	.-6      	; 0x42ee <CDC_Device_ConfigureEndpoints+0xe>
    42f4:	82 e0       	ldi	r24, 0x02	; 2
    42f6:	8c 83       	std	Y+4, r24	; 0x04
    42f8:	89 87       	std	Y+9, r24	; 0x09
    42fa:	83 e0       	ldi	r24, 0x03	; 3
    42fc:	8e 87       	std	Y+14, r24	; 0x0e
    42fe:	61 e0       	ldi	r22, 0x01	; 1
    4300:	ce 01       	movw	r24, r28
    4302:	01 96       	adiw	r24, 0x01	; 1
    4304:	03 de       	rcall	.-1018   	; 0x3f0c <Endpoint_ConfigureEndpointTable>
    4306:	81 11       	cpse	r24, r1
    4308:	04 c0       	rjmp	.+8      	; 0x4312 <CDC_Device_ConfigureEndpoints+0x32>
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	df 91       	pop	r29
    430e:	cf 91       	pop	r28
    4310:	08 95       	ret
    4312:	61 e0       	ldi	r22, 0x01	; 1
    4314:	ce 01       	movw	r24, r28
    4316:	06 96       	adiw	r24, 0x06	; 6
    4318:	f9 dd       	rcall	.-1038   	; 0x3f0c <Endpoint_ConfigureEndpointTable>
    431a:	88 23       	and	r24, r24
    431c:	b1 f3       	breq	.-20     	; 0x430a <CDC_Device_ConfigureEndpoints+0x2a>
    431e:	61 e0       	ldi	r22, 0x01	; 1
    4320:	ce 01       	movw	r24, r28
    4322:	0b 96       	adiw	r24, 0x0b	; 11
    4324:	df 91       	pop	r29
    4326:	cf 91       	pop	r28
    4328:	f1 cd       	rjmp	.-1054   	; 0x3f0c <Endpoint_ConfigureEndpointTable>

0000432a <CDC_Device_SendString>:
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	eb 01       	movw	r28, r22
    4330:	20 91 14 27 	lds	r18, 0x2714
    4334:	24 30       	cpi	r18, 0x04	; 4
    4336:	21 f0       	breq	.+8      	; 0x4340 <CDC_Device_SendString+0x16>
    4338:	82 e0       	ldi	r24, 0x02	; 2
    433a:	df 91       	pop	r29
    433c:	cf 91       	pop	r28
    433e:	08 95       	ret
    4340:	fc 01       	movw	r30, r24
    4342:	44 89       	ldd	r20, Z+20	; 0x14
    4344:	55 89       	ldd	r21, Z+21	; 0x15
    4346:	66 89       	ldd	r22, Z+22	; 0x16
    4348:	77 89       	ldd	r23, Z+23	; 0x17
    434a:	45 2b       	or	r20, r21
    434c:	46 2b       	or	r20, r22
    434e:	47 2b       	or	r20, r23
    4350:	99 f3       	breq	.-26     	; 0x4338 <CDC_Device_SendString+0xe>
    4352:	81 81       	ldd	r24, Z+1	; 0x01
    4354:	d1 dc       	rcall	.-1630   	; 0x3cf8 <Endpoint_SelectEndpoint>
    4356:	fe 01       	movw	r30, r28
    4358:	01 90       	ld	r0, Z+
    435a:	00 20       	and	r0, r0
    435c:	e9 f7       	brne	.-6      	; 0x4358 <CDC_Device_SendString+0x2e>
    435e:	bf 01       	movw	r22, r30
    4360:	61 50       	subi	r22, 0x01	; 1
    4362:	71 09       	sbc	r23, r1
    4364:	6c 1b       	sub	r22, r28
    4366:	7d 0b       	sbc	r23, r29
    4368:	40 e0       	ldi	r20, 0x00	; 0
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	ce 01       	movw	r24, r28
    436e:	df 91       	pop	r29
    4370:	cf 91       	pop	r28
    4372:	d5 ca       	rjmp	.-2646   	; 0x391e <Endpoint_Write_Stream_LE>

00004374 <CDC_Device_SendData>:
    4374:	ef 92       	push	r14
    4376:	ff 92       	push	r15
    4378:	0f 93       	push	r16
    437a:	1f 93       	push	r17
    437c:	cf 93       	push	r28
    437e:	df 93       	push	r29
    4380:	eb 01       	movw	r28, r22
    4382:	7a 01       	movw	r14, r20
    4384:	20 91 14 27 	lds	r18, 0x2714
    4388:	24 30       	cpi	r18, 0x04	; 4
    438a:	41 f0       	breq	.+16     	; 0x439c <CDC_Device_SendData+0x28>
    438c:	82 e0       	ldi	r24, 0x02	; 2
    438e:	df 91       	pop	r29
    4390:	cf 91       	pop	r28
    4392:	1f 91       	pop	r17
    4394:	0f 91       	pop	r16
    4396:	ff 90       	pop	r15
    4398:	ef 90       	pop	r14
    439a:	08 95       	ret
    439c:	fc 01       	movw	r30, r24
    439e:	04 89       	ldd	r16, Z+20	; 0x14
    43a0:	15 89       	ldd	r17, Z+21	; 0x15
    43a2:	26 89       	ldd	r18, Z+22	; 0x16
    43a4:	37 89       	ldd	r19, Z+23	; 0x17
    43a6:	01 2b       	or	r16, r17
    43a8:	02 2b       	or	r16, r18
    43aa:	03 2b       	or	r16, r19
    43ac:	79 f3       	breq	.-34     	; 0x438c <CDC_Device_SendData+0x18>
    43ae:	81 81       	ldd	r24, Z+1	; 0x01
    43b0:	a3 dc       	rcall	.-1722   	; 0x3cf8 <Endpoint_SelectEndpoint>
    43b2:	40 e0       	ldi	r20, 0x00	; 0
    43b4:	50 e0       	ldi	r21, 0x00	; 0
    43b6:	b7 01       	movw	r22, r14
    43b8:	ce 01       	movw	r24, r28
    43ba:	df 91       	pop	r29
    43bc:	cf 91       	pop	r28
    43be:	1f 91       	pop	r17
    43c0:	0f 91       	pop	r16
    43c2:	ff 90       	pop	r15
    43c4:	ef 90       	pop	r14
    43c6:	ab ca       	rjmp	.-2730   	; 0x391e <Endpoint_Write_Stream_LE>

000043c8 <CDC_Device_SendByte>:
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	cf 93       	push	r28
    43ce:	df 93       	push	r29
    43d0:	1f 92       	push	r1
    43d2:	cd b7       	in	r28, 0x3d	; 61
    43d4:	de b7       	in	r29, 0x3e	; 62
    43d6:	20 91 14 27 	lds	r18, 0x2714
    43da:	24 30       	cpi	r18, 0x04	; 4
    43dc:	39 f0       	breq	.+14     	; 0x43ec <CDC_Device_SendByte+0x24>
    43de:	82 e0       	ldi	r24, 0x02	; 2
    43e0:	0f 90       	pop	r0
    43e2:	df 91       	pop	r29
    43e4:	cf 91       	pop	r28
    43e6:	1f 91       	pop	r17
    43e8:	0f 91       	pop	r16
    43ea:	08 95       	ret
    43ec:	fc 01       	movw	r30, r24
    43ee:	04 89       	ldd	r16, Z+20	; 0x14
    43f0:	15 89       	ldd	r17, Z+21	; 0x15
    43f2:	26 89       	ldd	r18, Z+22	; 0x16
    43f4:	37 89       	ldd	r19, Z+23	; 0x17
    43f6:	01 2b       	or	r16, r17
    43f8:	02 2b       	or	r16, r18
    43fa:	03 2b       	or	r16, r19
    43fc:	81 f3       	breq	.-32     	; 0x43de <CDC_Device_SendByte+0x16>
    43fe:	81 81       	ldd	r24, Z+1	; 0x01
    4400:	69 83       	std	Y+1, r22	; 0x01
    4402:	7a dc       	rcall	.-1804   	; 0x3cf8 <Endpoint_SelectEndpoint>
    4404:	20 91 1d 27 	lds	r18, 0x271D
    4408:	30 91 1e 27 	lds	r19, 0x271E
    440c:	f9 01       	movw	r30, r18
    440e:	ef 5b       	subi	r30, 0xBF	; 191
    4410:	ff 4f       	sbci	r31, 0xFF	; 255
    4412:	90 81       	ld	r25, Z
    4414:	31 97       	sbiw	r30, 0x01	; 1
    4416:	80 81       	ld	r24, Z
    4418:	69 81       	ldd	r22, Y+1	; 0x01
    441a:	98 17       	cp	r25, r24
    441c:	30 f0       	brcs	.+12     	; 0x442a <CDC_Device_SendByte+0x62>
    441e:	69 83       	std	Y+1, r22	; 0x01
    4420:	23 dc       	rcall	.-1978   	; 0x3c68 <Endpoint_ClearIN>
    4422:	2e de       	rcall	.-932    	; 0x4080 <Endpoint_WaitUntilReady>
    4424:	69 81       	ldd	r22, Y+1	; 0x01
    4426:	81 11       	cpse	r24, r1
    4428:	db cf       	rjmp	.-74     	; 0x43e0 <CDC_Device_SendByte+0x18>
    442a:	86 2f       	mov	r24, r22
    442c:	55 dc       	rcall	.-1878   	; 0x3cd8 <Endpoint_Write_8>
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	d7 cf       	rjmp	.-82     	; 0x43e0 <CDC_Device_SendByte+0x18>

00004432 <CDC_Device_Flush>:
    4432:	cf 93       	push	r28
    4434:	df 93       	push	r29
    4436:	20 91 14 27 	lds	r18, 0x2714
    443a:	24 30       	cpi	r18, 0x04	; 4
    443c:	21 f0       	breq	.+8      	; 0x4446 <CDC_Device_Flush+0x14>
    443e:	82 e0       	ldi	r24, 0x02	; 2
    4440:	df 91       	pop	r29
    4442:	cf 91       	pop	r28
    4444:	08 95       	ret
    4446:	fc 01       	movw	r30, r24
    4448:	44 89       	ldd	r20, Z+20	; 0x14
    444a:	55 89       	ldd	r21, Z+21	; 0x15
    444c:	66 89       	ldd	r22, Z+22	; 0x16
    444e:	77 89       	ldd	r23, Z+23	; 0x17
    4450:	45 2b       	or	r20, r21
    4452:	46 2b       	or	r20, r22
    4454:	47 2b       	or	r20, r23
    4456:	99 f3       	breq	.-26     	; 0x443e <CDC_Device_Flush+0xc>
    4458:	81 81       	ldd	r24, Z+1	; 0x01
    445a:	4e dc       	rcall	.-1892   	; 0x3cf8 <Endpoint_SelectEndpoint>
    445c:	80 91 21 27 	lds	r24, 0x2721
    4460:	20 91 1d 27 	lds	r18, 0x271D
    4464:	30 91 1e 27 	lds	r19, 0x271E
    4468:	f9 01       	movw	r30, r18
    446a:	87 fd       	sbrc	r24, 7
    446c:	1b c0       	rjmp	.+54     	; 0x44a4 <CDC_Device_Flush+0x72>
    446e:	e0 5c       	subi	r30, 0xC0	; 192
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	80 81       	ld	r24, Z
    4474:	31 96       	adiw	r30, 0x01	; 1
    4476:	40 81       	ld	r20, Z
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	84 1b       	sub	r24, r20
    447c:	91 09       	sbc	r25, r1
    447e:	89 2b       	or	r24, r25
    4480:	11 f4       	brne	.+4      	; 0x4486 <CDC_Device_Flush+0x54>
    4482:	80 e0       	ldi	r24, 0x00	; 0
    4484:	dd cf       	rjmp	.-70     	; 0x4440 <CDC_Device_Flush+0xe>
    4486:	f9 01       	movw	r30, r18
    4488:	ef 5b       	subi	r30, 0xBF	; 191
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	d0 81       	ld	r29, Z
    448e:	31 97       	sbiw	r30, 0x01	; 1
    4490:	c0 81       	ld	r28, Z
    4492:	ea db       	rcall	.-2092   	; 0x3c68 <Endpoint_ClearIN>
    4494:	dc 17       	cp	r29, r28
    4496:	a8 f3       	brcs	.-22     	; 0x4482 <CDC_Device_Flush+0x50>
    4498:	f3 dd       	rcall	.-1050   	; 0x4080 <Endpoint_WaitUntilReady>
    449a:	81 11       	cpse	r24, r1
    449c:	d1 cf       	rjmp	.-94     	; 0x4440 <CDC_Device_Flush+0xe>
    449e:	e4 db       	rcall	.-2104   	; 0x3c68 <Endpoint_ClearIN>
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	ce cf       	rjmp	.-100    	; 0x4440 <CDC_Device_Flush+0xe>
    44a4:	ef 5b       	subi	r30, 0xBF	; 191
    44a6:	ff 4f       	sbci	r31, 0xFF	; 255
    44a8:	80 81       	ld	r24, Z
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	e8 cf       	rjmp	.-48     	; 0x447e <CDC_Device_Flush+0x4c>

000044ae <CDC_Device_USBTask>:
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	ec 01       	movw	r28, r24
    44b4:	80 91 14 27 	lds	r24, 0x2714
    44b8:	84 30       	cpi	r24, 0x04	; 4
    44ba:	19 f0       	breq	.+6      	; 0x44c2 <CDC_Device_USBTask+0x14>
    44bc:	df 91       	pop	r29
    44be:	cf 91       	pop	r28
    44c0:	08 95       	ret
    44c2:	4c 89       	ldd	r20, Y+20	; 0x14
    44c4:	5d 89       	ldd	r21, Y+21	; 0x15
    44c6:	6e 89       	ldd	r22, Y+22	; 0x16
    44c8:	7f 89       	ldd	r23, Y+23	; 0x17
    44ca:	45 2b       	or	r20, r21
    44cc:	46 2b       	or	r20, r22
    44ce:	47 2b       	or	r20, r23
    44d0:	a9 f3       	breq	.-22     	; 0x44bc <CDC_Device_USBTask+0xe>
    44d2:	89 81       	ldd	r24, Y+1	; 0x01
    44d4:	11 dc       	rcall	.-2014   	; 0x3cf8 <Endpoint_SelectEndpoint>
    44d6:	49 dc       	rcall	.-1902   	; 0x3d6a <Endpoint_IsINReady>
    44d8:	88 23       	and	r24, r24
    44da:	81 f3       	breq	.-32     	; 0x44bc <CDC_Device_USBTask+0xe>
    44dc:	ce 01       	movw	r24, r28
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	a7 cf       	rjmp	.-178    	; 0x4432 <CDC_Device_Flush>

000044e4 <CDC_Device_ReceiveByte>:
    44e4:	cf 93       	push	r28
    44e6:	df 93       	push	r29
    44e8:	20 91 14 27 	lds	r18, 0x2714
    44ec:	24 30       	cpi	r18, 0x04	; 4
    44ee:	a9 f5       	brne	.+106    	; 0x455a <CDC_Device_ReceiveByte+0x76>
    44f0:	fc 01       	movw	r30, r24
    44f2:	44 89       	ldd	r20, Z+20	; 0x14
    44f4:	55 89       	ldd	r21, Z+21	; 0x15
    44f6:	66 89       	ldd	r22, Z+22	; 0x16
    44f8:	77 89       	ldd	r23, Z+23	; 0x17
    44fa:	45 2b       	or	r20, r21
    44fc:	46 2b       	or	r20, r22
    44fe:	47 2b       	or	r20, r23
    4500:	61 f1       	breq	.+88     	; 0x455a <CDC_Device_ReceiveByte+0x76>
    4502:	86 81       	ldd	r24, Z+6	; 0x06
    4504:	f9 db       	rcall	.-2062   	; 0x3cf8 <Endpoint_SelectEndpoint>
    4506:	3d dc       	rcall	.-1926   	; 0x3d82 <Endpoint_IsOUTReceived>
    4508:	88 23       	and	r24, r24
    450a:	39 f1       	breq	.+78     	; 0x455a <CDC_Device_ReceiveByte+0x76>
    450c:	80 91 21 27 	lds	r24, 0x2721
    4510:	40 91 1d 27 	lds	r20, 0x271D
    4514:	50 91 1e 27 	lds	r21, 0x271E
    4518:	fa 01       	movw	r30, r20
    451a:	87 fd       	sbrc	r24, 7
    451c:	3a c0       	rjmp	.+116    	; 0x4592 <CDC_Device_ReceiveByte+0xae>
    451e:	e0 5c       	subi	r30, 0xC0	; 192
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	80 81       	ld	r24, Z
    4524:	31 96       	adiw	r30, 0x01	; 1
    4526:	20 81       	ld	r18, Z
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	82 1b       	sub	r24, r18
    452c:	91 09       	sbc	r25, r1
    452e:	89 2b       	or	r24, r25
    4530:	c9 f4       	brne	.+50     	; 0x4564 <CDC_Device_ReceiveByte+0x80>
    4532:	cf ef       	ldi	r28, 0xFF	; 255
    4534:	df ef       	ldi	r29, 0xFF	; 255
    4536:	80 91 21 27 	lds	r24, 0x2721
    453a:	fa 01       	movw	r30, r20
    453c:	87 fd       	sbrc	r24, 7
    453e:	1e c0       	rjmp	.+60     	; 0x457c <CDC_Device_ReceiveByte+0x98>
    4540:	e0 5c       	subi	r30, 0xC0	; 192
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	20 81       	ld	r18, Z
    4546:	31 96       	adiw	r30, 0x01	; 1
    4548:	80 81       	ld	r24, Z
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	28 1b       	sub	r18, r24
    454e:	31 09       	sbc	r19, r1
    4550:	d9 f0       	breq	.+54     	; 0x4588 <CDC_Device_ReceiveByte+0xa4>
    4552:	ce 01       	movw	r24, r28
    4554:	df 91       	pop	r29
    4556:	cf 91       	pop	r28
    4558:	08 95       	ret
    455a:	8f ef       	ldi	r24, 0xFF	; 255
    455c:	9f ef       	ldi	r25, 0xFF	; 255
    455e:	df 91       	pop	r29
    4560:	cf 91       	pop	r28
    4562:	08 95       	ret
    4564:	a9 db       	rcall	.-2222   	; 0x3cb8 <Endpoint_Read_8>
    4566:	c8 2f       	mov	r28, r24
    4568:	d0 e0       	ldi	r29, 0x00	; 0
    456a:	40 91 1d 27 	lds	r20, 0x271D
    456e:	50 91 1e 27 	lds	r21, 0x271E
    4572:	80 91 21 27 	lds	r24, 0x2721
    4576:	fa 01       	movw	r30, r20
    4578:	87 ff       	sbrs	r24, 7
    457a:	e2 cf       	rjmp	.-60     	; 0x4540 <CDC_Device_ReceiveByte+0x5c>
    457c:	ef 5b       	subi	r30, 0xBF	; 191
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	20 81       	ld	r18, Z
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	23 2b       	or	r18, r19
    4586:	29 f7       	brne	.-54     	; 0x4552 <CDC_Device_ReceiveByte+0x6e>
    4588:	88 db       	rcall	.-2288   	; 0x3c9a <Endpoint_ClearOUT>
    458a:	ce 01       	movw	r24, r28
    458c:	df 91       	pop	r29
    458e:	cf 91       	pop	r28
    4590:	08 95       	ret
    4592:	ef 5b       	subi	r30, 0xBF	; 191
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	c9 cf       	rjmp	.-110    	; 0x452e <CDC_Device_ReceiveByte+0x4a>

0000459c <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    459c:	08 95       	ret

0000459e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    459e:	ff 92       	push	r15
    45a0:	0f 93       	push	r16
    45a2:	1f 93       	push	r17
    45a4:	cf 93       	push	r28
    45a6:	df 93       	push	r29
    45a8:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    45aa:	04 dc       	rcall	.-2040   	; 0x3db4 <Endpoint_IsSETUPReceived>
    45ac:	88 23       	and	r24, r24
    45ae:	49 f0       	breq	.+18     	; 0x45c2 <CDC_Device_ProcessControlRequest+0x24>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    45b0:	88 81       	ld	r24, Y
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	20 91 19 27 	lds	r18, 0x2719
    45b8:	30 91 1a 27 	lds	r19, 0x271A
    45bc:	28 17       	cp	r18, r24
    45be:	39 07       	cpc	r19, r25
    45c0:	31 f0       	breq	.+12     	; 0x45ce <CDC_Device_ProcessControlRequest+0x30>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    45c2:	df 91       	pop	r29
    45c4:	cf 91       	pop	r28
    45c6:	1f 91       	pop	r17
    45c8:	0f 91       	pop	r16
    45ca:	ff 90       	pop	r15
    45cc:	08 95       	ret
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    45ce:	80 91 16 27 	lds	r24, 0x2716
    45d2:	81 32       	cpi	r24, 0x21	; 33
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <CDC_Device_ProcessControlRequest+0x3a>
    45d6:	48 c0       	rjmp	.+144    	; 0x4668 <CDC_Device_ProcessControlRequest+0xca>
    45d8:	a0 f0       	brcs	.+40     	; 0x4602 <CDC_Device_ProcessControlRequest+0x64>
    45da:	82 32       	cpi	r24, 0x22	; 34
    45dc:	09 f4       	brne	.+2      	; 0x45e0 <CDC_Device_ProcessControlRequest+0x42>
    45de:	65 c0       	rjmp	.+202    	; 0x46aa <CDC_Device_ProcessControlRequest+0x10c>
    45e0:	83 32       	cpi	r24, 0x23	; 35
    45e2:	79 f7       	brne	.-34     	; 0x45c2 <CDC_Device_ProcessControlRequest+0x24>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    45e4:	80 91 15 27 	lds	r24, 0x2715
    45e8:	81 32       	cpi	r24, 0x21	; 33
    45ea:	59 f7       	brne	.-42     	; 0x45c2 <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    45ec:	fc db       	rcall	.-2056   	; 0x3de6 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    45ee:	32 dd       	rcall	.-1436   	; 0x4054 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    45f0:	60 91 17 27 	lds	r22, 0x2717
    45f4:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    45f6:	df 91       	pop	r29
    45f8:	cf 91       	pop	r28
    45fa:	1f 91       	pop	r17
    45fc:	0f 91       	pop	r16
    45fe:	ff 90       	pop	r15
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    4600:	cd cf       	rjmp	.-102    	; 0x459c <CDC_Device_Event_Stub>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    4602:	80 32       	cpi	r24, 0x20	; 32
    4604:	f1 f6       	brne	.-68     	; 0x45c2 <CDC_Device_ProcessControlRequest+0x24>
				Endpoint_ClearStatusStage();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4606:	80 91 15 27 	lds	r24, 0x2715
    460a:	81 32       	cpi	r24, 0x21	; 33
    460c:	d1 f6       	brne	.-76     	; 0x45c2 <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    460e:	eb db       	rcall	.-2090   	; 0x3de6 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    4610:	04 c0       	rjmp	.+8      	; 0x461a <CDC_Device_ProcessControlRequest+0x7c>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    4612:	80 91 14 27 	lds	r24, 0x2714
    4616:	88 23       	and	r24, r24
    4618:	a1 f2       	breq	.-88     	; 0x45c2 <CDC_Device_ProcessControlRequest+0x24>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    461a:	b3 db       	rcall	.-2202   	; 0x3d82 <Endpoint_IsOUTReceived>
    461c:	88 23       	and	r24, r24
    461e:	c9 f3       	breq	.-14     	; 0x4612 <CDC_Device_ProcessControlRequest+0x74>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    4620:	4b db       	rcall	.-2410   	; 0x3cb8 <Endpoint_Read_8>
    4622:	08 2f       	mov	r16, r24
				uint32_t Byte1 = Endpoint_Read_8();
    4624:	49 db       	rcall	.-2414   	; 0x3cb8 <Endpoint_Read_8>
    4626:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    4628:	47 db       	rcall	.-2418   	; 0x3cb8 <Endpoint_Read_8>
    462a:	f8 2e       	mov	r15, r24
				uint32_t Byte3 = Endpoint_Read_8();
    462c:	45 db       	rcall	.-2422   	; 0x3cb8 <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    462e:	4f 2d       	mov	r20, r15
    4630:	50 e0       	ldi	r21, 0x00	; 0
    4632:	60 e0       	ldi	r22, 0x00	; 0
    4634:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    4636:	ba 01       	movw	r22, r20
    4638:	55 27       	eor	r21, r21
    463a:	44 27       	eor	r20, r20
    463c:	78 2b       	or	r23, r24
    463e:	40 2b       	or	r20, r16
    4640:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    4642:	4c 8b       	std	Y+20, r20	; 0x14
    4644:	5d 8b       	std	Y+21, r21	; 0x15
    4646:	6e 8b       	std	Y+22, r22	; 0x16
    4648:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    464a:	36 db       	rcall	.-2452   	; 0x3cb8 <Endpoint_Read_8>
    464c:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    464e:	34 db       	rcall	.-2456   	; 0x3cb8 <Endpoint_Read_8>
    4650:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    4652:	32 db       	rcall	.-2460   	; 0x3cb8 <Endpoint_Read_8>
    4654:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    4656:	21 db       	rcall	.-2494   	; 0x3c9a <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    4658:	fd dc       	rcall	.-1542   	; 0x4054 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    465a:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    465c:	df 91       	pop	r29
    465e:	cf 91       	pop	r28
    4660:	1f 91       	pop	r17
    4662:	0f 91       	pop	r16
    4664:	ff 90       	pop	r15
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    4666:	9a cf       	rjmp	.-204    	; 0x459c <CDC_Device_Event_Stub>
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4668:	80 91 15 27 	lds	r24, 0x2715
    466c:	81 3a       	cpi	r24, 0xA1	; 161
    466e:	09 f0       	breq	.+2      	; 0x4672 <CDC_Device_ProcessControlRequest+0xd4>
    4670:	a8 cf       	rjmp	.-176    	; 0x45c2 <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    4672:	b9 db       	rcall	.-2190   	; 0x3de6 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    4674:	7a db       	rcall	.-2316   	; 0x3d6a <Endpoint_IsINReady>
    4676:	88 23       	and	r24, r24
    4678:	e9 f3       	breq	.-6      	; 0x4674 <CDC_Device_ProcessControlRequest+0xd6>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    467a:	8c 89       	ldd	r24, Y+20	; 0x14
    467c:	fd 88       	ldd	r15, Y+21	; 0x15
    467e:	0e 89       	ldd	r16, Y+22	; 0x16
    4680:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    4682:	2a db       	rcall	.-2476   	; 0x3cd8 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    4684:	8f 2d       	mov	r24, r15
    4686:	28 db       	rcall	.-2480   	; 0x3cd8 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    4688:	80 2f       	mov	r24, r16
    468a:	26 db       	rcall	.-2484   	; 0x3cd8 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    468c:	81 2f       	mov	r24, r17
    468e:	24 db       	rcall	.-2488   	; 0x3cd8 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    4690:	88 8d       	ldd	r24, Y+24	; 0x18
    4692:	22 db       	rcall	.-2492   	; 0x3cd8 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    4694:	89 8d       	ldd	r24, Y+25	; 0x19
    4696:	20 db       	rcall	.-2496   	; 0x3cd8 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    4698:	8a 8d       	ldd	r24, Y+26	; 0x1a
    469a:	1e db       	rcall	.-2500   	; 0x3cd8 <Endpoint_Write_8>

				Endpoint_ClearIN();
    469c:	e5 da       	rcall	.-2614   	; 0x3c68 <Endpoint_ClearIN>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    469e:	df 91       	pop	r29
    46a0:	cf 91       	pop	r28
    46a2:	1f 91       	pop	r17
    46a4:	0f 91       	pop	r16
    46a6:	ff 90       	pop	r15
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    46a8:	d5 cc       	rjmp	.-1622   	; 0x4054 <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    46aa:	80 91 15 27 	lds	r24, 0x2715
    46ae:	81 32       	cpi	r24, 0x21	; 33
    46b0:	09 f0       	breq	.+2      	; 0x46b4 <CDC_Device_ProcessControlRequest+0x116>
    46b2:	87 cf       	rjmp	.-242    	; 0x45c2 <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    46b4:	98 db       	rcall	.-2256   	; 0x3de6 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    46b6:	ce dc       	rcall	.-1636   	; 0x4054 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    46b8:	80 91 17 27 	lds	r24, 0x2717
    46bc:	90 91 18 27 	lds	r25, 0x2718
    46c0:	88 8b       	std	Y+16, r24	; 0x10
    46c2:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    46c4:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    46c6:	df 91       	pop	r29
    46c8:	cf 91       	pop	r28
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	ff 90       	pop	r15
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    46d0:	65 cf       	rjmp	.-310    	; 0x459c <CDC_Device_Event_Stub>

000046d2 <__tablejump2__>:
    46d2:	ee 0f       	add	r30, r30
    46d4:	ff 1f       	adc	r31, r31

000046d6 <__tablejump__>:
    46d6:	05 90       	lpm	r0, Z+
    46d8:	f4 91       	lpm	r31, Z
    46da:	e0 2d       	mov	r30, r0
    46dc:	09 94       	ijmp

000046de <__mulshisi3>:
    46de:	b7 ff       	sbrs	r27, 7
    46e0:	04 c0       	rjmp	.+8      	; 0x46ea <__muluhisi3>

000046e2 <__mulohisi3>:
    46e2:	03 d0       	rcall	.+6      	; 0x46ea <__muluhisi3>
    46e4:	82 1b       	sub	r24, r18
    46e6:	93 0b       	sbc	r25, r19
    46e8:	08 95       	ret

000046ea <__muluhisi3>:
    46ea:	09 d0       	rcall	.+18     	; 0x46fe <__umulhisi3>
    46ec:	a5 9f       	mul	r26, r21
    46ee:	90 0d       	add	r25, r0
    46f0:	b4 9f       	mul	r27, r20
    46f2:	90 0d       	add	r25, r0
    46f4:	a4 9f       	mul	r26, r20
    46f6:	80 0d       	add	r24, r0
    46f8:	91 1d       	adc	r25, r1
    46fa:	11 24       	eor	r1, r1
    46fc:	08 95       	ret

000046fe <__umulhisi3>:
    46fe:	a2 9f       	mul	r26, r18
    4700:	b0 01       	movw	r22, r0
    4702:	b3 9f       	mul	r27, r19
    4704:	c0 01       	movw	r24, r0
    4706:	a3 9f       	mul	r26, r19
    4708:	70 0d       	add	r23, r0
    470a:	81 1d       	adc	r24, r1
    470c:	11 24       	eor	r1, r1
    470e:	91 1d       	adc	r25, r1
    4710:	b2 9f       	mul	r27, r18
    4712:	70 0d       	add	r23, r0
    4714:	81 1d       	adc	r24, r1
    4716:	11 24       	eor	r1, r1
    4718:	91 1d       	adc	r25, r1
    471a:	08 95       	ret

0000471c <do_rand>:
    471c:	8f 92       	push	r8
    471e:	9f 92       	push	r9
    4720:	af 92       	push	r10
    4722:	bf 92       	push	r11
    4724:	cf 92       	push	r12
    4726:	df 92       	push	r13
    4728:	ef 92       	push	r14
    472a:	ff 92       	push	r15
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	ec 01       	movw	r28, r24
    4732:	68 81       	ld	r22, Y
    4734:	79 81       	ldd	r23, Y+1	; 0x01
    4736:	8a 81       	ldd	r24, Y+2	; 0x02
    4738:	9b 81       	ldd	r25, Y+3	; 0x03
    473a:	61 15       	cp	r22, r1
    473c:	71 05       	cpc	r23, r1
    473e:	81 05       	cpc	r24, r1
    4740:	91 05       	cpc	r25, r1
    4742:	21 f4       	brne	.+8      	; 0x474c <do_rand+0x30>
    4744:	64 e2       	ldi	r22, 0x24	; 36
    4746:	79 ed       	ldi	r23, 0xD9	; 217
    4748:	8b e5       	ldi	r24, 0x5B	; 91
    474a:	97 e0       	ldi	r25, 0x07	; 7
    474c:	2d e1       	ldi	r18, 0x1D	; 29
    474e:	33 ef       	ldi	r19, 0xF3	; 243
    4750:	41 e0       	ldi	r20, 0x01	; 1
    4752:	50 e0       	ldi	r21, 0x00	; 0
    4754:	31 d3       	rcall	.+1634   	; 0x4db8 <__divmodsi4>
    4756:	49 01       	movw	r8, r18
    4758:	5a 01       	movw	r10, r20
    475a:	9b 01       	movw	r18, r22
    475c:	ac 01       	movw	r20, r24
    475e:	a7 ea       	ldi	r26, 0xA7	; 167
    4760:	b1 e4       	ldi	r27, 0x41	; 65
    4762:	c3 df       	rcall	.-122    	; 0x46ea <__muluhisi3>
    4764:	6b 01       	movw	r12, r22
    4766:	7c 01       	movw	r14, r24
    4768:	ac ee       	ldi	r26, 0xEC	; 236
    476a:	b4 ef       	ldi	r27, 0xF4	; 244
    476c:	a5 01       	movw	r20, r10
    476e:	94 01       	movw	r18, r8
    4770:	b8 df       	rcall	.-144    	; 0x46e2 <__mulohisi3>
    4772:	c6 0e       	add	r12, r22
    4774:	d7 1e       	adc	r13, r23
    4776:	e8 1e       	adc	r14, r24
    4778:	f9 1e       	adc	r15, r25
    477a:	f7 fe       	sbrs	r15, 7
    477c:	06 c0       	rjmp	.+12     	; 0x478a <do_rand+0x6e>
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	c8 1a       	sub	r12, r24
    4782:	d1 08       	sbc	r13, r1
    4784:	e1 08       	sbc	r14, r1
    4786:	80 e8       	ldi	r24, 0x80	; 128
    4788:	f8 0a       	sbc	r15, r24
    478a:	c8 82       	st	Y, r12
    478c:	d9 82       	std	Y+1, r13	; 0x01
    478e:	ea 82       	std	Y+2, r14	; 0x02
    4790:	fb 82       	std	Y+3, r15	; 0x03
    4792:	c6 01       	movw	r24, r12
    4794:	9f 77       	andi	r25, 0x7F	; 127
    4796:	df 91       	pop	r29
    4798:	cf 91       	pop	r28
    479a:	ff 90       	pop	r15
    479c:	ef 90       	pop	r14
    479e:	df 90       	pop	r13
    47a0:	cf 90       	pop	r12
    47a2:	bf 90       	pop	r11
    47a4:	af 90       	pop	r10
    47a6:	9f 90       	pop	r9
    47a8:	8f 90       	pop	r8
    47aa:	08 95       	ret

000047ac <rand_r>:
    47ac:	b7 cf       	rjmp	.-146    	; 0x471c <do_rand>

000047ae <rand>:
    47ae:	8c e1       	ldi	r24, 0x1C	; 28
    47b0:	90 e2       	ldi	r25, 0x20	; 32
    47b2:	b4 cf       	rjmp	.-152    	; 0x471c <do_rand>

000047b4 <srand>:
    47b4:	a0 e0       	ldi	r26, 0x00	; 0
    47b6:	b0 e0       	ldi	r27, 0x00	; 0
    47b8:	80 93 1c 20 	sts	0x201C, r24
    47bc:	90 93 1d 20 	sts	0x201D, r25
    47c0:	a0 93 1e 20 	sts	0x201E, r26
    47c4:	b0 93 1f 20 	sts	0x201F, r27
    47c8:	08 95       	ret

000047ca <memcpy_P>:
    47ca:	fb 01       	movw	r30, r22
    47cc:	dc 01       	movw	r26, r24
    47ce:	02 c0       	rjmp	.+4      	; 0x47d4 <memcpy_P+0xa>
    47d0:	05 90       	lpm	r0, Z+
    47d2:	0d 92       	st	X+, r0
    47d4:	41 50       	subi	r20, 0x01	; 1
    47d6:	50 40       	sbci	r21, 0x00	; 0
    47d8:	d8 f7       	brcc	.-10     	; 0x47d0 <memcpy_P+0x6>
    47da:	08 95       	ret

000047dc <strcmp_P>:
    47dc:	fb 01       	movw	r30, r22
    47de:	dc 01       	movw	r26, r24
    47e0:	8d 91       	ld	r24, X+
    47e2:	05 90       	lpm	r0, Z+
    47e4:	80 19       	sub	r24, r0
    47e6:	01 10       	cpse	r0, r1
    47e8:	d9 f3       	breq	.-10     	; 0x47e0 <strcmp_P+0x4>
    47ea:	99 0b       	sbc	r25, r25
    47ec:	08 95       	ret

000047ee <strncpy_P>:
    47ee:	fb 01       	movw	r30, r22
    47f0:	dc 01       	movw	r26, r24
    47f2:	41 50       	subi	r20, 0x01	; 1
    47f4:	50 40       	sbci	r21, 0x00	; 0
    47f6:	48 f0       	brcs	.+18     	; 0x480a <strncpy_P+0x1c>
    47f8:	05 90       	lpm	r0, Z+
    47fa:	0d 92       	st	X+, r0
    47fc:	00 20       	and	r0, r0
    47fe:	c9 f7       	brne	.-14     	; 0x47f2 <strncpy_P+0x4>
    4800:	01 c0       	rjmp	.+2      	; 0x4804 <strncpy_P+0x16>
    4802:	1d 92       	st	X+, r1
    4804:	41 50       	subi	r20, 0x01	; 1
    4806:	50 40       	sbci	r21, 0x00	; 0
    4808:	e0 f7       	brcc	.-8      	; 0x4802 <strncpy_P+0x14>
    480a:	08 95       	ret

0000480c <memcpy>:
    480c:	fb 01       	movw	r30, r22
    480e:	dc 01       	movw	r26, r24
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <memcpy+0xa>
    4812:	01 90       	ld	r0, Z+
    4814:	0d 92       	st	X+, r0
    4816:	41 50       	subi	r20, 0x01	; 1
    4818:	50 40       	sbci	r21, 0x00	; 0
    481a:	d8 f7       	brcc	.-10     	; 0x4812 <memcpy+0x6>
    481c:	08 95       	ret

0000481e <snprintf_P>:
    481e:	ae e0       	ldi	r26, 0x0E	; 14
    4820:	b0 e0       	ldi	r27, 0x00	; 0
    4822:	e4 e1       	ldi	r30, 0x14	; 20
    4824:	f4 e2       	ldi	r31, 0x24	; 36
    4826:	f2 c2       	rjmp	.+1508   	; 0x4e0c <__prologue_saves__+0x1c>
    4828:	0d 89       	ldd	r16, Y+21	; 0x15
    482a:	1e 89       	ldd	r17, Y+22	; 0x16
    482c:	8f 89       	ldd	r24, Y+23	; 0x17
    482e:	98 8d       	ldd	r25, Y+24	; 0x18
    4830:	2e e0       	ldi	r18, 0x0E	; 14
    4832:	2c 83       	std	Y+4, r18	; 0x04
    4834:	09 83       	std	Y+1, r16	; 0x01
    4836:	1a 83       	std	Y+2, r17	; 0x02
    4838:	97 ff       	sbrs	r25, 7
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <snprintf_P+0x22>
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e8       	ldi	r25, 0x80	; 128
    4840:	01 97       	sbiw	r24, 0x01	; 1
    4842:	8d 83       	std	Y+5, r24	; 0x05
    4844:	9e 83       	std	Y+6, r25	; 0x06
    4846:	ae 01       	movw	r20, r28
    4848:	45 5e       	subi	r20, 0xE5	; 229
    484a:	5f 4f       	sbci	r21, 0xFF	; 255
    484c:	69 8d       	ldd	r22, Y+25	; 0x19
    484e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4850:	ce 01       	movw	r24, r28
    4852:	01 96       	adiw	r24, 0x01	; 1
    4854:	11 d0       	rcall	.+34     	; 0x4878 <vfprintf>
    4856:	4d 81       	ldd	r20, Y+5	; 0x05
    4858:	5e 81       	ldd	r21, Y+6	; 0x06
    485a:	57 fd       	sbrc	r21, 7
    485c:	0a c0       	rjmp	.+20     	; 0x4872 <snprintf_P+0x54>
    485e:	2f 81       	ldd	r18, Y+7	; 0x07
    4860:	38 85       	ldd	r19, Y+8	; 0x08
    4862:	42 17       	cp	r20, r18
    4864:	53 07       	cpc	r21, r19
    4866:	0c f4       	brge	.+2      	; 0x486a <snprintf_P+0x4c>
    4868:	9a 01       	movw	r18, r20
    486a:	f8 01       	movw	r30, r16
    486c:	e2 0f       	add	r30, r18
    486e:	f3 1f       	adc	r31, r19
    4870:	10 82       	st	Z, r1
    4872:	2e 96       	adiw	r28, 0x0e	; 14
    4874:	e4 e0       	ldi	r30, 0x04	; 4
    4876:	e3 c2       	rjmp	.+1478   	; 0x4e3e <__epilogue_restores__+0x1c>

00004878 <vfprintf>:
    4878:	ac e0       	ldi	r26, 0x0C	; 12
    487a:	b0 e0       	ldi	r27, 0x00	; 0
    487c:	e1 e4       	ldi	r30, 0x41	; 65
    487e:	f4 e2       	ldi	r31, 0x24	; 36
    4880:	b7 c2       	rjmp	.+1390   	; 0x4df0 <__prologue_saves__>
    4882:	7c 01       	movw	r14, r24
    4884:	6b 01       	movw	r12, r22
    4886:	8a 01       	movw	r16, r20
    4888:	fc 01       	movw	r30, r24
    488a:	16 82       	std	Z+6, r1	; 0x06
    488c:	17 82       	std	Z+7, r1	; 0x07
    488e:	83 81       	ldd	r24, Z+3	; 0x03
    4890:	81 ff       	sbrs	r24, 1
    4892:	b0 c1       	rjmp	.+864    	; 0x4bf4 <vfprintf+0x37c>
    4894:	ce 01       	movw	r24, r28
    4896:	01 96       	adiw	r24, 0x01	; 1
    4898:	4c 01       	movw	r8, r24
    489a:	f7 01       	movw	r30, r14
    489c:	93 81       	ldd	r25, Z+3	; 0x03
    489e:	f6 01       	movw	r30, r12
    48a0:	93 fd       	sbrc	r25, 3
    48a2:	85 91       	lpm	r24, Z+
    48a4:	93 ff       	sbrs	r25, 3
    48a6:	81 91       	ld	r24, Z+
    48a8:	6f 01       	movw	r12, r30
    48aa:	88 23       	and	r24, r24
    48ac:	09 f4       	brne	.+2      	; 0x48b0 <vfprintf+0x38>
    48ae:	9e c1       	rjmp	.+828    	; 0x4bec <vfprintf+0x374>
    48b0:	85 32       	cpi	r24, 0x25	; 37
    48b2:	39 f4       	brne	.+14     	; 0x48c2 <vfprintf+0x4a>
    48b4:	93 fd       	sbrc	r25, 3
    48b6:	85 91       	lpm	r24, Z+
    48b8:	93 ff       	sbrs	r25, 3
    48ba:	81 91       	ld	r24, Z+
    48bc:	6f 01       	movw	r12, r30
    48be:	85 32       	cpi	r24, 0x25	; 37
    48c0:	21 f4       	brne	.+8      	; 0x48ca <vfprintf+0x52>
    48c2:	b7 01       	movw	r22, r14
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	e8 d1       	rcall	.+976    	; 0x4c98 <fputc>
    48c8:	e8 cf       	rjmp	.-48     	; 0x489a <vfprintf+0x22>
    48ca:	51 2c       	mov	r5, r1
    48cc:	31 2c       	mov	r3, r1
    48ce:	20 e0       	ldi	r18, 0x00	; 0
    48d0:	20 32       	cpi	r18, 0x20	; 32
    48d2:	a0 f4       	brcc	.+40     	; 0x48fc <vfprintf+0x84>
    48d4:	8b 32       	cpi	r24, 0x2B	; 43
    48d6:	69 f0       	breq	.+26     	; 0x48f2 <vfprintf+0x7a>
    48d8:	30 f4       	brcc	.+12     	; 0x48e6 <vfprintf+0x6e>
    48da:	80 32       	cpi	r24, 0x20	; 32
    48dc:	59 f0       	breq	.+22     	; 0x48f4 <vfprintf+0x7c>
    48de:	83 32       	cpi	r24, 0x23	; 35
    48e0:	69 f4       	brne	.+26     	; 0x48fc <vfprintf+0x84>
    48e2:	20 61       	ori	r18, 0x10	; 16
    48e4:	2c c0       	rjmp	.+88     	; 0x493e <vfprintf+0xc6>
    48e6:	8d 32       	cpi	r24, 0x2D	; 45
    48e8:	39 f0       	breq	.+14     	; 0x48f8 <vfprintf+0x80>
    48ea:	80 33       	cpi	r24, 0x30	; 48
    48ec:	39 f4       	brne	.+14     	; 0x48fc <vfprintf+0x84>
    48ee:	21 60       	ori	r18, 0x01	; 1
    48f0:	26 c0       	rjmp	.+76     	; 0x493e <vfprintf+0xc6>
    48f2:	22 60       	ori	r18, 0x02	; 2
    48f4:	24 60       	ori	r18, 0x04	; 4
    48f6:	23 c0       	rjmp	.+70     	; 0x493e <vfprintf+0xc6>
    48f8:	28 60       	ori	r18, 0x08	; 8
    48fa:	21 c0       	rjmp	.+66     	; 0x493e <vfprintf+0xc6>
    48fc:	27 fd       	sbrc	r18, 7
    48fe:	27 c0       	rjmp	.+78     	; 0x494e <vfprintf+0xd6>
    4900:	30 ed       	ldi	r19, 0xD0	; 208
    4902:	38 0f       	add	r19, r24
    4904:	3a 30       	cpi	r19, 0x0A	; 10
    4906:	78 f4       	brcc	.+30     	; 0x4926 <vfprintf+0xae>
    4908:	26 ff       	sbrs	r18, 6
    490a:	06 c0       	rjmp	.+12     	; 0x4918 <vfprintf+0xa0>
    490c:	fa e0       	ldi	r31, 0x0A	; 10
    490e:	5f 9e       	mul	r5, r31
    4910:	30 0d       	add	r19, r0
    4912:	11 24       	eor	r1, r1
    4914:	53 2e       	mov	r5, r19
    4916:	13 c0       	rjmp	.+38     	; 0x493e <vfprintf+0xc6>
    4918:	8a e0       	ldi	r24, 0x0A	; 10
    491a:	38 9e       	mul	r3, r24
    491c:	30 0d       	add	r19, r0
    491e:	11 24       	eor	r1, r1
    4920:	33 2e       	mov	r3, r19
    4922:	20 62       	ori	r18, 0x20	; 32
    4924:	0c c0       	rjmp	.+24     	; 0x493e <vfprintf+0xc6>
    4926:	8e 32       	cpi	r24, 0x2E	; 46
    4928:	21 f4       	brne	.+8      	; 0x4932 <vfprintf+0xba>
    492a:	26 fd       	sbrc	r18, 6
    492c:	5f c1       	rjmp	.+702    	; 0x4bec <vfprintf+0x374>
    492e:	20 64       	ori	r18, 0x40	; 64
    4930:	06 c0       	rjmp	.+12     	; 0x493e <vfprintf+0xc6>
    4932:	8c 36       	cpi	r24, 0x6C	; 108
    4934:	11 f4       	brne	.+4      	; 0x493a <vfprintf+0xc2>
    4936:	20 68       	ori	r18, 0x80	; 128
    4938:	02 c0       	rjmp	.+4      	; 0x493e <vfprintf+0xc6>
    493a:	88 36       	cpi	r24, 0x68	; 104
    493c:	41 f4       	brne	.+16     	; 0x494e <vfprintf+0xd6>
    493e:	f6 01       	movw	r30, r12
    4940:	93 fd       	sbrc	r25, 3
    4942:	85 91       	lpm	r24, Z+
    4944:	93 ff       	sbrs	r25, 3
    4946:	81 91       	ld	r24, Z+
    4948:	6f 01       	movw	r12, r30
    494a:	81 11       	cpse	r24, r1
    494c:	c1 cf       	rjmp	.-126    	; 0x48d0 <vfprintf+0x58>
    494e:	98 2f       	mov	r25, r24
    4950:	9f 7d       	andi	r25, 0xDF	; 223
    4952:	95 54       	subi	r25, 0x45	; 69
    4954:	93 30       	cpi	r25, 0x03	; 3
    4956:	28 f4       	brcc	.+10     	; 0x4962 <vfprintf+0xea>
    4958:	0c 5f       	subi	r16, 0xFC	; 252
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	ff e3       	ldi	r31, 0x3F	; 63
    495e:	f9 83       	std	Y+1, r31	; 0x01
    4960:	0d c0       	rjmp	.+26     	; 0x497c <vfprintf+0x104>
    4962:	83 36       	cpi	r24, 0x63	; 99
    4964:	31 f0       	breq	.+12     	; 0x4972 <vfprintf+0xfa>
    4966:	83 37       	cpi	r24, 0x73	; 115
    4968:	71 f0       	breq	.+28     	; 0x4986 <vfprintf+0x10e>
    496a:	83 35       	cpi	r24, 0x53	; 83
    496c:	09 f0       	breq	.+2      	; 0x4970 <vfprintf+0xf8>
    496e:	57 c0       	rjmp	.+174    	; 0x4a1e <vfprintf+0x1a6>
    4970:	21 c0       	rjmp	.+66     	; 0x49b4 <vfprintf+0x13c>
    4972:	f8 01       	movw	r30, r16
    4974:	80 81       	ld	r24, Z
    4976:	89 83       	std	Y+1, r24	; 0x01
    4978:	0e 5f       	subi	r16, 0xFE	; 254
    497a:	1f 4f       	sbci	r17, 0xFF	; 255
    497c:	44 24       	eor	r4, r4
    497e:	43 94       	inc	r4
    4980:	51 2c       	mov	r5, r1
    4982:	54 01       	movw	r10, r8
    4984:	14 c0       	rjmp	.+40     	; 0x49ae <vfprintf+0x136>
    4986:	38 01       	movw	r6, r16
    4988:	f2 e0       	ldi	r31, 0x02	; 2
    498a:	6f 0e       	add	r6, r31
    498c:	71 1c       	adc	r7, r1
    498e:	f8 01       	movw	r30, r16
    4990:	a0 80       	ld	r10, Z
    4992:	b1 80       	ldd	r11, Z+1	; 0x01
    4994:	26 ff       	sbrs	r18, 6
    4996:	03 c0       	rjmp	.+6      	; 0x499e <vfprintf+0x126>
    4998:	65 2d       	mov	r22, r5
    499a:	70 e0       	ldi	r23, 0x00	; 0
    499c:	02 c0       	rjmp	.+4      	; 0x49a2 <vfprintf+0x12a>
    499e:	6f ef       	ldi	r22, 0xFF	; 255
    49a0:	7f ef       	ldi	r23, 0xFF	; 255
    49a2:	c5 01       	movw	r24, r10
    49a4:	2c 87       	std	Y+12, r18	; 0x0c
    49a6:	6d d1       	rcall	.+730    	; 0x4c82 <strnlen>
    49a8:	2c 01       	movw	r4, r24
    49aa:	83 01       	movw	r16, r6
    49ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    49ae:	2f 77       	andi	r18, 0x7F	; 127
    49b0:	22 2e       	mov	r2, r18
    49b2:	16 c0       	rjmp	.+44     	; 0x49e0 <vfprintf+0x168>
    49b4:	38 01       	movw	r6, r16
    49b6:	f2 e0       	ldi	r31, 0x02	; 2
    49b8:	6f 0e       	add	r6, r31
    49ba:	71 1c       	adc	r7, r1
    49bc:	f8 01       	movw	r30, r16
    49be:	a0 80       	ld	r10, Z
    49c0:	b1 80       	ldd	r11, Z+1	; 0x01
    49c2:	26 ff       	sbrs	r18, 6
    49c4:	03 c0       	rjmp	.+6      	; 0x49cc <vfprintf+0x154>
    49c6:	65 2d       	mov	r22, r5
    49c8:	70 e0       	ldi	r23, 0x00	; 0
    49ca:	02 c0       	rjmp	.+4      	; 0x49d0 <vfprintf+0x158>
    49cc:	6f ef       	ldi	r22, 0xFF	; 255
    49ce:	7f ef       	ldi	r23, 0xFF	; 255
    49d0:	c5 01       	movw	r24, r10
    49d2:	2c 87       	std	Y+12, r18	; 0x0c
    49d4:	4b d1       	rcall	.+662    	; 0x4c6c <strnlen_P>
    49d6:	2c 01       	movw	r4, r24
    49d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    49da:	20 68       	ori	r18, 0x80	; 128
    49dc:	22 2e       	mov	r2, r18
    49de:	83 01       	movw	r16, r6
    49e0:	23 fc       	sbrc	r2, 3
    49e2:	19 c0       	rjmp	.+50     	; 0x4a16 <vfprintf+0x19e>
    49e4:	83 2d       	mov	r24, r3
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	48 16       	cp	r4, r24
    49ea:	59 06       	cpc	r5, r25
    49ec:	a0 f4       	brcc	.+40     	; 0x4a16 <vfprintf+0x19e>
    49ee:	b7 01       	movw	r22, r14
    49f0:	80 e2       	ldi	r24, 0x20	; 32
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	51 d1       	rcall	.+674    	; 0x4c98 <fputc>
    49f6:	3a 94       	dec	r3
    49f8:	f5 cf       	rjmp	.-22     	; 0x49e4 <vfprintf+0x16c>
    49fa:	f5 01       	movw	r30, r10
    49fc:	27 fc       	sbrc	r2, 7
    49fe:	85 91       	lpm	r24, Z+
    4a00:	27 fe       	sbrs	r2, 7
    4a02:	81 91       	ld	r24, Z+
    4a04:	5f 01       	movw	r10, r30
    4a06:	b7 01       	movw	r22, r14
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	46 d1       	rcall	.+652    	; 0x4c98 <fputc>
    4a0c:	31 10       	cpse	r3, r1
    4a0e:	3a 94       	dec	r3
    4a10:	f1 e0       	ldi	r31, 0x01	; 1
    4a12:	4f 1a       	sub	r4, r31
    4a14:	51 08       	sbc	r5, r1
    4a16:	41 14       	cp	r4, r1
    4a18:	51 04       	cpc	r5, r1
    4a1a:	79 f7       	brne	.-34     	; 0x49fa <vfprintf+0x182>
    4a1c:	de c0       	rjmp	.+444    	; 0x4bda <vfprintf+0x362>
    4a1e:	84 36       	cpi	r24, 0x64	; 100
    4a20:	11 f0       	breq	.+4      	; 0x4a26 <vfprintf+0x1ae>
    4a22:	89 36       	cpi	r24, 0x69	; 105
    4a24:	31 f5       	brne	.+76     	; 0x4a72 <vfprintf+0x1fa>
    4a26:	f8 01       	movw	r30, r16
    4a28:	27 ff       	sbrs	r18, 7
    4a2a:	07 c0       	rjmp	.+14     	; 0x4a3a <vfprintf+0x1c2>
    4a2c:	60 81       	ld	r22, Z
    4a2e:	71 81       	ldd	r23, Z+1	; 0x01
    4a30:	82 81       	ldd	r24, Z+2	; 0x02
    4a32:	93 81       	ldd	r25, Z+3	; 0x03
    4a34:	0c 5f       	subi	r16, 0xFC	; 252
    4a36:	1f 4f       	sbci	r17, 0xFF	; 255
    4a38:	08 c0       	rjmp	.+16     	; 0x4a4a <vfprintf+0x1d2>
    4a3a:	60 81       	ld	r22, Z
    4a3c:	71 81       	ldd	r23, Z+1	; 0x01
    4a3e:	88 27       	eor	r24, r24
    4a40:	77 fd       	sbrc	r23, 7
    4a42:	80 95       	com	r24
    4a44:	98 2f       	mov	r25, r24
    4a46:	0e 5f       	subi	r16, 0xFE	; 254
    4a48:	1f 4f       	sbci	r17, 0xFF	; 255
    4a4a:	2f 76       	andi	r18, 0x6F	; 111
    4a4c:	b2 2e       	mov	r11, r18
    4a4e:	97 ff       	sbrs	r25, 7
    4a50:	09 c0       	rjmp	.+18     	; 0x4a64 <vfprintf+0x1ec>
    4a52:	90 95       	com	r25
    4a54:	80 95       	com	r24
    4a56:	70 95       	com	r23
    4a58:	61 95       	neg	r22
    4a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a60:	20 68       	ori	r18, 0x80	; 128
    4a62:	b2 2e       	mov	r11, r18
    4a64:	2a e0       	ldi	r18, 0x0A	; 10
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	a4 01       	movw	r20, r8
    4a6a:	48 d1       	rcall	.+656    	; 0x4cfc <__ultoa_invert>
    4a6c:	a8 2e       	mov	r10, r24
    4a6e:	a8 18       	sub	r10, r8
    4a70:	43 c0       	rjmp	.+134    	; 0x4af8 <vfprintf+0x280>
    4a72:	85 37       	cpi	r24, 0x75	; 117
    4a74:	29 f4       	brne	.+10     	; 0x4a80 <vfprintf+0x208>
    4a76:	2f 7e       	andi	r18, 0xEF	; 239
    4a78:	b2 2e       	mov	r11, r18
    4a7a:	2a e0       	ldi	r18, 0x0A	; 10
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	25 c0       	rjmp	.+74     	; 0x4aca <vfprintf+0x252>
    4a80:	f2 2f       	mov	r31, r18
    4a82:	f9 7f       	andi	r31, 0xF9	; 249
    4a84:	bf 2e       	mov	r11, r31
    4a86:	8f 36       	cpi	r24, 0x6F	; 111
    4a88:	c1 f0       	breq	.+48     	; 0x4aba <vfprintf+0x242>
    4a8a:	18 f4       	brcc	.+6      	; 0x4a92 <vfprintf+0x21a>
    4a8c:	88 35       	cpi	r24, 0x58	; 88
    4a8e:	79 f0       	breq	.+30     	; 0x4aae <vfprintf+0x236>
    4a90:	ad c0       	rjmp	.+346    	; 0x4bec <vfprintf+0x374>
    4a92:	80 37       	cpi	r24, 0x70	; 112
    4a94:	19 f0       	breq	.+6      	; 0x4a9c <vfprintf+0x224>
    4a96:	88 37       	cpi	r24, 0x78	; 120
    4a98:	21 f0       	breq	.+8      	; 0x4aa2 <vfprintf+0x22a>
    4a9a:	a8 c0       	rjmp	.+336    	; 0x4bec <vfprintf+0x374>
    4a9c:	2f 2f       	mov	r18, r31
    4a9e:	20 61       	ori	r18, 0x10	; 16
    4aa0:	b2 2e       	mov	r11, r18
    4aa2:	b4 fe       	sbrs	r11, 4
    4aa4:	0d c0       	rjmp	.+26     	; 0x4ac0 <vfprintf+0x248>
    4aa6:	8b 2d       	mov	r24, r11
    4aa8:	84 60       	ori	r24, 0x04	; 4
    4aaa:	b8 2e       	mov	r11, r24
    4aac:	09 c0       	rjmp	.+18     	; 0x4ac0 <vfprintf+0x248>
    4aae:	24 ff       	sbrs	r18, 4
    4ab0:	0a c0       	rjmp	.+20     	; 0x4ac6 <vfprintf+0x24e>
    4ab2:	9f 2f       	mov	r25, r31
    4ab4:	96 60       	ori	r25, 0x06	; 6
    4ab6:	b9 2e       	mov	r11, r25
    4ab8:	06 c0       	rjmp	.+12     	; 0x4ac6 <vfprintf+0x24e>
    4aba:	28 e0       	ldi	r18, 0x08	; 8
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	05 c0       	rjmp	.+10     	; 0x4aca <vfprintf+0x252>
    4ac0:	20 e1       	ldi	r18, 0x10	; 16
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	02 c0       	rjmp	.+4      	; 0x4aca <vfprintf+0x252>
    4ac6:	20 e1       	ldi	r18, 0x10	; 16
    4ac8:	32 e0       	ldi	r19, 0x02	; 2
    4aca:	f8 01       	movw	r30, r16
    4acc:	b7 fe       	sbrs	r11, 7
    4ace:	07 c0       	rjmp	.+14     	; 0x4ade <vfprintf+0x266>
    4ad0:	60 81       	ld	r22, Z
    4ad2:	71 81       	ldd	r23, Z+1	; 0x01
    4ad4:	82 81       	ldd	r24, Z+2	; 0x02
    4ad6:	93 81       	ldd	r25, Z+3	; 0x03
    4ad8:	0c 5f       	subi	r16, 0xFC	; 252
    4ada:	1f 4f       	sbci	r17, 0xFF	; 255
    4adc:	06 c0       	rjmp	.+12     	; 0x4aea <vfprintf+0x272>
    4ade:	60 81       	ld	r22, Z
    4ae0:	71 81       	ldd	r23, Z+1	; 0x01
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	0e 5f       	subi	r16, 0xFE	; 254
    4ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aea:	a4 01       	movw	r20, r8
    4aec:	07 d1       	rcall	.+526    	; 0x4cfc <__ultoa_invert>
    4aee:	a8 2e       	mov	r10, r24
    4af0:	a8 18       	sub	r10, r8
    4af2:	fb 2d       	mov	r31, r11
    4af4:	ff 77       	andi	r31, 0x7F	; 127
    4af6:	bf 2e       	mov	r11, r31
    4af8:	b6 fe       	sbrs	r11, 6
    4afa:	0b c0       	rjmp	.+22     	; 0x4b12 <vfprintf+0x29a>
    4afc:	2b 2d       	mov	r18, r11
    4afe:	2e 7f       	andi	r18, 0xFE	; 254
    4b00:	a5 14       	cp	r10, r5
    4b02:	50 f4       	brcc	.+20     	; 0x4b18 <vfprintf+0x2a0>
    4b04:	b4 fe       	sbrs	r11, 4
    4b06:	0a c0       	rjmp	.+20     	; 0x4b1c <vfprintf+0x2a4>
    4b08:	b2 fc       	sbrc	r11, 2
    4b0a:	08 c0       	rjmp	.+16     	; 0x4b1c <vfprintf+0x2a4>
    4b0c:	2b 2d       	mov	r18, r11
    4b0e:	2e 7e       	andi	r18, 0xEE	; 238
    4b10:	05 c0       	rjmp	.+10     	; 0x4b1c <vfprintf+0x2a4>
    4b12:	7a 2c       	mov	r7, r10
    4b14:	2b 2d       	mov	r18, r11
    4b16:	03 c0       	rjmp	.+6      	; 0x4b1e <vfprintf+0x2a6>
    4b18:	7a 2c       	mov	r7, r10
    4b1a:	01 c0       	rjmp	.+2      	; 0x4b1e <vfprintf+0x2a6>
    4b1c:	75 2c       	mov	r7, r5
    4b1e:	24 ff       	sbrs	r18, 4
    4b20:	0d c0       	rjmp	.+26     	; 0x4b3c <vfprintf+0x2c4>
    4b22:	fe 01       	movw	r30, r28
    4b24:	ea 0d       	add	r30, r10
    4b26:	f1 1d       	adc	r31, r1
    4b28:	80 81       	ld	r24, Z
    4b2a:	80 33       	cpi	r24, 0x30	; 48
    4b2c:	11 f4       	brne	.+4      	; 0x4b32 <vfprintf+0x2ba>
    4b2e:	29 7e       	andi	r18, 0xE9	; 233
    4b30:	09 c0       	rjmp	.+18     	; 0x4b44 <vfprintf+0x2cc>
    4b32:	22 ff       	sbrs	r18, 2
    4b34:	06 c0       	rjmp	.+12     	; 0x4b42 <vfprintf+0x2ca>
    4b36:	73 94       	inc	r7
    4b38:	73 94       	inc	r7
    4b3a:	04 c0       	rjmp	.+8      	; 0x4b44 <vfprintf+0x2cc>
    4b3c:	82 2f       	mov	r24, r18
    4b3e:	86 78       	andi	r24, 0x86	; 134
    4b40:	09 f0       	breq	.+2      	; 0x4b44 <vfprintf+0x2cc>
    4b42:	73 94       	inc	r7
    4b44:	23 fd       	sbrc	r18, 3
    4b46:	12 c0       	rjmp	.+36     	; 0x4b6c <vfprintf+0x2f4>
    4b48:	20 ff       	sbrs	r18, 0
    4b4a:	06 c0       	rjmp	.+12     	; 0x4b58 <vfprintf+0x2e0>
    4b4c:	5a 2c       	mov	r5, r10
    4b4e:	73 14       	cp	r7, r3
    4b50:	18 f4       	brcc	.+6      	; 0x4b58 <vfprintf+0x2e0>
    4b52:	53 0c       	add	r5, r3
    4b54:	57 18       	sub	r5, r7
    4b56:	73 2c       	mov	r7, r3
    4b58:	73 14       	cp	r7, r3
    4b5a:	60 f4       	brcc	.+24     	; 0x4b74 <vfprintf+0x2fc>
    4b5c:	b7 01       	movw	r22, r14
    4b5e:	80 e2       	ldi	r24, 0x20	; 32
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	2c 87       	std	Y+12, r18	; 0x0c
    4b64:	99 d0       	rcall	.+306    	; 0x4c98 <fputc>
    4b66:	73 94       	inc	r7
    4b68:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b6a:	f6 cf       	rjmp	.-20     	; 0x4b58 <vfprintf+0x2e0>
    4b6c:	73 14       	cp	r7, r3
    4b6e:	10 f4       	brcc	.+4      	; 0x4b74 <vfprintf+0x2fc>
    4b70:	37 18       	sub	r3, r7
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <vfprintf+0x2fe>
    4b74:	31 2c       	mov	r3, r1
    4b76:	24 ff       	sbrs	r18, 4
    4b78:	11 c0       	rjmp	.+34     	; 0x4b9c <vfprintf+0x324>
    4b7a:	b7 01       	movw	r22, r14
    4b7c:	80 e3       	ldi	r24, 0x30	; 48
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	2c 87       	std	Y+12, r18	; 0x0c
    4b82:	8a d0       	rcall	.+276    	; 0x4c98 <fputc>
    4b84:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b86:	22 ff       	sbrs	r18, 2
    4b88:	16 c0       	rjmp	.+44     	; 0x4bb6 <vfprintf+0x33e>
    4b8a:	21 ff       	sbrs	r18, 1
    4b8c:	03 c0       	rjmp	.+6      	; 0x4b94 <vfprintf+0x31c>
    4b8e:	88 e5       	ldi	r24, 0x58	; 88
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	02 c0       	rjmp	.+4      	; 0x4b98 <vfprintf+0x320>
    4b94:	88 e7       	ldi	r24, 0x78	; 120
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	b7 01       	movw	r22, r14
    4b9a:	0c c0       	rjmp	.+24     	; 0x4bb4 <vfprintf+0x33c>
    4b9c:	82 2f       	mov	r24, r18
    4b9e:	86 78       	andi	r24, 0x86	; 134
    4ba0:	51 f0       	breq	.+20     	; 0x4bb6 <vfprintf+0x33e>
    4ba2:	21 fd       	sbrc	r18, 1
    4ba4:	02 c0       	rjmp	.+4      	; 0x4baa <vfprintf+0x332>
    4ba6:	80 e2       	ldi	r24, 0x20	; 32
    4ba8:	01 c0       	rjmp	.+2      	; 0x4bac <vfprintf+0x334>
    4baa:	8b e2       	ldi	r24, 0x2B	; 43
    4bac:	27 fd       	sbrc	r18, 7
    4bae:	8d e2       	ldi	r24, 0x2D	; 45
    4bb0:	b7 01       	movw	r22, r14
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	71 d0       	rcall	.+226    	; 0x4c98 <fputc>
    4bb6:	a5 14       	cp	r10, r5
    4bb8:	30 f4       	brcc	.+12     	; 0x4bc6 <vfprintf+0x34e>
    4bba:	b7 01       	movw	r22, r14
    4bbc:	80 e3       	ldi	r24, 0x30	; 48
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	6b d0       	rcall	.+214    	; 0x4c98 <fputc>
    4bc2:	5a 94       	dec	r5
    4bc4:	f8 cf       	rjmp	.-16     	; 0x4bb6 <vfprintf+0x33e>
    4bc6:	aa 94       	dec	r10
    4bc8:	f4 01       	movw	r30, r8
    4bca:	ea 0d       	add	r30, r10
    4bcc:	f1 1d       	adc	r31, r1
    4bce:	80 81       	ld	r24, Z
    4bd0:	b7 01       	movw	r22, r14
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	61 d0       	rcall	.+194    	; 0x4c98 <fputc>
    4bd6:	a1 10       	cpse	r10, r1
    4bd8:	f6 cf       	rjmp	.-20     	; 0x4bc6 <vfprintf+0x34e>
    4bda:	33 20       	and	r3, r3
    4bdc:	09 f4       	brne	.+2      	; 0x4be0 <vfprintf+0x368>
    4bde:	5d ce       	rjmp	.-838    	; 0x489a <vfprintf+0x22>
    4be0:	b7 01       	movw	r22, r14
    4be2:	80 e2       	ldi	r24, 0x20	; 32
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	58 d0       	rcall	.+176    	; 0x4c98 <fputc>
    4be8:	3a 94       	dec	r3
    4bea:	f7 cf       	rjmp	.-18     	; 0x4bda <vfprintf+0x362>
    4bec:	f7 01       	movw	r30, r14
    4bee:	86 81       	ldd	r24, Z+6	; 0x06
    4bf0:	97 81       	ldd	r25, Z+7	; 0x07
    4bf2:	02 c0       	rjmp	.+4      	; 0x4bf8 <vfprintf+0x380>
    4bf4:	8f ef       	ldi	r24, 0xFF	; 255
    4bf6:	9f ef       	ldi	r25, 0xFF	; 255
    4bf8:	2c 96       	adiw	r28, 0x0c	; 12
    4bfa:	e2 e1       	ldi	r30, 0x12	; 18
    4bfc:	12 c1       	rjmp	.+548    	; 0x4e22 <__epilogue_restores__>

00004bfe <__eerd_block_x32a4u>:
    4bfe:	e0 ec       	ldi	r30, 0xC0	; 192
    4c00:	f1 e0       	ldi	r31, 0x01	; 1
    4c02:	a7 85       	ldd	r26, Z+15	; 0x0f
    4c04:	a7 fd       	sbrc	r26, 7
    4c06:	fd cf       	rjmp	.-6      	; 0x4c02 <__eerd_block_x32a4u+0x4>
    4c08:	a4 85       	ldd	r26, Z+12	; 0x0c
    4c0a:	a8 60       	ori	r26, 0x08	; 8
    4c0c:	a4 87       	std	Z+12, r26	; 0x0c
    4c0e:	60 50       	subi	r22, 0x00	; 0
    4c10:	70 4f       	sbci	r23, 0xF0	; 240
    4c12:	fc cd       	rjmp	.-1032   	; 0x480c <memcpy>

00004c14 <__eewr_block_x32a4u>:
    4c14:	dc 01       	movw	r26, r24
    4c16:	cb 01       	movw	r24, r22
    4c18:	02 c0       	rjmp	.+4      	; 0x4c1e <__eewr_block_x32a4u+0xa>
    4c1a:	2d 91       	ld	r18, X+
    4c1c:	05 d0       	rcall	.+10     	; 0x4c28 <__eewr_r18_x32a4u>
    4c1e:	41 50       	subi	r20, 0x01	; 1
    4c20:	50 40       	sbci	r21, 0x00	; 0
    4c22:	d8 f7       	brcc	.-10     	; 0x4c1a <__eewr_block_x32a4u+0x6>
    4c24:	08 95       	ret

00004c26 <__eewr_byte_x32a4u>:
    4c26:	26 2f       	mov	r18, r22

00004c28 <__eewr_r18_x32a4u>:
    4c28:	e0 ec       	ldi	r30, 0xC0	; 192
    4c2a:	f1 e0       	ldi	r31, 0x01	; 1
    4c2c:	37 85       	ldd	r19, Z+15	; 0x0f
    4c2e:	37 fd       	sbrc	r19, 7
    4c30:	fd cf       	rjmp	.-6      	; 0x4c2c <__eewr_r18_x32a4u+0x4>
    4c32:	34 85       	ldd	r19, Z+12	; 0x0c
    4c34:	37 7f       	andi	r19, 0xF7	; 247
    4c36:	34 87       	std	Z+12, r19	; 0x0c
    4c38:	37 85       	ldd	r19, Z+15	; 0x0f
    4c3a:	31 ff       	sbrs	r19, 1
    4c3c:	09 c0       	rjmp	.+18     	; 0x4c50 <__eewr_r18_x32a4u+0x28>
    4c3e:	36 e3       	ldi	r19, 0x36	; 54
    4c40:	32 87       	std	Z+10, r19	; 0x0a
    4c42:	38 ed       	ldi	r19, 0xD8	; 216
    4c44:	34 bf       	out	0x34, r19	; 52
    4c46:	31 e0       	ldi	r19, 0x01	; 1
    4c48:	33 87       	std	Z+11, r19	; 0x0b
    4c4a:	37 85       	ldd	r19, Z+15	; 0x0f
    4c4c:	37 fd       	sbrc	r19, 7
    4c4e:	fd cf       	rjmp	.-6      	; 0x4c4a <__eewr_r18_x32a4u+0x22>
    4c50:	33 e3       	ldi	r19, 0x33	; 51
    4c52:	32 87       	std	Z+10, r19	; 0x0a
    4c54:	80 83       	st	Z, r24
    4c56:	91 83       	std	Z+1, r25	; 0x01
    4c58:	12 82       	std	Z+2, r1	; 0x02
    4c5a:	24 83       	std	Z+4, r18	; 0x04
    4c5c:	25 e3       	ldi	r18, 0x35	; 53
    4c5e:	22 87       	std	Z+10, r18	; 0x0a
    4c60:	28 ed       	ldi	r18, 0xD8	; 216
    4c62:	31 e0       	ldi	r19, 0x01	; 1
    4c64:	24 bf       	out	0x34, r18	; 52
    4c66:	33 87       	std	Z+11, r19	; 0x0b
    4c68:	01 96       	adiw	r24, 0x01	; 1
    4c6a:	08 95       	ret

00004c6c <strnlen_P>:
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	05 90       	lpm	r0, Z+
    4c70:	61 50       	subi	r22, 0x01	; 1
    4c72:	70 40       	sbci	r23, 0x00	; 0
    4c74:	01 10       	cpse	r0, r1
    4c76:	d8 f7       	brcc	.-10     	; 0x4c6e <strnlen_P+0x2>
    4c78:	80 95       	com	r24
    4c7a:	90 95       	com	r25
    4c7c:	8e 0f       	add	r24, r30
    4c7e:	9f 1f       	adc	r25, r31
    4c80:	08 95       	ret

00004c82 <strnlen>:
    4c82:	fc 01       	movw	r30, r24
    4c84:	61 50       	subi	r22, 0x01	; 1
    4c86:	70 40       	sbci	r23, 0x00	; 0
    4c88:	01 90       	ld	r0, Z+
    4c8a:	01 10       	cpse	r0, r1
    4c8c:	d8 f7       	brcc	.-10     	; 0x4c84 <strnlen+0x2>
    4c8e:	80 95       	com	r24
    4c90:	90 95       	com	r25
    4c92:	8e 0f       	add	r24, r30
    4c94:	9f 1f       	adc	r25, r31
    4c96:	08 95       	ret

00004c98 <fputc>:
    4c98:	0f 93       	push	r16
    4c9a:	1f 93       	push	r17
    4c9c:	cf 93       	push	r28
    4c9e:	df 93       	push	r29
    4ca0:	18 2f       	mov	r17, r24
    4ca2:	09 2f       	mov	r16, r25
    4ca4:	eb 01       	movw	r28, r22
    4ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca8:	81 fd       	sbrc	r24, 1
    4caa:	03 c0       	rjmp	.+6      	; 0x4cb2 <fputc+0x1a>
    4cac:	8f ef       	ldi	r24, 0xFF	; 255
    4cae:	9f ef       	ldi	r25, 0xFF	; 255
    4cb0:	20 c0       	rjmp	.+64     	; 0x4cf2 <fputc+0x5a>
    4cb2:	82 ff       	sbrs	r24, 2
    4cb4:	10 c0       	rjmp	.+32     	; 0x4cd6 <fputc+0x3e>
    4cb6:	4e 81       	ldd	r20, Y+6	; 0x06
    4cb8:	5f 81       	ldd	r21, Y+7	; 0x07
    4cba:	2c 81       	ldd	r18, Y+4	; 0x04
    4cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    4cbe:	42 17       	cp	r20, r18
    4cc0:	53 07       	cpc	r21, r19
    4cc2:	7c f4       	brge	.+30     	; 0x4ce2 <fputc+0x4a>
    4cc4:	e8 81       	ld	r30, Y
    4cc6:	f9 81       	ldd	r31, Y+1	; 0x01
    4cc8:	9f 01       	movw	r18, r30
    4cca:	2f 5f       	subi	r18, 0xFF	; 255
    4ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    4cce:	28 83       	st	Y, r18
    4cd0:	39 83       	std	Y+1, r19	; 0x01
    4cd2:	10 83       	st	Z, r17
    4cd4:	06 c0       	rjmp	.+12     	; 0x4ce2 <fputc+0x4a>
    4cd6:	e8 85       	ldd	r30, Y+8	; 0x08
    4cd8:	f9 85       	ldd	r31, Y+9	; 0x09
    4cda:	81 2f       	mov	r24, r17
    4cdc:	09 95       	icall
    4cde:	89 2b       	or	r24, r25
    4ce0:	29 f7       	brne	.-54     	; 0x4cac <fputc+0x14>
    4ce2:	2e 81       	ldd	r18, Y+6	; 0x06
    4ce4:	3f 81       	ldd	r19, Y+7	; 0x07
    4ce6:	2f 5f       	subi	r18, 0xFF	; 255
    4ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cea:	2e 83       	std	Y+6, r18	; 0x06
    4cec:	3f 83       	std	Y+7, r19	; 0x07
    4cee:	81 2f       	mov	r24, r17
    4cf0:	90 2f       	mov	r25, r16
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	1f 91       	pop	r17
    4cf8:	0f 91       	pop	r16
    4cfa:	08 95       	ret

00004cfc <__ultoa_invert>:
    4cfc:	fa 01       	movw	r30, r20
    4cfe:	aa 27       	eor	r26, r26
    4d00:	28 30       	cpi	r18, 0x08	; 8
    4d02:	51 f1       	breq	.+84     	; 0x4d58 <__ultoa_invert+0x5c>
    4d04:	20 31       	cpi	r18, 0x10	; 16
    4d06:	81 f1       	breq	.+96     	; 0x4d68 <__ultoa_invert+0x6c>
    4d08:	e8 94       	clt
    4d0a:	6f 93       	push	r22
    4d0c:	6e 7f       	andi	r22, 0xFE	; 254
    4d0e:	6e 5f       	subi	r22, 0xFE	; 254
    4d10:	7f 4f       	sbci	r23, 0xFF	; 255
    4d12:	8f 4f       	sbci	r24, 0xFF	; 255
    4d14:	9f 4f       	sbci	r25, 0xFF	; 255
    4d16:	af 4f       	sbci	r26, 0xFF	; 255
    4d18:	b1 e0       	ldi	r27, 0x01	; 1
    4d1a:	3e d0       	rcall	.+124    	; 0x4d98 <__ultoa_invert+0x9c>
    4d1c:	b4 e0       	ldi	r27, 0x04	; 4
    4d1e:	3c d0       	rcall	.+120    	; 0x4d98 <__ultoa_invert+0x9c>
    4d20:	67 0f       	add	r22, r23
    4d22:	78 1f       	adc	r23, r24
    4d24:	89 1f       	adc	r24, r25
    4d26:	9a 1f       	adc	r25, r26
    4d28:	a1 1d       	adc	r26, r1
    4d2a:	68 0f       	add	r22, r24
    4d2c:	79 1f       	adc	r23, r25
    4d2e:	8a 1f       	adc	r24, r26
    4d30:	91 1d       	adc	r25, r1
    4d32:	a1 1d       	adc	r26, r1
    4d34:	6a 0f       	add	r22, r26
    4d36:	71 1d       	adc	r23, r1
    4d38:	81 1d       	adc	r24, r1
    4d3a:	91 1d       	adc	r25, r1
    4d3c:	a1 1d       	adc	r26, r1
    4d3e:	20 d0       	rcall	.+64     	; 0x4d80 <__ultoa_invert+0x84>
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <__ultoa_invert+0x48>
    4d42:	68 94       	set
    4d44:	3f 91       	pop	r19
    4d46:	2a e0       	ldi	r18, 0x0A	; 10
    4d48:	26 9f       	mul	r18, r22
    4d4a:	11 24       	eor	r1, r1
    4d4c:	30 19       	sub	r19, r0
    4d4e:	30 5d       	subi	r19, 0xD0	; 208
    4d50:	31 93       	st	Z+, r19
    4d52:	de f6       	brtc	.-74     	; 0x4d0a <__ultoa_invert+0xe>
    4d54:	cf 01       	movw	r24, r30
    4d56:	08 95       	ret
    4d58:	46 2f       	mov	r20, r22
    4d5a:	47 70       	andi	r20, 0x07	; 7
    4d5c:	40 5d       	subi	r20, 0xD0	; 208
    4d5e:	41 93       	st	Z+, r20
    4d60:	b3 e0       	ldi	r27, 0x03	; 3
    4d62:	0f d0       	rcall	.+30     	; 0x4d82 <__ultoa_invert+0x86>
    4d64:	c9 f7       	brne	.-14     	; 0x4d58 <__ultoa_invert+0x5c>
    4d66:	f6 cf       	rjmp	.-20     	; 0x4d54 <__ultoa_invert+0x58>
    4d68:	46 2f       	mov	r20, r22
    4d6a:	4f 70       	andi	r20, 0x0F	; 15
    4d6c:	40 5d       	subi	r20, 0xD0	; 208
    4d6e:	4a 33       	cpi	r20, 0x3A	; 58
    4d70:	18 f0       	brcs	.+6      	; 0x4d78 <__ultoa_invert+0x7c>
    4d72:	49 5d       	subi	r20, 0xD9	; 217
    4d74:	31 fd       	sbrc	r19, 1
    4d76:	40 52       	subi	r20, 0x20	; 32
    4d78:	41 93       	st	Z+, r20
    4d7a:	02 d0       	rcall	.+4      	; 0x4d80 <__ultoa_invert+0x84>
    4d7c:	a9 f7       	brne	.-22     	; 0x4d68 <__ultoa_invert+0x6c>
    4d7e:	ea cf       	rjmp	.-44     	; 0x4d54 <__ultoa_invert+0x58>
    4d80:	b4 e0       	ldi	r27, 0x04	; 4
    4d82:	a6 95       	lsr	r26
    4d84:	97 95       	ror	r25
    4d86:	87 95       	ror	r24
    4d88:	77 95       	ror	r23
    4d8a:	67 95       	ror	r22
    4d8c:	ba 95       	dec	r27
    4d8e:	c9 f7       	brne	.-14     	; 0x4d82 <__ultoa_invert+0x86>
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	61 05       	cpc	r22, r1
    4d94:	71 05       	cpc	r23, r1
    4d96:	08 95       	ret
    4d98:	9b 01       	movw	r18, r22
    4d9a:	ac 01       	movw	r20, r24
    4d9c:	0a 2e       	mov	r0, r26
    4d9e:	06 94       	lsr	r0
    4da0:	57 95       	ror	r21
    4da2:	47 95       	ror	r20
    4da4:	37 95       	ror	r19
    4da6:	27 95       	ror	r18
    4da8:	ba 95       	dec	r27
    4daa:	c9 f7       	brne	.-14     	; 0x4d9e <__ultoa_invert+0xa2>
    4dac:	62 0f       	add	r22, r18
    4dae:	73 1f       	adc	r23, r19
    4db0:	84 1f       	adc	r24, r20
    4db2:	95 1f       	adc	r25, r21
    4db4:	a0 1d       	adc	r26, r0
    4db6:	08 95       	ret

00004db8 <__divmodsi4>:
    4db8:	05 2e       	mov	r0, r21
    4dba:	97 fb       	bst	r25, 7
    4dbc:	16 f4       	brtc	.+4      	; 0x4dc2 <__divmodsi4+0xa>
    4dbe:	00 94       	com	r0
    4dc0:	0f d0       	rcall	.+30     	; 0x4de0 <__negsi2>
    4dc2:	57 fd       	sbrc	r21, 7
    4dc4:	05 d0       	rcall	.+10     	; 0x4dd0 <__divmodsi4_neg2>
    4dc6:	45 d0       	rcall	.+138    	; 0x4e52 <__udivmodsi4>
    4dc8:	07 fc       	sbrc	r0, 7
    4dca:	02 d0       	rcall	.+4      	; 0x4dd0 <__divmodsi4_neg2>
    4dcc:	46 f4       	brtc	.+16     	; 0x4dde <__divmodsi4_exit>
    4dce:	08 c0       	rjmp	.+16     	; 0x4de0 <__negsi2>

00004dd0 <__divmodsi4_neg2>:
    4dd0:	50 95       	com	r21
    4dd2:	40 95       	com	r20
    4dd4:	30 95       	com	r19
    4dd6:	21 95       	neg	r18
    4dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dda:	4f 4f       	sbci	r20, 0xFF	; 255
    4ddc:	5f 4f       	sbci	r21, 0xFF	; 255

00004dde <__divmodsi4_exit>:
    4dde:	08 95       	ret

00004de0 <__negsi2>:
    4de0:	90 95       	com	r25
    4de2:	80 95       	com	r24
    4de4:	70 95       	com	r23
    4de6:	61 95       	neg	r22
    4de8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dea:	8f 4f       	sbci	r24, 0xFF	; 255
    4dec:	9f 4f       	sbci	r25, 0xFF	; 255
    4dee:	08 95       	ret

00004df0 <__prologue_saves__>:
    4df0:	2f 92       	push	r2
    4df2:	3f 92       	push	r3
    4df4:	4f 92       	push	r4
    4df6:	5f 92       	push	r5
    4df8:	6f 92       	push	r6
    4dfa:	7f 92       	push	r7
    4dfc:	8f 92       	push	r8
    4dfe:	9f 92       	push	r9
    4e00:	af 92       	push	r10
    4e02:	bf 92       	push	r11
    4e04:	cf 92       	push	r12
    4e06:	df 92       	push	r13
    4e08:	ef 92       	push	r14
    4e0a:	ff 92       	push	r15
    4e0c:	0f 93       	push	r16
    4e0e:	1f 93       	push	r17
    4e10:	cf 93       	push	r28
    4e12:	df 93       	push	r29
    4e14:	cd b7       	in	r28, 0x3d	; 61
    4e16:	de b7       	in	r29, 0x3e	; 62
    4e18:	ca 1b       	sub	r28, r26
    4e1a:	db 0b       	sbc	r29, r27
    4e1c:	cd bf       	out	0x3d, r28	; 61
    4e1e:	de bf       	out	0x3e, r29	; 62
    4e20:	09 94       	ijmp

00004e22 <__epilogue_restores__>:
    4e22:	2a 88       	ldd	r2, Y+18	; 0x12
    4e24:	39 88       	ldd	r3, Y+17	; 0x11
    4e26:	48 88       	ldd	r4, Y+16	; 0x10
    4e28:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e30:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e32:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e34:	b9 84       	ldd	r11, Y+9	; 0x09
    4e36:	c8 84       	ldd	r12, Y+8	; 0x08
    4e38:	df 80       	ldd	r13, Y+7	; 0x07
    4e3a:	ee 80       	ldd	r14, Y+6	; 0x06
    4e3c:	fd 80       	ldd	r15, Y+5	; 0x05
    4e3e:	0c 81       	ldd	r16, Y+4	; 0x04
    4e40:	1b 81       	ldd	r17, Y+3	; 0x03
    4e42:	aa 81       	ldd	r26, Y+2	; 0x02
    4e44:	b9 81       	ldd	r27, Y+1	; 0x01
    4e46:	ce 0f       	add	r28, r30
    4e48:	d1 1d       	adc	r29, r1
    4e4a:	cd bf       	out	0x3d, r28	; 61
    4e4c:	de bf       	out	0x3e, r29	; 62
    4e4e:	ed 01       	movw	r28, r26
    4e50:	08 95       	ret

00004e52 <__udivmodsi4>:
    4e52:	a1 e2       	ldi	r26, 0x21	; 33
    4e54:	1a 2e       	mov	r1, r26
    4e56:	aa 1b       	sub	r26, r26
    4e58:	bb 1b       	sub	r27, r27
    4e5a:	fd 01       	movw	r30, r26
    4e5c:	0d c0       	rjmp	.+26     	; 0x4e78 <__udivmodsi4_ep>

00004e5e <__udivmodsi4_loop>:
    4e5e:	aa 1f       	adc	r26, r26
    4e60:	bb 1f       	adc	r27, r27
    4e62:	ee 1f       	adc	r30, r30
    4e64:	ff 1f       	adc	r31, r31
    4e66:	a2 17       	cp	r26, r18
    4e68:	b3 07       	cpc	r27, r19
    4e6a:	e4 07       	cpc	r30, r20
    4e6c:	f5 07       	cpc	r31, r21
    4e6e:	20 f0       	brcs	.+8      	; 0x4e78 <__udivmodsi4_ep>
    4e70:	a2 1b       	sub	r26, r18
    4e72:	b3 0b       	sbc	r27, r19
    4e74:	e4 0b       	sbc	r30, r20
    4e76:	f5 0b       	sbc	r31, r21

00004e78 <__udivmodsi4_ep>:
    4e78:	66 1f       	adc	r22, r22
    4e7a:	77 1f       	adc	r23, r23
    4e7c:	88 1f       	adc	r24, r24
    4e7e:	99 1f       	adc	r25, r25
    4e80:	1a 94       	dec	r1
    4e82:	69 f7       	brne	.-38     	; 0x4e5e <__udivmodsi4_loop>
    4e84:	60 95       	com	r22
    4e86:	70 95       	com	r23
    4e88:	80 95       	com	r24
    4e8a:	90 95       	com	r25
    4e8c:	9b 01       	movw	r18, r22
    4e8e:	ac 01       	movw	r20, r24
    4e90:	bd 01       	movw	r22, r26
    4e92:	cf 01       	movw	r24, r30
    4e94:	08 95       	ret

00004e96 <_exit>:
    4e96:	f8 94       	cli

00004e98 <__stop_program>:
    4e98:	ff cf       	rjmp	.-2      	; 0x4e98 <__stop_program>
